
v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c69c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9ec  0800c9ec  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9ec  0800c9ec  0001c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9f4  0800c9f4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9f4  0800c9f4  0001c9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9f8  0800c9f8  0001c9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800c9fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006140  20000188  0800cb80  00020188  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200062c8  0800cb80  000262c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cc0b  00000000  00000000  000201f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004815  00000000  00000000  0003ce02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  00041618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012de  00000000  00000000  00042ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4f5  00000000  00000000  000441ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d5eb  00000000  00000000  0005f6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099fd8  00000000  00000000  0007cc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006de0  00000000  00000000  00116c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000188 	.word	0x20000188
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c824 	.word	0x0800c824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000018c 	.word	0x2000018c
 80001dc:	0800c824 	.word	0x0800c824

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b970 	b.w	8000e74 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	460d      	mov	r5, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460f      	mov	r7, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14a      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4694      	mov	ip, r2
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0xe2>
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	b143      	cbz	r3, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bcc:	f1c3 0220 	rsb	r2, r3, #32
 8000bd0:	409f      	lsls	r7, r3
 8000bd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bde:	fa1f f58c 	uxth.w	r5, ip
 8000be2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be6:	0c22      	lsrs	r2, r4, #16
 8000be8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf0:	fb01 f005 	mul.w	r0, r1, r5
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x62>
 8000bf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c00:	f080 811c 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c04:	4290      	cmp	r0, r2
 8000c06:	f240 8119 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	b2a4      	uxth	r4, r4
 8000c12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x90>
 8000c26:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2e:	f080 8107 	bcs.w	8000e40 <__udivmoddi4+0x294>
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	f240 8104 	bls.w	8000e40 <__udivmoddi4+0x294>
 8000c38:	4464      	add	r4, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c40:	1b64      	subs	r4, r4, r5
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11e      	cbz	r6, 8000c4e <__udivmoddi4+0xa2>
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0xbc>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80ed 	beq.w	8000e36 <__udivmoddi4+0x28a>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c62:	4608      	mov	r0, r1
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	fab3 f183 	clz	r1, r3
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	d149      	bne.n	8000d04 <__udivmoddi4+0x158>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d302      	bcc.n	8000c7a <__udivmoddi4+0xce>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	f200 80f8 	bhi.w	8000e6a <__udivmoddi4+0x2be>
 8000c7a:	1a84      	subs	r4, r0, r2
 8000c7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	4617      	mov	r7, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d0e2      	beq.n	8000c4e <__udivmoddi4+0xa2>
 8000c88:	e9c6 4700 	strd	r4, r7, [r6]
 8000c8c:	e7df      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xe6>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cac:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb0:	0c22      	lsrs	r2, r4, #16
 8000cb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb6:	fb0e f005 	mul.w	r0, lr, r5
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2b8>
 8000cce:	4645      	mov	r5, r8
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x14e>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x14c>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2c2>
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d02:	e79f      	b.n	8000c44 <__udivmoddi4+0x98>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa05 f401 	lsl.w	r4, r5, r1
 8000d16:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1a:	40fd      	lsrs	r5, r7
 8000d1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d34:	fb08 f50e 	mul.w	r5, r8, lr
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2b4>
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2b4>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	b29d      	uxth	r5, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2ac>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2ac>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x29c>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x298>
 8000d9c:	b156      	cbz	r6, 8000db4 <__udivmoddi4+0x208>
 8000d9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000da2:	eb64 040e 	sbc.w	r4, r4, lr
 8000da6:	fa04 f707 	lsl.w	r7, r4, r7
 8000daa:	40ca      	lsrs	r2, r1
 8000dac:	40cc      	lsrs	r4, r1
 8000dae:	4317      	orrs	r7, r2
 8000db0:	e9c6 7400 	strd	r7, r4, [r6]
 8000db4:	4618      	mov	r0, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	f1c3 0120 	rsb	r1, r3, #32
 8000dc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dcc:	409d      	lsls	r5, r3
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1510 	mls	r5, r7, r0, r1
 8000de0:	0c11      	lsrs	r1, r2, #16
 8000de2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dea:	428d      	cmp	r5, r1
 8000dec:	fa04 f403 	lsl.w	r4, r4, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x258>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000dfc:	428d      	cmp	r5, r1
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1b49      	subs	r1, r1, r5
 8000e06:	b292      	uxth	r2, r2
 8000e08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	fb05 f10e 	mul.w	r1, r5, lr
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x282>
 8000e1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000e26:	4291      	cmp	r1, r2
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000e2a:	3d02      	subs	r5, #2
 8000e2c:	4462      	add	r2, ip
 8000e2e:	1a52      	subs	r2, r2, r1
 8000e30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0xfc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e6e6      	b.n	8000c0e <__udivmoddi4+0x62>
 8000e40:	4610      	mov	r0, r2
 8000e42:	e6fb      	b.n	8000c3c <__udivmoddi4+0x90>
 8000e44:	4548      	cmp	r0, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3b01      	subs	r3, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e54:	4645      	mov	r5, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x282>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x258>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e70a      	b.n	8000c84 <__udivmoddi4+0xd8>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x14e>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <_getFirstByte>:

/**
 * Gets the first byte of a 2 byte word
 */
uint8_t _getFirstByte(uint16_t twoByteWord)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)(twoByteWord >> 8U);
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_getSecondByte>:

/**
 * Gets the second byte of the 2 byte word
 */
uint8_t _getSecondByte(uint16_t twoByteWord)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)twoByteWord;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2db      	uxtb	r3, r3
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_crc8>:

/**
 * Function for calculation the CRC.
 */
uint8_t _crc8(uint8_t *data, uint8_t length)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
    uint32_t crc;
    int16_t i, bit;

    crc = CRC_SEED;
 8000ebc:	23ff      	movs	r3, #255	; 0xff
 8000ebe:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < length; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	817b      	strh	r3, [r7, #10]
 8000ec4:	e02b      	b.n	8000f1e <_crc8+0x6e>
    {
        crc ^= data[i];
 8000ec6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4053      	eors	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]

        for (bit = 0; bit < 8; bit++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	813b      	strh	r3, [r7, #8]
 8000edc:	e015      	b.n	8000f0a <_crc8+0x5a>
        {
            if ((crc & 0x80) != 0)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d007      	beq.n	8000ef8 <_crc8+0x48>
            {
                crc <<= 1;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
                crc ^= CRC_POLYNOMIAL;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f083 031d 	eor.w	r3, r3, #29
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	e002      	b.n	8000efe <_crc8+0x4e>
            }
            else
            {
                crc <<= 1;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
        for (bit = 0; bit < 8; bit++)
 8000efe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3301      	adds	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	813b      	strh	r3, [r7, #8]
 8000f0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	dde5      	ble.n	8000ede <_crc8+0x2e>
    for (i = 0; i < length; i++)
 8000f12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	817b      	strh	r3, [r7, #10]
 8000f1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbce      	blt.n	8000ec6 <_crc8+0x16>
            }
        }
    }

    //    return (~crc) & CRC_SEED;
    return (~crc);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_crcCalc>:

/**
 * Function for calculation of the CRC
 */
uint8_t _crcCalc(uint8_t *crcData, uint8_t length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
    return _crc8(crcData, length);
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffaf 	bl	8000eb0 <_crc8>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <triggerUpdate>:

/**
 * Triggers an update
 */
void triggerUpdate(uint8_t csSelector)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    // SCK LOW
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2120      	movs	r1, #32
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <triggerUpdate+0x3c>)
 8000f6c:	f001 ffce 	bl	8002f0c <HAL_GPIO_WritePin>
    // MOSI HIGH
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	4808      	ldr	r0, [pc, #32]	; (8000f98 <triggerUpdate+0x3c>)
 8000f76:	f001 ffc9 	bl	8002f0c <HAL_GPIO_WritePin>
    SPI_CS_Enable(csSelector);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f9e5 	bl	800134c <SPI_CS_Enable>
    HAL_Delay(DELAYuS);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f001 fd38 	bl	80029f8 <HAL_Delay>
    SPI_CS_Disable(csSelector);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fa30 	bl	80013f0 <SPI_CS_Disable>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40020000 	.word	0x40020000

08000f9c <resetSafety>:

//when an error occurs in the safety word, the error bit remains 0(error), until the status register is read again.
//flushes out safety errors, that might have occured by reading the register without a safety word.
void resetSafety(uint8_t csSelector)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
    uint16_t u16RegValue = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	81fb      	strh	r3, [r7, #14]

    triggerUpdate(csSelector);
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffd5 	bl	8000f5c <triggerUpdate>

    SPI_CS_Enable(csSelector);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f9c9 	bl	800134c <SPI_CS_Enable>

    u16RegValue = READ_STA_CMD;
 8000fba:	f248 0301 	movw	r3, #32769	; 0x8001
 8000fbe:	81fb      	strh	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi1, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fc0:	f107 010e 	add.w	r1, r7, #14
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <resetSafety+0x64>)
 8000fca:	f003 ff8e 	bl	8004eea <HAL_SPI_Transmit>
    u16RegValue = DUMMY;
 8000fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd2:	81fb      	strh	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi1, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fd4:	f107 010e 	add.w	r1, r7, #14
 8000fd8:	23ff      	movs	r3, #255	; 0xff
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <resetSafety+0x64>)
 8000fde:	f003 ff84 	bl	8004eea <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fe2:	f107 010e 	add.w	r1, r7, #14
 8000fe6:	23ff      	movs	r3, #255	; 0xff
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <resetSafety+0x64>)
 8000fec:	f003 ff7d 	bl	8004eea <HAL_SPI_Transmit>

    SPI_CS_Disable(csSelector);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9fc 	bl	80013f0 <SPI_CS_Disable>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000454 	.word	0x20000454

08001004 <checkSafety>:
 * A CRC needs to be calculated using all the data sent and received (i.e. the command and the value return from the register, which is 4 bytes),
 * and needs to be checked with the CRC sent in the safety word.
 */

errorTypes checkSafety(uint16_t safety, uint16_t command, uint16_t *readreg, uint16_t length, uint8_t csSelector)
{
 8001004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001008:	b08b      	sub	sp, #44	; 0x2c
 800100a:	af00      	add	r7, sp, #0
 800100c:	60ba      	str	r2, [r7, #8]
 800100e:	461a      	mov	r2, r3
 8001010:	4603      	mov	r3, r0
 8001012:	81fb      	strh	r3, [r7, #14]
 8001014:	460b      	mov	r3, r1
 8001016:	81bb      	strh	r3, [r7, #12]
 8001018:	4613      	mov	r3, r2
 800101a:	80fb      	strh	r3, [r7, #6]
    /*if (0)//!((safety)&SYSTEM_ERROR_MASK))
    {
        errorCheck = SYSTEM_ERROR;
    }

    else*/ if (!((safety)&INTERFACE_ERROR_MASK))
 800101c:	89fb      	ldrh	r3, [r7, #14]
 800101e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <checkSafety+0x2a>
    {
        errorCheck = INTERFACE_ACCESS_ERROR;
 8001026:	2302      	movs	r3, #2
 8001028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800102c:	e08e      	b.n	800114c <checkSafety+0x148>
    }

    else if (!((safety)&INV_ANGLE_ERROR_MASK))
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d103      	bne.n	8001040 <checkSafety+0x3c>
    {
        errorCheck = INVALID_ANGLE_ERROR;
 8001038:	2303      	movs	r3, #3
 800103a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800103e:	e085      	b.n	800114c <checkSafety+0x148>
    }

    else
    {
 8001040:	466b      	mov	r3, sp
 8001042:	461e      	mov	r6, r3
        uint16_t lengthOfTemp = length * 2 + 2;
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	3301      	adds	r3, #1
 8001048:	b29b      	uxth	r3, r3
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	847b      	strh	r3, [r7, #34]	; 0x22
        uint8_t temp[lengthOfTemp];
 800104e:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	b28b      	uxth	r3, r1
 8001058:	2200      	movs	r2, #0
 800105a:	4698      	mov	r8, r3
 800105c:	4691      	mov	r9, r2
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800106a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001072:	b28b      	uxth	r3, r1
 8001074:	2200      	movs	r2, #0
 8001076:	461c      	mov	r4, r3
 8001078:	4615      	mov	r5, r2
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	00eb      	lsls	r3, r5, #3
 8001084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001088:	00e2      	lsls	r2, r4, #3
 800108a:	460b      	mov	r3, r1
 800108c:	3307      	adds	r3, #7
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	ebad 0d03 	sub.w	sp, sp, r3
 8001096:	466b      	mov	r3, sp
 8001098:	3300      	adds	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]

        temp[0] = _getFirstByte(command);
 800109c:	89bb      	ldrh	r3, [r7, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff feea 	bl	8000e78 <_getFirstByte>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	701a      	strb	r2, [r3, #0]
        temp[1] = _getSecondByte(command);
 80010ac:	89bb      	ldrh	r3, [r7, #12]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fef1 	bl	8000e96 <_getSecondByte>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	705a      	strb	r2, [r3, #1]

        for (uint16_t i = 0; i < length; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010c0:	e021      	b.n	8001106 <checkSafety+0x102>
        {
            temp[2 + 2 * i] = _getFirstByte(readreg[i]);
 80010c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ce:	3301      	adds	r3, #1
 80010d0:	005c      	lsls	r4, r3, #1
 80010d2:	4610      	mov	r0, r2
 80010d4:	f7ff fed0 	bl	8000e78 <_getFirstByte>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	551a      	strb	r2, [r3, r4]
            temp[2 + 2 * i + 1] = _getSecondByte(readreg[i]);
 80010e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	4413      	add	r3, r2
 80010e8:	881a      	ldrh	r2, [r3, #0]
 80010ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ec:	3301      	adds	r3, #1
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	1c5c      	adds	r4, r3, #1
 80010f2:	4610      	mov	r0, r2
 80010f4:	f7ff fecf 	bl	8000e96 <_getSecondByte>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	551a      	strb	r2, [r3, r4]
        for (uint16_t i = 0; i < length; i++)
 8001100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001102:	3301      	adds	r3, #1
 8001104:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001106:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	429a      	cmp	r2, r3
 800110c:	d3d9      	bcc.n	80010c2 <checkSafety+0xbe>
        }

        uint8_t crcReceivedFinal = _getSecondByte(safety);
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fec0 	bl	8000e96 <_getSecondByte>
 8001116:	4603      	mov	r3, r0
 8001118:	75fb      	strb	r3, [r7, #23]

        uint8_t crc = _crcCalc(temp, lengthOfTemp);
 800111a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4619      	mov	r1, r3
 8001120:	69b8      	ldr	r0, [r7, #24]
 8001122:	f7ff ff0b 	bl	8000f3c <_crcCalc>
 8001126:	4603      	mov	r3, r0
 8001128:	75bb      	strb	r3, [r7, #22]

        if (crc == crcReceivedFinal)
 800112a:	7dba      	ldrb	r2, [r7, #22]
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	429a      	cmp	r2, r3
 8001130:	d103      	bne.n	800113a <checkSafety+0x136>
        {
            errorCheck = NO_ERROR;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001138:	e007      	b.n	800114a <checkSafety+0x146>
        }
        else
        {
            errorCheck = CRC_ERROR;
 800113a:	23ff      	movs	r3, #255	; 0xff
 800113c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            resetSafety(csSelector);
 8001140:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff29 	bl	8000f9c <resetSafety>
 800114a:	46b5      	mov	sp, r6
        }
    }

    return errorCheck;
 800114c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001150:	4618      	mov	r0, r3
 8001152:	372c      	adds	r7, #44	; 0x2c
 8001154:	46bd      	mov	sp, r7
 8001156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800115c <readFromSensor>:
 * 9:4 - access to 6 bit register address
 * 3:0 - 4 bit number of data words.
 */

errorTypes readFromSensor(uint16_t command, uint16_t *data, uint8_t csSelector)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af02      	add	r7, sp, #8
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	80fb      	strh	r3, [r7, #6]
 8001168:	4613      	mov	r3, r2
 800116a:	717b      	strb	r3, [r7, #5]
    uint16_t safety = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	82bb      	strh	r3, [r7, #20]
    uint16_t readreg;
    uint16_t u16RegValue = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	823b      	strh	r3, [r7, #16]

    SPI_CS_Enable(csSelector);
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f8e8 	bl	800134c <SPI_CS_Enable>

    u16RegValue = command;
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	823b      	strh	r3, [r7, #16]
    HAL_SPI_Transmit(&hspi1, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8001180:	f107 0110 	add.w	r1, r7, #16
 8001184:	23ff      	movs	r3, #255	; 0xff
 8001186:	2201      	movs	r2, #1
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <readFromSensor+0xa4>)
 800118a:	f003 feae 	bl	8004eea <HAL_SPI_Transmit>
#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_HIGH_Z;
#endif

    // workaround for reading issues...
    __HAL_SPI_CLEAR_OVRFLAG(&hspi1);
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <readFromSensor+0xa4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <readFromSensor+0xa4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    HAL_SPI_Receive(&hspi1, (uint8_t *)(&readreg), 1, 0xFF);
 80011a4:	f107 0112 	add.w	r1, r7, #18
 80011a8:	23ff      	movs	r3, #255	; 0xff
 80011aa:	2201      	movs	r2, #1
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <readFromSensor+0xa4>)
 80011ae:	f003 ffd8 	bl	8005162 <HAL_SPI_Receive>
    HAL_SPI_Receive(&hspi1, (uint8_t *)(&safety), 1, 0xFF);
 80011b2:	f107 0114 	add.w	r1, r7, #20
 80011b6:	23ff      	movs	r3, #255	; 0xff
 80011b8:	2201      	movs	r2, #1
 80011ba:	4811      	ldr	r0, [pc, #68]	; (8001200 <readFromSensor+0xa4>)
 80011bc:	f003 ffd1 	bl	8005162 <HAL_SPI_Receive>

#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_LOW_Z;
#endif
    SPI_CS_Disable(csSelector);
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f914 	bl	80013f0 <SPI_CS_Disable>

    errorTypes checkError = checkSafety(safety, command, &readreg, 1, csSelector);
 80011c8:	8ab8      	ldrh	r0, [r7, #20]
 80011ca:	f107 0212 	add.w	r2, r7, #18
 80011ce:	88f9      	ldrh	r1, [r7, #6]
 80011d0:	797b      	ldrb	r3, [r7, #5]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2301      	movs	r3, #1
 80011d6:	f7ff ff15 	bl	8001004 <checkSafety>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]

    if (checkError != NO_ERROR)
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <readFromSensor+0x92>
    {
        *data = 0;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
        return checkError;
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	e003      	b.n	80011f6 <readFromSensor+0x9a>
    }
    else
    {
        *data = readreg;
 80011ee:	8a7a      	ldrh	r2, [r7, #18]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	801a      	strh	r2, [r3, #0]
        return NO_ERROR;
 80011f4:	2300      	movs	r3, #0
    }
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000454 	.word	0x20000454

08001204 <readBlockCRC>:

/**
 * Reads the block of _registers from addresses 08 - 0F in order to figure out the CRC.
 */
errorTypes readBlockCRC(uint8_t csSelector)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    uint16_t u16RegValue = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	82bb      	strh	r3, [r7, #20]
    uint16_t safety = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	827b      	strh	r3, [r7, #18]

    SPI_CS_Enable(csSelector);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f897 	bl	800134c <SPI_CS_Enable>

    u16RegValue = READ_BLOCK_CRC;
 800121e:	f248 0388 	movw	r3, #32904	; 0x8088
 8001222:	82bb      	strh	r3, [r7, #20]
    HAL_SPI_Transmit(&hspi1, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFFFF);
 8001224:	f107 0114 	add.w	r1, r7, #20
 8001228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122c:	2201      	movs	r2, #1
 800122e:	4817      	ldr	r0, [pc, #92]	; (800128c <readBlockCRC+0x88>)
 8001230:	f003 fe5b 	bl	8004eea <HAL_SPI_Transmit>
#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_HIGH_Z;
#endif

    // workaround for reading issues...
    __HAL_SPI_CLEAR_OVRFLAG(&hspi1);
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <readBlockCRC+0x88>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <readBlockCRC+0x88>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

    HAL_SPI_Receive(&hspi1, (uint8_t *)(&_registers), CRC_NUM_REGISTERS, 0xFF);
 800124a:	23ff      	movs	r3, #255	; 0xff
 800124c:	2208      	movs	r2, #8
 800124e:	4910      	ldr	r1, [pc, #64]	; (8001290 <readBlockCRC+0x8c>)
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <readBlockCRC+0x88>)
 8001252:	f003 ff86 	bl	8005162 <HAL_SPI_Receive>
    HAL_SPI_Receive(&hspi1, (uint8_t *)(&safety), 1, 0xFF);
 8001256:	f107 0112 	add.w	r1, r7, #18
 800125a:	23ff      	movs	r3, #255	; 0xff
 800125c:	2201      	movs	r2, #1
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <readBlockCRC+0x88>)
 8001260:	f003 ff7f 	bl	8005162 <HAL_SPI_Receive>

#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_LOW_Z;
#endif

    SPI_CS_Disable(csSelector);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f8c2 	bl	80013f0 <SPI_CS_Disable>

    errorTypes checkError = checkSafety(safety, READ_BLOCK_CRC, _registers, CRC_NUM_REGISTERS, csSelector);
 800126c:	8a78      	ldrh	r0, [r7, #18]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2308      	movs	r3, #8
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <readBlockCRC+0x8c>)
 8001276:	f248 0188 	movw	r1, #32904	; 0x8088
 800127a:	f7ff fec3 	bl	8001004 <checkSafety>
 800127e:	4603      	mov	r3, r0
 8001280:	75fb      	strb	r3, [r7, #23]


    return checkError;
 8001282:	7dfb      	ldrb	r3, [r7, #23]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000454 	.word	0x20000454
 8001290:	200001a4 	.word	0x200001a4

08001294 <readAngleValue>:

errorTypes readAngleValue(int16_t *data, uint8_t csSelector)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
    uint16_t rawData = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	81bb      	strh	r3, [r7, #12]
    errorTypes status = readFromSensor(READ_ANGLE_VAL_CMD, &rawData, csSelector);
 80012a4:	78fa      	ldrb	r2, [r7, #3]
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	4619      	mov	r1, r3
 80012ac:	f248 0021 	movw	r0, #32801	; 0x8021
 80012b0:	f7ff ff54 	bl	800115c <readFromSensor>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]

    if (status != NO_ERROR)
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <readAngleValue+0x2e>
    {
        return status;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	e013      	b.n	80012ea <readAngleValue+0x56>
    }

    rawData = (rawData & (DELETE_BIT_15));
 80012c2:	89bb      	ldrh	r3, [r7, #12]
 80012c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	81bb      	strh	r3, [r7, #12]

    //check if the value received is positive or negative
    if (rawData & CHECK_BIT_14)
 80012cc:	89bb      	ldrh	r3, [r7, #12]
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <readAngleValue+0x4c>
    {
        rawData = rawData - CHANGE_UINT_TO_INT_15;
 80012d6:	89bb      	ldrh	r3, [r7, #12]
 80012d8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80012dc:	b29b      	uxth	r3, r3
 80012de:	81bb      	strh	r3, [r7, #12]
    }

    *data = rawData;
 80012e0:	89bb      	ldrh	r3, [r7, #12]
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	801a      	strh	r2, [r3, #0]

    return NO_ERROR;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <getAngleValue>:
    *finalAngleSpeed = _calculateAngleSpeed(angleRange, rawAngleSpeed, firMDVal, intMode2Prediction);

    return NO_ERROR;
}
errorTypes getAngleValue(double *angleValue, uint8_t csSelector)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]
    int16_t rawAnglevalue = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	81bb      	strh	r3, [r7, #12]
    errorTypes checkError = readAngleValue(&rawAnglevalue, csSelector);
 8001304:	78fa      	ldrb	r2, [r7, #3]
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ffc1 	bl	8001294 <readAngleValue>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]

    if (checkError != NO_ERROR)
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <getAngleValue+0x2c>
    {
        return checkError;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	e00f      	b.n	8001340 <getAngleValue+0x4c>
    }

    *angleValue = (ANGLE_360_VAL / POW_2_15) * ((double)rawAnglevalue);
 8001320:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8fd 	bl	8000524 <__aeabi_i2d>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <getAngleValue+0x54>)
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	e9c1 2300 	strd	r2, r3, [r1]

    return NO_ERROR;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	3f868000 	.word	0x3f868000

0800134c <SPI_CS_Enable>:

    return NO_ERROR;
}

void SPI_CS_Enable(uint8_t csSelector)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	if (csSelector == 0){
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <SPI_CS_Enable+0x14>
		__asm("NOP");
 800135c:	bf00      	nop
	}
	else {
		__asm("NOP");
	}

}
 800135e:	e041      	b.n	80013e4 <SPI_CS_Enable+0x98>
	else if (csSelector == 1) {
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d105      	bne.n	8001372 <SPI_CS_Enable+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	2108      	movs	r1, #8
 800136a:	4820      	ldr	r0, [pc, #128]	; (80013ec <SPI_CS_Enable+0xa0>)
 800136c:	f001 fdce 	bl	8002f0c <HAL_GPIO_WritePin>
}
 8001370:	e038      	b.n	80013e4 <SPI_CS_Enable+0x98>
	else if (csSelector == 2) {
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d105      	bne.n	8001384 <SPI_CS_Enable+0x38>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2110      	movs	r1, #16
 800137c:	481b      	ldr	r0, [pc, #108]	; (80013ec <SPI_CS_Enable+0xa0>)
 800137e:	f001 fdc5 	bl	8002f0c <HAL_GPIO_WritePin>
}
 8001382:	e02f      	b.n	80013e4 <SPI_CS_Enable+0x98>
	else if (csSelector == 3) {
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d105      	bne.n	8001396 <SPI_CS_Enable+0x4a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2120      	movs	r1, #32
 800138e:	4817      	ldr	r0, [pc, #92]	; (80013ec <SPI_CS_Enable+0xa0>)
 8001390:	f001 fdbc 	bl	8002f0c <HAL_GPIO_WritePin>
}
 8001394:	e026      	b.n	80013e4 <SPI_CS_Enable+0x98>
	else if (csSelector == 4) {
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b04      	cmp	r3, #4
 800139a:	d105      	bne.n	80013a8 <SPI_CS_Enable+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <SPI_CS_Enable+0xa0>)
 80013a2:	f001 fdb3 	bl	8002f0c <HAL_GPIO_WritePin>
}
 80013a6:	e01d      	b.n	80013e4 <SPI_CS_Enable+0x98>
	else if (csSelector == 5) {
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2b05      	cmp	r3, #5
 80013ac:	d105      	bne.n	80013ba <SPI_CS_Enable+0x6e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	480e      	ldr	r0, [pc, #56]	; (80013ec <SPI_CS_Enable+0xa0>)
 80013b4:	f001 fdaa 	bl	8002f0c <HAL_GPIO_WritePin>
}
 80013b8:	e014      	b.n	80013e4 <SPI_CS_Enable+0x98>
	else if (csSelector == 6) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b06      	cmp	r3, #6
 80013be:	d106      	bne.n	80013ce <SPI_CS_Enable+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <SPI_CS_Enable+0xa0>)
 80013c8:	f001 fda0 	bl	8002f0c <HAL_GPIO_WritePin>
}
 80013cc:	e00a      	b.n	80013e4 <SPI_CS_Enable+0x98>
	else if (csSelector == 7) {
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b07      	cmp	r3, #7
 80013d2:	d106      	bne.n	80013e2 <SPI_CS_Enable+0x96>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013da:	4804      	ldr	r0, [pc, #16]	; (80013ec <SPI_CS_Enable+0xa0>)
 80013dc:	f001 fd96 	bl	8002f0c <HAL_GPIO_WritePin>
}
 80013e0:	e000      	b.n	80013e4 <SPI_CS_Enable+0x98>
		__asm("NOP");
 80013e2:	bf00      	nop
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020400 	.word	0x40020400

080013f0 <SPI_CS_Disable>:

void SPI_CS_Disable(uint8_t csSelector)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	if (csSelector == 0){
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <SPI_CS_Disable+0x14>
		__asm("NOP");
 8001400:	bf00      	nop
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	}
	else {
		__asm("NOP");
	}
}
 8001402:	e041      	b.n	8001488 <SPI_CS_Disable+0x98>
	else if (csSelector == 1) {
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d105      	bne.n	8001416 <SPI_CS_Disable+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2108      	movs	r1, #8
 800140e:	4820      	ldr	r0, [pc, #128]	; (8001490 <SPI_CS_Disable+0xa0>)
 8001410:	f001 fd7c 	bl	8002f0c <HAL_GPIO_WritePin>
}
 8001414:	e038      	b.n	8001488 <SPI_CS_Disable+0x98>
	else if (csSelector == 2) {
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d105      	bne.n	8001428 <SPI_CS_Disable+0x38>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2110      	movs	r1, #16
 8001420:	481b      	ldr	r0, [pc, #108]	; (8001490 <SPI_CS_Disable+0xa0>)
 8001422:	f001 fd73 	bl	8002f0c <HAL_GPIO_WritePin>
}
 8001426:	e02f      	b.n	8001488 <SPI_CS_Disable+0x98>
	else if (csSelector == 3) {
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d105      	bne.n	800143a <SPI_CS_Disable+0x4a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2120      	movs	r1, #32
 8001432:	4817      	ldr	r0, [pc, #92]	; (8001490 <SPI_CS_Disable+0xa0>)
 8001434:	f001 fd6a 	bl	8002f0c <HAL_GPIO_WritePin>
}
 8001438:	e026      	b.n	8001488 <SPI_CS_Disable+0x98>
	else if (csSelector == 4) {
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b04      	cmp	r3, #4
 800143e:	d105      	bne.n	800144c <SPI_CS_Disable+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	2140      	movs	r1, #64	; 0x40
 8001444:	4812      	ldr	r0, [pc, #72]	; (8001490 <SPI_CS_Disable+0xa0>)
 8001446:	f001 fd61 	bl	8002f0c <HAL_GPIO_WritePin>
}
 800144a:	e01d      	b.n	8001488 <SPI_CS_Disable+0x98>
	else if (csSelector == 5) {
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b05      	cmp	r3, #5
 8001450:	d105      	bne.n	800145e <SPI_CS_Disable+0x6e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	480e      	ldr	r0, [pc, #56]	; (8001490 <SPI_CS_Disable+0xa0>)
 8001458:	f001 fd58 	bl	8002f0c <HAL_GPIO_WritePin>
}
 800145c:	e014      	b.n	8001488 <SPI_CS_Disable+0x98>
	else if (csSelector == 6) {
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b06      	cmp	r3, #6
 8001462:	d106      	bne.n	8001472 <SPI_CS_Disable+0x82>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <SPI_CS_Disable+0xa0>)
 800146c:	f001 fd4e 	bl	8002f0c <HAL_GPIO_WritePin>
}
 8001470:	e00a      	b.n	8001488 <SPI_CS_Disable+0x98>
	else if (csSelector == 7) {
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b07      	cmp	r3, #7
 8001476:	d106      	bne.n	8001486 <SPI_CS_Disable+0x96>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <SPI_CS_Disable+0xa0>)
 8001480:	f001 fd44 	bl	8002f0c <HAL_GPIO_WritePin>
}
 8001484:	e000      	b.n	8001488 <SPI_CS_Disable+0x98>
		__asm("NOP");
 8001486:	bf00      	nop
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40020400 	.word	0x40020400

08001494 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80014a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <vApplicationGetIdleTaskMemory+0x30>)
 80014aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2280      	movs	r2, #128	; 0x80
 80014b0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	200001b4 	.word	0x200001b4
 80014c4:	20000254 	.word	0x20000254

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b09c      	sub	sp, #112	; 0x70
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f001 fa51 	bl	8002974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f86f 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f000 f993 	bl	8001800 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014da:	f000 f8d5 	bl	8001688 <MX_SPI1_Init>
  MX_TIM1_Init();
 80014de:	f000 f90b 	bl	80016f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014e2:	2100      	movs	r1, #0
 80014e4:	4829      	ldr	r0, [pc, #164]	; (800158c <main+0xc4>)
 80014e6:	f004 fb2b 	bl	8005b40 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0*3600/100;
 80014ea:	4b29      	ldr	r3, [pc, #164]	; (8001590 <main+0xc8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <main+0xcc>)
 80014f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80014f6:	461d      	mov	r5, r3
 80014f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001500:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f008 fcf5 	bl	8009efa <osThreadCreate>
 8001510:	4603      	mov	r3, r0
 8001512:	4a21      	ldr	r2, [pc, #132]	; (8001598 <main+0xd0>)
 8001514:	6013      	str	r3, [r2, #0]

  /* definition and creation of commTask */
  osThreadDef(commTask, StartCommTask, osPriorityNormal, 0, 256);
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <main+0xd4>)
 8001518:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800151c:	461d      	mov	r5, r3
 800151e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  commTaskHandle = osThreadCreate(osThread(commTask), NULL);
 800152a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f008 fce2 	bl	8009efa <osThreadCreate>
 8001536:	4603      	mov	r3, r0
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <main+0xd8>)
 800153a:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorTask */
  osThreadDef(sensorTask, StartSensorTask, osPriorityNormal, 0, 128);
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <main+0xdc>)
 800153e:	f107 041c 	add.w	r4, r7, #28
 8001542:	461d      	mov	r5, r3
 8001544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001548:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800154c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f008 fccf 	bl	8009efa <osThreadCreate>
 800155c:	4603      	mov	r3, r0
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <main+0xe0>)
 8001560:	6013      	str	r3, [r2, #0]

  /* definition and creation of motorTask */
  osThreadDef(motorTask, StartMotorTask, osPriorityIdle, 0, 128);
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <main+0xe4>)
 8001564:	463c      	mov	r4, r7
 8001566:	461d      	mov	r5, r3
 8001568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800156a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  motorTaskHandle = osThreadCreate(osThread(motorTask), NULL);
 8001574:	463b      	mov	r3, r7
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f008 fcbe 	bl	8009efa <osThreadCreate>
 800157e:	4603      	mov	r3, r0
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <main+0xe8>)
 8001582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001584:	f008 fcb2 	bl	8009eec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001588:	e7fe      	b.n	8001588 <main+0xc0>
 800158a:	bf00      	nop
 800158c:	200004ac 	.word	0x200004ac
 8001590:	40010000 	.word	0x40010000
 8001594:	0800c848 	.word	0x0800c848
 8001598:	200004f4 	.word	0x200004f4
 800159c:	0800c870 	.word	0x0800c870
 80015a0:	200004f8 	.word	0x200004f8
 80015a4:	0800c898 	.word	0x0800c898
 80015a8:	200004fc 	.word	0x200004fc
 80015ac:	0800c8c0 	.word	0x0800c8c0
 80015b0:	20000500 	.word	0x20000500

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b094      	sub	sp, #80	; 0x50
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	2230      	movs	r2, #48	; 0x30
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f00a fc40 	bl	800be48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <SystemClock_Config+0xcc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <SystemClock_Config+0xcc>)
 80015e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <SystemClock_Config+0xcc>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	4b22      	ldr	r3, [pc, #136]	; (8001684 <SystemClock_Config+0xd0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <SystemClock_Config+0xd0>)
 8001602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <SystemClock_Config+0xd0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001614:	2301      	movs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800162c:	2360      	movs	r3, #96	; 0x60
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001630:	2306      	movs	r3, #6
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001634:	2304      	movs	r3, #4
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f002 ff15 	bl	800446c <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001648:	f000 ffa4 	bl	8002594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	2101      	movs	r1, #1
 8001668:	4618      	mov	r0, r3
 800166a:	f003 f977 	bl	800495c <HAL_RCC_ClockConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001674:	f000 ff8e 	bl	8002594 <Error_Handler>
  }
}
 8001678:	bf00      	nop
 800167a:	3750      	adds	r7, #80	; 0x50
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_SPI1_Init+0x68>)
 800168e:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <MX_SPI1_Init+0x6c>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_SPI1_Init+0x68>)
 8001694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_SPI1_Init+0x68>)
 800169c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016c0:	2210      	movs	r2, #16
 80016c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016d8:	220a      	movs	r2, #10
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_SPI1_Init+0x68>)
 80016de:	f003 fb7b 	bl	8004dd8 <HAL_SPI_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80016e8:	f000 ff54 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000454 	.word	0x20000454
 80016f4:	40013000 	.word	0x40013000

080016f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b092      	sub	sp, #72	; 0x48
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2220      	movs	r2, #32
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f00a fb90 	bl	800be48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001728:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <MX_TIM1_Init+0x100>)
 800172a:	4a34      	ldr	r2, [pc, #208]	; (80017fc <MX_TIM1_Init+0x104>)
 800172c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <MX_TIM1_Init+0x100>)
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <MX_TIM1_Init+0x100>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <MX_TIM1_Init+0x100>)
 800173c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001740:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <MX_TIM1_Init+0x100>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001748:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <MX_TIM1_Init+0x100>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <MX_TIM1_Init+0x100>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001754:	4828      	ldr	r0, [pc, #160]	; (80017f8 <MX_TIM1_Init+0x100>)
 8001756:	f004 f9a3 	bl	8005aa0 <HAL_TIM_PWM_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001760:	f000 ff18 	bl	8002594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800176c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001770:	4619      	mov	r1, r3
 8001772:	4821      	ldr	r0, [pc, #132]	; (80017f8 <MX_TIM1_Init+0x100>)
 8001774:	f004 feb8 	bl	80064e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800177e:	f000 ff09 	bl	8002594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001782:	2360      	movs	r3, #96	; 0x60
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800178e:	2300      	movs	r3, #0
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	2200      	movs	r2, #0
 80017a4:	4619      	mov	r1, r3
 80017a6:	4814      	ldr	r0, [pc, #80]	; (80017f8 <MX_TIM1_Init+0x100>)
 80017a8:	f004 fb82 	bl	8005eb0 <HAL_TIM_PWM_ConfigChannel>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80017b2:	f000 feef 	bl	8002594 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <MX_TIM1_Init+0x100>)
 80017da:	f004 fef3 	bl	80065c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80017e4:	f000 fed6 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017e8:	4803      	ldr	r0, [pc, #12]	; (80017f8 <MX_TIM1_Init+0x100>)
 80017ea:	f000 ff71 	bl	80026d0 <HAL_TIM_MspPostInit>

}
 80017ee:	bf00      	nop
 80017f0:	3748      	adds	r7, #72	; 0x48
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200004ac 	.word	0x200004ac
 80017fc:	40010000 	.word	0x40010000

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <MX_GPIO_Init+0xb8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <MX_GPIO_Init+0xb8>)
 8001820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <MX_GPIO_Init+0xb8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <MX_GPIO_Init+0xb8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a1f      	ldr	r2, [pc, #124]	; (80018b8 <MX_GPIO_Init+0xb8>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <MX_GPIO_Init+0xb8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <MX_GPIO_Init+0xb8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <MX_GPIO_Init+0xb8>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <MX_GPIO_Init+0xb8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_Pin|CS2_Pin|CS3_Pin|CS4_Pin
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8001870:	4812      	ldr	r0, [pc, #72]	; (80018bc <MX_GPIO_Init+0xbc>)
 8001872:	f001 fb4b 	bl	8002f0c <HAL_GPIO_WritePin>
                          |CS5_Pin|CS6_Pin|CS7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8001876:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800187a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 030c 	add.w	r3, r7, #12
 8001888:	4619      	mov	r1, r3
 800188a:	480c      	ldr	r0, [pc, #48]	; (80018bc <MX_GPIO_Init+0xbc>)
 800188c:	f001 f9ba 	bl	8002c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin CS3_Pin CS4_Pin
                           CS5_Pin CS6_Pin CS7_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|CS3_Pin|CS4_Pin
 8001890:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8001894:	60fb      	str	r3, [r7, #12]
                          |CS5_Pin|CS6_Pin|CS7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <MX_GPIO_Init+0xbc>)
 80018aa:	f001 f9ab 	bl	8002c04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020400 	.word	0x40020400

080018c0 <SizeofCharArray>:
  * @brief Count characters in char array
  * @param ptr: pointer to char array
  * @retval Number of characters in array
  */
uint16_t SizeofCharArray(char *ptr)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Local variables */
  uint16_t len = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	81fb      	strh	r3, [r7, #14]

  /* Search until end char */
  while (ptr[len] != '\0') {
 80018cc:	e002      	b.n	80018d4 <SizeofCharArray+0x14>
    len++;
 80018ce:	89fb      	ldrh	r3, [r7, #14]
 80018d0:	3301      	adds	r3, #1
 80018d2:	81fb      	strh	r3, [r7, #14]
  while (ptr[len] != '\0') {
 80018d4:	89fb      	ldrh	r3, [r7, #14]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f6      	bne.n	80018ce <SizeofCharArray+0xe>
  }
  return len;
 80018e0:	89fb      	ldrh	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80018f8:	f009 fd58 	bl	800b3ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 80018fc:	20c8      	movs	r0, #200	; 0xc8
 80018fe:	f008 fb48 	bl	8009f92 <osDelay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001906:	4802      	ldr	r0, [pc, #8]	; (8001910 <StartDefaultTask+0x20>)
 8001908:	f001 fb19 	bl	8002f3e <HAL_GPIO_TogglePin>
    osDelay(200);
 800190c:	e7f6      	b.n	80018fc <StartDefaultTask+0xc>
 800190e:	bf00      	nop
 8001910:	40020800 	.word	0x40020800

08001914 <StartCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommTask */
void StartCommTask(void const * argument)
{
 8001914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001918:	b08e      	sub	sp, #56	; 0x38
 800191a:	af08      	add	r7, sp, #32
 800191c:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartCommTask */
  uint16_t Len = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	82fb      	strh	r3, [r7, #22]
  /* Infinite loop */
  for(;;)
  {
	if (receiveState == 1){
 8001922:	4b96      	ldr	r3, [pc, #600]	; (8001b7c <StartCommTask+0x268>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	f040 82b9 	bne.w	8001e9e <StartCommTask+0x58a>
	  // Dummy command
	  if ((rxBuf[0] == 'K') && (rxBuf[1] == 'A') && (rxBuf[2] == '\r')){ // KA = Keep alive (response echo)
 800192c:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <StartCommTask+0x26c>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b4b      	cmp	r3, #75	; 0x4b
 8001932:	d109      	bne.n	8001948 <StartCommTask+0x34>
 8001934:	4b92      	ldr	r3, [pc, #584]	; (8001b80 <StartCommTask+0x26c>)
 8001936:	785b      	ldrb	r3, [r3, #1]
 8001938:	2b41      	cmp	r3, #65	; 0x41
 800193a:	d105      	bne.n	8001948 <StartCommTask+0x34>
 800193c:	4b90      	ldr	r3, [pc, #576]	; (8001b80 <StartCommTask+0x26c>)
 800193e:	789b      	ldrb	r3, [r3, #2]
 8001940:	2b0d      	cmp	r3, #13
 8001942:	d101      	bne.n	8001948 <StartCommTask+0x34>
		__ASM("NOP");
 8001944:	bf00      	nop
 8001946:	e2a2      	b.n	8001e8e <StartCommTask+0x57a>
	  }
	  // Clear error counter
	  else if ((rxBuf[0] == 'C') && (rxBuf[1] == 'E') && (rxBuf[2] == 'C') && (rxBuf[3] == '\r')){
 8001948:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <StartCommTask+0x26c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b43      	cmp	r3, #67	; 0x43
 800194e:	d11e      	bne.n	800198e <StartCommTask+0x7a>
 8001950:	4b8b      	ldr	r3, [pc, #556]	; (8001b80 <StartCommTask+0x26c>)
 8001952:	785b      	ldrb	r3, [r3, #1]
 8001954:	2b45      	cmp	r3, #69	; 0x45
 8001956:	d11a      	bne.n	800198e <StartCommTask+0x7a>
 8001958:	4b89      	ldr	r3, [pc, #548]	; (8001b80 <StartCommTask+0x26c>)
 800195a:	789b      	ldrb	r3, [r3, #2]
 800195c:	2b43      	cmp	r3, #67	; 0x43
 800195e:	d116      	bne.n	800198e <StartCommTask+0x7a>
 8001960:	4b87      	ldr	r3, [pc, #540]	; (8001b80 <StartCommTask+0x26c>)
 8001962:	78db      	ldrb	r3, [r3, #3]
 8001964:	2b0d      	cmp	r3, #13
 8001966:	d112      	bne.n	800198e <StartCommTask+0x7a>
		errorCounter = 0;
 8001968:	4b86      	ldr	r3, [pc, #536]	; (8001b84 <StartCommTask+0x270>)
 800196a:	2200      	movs	r2, #0
 800196c:	801a      	strh	r2, [r3, #0]
		sprintf(txBuf, "OK;%s\r\n", rxBuf);
 800196e:	4a84      	ldr	r2, [pc, #528]	; (8001b80 <StartCommTask+0x26c>)
 8001970:	4985      	ldr	r1, [pc, #532]	; (8001b88 <StartCommTask+0x274>)
 8001972:	4886      	ldr	r0, [pc, #536]	; (8001b8c <StartCommTask+0x278>)
 8001974:	f00a fa48 	bl	800be08 <siprintf>
		Len = SizeofCharArray((char*)txBuf);
 8001978:	4884      	ldr	r0, [pc, #528]	; (8001b8c <StartCommTask+0x278>)
 800197a:	f7ff ffa1 	bl	80018c0 <SizeofCharArray>
 800197e:	4603      	mov	r3, r0
 8001980:	82fb      	strh	r3, [r7, #22]
		CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001982:	8afb      	ldrh	r3, [r7, #22]
 8001984:	4619      	mov	r1, r3
 8001986:	4881      	ldr	r0, [pc, #516]	; (8001b8c <StartCommTask+0x278>)
 8001988:	f009 fde2 	bl	800b550 <CDC_Transmit_FS>
 800198c:	e27f      	b.n	8001e8e <StartCommTask+0x57a>
	  }
	  // Read error counter
	  else if ((rxBuf[0] == 'R') && (rxBuf[1] == 'E') && (rxBuf[2] == 'C') && (rxBuf[3] == '\r')){
 800198e:	4b7c      	ldr	r3, [pc, #496]	; (8001b80 <StartCommTask+0x26c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b52      	cmp	r3, #82	; 0x52
 8001994:	d11d      	bne.n	80019d2 <StartCommTask+0xbe>
 8001996:	4b7a      	ldr	r3, [pc, #488]	; (8001b80 <StartCommTask+0x26c>)
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	2b45      	cmp	r3, #69	; 0x45
 800199c:	d119      	bne.n	80019d2 <StartCommTask+0xbe>
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <StartCommTask+0x26c>)
 80019a0:	789b      	ldrb	r3, [r3, #2]
 80019a2:	2b43      	cmp	r3, #67	; 0x43
 80019a4:	d115      	bne.n	80019d2 <StartCommTask+0xbe>
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <StartCommTask+0x26c>)
 80019a8:	78db      	ldrb	r3, [r3, #3]
 80019aa:	2b0d      	cmp	r3, #13
 80019ac:	d111      	bne.n	80019d2 <StartCommTask+0xbe>
		sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, errorCounter);
 80019ae:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <StartCommTask+0x270>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	4a73      	ldr	r2, [pc, #460]	; (8001b80 <StartCommTask+0x26c>)
 80019b4:	4976      	ldr	r1, [pc, #472]	; (8001b90 <StartCommTask+0x27c>)
 80019b6:	4875      	ldr	r0, [pc, #468]	; (8001b8c <StartCommTask+0x278>)
 80019b8:	f00a fa26 	bl	800be08 <siprintf>
		Len = SizeofCharArray((char*)txBuf);
 80019bc:	4873      	ldr	r0, [pc, #460]	; (8001b8c <StartCommTask+0x278>)
 80019be:	f7ff ff7f 	bl	80018c0 <SizeofCharArray>
 80019c2:	4603      	mov	r3, r0
 80019c4:	82fb      	strh	r3, [r7, #22]
		CDC_Transmit_FS((uint8_t*)txBuf, Len);
 80019c6:	8afb      	ldrh	r3, [r7, #22]
 80019c8:	4619      	mov	r1, r3
 80019ca:	4870      	ldr	r0, [pc, #448]	; (8001b8c <StartCommTask+0x278>)
 80019cc:	f009 fdc0 	bl	800b550 <CDC_Transmit_FS>
 80019d0:	e25d      	b.n	8001e8e <StartCommTask+0x57a>
	  }
	  // Read joint offsets
	  else if ((rxBuf[0] == 'R') && (rxBuf[1] == 'O') && (rxBuf[3] == '\r')){
 80019d2:	4b6b      	ldr	r3, [pc, #428]	; (8001b80 <StartCommTask+0x26c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b52      	cmp	r3, #82	; 0x52
 80019d8:	f040 80ee 	bne.w	8001bb8 <StartCommTask+0x2a4>
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <StartCommTask+0x26c>)
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	2b4f      	cmp	r3, #79	; 0x4f
 80019e2:	f040 80e9 	bne.w	8001bb8 <StartCommTask+0x2a4>
 80019e6:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <StartCommTask+0x26c>)
 80019e8:	78db      	ldrb	r3, [r3, #3]
 80019ea:	2b0d      	cmp	r3, #13
 80019ec:	f040 80e4 	bne.w	8001bb8 <StartCommTask+0x2a4>
		if (rxBuf[2] == '1') {
 80019f0:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <StartCommTask+0x26c>)
 80019f2:	789b      	ldrb	r3, [r3, #2]
 80019f4:	2b31      	cmp	r3, #49	; 0x31
 80019f6:	d115      	bne.n	8001a24 <StartCommTask+0x110>
			sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, (int16_t)(offset1*100));
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <StartCommTask+0x280>)
 80019fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <StartCommTask+0x284>)
 8001a04:	f7fe fdf8 	bl	80005f8 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f88c 	bl	8000b2c <__aeabi_d2iz>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	4a59      	ldr	r2, [pc, #356]	; (8001b80 <StartCommTask+0x26c>)
 8001a1a:	495d      	ldr	r1, [pc, #372]	; (8001b90 <StartCommTask+0x27c>)
 8001a1c:	485b      	ldr	r0, [pc, #364]	; (8001b8c <StartCommTask+0x278>)
 8001a1e:	f00a f9f3 	bl	800be08 <siprintf>
 8001a22:	e0a0      	b.n	8001b66 <StartCommTask+0x252>
		}
		else if (rxBuf[2] == '2') {
 8001a24:	4b56      	ldr	r3, [pc, #344]	; (8001b80 <StartCommTask+0x26c>)
 8001a26:	789b      	ldrb	r3, [r3, #2]
 8001a28:	2b32      	cmp	r3, #50	; 0x32
 8001a2a:	d115      	bne.n	8001a58 <StartCommTask+0x144>
			sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, (int16_t)(offset2*100));
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <StartCommTask+0x288>)
 8001a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	4b58      	ldr	r3, [pc, #352]	; (8001b98 <StartCommTask+0x284>)
 8001a38:	f7fe fdde 	bl	80005f8 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f872 	bl	8000b2c <__aeabi_d2iz>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <StartCommTask+0x26c>)
 8001a4e:	4950      	ldr	r1, [pc, #320]	; (8001b90 <StartCommTask+0x27c>)
 8001a50:	484e      	ldr	r0, [pc, #312]	; (8001b8c <StartCommTask+0x278>)
 8001a52:	f00a f9d9 	bl	800be08 <siprintf>
 8001a56:	e086      	b.n	8001b66 <StartCommTask+0x252>
		}
		else if (rxBuf[2] == '3') {
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <StartCommTask+0x26c>)
 8001a5a:	789b      	ldrb	r3, [r3, #2]
 8001a5c:	2b33      	cmp	r3, #51	; 0x33
 8001a5e:	d115      	bne.n	8001a8c <StartCommTask+0x178>
			sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, (int16_t)(offset3*100));
 8001a60:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <StartCommTask+0x28c>)
 8001a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <StartCommTask+0x284>)
 8001a6c:	f7fe fdc4 	bl	80005f8 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f858 	bl	8000b2c <__aeabi_d2iz>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	4a3f      	ldr	r2, [pc, #252]	; (8001b80 <StartCommTask+0x26c>)
 8001a82:	4943      	ldr	r1, [pc, #268]	; (8001b90 <StartCommTask+0x27c>)
 8001a84:	4841      	ldr	r0, [pc, #260]	; (8001b8c <StartCommTask+0x278>)
 8001a86:	f00a f9bf 	bl	800be08 <siprintf>
 8001a8a:	e06c      	b.n	8001b66 <StartCommTask+0x252>
		}
		else if (rxBuf[2] == '4') {
 8001a8c:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <StartCommTask+0x26c>)
 8001a8e:	789b      	ldrb	r3, [r3, #2]
 8001a90:	2b34      	cmp	r3, #52	; 0x34
 8001a92:	d115      	bne.n	8001ac0 <StartCommTask+0x1ac>
			sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, (int16_t)(offset4*100));
 8001a94:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <StartCommTask+0x290>)
 8001a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <StartCommTask+0x284>)
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f83e 	bl	8000b2c <__aeabi_d2iz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b21b      	sxth	r3, r3
 8001ab4:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <StartCommTask+0x26c>)
 8001ab6:	4936      	ldr	r1, [pc, #216]	; (8001b90 <StartCommTask+0x27c>)
 8001ab8:	4834      	ldr	r0, [pc, #208]	; (8001b8c <StartCommTask+0x278>)
 8001aba:	f00a f9a5 	bl	800be08 <siprintf>
 8001abe:	e052      	b.n	8001b66 <StartCommTask+0x252>
		}
		else if (rxBuf[2] == '5') {
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <StartCommTask+0x26c>)
 8001ac2:	789b      	ldrb	r3, [r3, #2]
 8001ac4:	2b35      	cmp	r3, #53	; 0x35
 8001ac6:	d115      	bne.n	8001af4 <StartCommTask+0x1e0>
			sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, (int16_t)(offset5*100));
 8001ac8:	4b37      	ldr	r3, [pc, #220]	; (8001ba8 <StartCommTask+0x294>)
 8001aca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <StartCommTask+0x284>)
 8001ad4:	f7fe fd90 	bl	80005f8 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f824 	bl	8000b2c <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b21b      	sxth	r3, r3
 8001ae8:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <StartCommTask+0x26c>)
 8001aea:	4929      	ldr	r1, [pc, #164]	; (8001b90 <StartCommTask+0x27c>)
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <StartCommTask+0x278>)
 8001aee:	f00a f98b 	bl	800be08 <siprintf>
 8001af2:	e038      	b.n	8001b66 <StartCommTask+0x252>
		}
		else if (rxBuf[2] == '6') {
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <StartCommTask+0x26c>)
 8001af6:	789b      	ldrb	r3, [r3, #2]
 8001af8:	2b36      	cmp	r3, #54	; 0x36
 8001afa:	d115      	bne.n	8001b28 <StartCommTask+0x214>
			sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, (int16_t)(offset6*100));
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <StartCommTask+0x298>)
 8001afe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <StartCommTask+0x284>)
 8001b08:	f7fe fd76 	bl	80005f8 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7ff f80a 	bl	8000b2c <__aeabi_d2iz>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <StartCommTask+0x26c>)
 8001b1e:	491c      	ldr	r1, [pc, #112]	; (8001b90 <StartCommTask+0x27c>)
 8001b20:	481a      	ldr	r0, [pc, #104]	; (8001b8c <StartCommTask+0x278>)
 8001b22:	f00a f971 	bl	800be08 <siprintf>
 8001b26:	e01e      	b.n	8001b66 <StartCommTask+0x252>
		}
		else if (rxBuf[2] == '7') {
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <StartCommTask+0x26c>)
 8001b2a:	789b      	ldrb	r3, [r3, #2]
 8001b2c:	2b37      	cmp	r3, #55	; 0x37
 8001b2e:	d115      	bne.n	8001b5c <StartCommTask+0x248>
			sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, (int16_t)(offset7*100));
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <StartCommTask+0x29c>)
 8001b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <StartCommTask+0x284>)
 8001b3c:	f7fe fd5c 	bl	80005f8 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe fff0 	bl	8000b2c <__aeabi_d2iz>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <StartCommTask+0x26c>)
 8001b52:	490f      	ldr	r1, [pc, #60]	; (8001b90 <StartCommTask+0x27c>)
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <StartCommTask+0x278>)
 8001b56:	f00a f957 	bl	800be08 <siprintf>
 8001b5a:	e004      	b.n	8001b66 <StartCommTask+0x252>
		}
		else {
			sprintf(txBuf, "ERR1;%s\r\n", rxBuf);
 8001b5c:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <StartCommTask+0x26c>)
 8001b5e:	4915      	ldr	r1, [pc, #84]	; (8001bb4 <StartCommTask+0x2a0>)
 8001b60:	480a      	ldr	r0, [pc, #40]	; (8001b8c <StartCommTask+0x278>)
 8001b62:	f00a f951 	bl	800be08 <siprintf>
		}
		Len = SizeofCharArray((char*)txBuf);
 8001b66:	4809      	ldr	r0, [pc, #36]	; (8001b8c <StartCommTask+0x278>)
 8001b68:	f7ff feaa 	bl	80018c0 <SizeofCharArray>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	82fb      	strh	r3, [r7, #22]
		CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001b70:	8afb      	ldrh	r3, [r7, #22]
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <StartCommTask+0x278>)
 8001b76:	f009 fceb 	bl	800b550 <CDC_Transmit_FS>
 8001b7a:	e188      	b.n	8001e8e <StartCommTask+0x57a>
 8001b7c:	20000030 	.word	0x20000030
 8001b80:	200006c4 	.word	0x200006c4
 8001b84:	2000050c 	.word	0x2000050c
 8001b88:	0800c8dc 	.word	0x0800c8dc
 8001b8c:	200005c4 	.word	0x200005c4
 8001b90:	0800c8e4 	.word	0x0800c8e4
 8001b94:	20000000 	.word	0x20000000
 8001b98:	40590000 	.word	0x40590000
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	20000018 	.word	0x20000018
 8001ba8:	20000020 	.word	0x20000020
 8001bac:	20000028 	.word	0x20000028
 8001bb0:	200005b8 	.word	0x200005b8
 8001bb4:	0800c8f0 	.word	0x0800c8f0
	  }
	  // Set joint offsets
	  else if ((rxBuf[0] == 'S') && (rxBuf[1] == 'O') && (rxBuf[3] == '\r')){
 8001bb8:	4b9b      	ldr	r3, [pc, #620]	; (8001e28 <StartCommTask+0x514>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b53      	cmp	r3, #83	; 0x53
 8001bbe:	d118      	bne.n	8001bf2 <StartCommTask+0x2de>
 8001bc0:	4b99      	ldr	r3, [pc, #612]	; (8001e28 <StartCommTask+0x514>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	2b4f      	cmp	r3, #79	; 0x4f
 8001bc6:	d114      	bne.n	8001bf2 <StartCommTask+0x2de>
 8001bc8:	4b97      	ldr	r3, [pc, #604]	; (8001e28 <StartCommTask+0x514>)
 8001bca:	78db      	ldrb	r3, [r3, #3]
 8001bcc:	2b0d      	cmp	r3, #13
 8001bce:	d110      	bne.n	8001bf2 <StartCommTask+0x2de>
		//ToDo: implement writing offsets
		sprintf(txBuf, "OK;%s;%s\r\n", rxBuf, "To be implemented...");
 8001bd0:	4b96      	ldr	r3, [pc, #600]	; (8001e2c <StartCommTask+0x518>)
 8001bd2:	4a95      	ldr	r2, [pc, #596]	; (8001e28 <StartCommTask+0x514>)
 8001bd4:	4996      	ldr	r1, [pc, #600]	; (8001e30 <StartCommTask+0x51c>)
 8001bd6:	4897      	ldr	r0, [pc, #604]	; (8001e34 <StartCommTask+0x520>)
 8001bd8:	f00a f916 	bl	800be08 <siprintf>
		Len = SizeofCharArray((char*)txBuf);
 8001bdc:	4895      	ldr	r0, [pc, #596]	; (8001e34 <StartCommTask+0x520>)
 8001bde:	f7ff fe6f 	bl	80018c0 <SizeofCharArray>
 8001be2:	4603      	mov	r3, r0
 8001be4:	82fb      	strh	r3, [r7, #22]
		CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001be6:	8afb      	ldrh	r3, [r7, #22]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4892      	ldr	r0, [pc, #584]	; (8001e34 <StartCommTask+0x520>)
 8001bec:	f009 fcb0 	bl	800b550 <CDC_Transmit_FS>
 8001bf0:	e14d      	b.n	8001e8e <StartCommTask+0x57a>
	  }
	  // Read device status, returns joint angles and button status
	  else if ((rxBuf[0] == 'R') && (rxBuf[1] == 'D') && (rxBuf[2] == 'S') && (rxBuf[3] == '\r')){
 8001bf2:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <StartCommTask+0x514>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b52      	cmp	r3, #82	; 0x52
 8001bf8:	f040 80a6 	bne.w	8001d48 <StartCommTask+0x434>
 8001bfc:	4b8a      	ldr	r3, [pc, #552]	; (8001e28 <StartCommTask+0x514>)
 8001bfe:	785b      	ldrb	r3, [r3, #1]
 8001c00:	2b44      	cmp	r3, #68	; 0x44
 8001c02:	f040 80a1 	bne.w	8001d48 <StartCommTask+0x434>
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <StartCommTask+0x514>)
 8001c08:	789b      	ldrb	r3, [r3, #2]
 8001c0a:	2b53      	cmp	r3, #83	; 0x53
 8001c0c:	f040 809c 	bne.w	8001d48 <StartCommTask+0x434>
 8001c10:	4b85      	ldr	r3, [pc, #532]	; (8001e28 <StartCommTask+0x514>)
 8001c12:	78db      	ldrb	r3, [r3, #3]
 8001c14:	2b0d      	cmp	r3, #13
 8001c16:	f040 8097 	bne.w	8001d48 <StartCommTask+0x434>
		sprintf(txBuf, "OK;%s;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n", rxBuf, (int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100), (int16_t)(angle5*100), (int16_t)(angle6*100), (int16_t)(angle7*100), b1Status, b2Status);
 8001c1a:	4b87      	ldr	r3, [pc, #540]	; (8001e38 <StartCommTask+0x524>)
 8001c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b85      	ldr	r3, [pc, #532]	; (8001e3c <StartCommTask+0x528>)
 8001c26:	f7fe fce7 	bl	80005f8 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7fe ff7b 	bl	8000b2c <__aeabi_d2iz>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <StartCommTask+0x52c>)
 8001c3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b7d      	ldr	r3, [pc, #500]	; (8001e3c <StartCommTask+0x528>)
 8001c48:	f7fe fcd6 	bl	80005f8 <__aeabi_dmul>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ff6a 	bl	8000b2c <__aeabi_d2iz>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	461c      	mov	r4, r3
 8001c5e:	4b79      	ldr	r3, [pc, #484]	; (8001e44 <StartCommTask+0x530>)
 8001c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b74      	ldr	r3, [pc, #464]	; (8001e3c <StartCommTask+0x528>)
 8001c6a:	f7fe fcc5 	bl	80005f8 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ff59 	bl	8000b2c <__aeabi_d2iz>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	461d      	mov	r5, r3
 8001c80:	4b71      	ldr	r3, [pc, #452]	; (8001e48 <StartCommTask+0x534>)
 8001c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <StartCommTask+0x528>)
 8001c8c:	f7fe fcb4 	bl	80005f8 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ff48 	bl	8000b2c <__aeabi_d2iz>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	461e      	mov	r6, r3
 8001ca2:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <StartCommTask+0x538>)
 8001ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <StartCommTask+0x528>)
 8001cae:	f7fe fca3 	bl	80005f8 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7fe ff37 	bl	8000b2c <__aeabi_d2iz>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <StartCommTask+0x53c>)
 8001cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <StartCommTask+0x528>)
 8001cd0:	f7fe fc92 	bl	80005f8 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ff26 	bl	8000b2c <__aeabi_d2iz>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <StartCommTask+0x540>)
 8001ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <StartCommTask+0x528>)
 8001cf2:	f7fe fc81 	bl	80005f8 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe ff15 	bl	8000b2c <__aeabi_d2iz>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <StartCommTask+0x544>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <StartCommTask+0x548>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	9307      	str	r3, [sp, #28]
 8001d14:	9106      	str	r1, [sp, #24]
 8001d16:	9205      	str	r2, [sp, #20]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	9204      	str	r2, [sp, #16]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	9303      	str	r3, [sp, #12]
 8001d20:	9602      	str	r6, [sp, #8]
 8001d22:	9501      	str	r5, [sp, #4]
 8001d24:	9400      	str	r4, [sp, #0]
 8001d26:	4643      	mov	r3, r8
 8001d28:	4a3f      	ldr	r2, [pc, #252]	; (8001e28 <StartCommTask+0x514>)
 8001d2a:	494d      	ldr	r1, [pc, #308]	; (8001e60 <StartCommTask+0x54c>)
 8001d2c:	4841      	ldr	r0, [pc, #260]	; (8001e34 <StartCommTask+0x520>)
 8001d2e:	f00a f86b 	bl	800be08 <siprintf>
		Len = SizeofCharArray((char*)txBuf);
 8001d32:	4840      	ldr	r0, [pc, #256]	; (8001e34 <StartCommTask+0x520>)
 8001d34:	f7ff fdc4 	bl	80018c0 <SizeofCharArray>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	82fb      	strh	r3, [r7, #22]
		CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001d3c:	8afb      	ldrh	r3, [r7, #22]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	483c      	ldr	r0, [pc, #240]	; (8001e34 <StartCommTask+0x520>)
 8001d42:	f009 fc05 	bl	800b550 <CDC_Transmit_FS>
 8001d46:	e0a2      	b.n	8001e8e <StartCommTask+0x57a>
	  }
	  // Read feedback status 0...100
	  else if ((rxBuf[0] == 'R') && (rxBuf[1] == 'F') && (rxBuf[2] == 'B') && (rxBuf[3] == '\r')){
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <StartCommTask+0x514>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b52      	cmp	r3, #82	; 0x52
 8001d4e:	d11d      	bne.n	8001d8c <StartCommTask+0x478>
 8001d50:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <StartCommTask+0x514>)
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	2b46      	cmp	r3, #70	; 0x46
 8001d56:	d119      	bne.n	8001d8c <StartCommTask+0x478>
 8001d58:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <StartCommTask+0x514>)
 8001d5a:	789b      	ldrb	r3, [r3, #2]
 8001d5c:	2b42      	cmp	r3, #66	; 0x42
 8001d5e:	d115      	bne.n	8001d8c <StartCommTask+0x478>
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <StartCommTask+0x514>)
 8001d62:	78db      	ldrb	r3, [r3, #3]
 8001d64:	2b0d      	cmp	r3, #13
 8001d66:	d111      	bne.n	8001d8c <StartCommTask+0x478>
		sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, feedback);
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <StartCommTask+0x550>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4a2e      	ldr	r2, [pc, #184]	; (8001e28 <StartCommTask+0x514>)
 8001d6e:	493e      	ldr	r1, [pc, #248]	; (8001e68 <StartCommTask+0x554>)
 8001d70:	4830      	ldr	r0, [pc, #192]	; (8001e34 <StartCommTask+0x520>)
 8001d72:	f00a f849 	bl	800be08 <siprintf>
		Len = SizeofCharArray((char*)txBuf);
 8001d76:	482f      	ldr	r0, [pc, #188]	; (8001e34 <StartCommTask+0x520>)
 8001d78:	f7ff fda2 	bl	80018c0 <SizeofCharArray>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	82fb      	strh	r3, [r7, #22]
		CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001d80:	8afb      	ldrh	r3, [r7, #22]
 8001d82:	4619      	mov	r1, r3
 8001d84:	482b      	ldr	r0, [pc, #172]	; (8001e34 <StartCommTask+0x520>)
 8001d86:	f009 fbe3 	bl	800b550 <CDC_Transmit_FS>
 8001d8a:	e080      	b.n	8001e8e <StartCommTask+0x57a>
	  }
	  // Set feedback status 0...100
	  else if ((rxBuf[0] == 'S') && (rxBuf[1] == 'F') && (rxBuf[2] == 'B') && (rxBuf[6] == '\r')){
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <StartCommTask+0x514>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b53      	cmp	r3, #83	; 0x53
 8001d92:	d16d      	bne.n	8001e70 <StartCommTask+0x55c>
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <StartCommTask+0x514>)
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	2b46      	cmp	r3, #70	; 0x46
 8001d9a:	d169      	bne.n	8001e70 <StartCommTask+0x55c>
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <StartCommTask+0x514>)
 8001d9e:	789b      	ldrb	r3, [r3, #2]
 8001da0:	2b42      	cmp	r3, #66	; 0x42
 8001da2:	d165      	bne.n	8001e70 <StartCommTask+0x55c>
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <StartCommTask+0x514>)
 8001da6:	799b      	ldrb	r3, [r3, #6]
 8001da8:	2b0d      	cmp	r3, #13
 8001daa:	d161      	bne.n	8001e70 <StartCommTask+0x55c>
		feedback_temp = (int16_t)((rxBuf[3]  - '0')*100 + (rxBuf[4]  - '0')*10 + (rxBuf[5]  - '0')*1);
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <StartCommTask+0x514>)
 8001dae:	78db      	ldrb	r3, [r3, #3]
 8001db0:	3b30      	subs	r3, #48	; 0x30
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	0092      	lsls	r2, r2, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	0091      	lsls	r1, r2, #2
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <StartCommTask+0x514>)
 8001dca:	791b      	ldrb	r3, [r3, #4]
 8001dcc:	3b30      	subs	r3, #48	; 0x30
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	0089      	lsls	r1, r1, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4413      	add	r3, r2
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <StartCommTask+0x514>)
 8001de0:	795b      	ldrb	r3, [r3, #5]
 8001de2:	4413      	add	r3, r2
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3b30      	subs	r3, #48	; 0x30
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <StartCommTask+0x558>)
 8001dec:	701a      	strb	r2, [r3, #0]
		if (feedback_temp > 100) feedback_temp = 100;
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <StartCommTask+0x558>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d902      	bls.n	8001dfc <StartCommTask+0x4e8>
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <StartCommTask+0x558>)
 8001df8:	2264      	movs	r2, #100	; 0x64
 8001dfa:	701a      	strb	r2, [r3, #0]
		feedback = feedback_temp;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <StartCommTask+0x558>)
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <StartCommTask+0x550>)
 8001e02:	701a      	strb	r2, [r3, #0]
		sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, feedback);
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <StartCommTask+0x550>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <StartCommTask+0x514>)
 8001e0a:	4917      	ldr	r1, [pc, #92]	; (8001e68 <StartCommTask+0x554>)
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <StartCommTask+0x520>)
 8001e0e:	f009 fffb 	bl	800be08 <siprintf>
		Len = SizeofCharArray((char*)txBuf);
 8001e12:	4808      	ldr	r0, [pc, #32]	; (8001e34 <StartCommTask+0x520>)
 8001e14:	f7ff fd54 	bl	80018c0 <SizeofCharArray>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	82fb      	strh	r3, [r7, #22]
		CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001e1c:	8afb      	ldrh	r3, [r7, #22]
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <StartCommTask+0x520>)
 8001e22:	f009 fb95 	bl	800b550 <CDC_Transmit_FS>
 8001e26:	e032      	b.n	8001e8e <StartCommTask+0x57a>
 8001e28:	200006c4 	.word	0x200006c4
 8001e2c:	0800c8fc 	.word	0x0800c8fc
 8001e30:	0800c914 	.word	0x0800c914
 8001e34:	200005c4 	.word	0x200005c4
 8001e38:	20000580 	.word	0x20000580
 8001e3c:	40590000 	.word	0x40590000
 8001e40:	20000588 	.word	0x20000588
 8001e44:	20000590 	.word	0x20000590
 8001e48:	20000598 	.word	0x20000598
 8001e4c:	200005a0 	.word	0x200005a0
 8001e50:	200005a8 	.word	0x200005a8
 8001e54:	200005b0 	.word	0x200005b0
 8001e58:	200005c2 	.word	0x200005c2
 8001e5c:	200005c3 	.word	0x200005c3
 8001e60:	0800c920 	.word	0x0800c920
 8001e64:	200005c0 	.word	0x200005c0
 8001e68:	0800c8e4 	.word	0x0800c8e4
 8001e6c:	200005c1 	.word	0x200005c1
	  }
	  // Unrecognized command
      else{
        sprintf(txBuf, "ERR2;%s\r\n", rxBuf);
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <StartCommTask+0x5b8>)
 8001e72:	4917      	ldr	r1, [pc, #92]	; (8001ed0 <StartCommTask+0x5bc>)
 8001e74:	4817      	ldr	r0, [pc, #92]	; (8001ed4 <StartCommTask+0x5c0>)
 8001e76:	f009 ffc7 	bl	800be08 <siprintf>
        Len = SizeofCharArray((char*)txBuf);
 8001e7a:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <StartCommTask+0x5c0>)
 8001e7c:	f7ff fd20 	bl	80018c0 <SizeofCharArray>
 8001e80:	4603      	mov	r3, r0
 8001e82:	82fb      	strh	r3, [r7, #22]
        CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001e84:	8afb      	ldrh	r3, [r7, #22]
 8001e86:	4619      	mov	r1, r3
 8001e88:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <StartCommTask+0x5c0>)
 8001e8a:	f009 fb61 	bl	800b550 <CDC_Transmit_FS>
      }
      timeStamp = HAL_GetTick();
 8001e8e:	f000 fda7 	bl	80029e0 <HAL_GetTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <StartCommTask+0x5c4>)
 8001e96:	6013      	str	r3, [r2, #0]
      receiveState = 0;
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <StartCommTask+0x5c8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
    }

    timeOutGuard = HAL_GetTick() - timeStamp;
 8001e9e:	f000 fd9f 	bl	80029e0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <StartCommTask+0x5c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ee0 <StartCommTask+0x5cc>)
 8001eac:	6013      	str	r3, [r2, #0]
    if (timeOutGuard > timeOutGuardMax){
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <StartCommTask+0x5cc>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <StartCommTask+0x5d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d903      	bls.n	8001ec2 <StartCommTask+0x5ae>
      timeOutGuardMax = timeOutGuard;
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <StartCommTask+0x5cc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <StartCommTask+0x5d0>)
 8001ec0:	6013      	str	r3, [r2, #0]
    }

    osDelay(10);
 8001ec2:	200a      	movs	r0, #10
 8001ec4:	f008 f865 	bl	8009f92 <osDelay>
	if (receiveState == 1){
 8001ec8:	e52b      	b.n	8001922 <StartCommTask+0xe>
 8001eca:	bf00      	nop
 8001ecc:	200006c4 	.word	0x200006c4
 8001ed0:	0800c944 	.word	0x0800c944
 8001ed4:	200005c4 	.word	0x200005c4
 8001ed8:	200007c4 	.word	0x200007c4
 8001edc:	20000030 	.word	0x20000030
 8001ee0:	200007c8 	.word	0x200007c8
 8001ee4:	200007cc 	.word	0x200007cc

08001ee8 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b08a      	sub	sp, #40	; 0x28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN StartSensorTask */
  SPI_CS_Disable(1);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff fa7c 	bl	80013f0 <SPI_CS_Disable>
  SPI_CS_Disable(2);
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f7ff fa79 	bl	80013f0 <SPI_CS_Disable>
  SPI_CS_Disable(3);
 8001efe:	2003      	movs	r0, #3
 8001f00:	f7ff fa76 	bl	80013f0 <SPI_CS_Disable>
  SPI_CS_Disable(4);
 8001f04:	2004      	movs	r0, #4
 8001f06:	f7ff fa73 	bl	80013f0 <SPI_CS_Disable>
  SPI_CS_Disable(5);
 8001f0a:	2005      	movs	r0, #5
 8001f0c:	f7ff fa70 	bl	80013f0 <SPI_CS_Disable>
  SPI_CS_Disable(6);
 8001f10:	2006      	movs	r0, #6
 8001f12:	f7ff fa6d 	bl	80013f0 <SPI_CS_Disable>
  SPI_CS_Disable(7);
 8001f16:	2007      	movs	r0, #7
 8001f18:	f7ff fa6a 	bl	80013f0 <SPI_CS_Disable>

  checkError = NO_ERROR;
 8001f1c:	4aa7      	ldr	r2, [pc, #668]	; (80021bc <StartSensorTask+0x2d4>)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	7013      	strb	r3, [r2, #0]
  checkError = readBlockCRC(1);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff f96e 	bl	8001204 <readBlockCRC>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4aa4      	ldr	r2, [pc, #656]	; (80021bc <StartSensorTask+0x2d4>)
 8001f2c:	7013      	strb	r3, [r2, #0]
  if (checkError != NO_ERROR) errorCounter++;
 8001f2e:	4ba3      	ldr	r3, [pc, #652]	; (80021bc <StartSensorTask+0x2d4>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <StartSensorTask+0x5a>
 8001f36:	4ba2      	ldr	r3, [pc, #648]	; (80021c0 <StartSensorTask+0x2d8>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4aa0      	ldr	r2, [pc, #640]	; (80021c0 <StartSensorTask+0x2d8>)
 8001f40:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 fd58 	bl	80029f8 <HAL_Delay>

  checkError2 = NO_ERROR;
 8001f48:	4a9e      	ldr	r2, [pc, #632]	; (80021c4 <StartSensorTask+0x2dc>)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	7013      	strb	r3, [r2, #0]
  checkError2 = readBlockCRC(2);
 8001f4e:	2002      	movs	r0, #2
 8001f50:	f7ff f958 	bl	8001204 <readBlockCRC>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a9b      	ldr	r2, [pc, #620]	; (80021c4 <StartSensorTask+0x2dc>)
 8001f58:	7013      	strb	r3, [r2, #0]
  if (checkError2 != NO_ERROR) errorCounter++;
 8001f5a:	4b9a      	ldr	r3, [pc, #616]	; (80021c4 <StartSensorTask+0x2dc>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <StartSensorTask+0x86>
 8001f62:	4b97      	ldr	r3, [pc, #604]	; (80021c0 <StartSensorTask+0x2d8>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4a95      	ldr	r2, [pc, #596]	; (80021c0 <StartSensorTask+0x2d8>)
 8001f6c:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 fd42 	bl	80029f8 <HAL_Delay>

  checkError3 = NO_ERROR;
 8001f74:	4a94      	ldr	r2, [pc, #592]	; (80021c8 <StartSensorTask+0x2e0>)
 8001f76:	2300      	movs	r3, #0
 8001f78:	7013      	strb	r3, [r2, #0]
  checkError3 = readBlockCRC(3);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f7ff f942 	bl	8001204 <readBlockCRC>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4a91      	ldr	r2, [pc, #580]	; (80021c8 <StartSensorTask+0x2e0>)
 8001f84:	7013      	strb	r3, [r2, #0]
  if (checkError3 != NO_ERROR) errorCounter++;
 8001f86:	4b90      	ldr	r3, [pc, #576]	; (80021c8 <StartSensorTask+0x2e0>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <StartSensorTask+0xb2>
 8001f8e:	4b8c      	ldr	r3, [pc, #560]	; (80021c0 <StartSensorTask+0x2d8>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	4a8a      	ldr	r2, [pc, #552]	; (80021c0 <StartSensorTask+0x2d8>)
 8001f98:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f000 fd2c 	bl	80029f8 <HAL_Delay>

  checkError4 = NO_ERROR;
 8001fa0:	4a8a      	ldr	r2, [pc, #552]	; (80021cc <StartSensorTask+0x2e4>)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	7013      	strb	r3, [r2, #0]
  checkError4 = readBlockCRC(4);
 8001fa6:	2004      	movs	r0, #4
 8001fa8:	f7ff f92c 	bl	8001204 <readBlockCRC>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a87      	ldr	r2, [pc, #540]	; (80021cc <StartSensorTask+0x2e4>)
 8001fb0:	7013      	strb	r3, [r2, #0]
  if (checkError4 != NO_ERROR) errorCounter++;
 8001fb2:	4b86      	ldr	r3, [pc, #536]	; (80021cc <StartSensorTask+0x2e4>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <StartSensorTask+0xde>
 8001fba:	4b81      	ldr	r3, [pc, #516]	; (80021c0 <StartSensorTask+0x2d8>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	4a7f      	ldr	r2, [pc, #508]	; (80021c0 <StartSensorTask+0x2d8>)
 8001fc4:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f000 fd16 	bl	80029f8 <HAL_Delay>

  checkError5 = NO_ERROR;
 8001fcc:	4a80      	ldr	r2, [pc, #512]	; (80021d0 <StartSensorTask+0x2e8>)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	7013      	strb	r3, [r2, #0]
  checkError5 = readBlockCRC(5);
 8001fd2:	2005      	movs	r0, #5
 8001fd4:	f7ff f916 	bl	8001204 <readBlockCRC>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4a7d      	ldr	r2, [pc, #500]	; (80021d0 <StartSensorTask+0x2e8>)
 8001fdc:	7013      	strb	r3, [r2, #0]
  if (checkError5 != NO_ERROR) errorCounter++;
 8001fde:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <StartSensorTask+0x2e8>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <StartSensorTask+0x10a>
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <StartSensorTask+0x2d8>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4a74      	ldr	r2, [pc, #464]	; (80021c0 <StartSensorTask+0x2d8>)
 8001ff0:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 fd00 	bl	80029f8 <HAL_Delay>

  checkError6 = NO_ERROR;
 8001ff8:	4a76      	ldr	r2, [pc, #472]	; (80021d4 <StartSensorTask+0x2ec>)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	7013      	strb	r3, [r2, #0]
  checkError6 = readBlockCRC(6);
 8001ffe:	2006      	movs	r0, #6
 8002000:	f7ff f900 	bl	8001204 <readBlockCRC>
 8002004:	4603      	mov	r3, r0
 8002006:	4a73      	ldr	r2, [pc, #460]	; (80021d4 <StartSensorTask+0x2ec>)
 8002008:	7013      	strb	r3, [r2, #0]
  if (checkError6 != NO_ERROR) errorCounter++;
 800200a:	4b72      	ldr	r3, [pc, #456]	; (80021d4 <StartSensorTask+0x2ec>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <StartSensorTask+0x136>
 8002012:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <StartSensorTask+0x2d8>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	b29b      	uxth	r3, r3
 800201a:	4a69      	ldr	r2, [pc, #420]	; (80021c0 <StartSensorTask+0x2d8>)
 800201c:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 800201e:	2001      	movs	r0, #1
 8002020:	f000 fcea 	bl	80029f8 <HAL_Delay>

  checkError7 = NO_ERROR;
 8002024:	4a6c      	ldr	r2, [pc, #432]	; (80021d8 <StartSensorTask+0x2f0>)
 8002026:	2300      	movs	r3, #0
 8002028:	7013      	strb	r3, [r2, #0]
  checkError7 = readBlockCRC(7);
 800202a:	2007      	movs	r0, #7
 800202c:	f7ff f8ea 	bl	8001204 <readBlockCRC>
 8002030:	4603      	mov	r3, r0
 8002032:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <StartSensorTask+0x2f0>)
 8002034:	7013      	strb	r3, [r2, #0]
  if (checkError7 != NO_ERROR) errorCounter++;
 8002036:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <StartSensorTask+0x2f0>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <StartSensorTask+0x162>
 800203e:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <StartSensorTask+0x2d8>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	b29b      	uxth	r3, r3
 8002046:	4a5e      	ldr	r2, [pc, #376]	; (80021c0 <StartSensorTask+0x2d8>)
 8002048:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 800204a:	2001      	movs	r0, #1
 800204c:	f000 fcd4 	bl	80029f8 <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8002050:	200a      	movs	r0, #10
 8002052:	f007 ff9e 	bl	8009f92 <osDelay>

    checkError = NO_ERROR;
 8002056:	4a59      	ldr	r2, [pc, #356]	; (80021bc <StartSensorTask+0x2d4>)
 8002058:	2300      	movs	r3, #0
 800205a:	7013      	strb	r3, [r2, #0]
    checkError = getAngleValue(&angle1_raw,1);
 800205c:	2101      	movs	r1, #1
 800205e:	485f      	ldr	r0, [pc, #380]	; (80021dc <StartSensorTask+0x2f4>)
 8002060:	f7ff f948 	bl	80012f4 <getAngleValue>
 8002064:	4603      	mov	r3, r0
 8002066:	4a55      	ldr	r2, [pc, #340]	; (80021bc <StartSensorTask+0x2d4>)
 8002068:	7013      	strb	r3, [r2, #0]
    if (checkError != NO_ERROR) errorCounter++;
 800206a:	4b54      	ldr	r3, [pc, #336]	; (80021bc <StartSensorTask+0x2d4>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <StartSensorTask+0x196>
 8002072:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <StartSensorTask+0x2d8>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b29b      	uxth	r3, r3
 800207a:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <StartSensorTask+0x2d8>)
 800207c:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 800207e:	2001      	movs	r0, #1
 8002080:	f000 fcba 	bl	80029f8 <HAL_Delay>

    checkError2 = NO_ERROR;
 8002084:	4a4f      	ldr	r2, [pc, #316]	; (80021c4 <StartSensorTask+0x2dc>)
 8002086:	2300      	movs	r3, #0
 8002088:	7013      	strb	r3, [r2, #0]
    checkError2 = getAngleValue(&angle2_raw,2);
 800208a:	2102      	movs	r1, #2
 800208c:	4854      	ldr	r0, [pc, #336]	; (80021e0 <StartSensorTask+0x2f8>)
 800208e:	f7ff f931 	bl	80012f4 <getAngleValue>
 8002092:	4603      	mov	r3, r0
 8002094:	4a4b      	ldr	r2, [pc, #300]	; (80021c4 <StartSensorTask+0x2dc>)
 8002096:	7013      	strb	r3, [r2, #0]
    if (checkError2 != NO_ERROR) errorCounter++;
 8002098:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <StartSensorTask+0x2dc>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <StartSensorTask+0x1c4>
 80020a0:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <StartSensorTask+0x2d8>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4a45      	ldr	r2, [pc, #276]	; (80021c0 <StartSensorTask+0x2d8>)
 80020aa:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 fca3 	bl	80029f8 <HAL_Delay>

    checkError3 = NO_ERROR;
 80020b2:	4a45      	ldr	r2, [pc, #276]	; (80021c8 <StartSensorTask+0x2e0>)
 80020b4:	2300      	movs	r3, #0
 80020b6:	7013      	strb	r3, [r2, #0]
    checkError3 = getAngleValue(&angle3_raw,3);
 80020b8:	2103      	movs	r1, #3
 80020ba:	484a      	ldr	r0, [pc, #296]	; (80021e4 <StartSensorTask+0x2fc>)
 80020bc:	f7ff f91a 	bl	80012f4 <getAngleValue>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4a41      	ldr	r2, [pc, #260]	; (80021c8 <StartSensorTask+0x2e0>)
 80020c4:	7013      	strb	r3, [r2, #0]
    if (checkError3 != NO_ERROR) errorCounter++;
 80020c6:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <StartSensorTask+0x2e0>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <StartSensorTask+0x1f2>
 80020ce:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <StartSensorTask+0x2d8>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4a3a      	ldr	r2, [pc, #232]	; (80021c0 <StartSensorTask+0x2d8>)
 80020d8:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f000 fc8c 	bl	80029f8 <HAL_Delay>

    checkError4 = NO_ERROR;
 80020e0:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <StartSensorTask+0x2e4>)
 80020e2:	2300      	movs	r3, #0
 80020e4:	7013      	strb	r3, [r2, #0]
    checkError4 = getAngleValue(&angle4_raw,4);
 80020e6:	2104      	movs	r1, #4
 80020e8:	483f      	ldr	r0, [pc, #252]	; (80021e8 <StartSensorTask+0x300>)
 80020ea:	f7ff f903 	bl	80012f4 <getAngleValue>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a36      	ldr	r2, [pc, #216]	; (80021cc <StartSensorTask+0x2e4>)
 80020f2:	7013      	strb	r3, [r2, #0]
    if (checkError4 != NO_ERROR) errorCounter++;
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <StartSensorTask+0x2e4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <StartSensorTask+0x220>
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <StartSensorTask+0x2d8>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	4a2e      	ldr	r2, [pc, #184]	; (80021c0 <StartSensorTask+0x2d8>)
 8002106:	8013      	strh	r3, [r2, #0]

    checkError5 = NO_ERROR;
 8002108:	4a31      	ldr	r2, [pc, #196]	; (80021d0 <StartSensorTask+0x2e8>)
 800210a:	2300      	movs	r3, #0
 800210c:	7013      	strb	r3, [r2, #0]
    checkError5 = getAngleValue(&angle5_raw,5);
 800210e:	2105      	movs	r1, #5
 8002110:	4836      	ldr	r0, [pc, #216]	; (80021ec <StartSensorTask+0x304>)
 8002112:	f7ff f8ef 	bl	80012f4 <getAngleValue>
 8002116:	4603      	mov	r3, r0
 8002118:	4a2d      	ldr	r2, [pc, #180]	; (80021d0 <StartSensorTask+0x2e8>)
 800211a:	7013      	strb	r3, [r2, #0]
    if (checkError5 != NO_ERROR) errorCounter++;
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <StartSensorTask+0x2e8>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <StartSensorTask+0x248>
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <StartSensorTask+0x2d8>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	b29b      	uxth	r3, r3
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <StartSensorTask+0x2d8>)
 800212e:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8002130:	2001      	movs	r0, #1
 8002132:	f000 fc61 	bl	80029f8 <HAL_Delay>

    checkError6 = NO_ERROR;
 8002136:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <StartSensorTask+0x2ec>)
 8002138:	2300      	movs	r3, #0
 800213a:	7013      	strb	r3, [r2, #0]
    checkError6 = getAngleValue(&angle6_raw,6);
 800213c:	2106      	movs	r1, #6
 800213e:	482c      	ldr	r0, [pc, #176]	; (80021f0 <StartSensorTask+0x308>)
 8002140:	f7ff f8d8 	bl	80012f4 <getAngleValue>
 8002144:	4603      	mov	r3, r0
 8002146:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <StartSensorTask+0x2ec>)
 8002148:	7013      	strb	r3, [r2, #0]
    if (checkError6 != NO_ERROR) errorCounter++;
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <StartSensorTask+0x2ec>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d005      	beq.n	800215e <StartSensorTask+0x276>
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <StartSensorTask+0x2d8>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	b29b      	uxth	r3, r3
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <StartSensorTask+0x2d8>)
 800215c:	8013      	strh	r3, [r2, #0]

    checkError7 = NO_ERROR;
 800215e:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <StartSensorTask+0x2f0>)
 8002160:	2300      	movs	r3, #0
 8002162:	7013      	strb	r3, [r2, #0]
    checkError7 = getAngleValue(&angle7_raw,7);
 8002164:	2107      	movs	r1, #7
 8002166:	4823      	ldr	r0, [pc, #140]	; (80021f4 <StartSensorTask+0x30c>)
 8002168:	f7ff f8c4 	bl	80012f4 <getAngleValue>
 800216c:	4603      	mov	r3, r0
 800216e:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <StartSensorTask+0x2f0>)
 8002170:	7013      	strb	r3, [r2, #0]
    if (checkError7 != NO_ERROR) errorCounter++;
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <StartSensorTask+0x2f0>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d005      	beq.n	8002186 <StartSensorTask+0x29e>
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <StartSensorTask+0x2d8>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	3301      	adds	r3, #1
 8002180:	b29b      	uxth	r3, r3
 8002182:	4a0f      	ldr	r2, [pc, #60]	; (80021c0 <StartSensorTask+0x2d8>)
 8002184:	8013      	strh	r3, [r2, #0]


    // processing raw angles

    angle1_temp = angle1_raw - offset1;
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <StartSensorTask+0x2f4>)
 8002188:	e9d3 0100 	ldrd	r0, r1, [r3]
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <StartSensorTask+0x310>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe f879 	bl	8000288 <__aeabi_dsub>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <StartSensorTask+0x314>)
 80021a0:	e9c3 0100 	strd	r0, r1, [r3]
    if (angle1_temp >= 0){
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <StartSensorTask+0x314>)
 80021a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	f7fe fca7 	bl	8000b04 <__aeabi_dcmpge>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	e021      	b.n	8002200 <StartSensorTask+0x318>
 80021bc:	20000504 	.word	0x20000504
 80021c0:	2000050c 	.word	0x2000050c
 80021c4:	20000505 	.word	0x20000505
 80021c8:	20000506 	.word	0x20000506
 80021cc:	20000507 	.word	0x20000507
 80021d0:	20000508 	.word	0x20000508
 80021d4:	20000509 	.word	0x20000509
 80021d8:	2000050a 	.word	0x2000050a
 80021dc:	20000510 	.word	0x20000510
 80021e0:	20000518 	.word	0x20000518
 80021e4:	20000520 	.word	0x20000520
 80021e8:	20000528 	.word	0x20000528
 80021ec:	20000530 	.word	0x20000530
 80021f0:	20000538 	.word	0x20000538
 80021f4:	20000540 	.word	0x20000540
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000548 	.word	0x20000548
 8002200:	d006      	beq.n	8002210 <StartSensorTask+0x328>
    	angle1 = angle1_temp;
 8002202:	4b93      	ldr	r3, [pc, #588]	; (8002450 <StartSensorTask+0x568>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	4992      	ldr	r1, [pc, #584]	; (8002454 <StartSensorTask+0x56c>)
 800220a:	e9c1 2300 	strd	r2, r3, [r1]
 800220e:	e016      	b.n	800223e <StartSensorTask+0x356>
    }
    else{
    	angle1 = -1 * (360 - (360 + angle1_temp));
 8002210:	4b8f      	ldr	r3, [pc, #572]	; (8002450 <StartSensorTask+0x568>)
 8002212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b8f      	ldr	r3, [pc, #572]	; (8002458 <StartSensorTask+0x570>)
 800221c:	f7fe f836 	bl	800028c <__adddf3>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	f04f 0000 	mov.w	r0, #0
 8002228:	498b      	ldr	r1, [pc, #556]	; (8002458 <StartSensorTask+0x570>)
 800222a:	f7fe f82d 	bl	8000288 <__aeabi_dsub>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002238:	4b86      	ldr	r3, [pc, #536]	; (8002454 <StartSensorTask+0x56c>)
 800223a:	e9c3 4500 	strd	r4, r5, [r3]
    }

    angle2_temp = -1 * (angle2_raw - offset2);
 800223e:	4b87      	ldr	r3, [pc, #540]	; (800245c <StartSensorTask+0x574>)
 8002240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002244:	4b86      	ldr	r3, [pc, #536]	; (8002460 <StartSensorTask+0x578>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe f81d 	bl	8000288 <__aeabi_dsub>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4690      	mov	r8, r2
 8002254:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002258:	4b82      	ldr	r3, [pc, #520]	; (8002464 <StartSensorTask+0x57c>)
 800225a:	e9c3 8900 	strd	r8, r9, [r3]
    if (angle2_temp >= 0){
 800225e:	4b81      	ldr	r3, [pc, #516]	; (8002464 <StartSensorTask+0x57c>)
 8002260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	f7fe fc4a 	bl	8000b04 <__aeabi_dcmpge>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <StartSensorTask+0x39c>
    	angle2 = angle2_temp;
 8002276:	4b7b      	ldr	r3, [pc, #492]	; (8002464 <StartSensorTask+0x57c>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	497a      	ldr	r1, [pc, #488]	; (8002468 <StartSensorTask+0x580>)
 800227e:	e9c1 2300 	strd	r2, r3, [r1]
 8002282:	e016      	b.n	80022b2 <StartSensorTask+0x3ca>
    }
    else{
    	angle2 = -1 * (360 - (360 + angle2_temp));
 8002284:	4b77      	ldr	r3, [pc, #476]	; (8002464 <StartSensorTask+0x57c>)
 8002286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <StartSensorTask+0x570>)
 8002290:	f7fd fffc 	bl	800028c <__adddf3>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	496e      	ldr	r1, [pc, #440]	; (8002458 <StartSensorTask+0x570>)
 800229e:	f7fd fff3 	bl	8000288 <__aeabi_dsub>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4692      	mov	sl, r2
 80022a8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80022ac:	4b6e      	ldr	r3, [pc, #440]	; (8002468 <StartSensorTask+0x580>)
 80022ae:	e9c3 ab00 	strd	sl, fp, [r3]
    }

// PROBLÉMA
    angle3_temp = angle3_raw;
 80022b2:	4b6e      	ldr	r3, [pc, #440]	; (800246c <StartSensorTask+0x584>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	496d      	ldr	r1, [pc, #436]	; (8002470 <StartSensorTask+0x588>)
 80022ba:	e9c1 2300 	strd	r2, r3, [r1]
    if (angle3_temp >= 0){
 80022be:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <StartSensorTask+0x588>)
 80022c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	f7fe fc1a 	bl	8000b04 <__aeabi_dcmpge>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00f      	beq.n	80022f6 <StartSensorTask+0x40e>
    	angle3 = angle3_temp - offset3;
 80022d6:	4b66      	ldr	r3, [pc, #408]	; (8002470 <StartSensorTask+0x588>)
 80022d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <StartSensorTask+0x58c>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fd ffd1 	bl	8000288 <__aeabi_dsub>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	4b62      	ldr	r3, [pc, #392]	; (8002478 <StartSensorTask+0x590>)
 80022f0:	e9c3 0100 	strd	r0, r1, [r3]
 80022f4:	e00e      	b.n	8002314 <StartSensorTask+0x42c>
    }
    else{
    	angle3 = angle3_temp + offset3;
 80022f6:	4b5e      	ldr	r3, [pc, #376]	; (8002470 <StartSensorTask+0x588>)
 80022f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <StartSensorTask+0x58c>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fd ffc3 	bl	800028c <__adddf3>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <StartSensorTask+0x590>)
 8002310:	e9c3 0100 	strd	r0, r1, [r3]
    }
// PROBLÉMA

    angle4_temp = -1 * (angle4_raw - offset4);
 8002314:	4b59      	ldr	r3, [pc, #356]	; (800247c <StartSensorTask+0x594>)
 8002316:	e9d3 0100 	ldrd	r0, r1, [r3]
 800231a:	4b59      	ldr	r3, [pc, #356]	; (8002480 <StartSensorTask+0x598>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fd ffb2 	bl	8000288 <__aeabi_dsub>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	61ba      	str	r2, [r7, #24]
 800232a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	4b54      	ldr	r3, [pc, #336]	; (8002484 <StartSensorTask+0x59c>)
 8002332:	ed97 7b06 	vldr	d7, [r7, #24]
 8002336:	ed83 7b00 	vstr	d7, [r3]
    if (angle4_temp >= 0){
 800233a:	4b52      	ldr	r3, [pc, #328]	; (8002484 <StartSensorTask+0x59c>)
 800233c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002340:	f04f 0200 	mov.w	r2, #0
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	f7fe fbdc 	bl	8000b04 <__aeabi_dcmpge>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <StartSensorTask+0x478>
    	angle4 = angle4_temp;
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <StartSensorTask+0x59c>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	494b      	ldr	r1, [pc, #300]	; (8002488 <StartSensorTask+0x5a0>)
 800235a:	e9c1 2300 	strd	r2, r3, [r1]
 800235e:	e019      	b.n	8002394 <StartSensorTask+0x4ac>
    }
    else{
    	angle4 = -1 * (360 - (360 + angle4_temp));
 8002360:	4b48      	ldr	r3, [pc, #288]	; (8002484 <StartSensorTask+0x59c>)
 8002362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <StartSensorTask+0x570>)
 800236c:	f7fd ff8e 	bl	800028c <__adddf3>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	f04f 0000 	mov.w	r0, #0
 8002378:	4937      	ldr	r1, [pc, #220]	; (8002458 <StartSensorTask+0x570>)
 800237a:	f7fd ff85 	bl	8000288 <__aeabi_dsub>
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	613a      	str	r2, [r7, #16]
 8002384:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <StartSensorTask+0x5a0>)
 800238c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002390:	ed83 7b00 	vstr	d7, [r3]
    }

    angle5_temp = (angle5_raw - offset5);
 8002394:	4b3d      	ldr	r3, [pc, #244]	; (800248c <StartSensorTask+0x5a4>)
 8002396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <StartSensorTask+0x5a8>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	f7fd ff72 	bl	8000288 <__aeabi_dsub>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <StartSensorTask+0x5ac>)
 80023ae:	e9c3 0100 	strd	r0, r1, [r3]
	if (angle5_temp >= 0){
 80023b2:	4b38      	ldr	r3, [pc, #224]	; (8002494 <StartSensorTask+0x5ac>)
 80023b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	f7fe fba0 	bl	8000b04 <__aeabi_dcmpge>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <StartSensorTask+0x4f0>
		angle5 = angle5_temp;
 80023ca:	4b32      	ldr	r3, [pc, #200]	; (8002494 <StartSensorTask+0x5ac>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	4931      	ldr	r1, [pc, #196]	; (8002498 <StartSensorTask+0x5b0>)
 80023d2:	e9c1 2300 	strd	r2, r3, [r1]
 80023d6:	e015      	b.n	8002404 <StartSensorTask+0x51c>
	}
	else{
		angle5 = (360 - (360 + angle5_temp));
 80023d8:	4b2e      	ldr	r3, [pc, #184]	; (8002494 <StartSensorTask+0x5ac>)
 80023da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <StartSensorTask+0x570>)
 80023e4:	f7fd ff52 	bl	800028c <__adddf3>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	f04f 0000 	mov.w	r0, #0
 80023f0:	4919      	ldr	r1, [pc, #100]	; (8002458 <StartSensorTask+0x570>)
 80023f2:	f7fd ff49 	bl	8000288 <__aeabi_dsub>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	4b26      	ldr	r3, [pc, #152]	; (8002498 <StartSensorTask+0x5b0>)
 8002400:	e9c3 0100 	strd	r0, r1, [r3]
	}

	angle6_temp = -1 * (angle6_raw - offset6);
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <StartSensorTask+0x5b4>)
 8002406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240a:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <StartSensorTask+0x5b8>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fd ff3a 	bl	8000288 <__aeabi_dsub>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <StartSensorTask+0x5bc>)
 8002422:	ed97 7b02 	vldr	d7, [r7, #8]
 8002426:	ed83 7b00 	vstr	d7, [r3]
	if (angle6_temp >= 0){
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <StartSensorTask+0x5bc>)
 800242c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f7fe fb64 	bl	8000b04 <__aeabi_dcmpge>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d034      	beq.n	80024ac <StartSensorTask+0x5c4>
		angle6 = angle6_temp;
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <StartSensorTask+0x5bc>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	4917      	ldr	r1, [pc, #92]	; (80024a8 <StartSensorTask+0x5c0>)
 800244a:	e9c1 2300 	strd	r2, r3, [r1]
 800244e:	e047      	b.n	80024e0 <StartSensorTask+0x5f8>
 8002450:	20000548 	.word	0x20000548
 8002454:	20000580 	.word	0x20000580
 8002458:	40768000 	.word	0x40768000
 800245c:	20000518 	.word	0x20000518
 8002460:	20000008 	.word	0x20000008
 8002464:	20000550 	.word	0x20000550
 8002468:	20000588 	.word	0x20000588
 800246c:	20000520 	.word	0x20000520
 8002470:	20000558 	.word	0x20000558
 8002474:	20000010 	.word	0x20000010
 8002478:	20000590 	.word	0x20000590
 800247c:	20000528 	.word	0x20000528
 8002480:	20000018 	.word	0x20000018
 8002484:	20000560 	.word	0x20000560
 8002488:	20000598 	.word	0x20000598
 800248c:	20000530 	.word	0x20000530
 8002490:	20000020 	.word	0x20000020
 8002494:	20000568 	.word	0x20000568
 8002498:	200005a0 	.word	0x200005a0
 800249c:	20000538 	.word	0x20000538
 80024a0:	20000028 	.word	0x20000028
 80024a4:	20000570 	.word	0x20000570
 80024a8:	200005a8 	.word	0x200005a8
	}
	else{
		angle6 = -1 * (360 - (360 + angle6_temp));
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <StartSensorTask+0x65c>)
 80024ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <StartSensorTask+0x660>)
 80024b8:	f7fd fee8 	bl	800028c <__adddf3>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	f04f 0000 	mov.w	r0, #0
 80024c4:	4920      	ldr	r1, [pc, #128]	; (8002548 <StartSensorTask+0x660>)
 80024c6:	f7fd fedf 	bl	8000288 <__aeabi_dsub>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	603a      	str	r2, [r7, #0]
 80024d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <StartSensorTask+0x664>)
 80024d8:	ed97 7b00 	vldr	d7, [r7]
 80024dc:	ed83 7b00 	vstr	d7, [r3]
	}

	angle7_temp = (angle7_raw - offset7);
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <StartSensorTask+0x668>)
 80024e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <StartSensorTask+0x66c>)
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f7fd fecc 	bl	8000288 <__aeabi_dsub>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <StartSensorTask+0x670>)
 80024fa:	e9c3 0100 	strd	r0, r1, [r3]
	if (angle7_temp >= 0){
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <StartSensorTask+0x670>)
 8002500:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	f7fe fafa 	bl	8000b04 <__aeabi_dcmpge>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <StartSensorTask+0x63c>
		angle7 = angle7_temp;
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <StartSensorTask+0x670>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	490f      	ldr	r1, [pc, #60]	; (800255c <StartSensorTask+0x674>)
 800251e:	e9c1 2300 	strd	r2, r3, [r1]
 8002522:	e595      	b.n	8002050 <StartSensorTask+0x168>
	}
	else{
		angle7 = (360 + angle7_temp);
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <StartSensorTask+0x670>)
 8002526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <StartSensorTask+0x660>)
 8002530:	f7fd feac 	bl	800028c <__adddf3>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <StartSensorTask+0x674>)
 800253e:	e9c3 0100 	strd	r0, r1, [r3]
    osDelay(10);
 8002542:	e585      	b.n	8002050 <StartSensorTask+0x168>
 8002544:	20000570 	.word	0x20000570
 8002548:	40768000 	.word	0x40768000
 800254c:	200005a8 	.word	0x200005a8
 8002550:	20000540 	.word	0x20000540
 8002554:	200005b8 	.word	0x200005b8
 8002558:	20000578 	.word	0x20000578
 800255c:	200005b0 	.word	0x200005b0

08002560 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void const * argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8002568:	200a      	movs	r0, #10
 800256a:	f007 fd12 	bl	8009f92 <osDelay>
 800256e:	e7fb      	b.n	8002568 <StartMotorTask+0x8>

08002570 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002582:	f000 fa19 	bl	80029b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40000800 	.word	0x40000800

08002594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_MspInit+0x54>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_MspInit+0x54>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_MspInit+0x54>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_MspInit+0x54>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_MspInit+0x54>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_MspInit+0x54>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025e2:	2200      	movs	r2, #0
 80025e4:	210f      	movs	r1, #15
 80025e6:	f06f 0001 	mvn.w	r0, #1
 80025ea:	f000 fae1 	bl	8002bb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	; 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	; (8002680 <HAL_SPI_MspInit+0x84>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d12b      	bne.n	8002676 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b18      	ldr	r3, [pc, #96]	; (8002684 <HAL_SPI_MspInit+0x88>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HAL_SPI_MspInit+0x88>)
 8002628:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_SPI_MspInit+0x88>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_SPI_MspInit+0x88>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_SPI_MspInit+0x88>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_SPI_MspInit+0x88>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002656:	23a0      	movs	r3, #160	; 0xa0
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002666:	2305      	movs	r3, #5
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	; (8002688 <HAL_SPI_MspInit+0x8c>)
 8002672:	f000 fac7 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	; 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40013000 	.word	0x40013000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d10d      	bne.n	80026ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_TIM_PWM_MspInit+0x40>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <HAL_TIM_PWM_MspInit+0x40>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_TIM_PWM_MspInit+0x40>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40023800 	.word	0x40023800

080026d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_TIM_MspPostInit+0x68>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d11e      	bne.n	8002730 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_TIM_MspPostInit+0x6c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_TIM_MspPostInit+0x6c>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_TIM_MspPostInit+0x6c>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800270e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002712:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002720:	2301      	movs	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	4619      	mov	r1, r3
 800272a:	4805      	ldr	r0, [pc, #20]	; (8002740 <HAL_TIM_MspPostInit+0x70>)
 800272c:	f000 fa6a 	bl	8002c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002730:	bf00      	nop
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40010000 	.word	0x40010000
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000

08002744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	; 0x38
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	4b33      	ldr	r3, [pc, #204]	; (8002828 <HAL_InitTick+0xe4>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a32      	ldr	r2, [pc, #200]	; (8002828 <HAL_InitTick+0xe4>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
 8002764:	4b30      	ldr	r3, [pc, #192]	; (8002828 <HAL_InitTick+0xe4>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002770:	f107 0210 	add.w	r2, r7, #16
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f002 fafa 	bl	8004d74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800278a:	f002 fadf 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 800278e:	6378      	str	r0, [r7, #52]	; 0x34
 8002790:	e004      	b.n	800279c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002792:	f002 fadb 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8002796:	4603      	mov	r3, r0
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	4a23      	ldr	r2, [pc, #140]	; (800282c <HAL_InitTick+0xe8>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	0c9b      	lsrs	r3, r3, #18
 80027a6:	3b01      	subs	r3, #1
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_InitTick+0xec>)
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <HAL_InitTick+0xf0>)
 80027ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_InitTick+0xec>)
 80027b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027b6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_InitTick+0xec>)
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_InitTick+0xec>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_InitTick+0xec>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_InitTick+0xec>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80027d0:	4817      	ldr	r0, [pc, #92]	; (8002830 <HAL_InitTick+0xec>)
 80027d2:	f003 f8a9 	bl	8005928 <HAL_TIM_Base_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80027dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d11b      	bne.n	800281c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80027e4:	4812      	ldr	r0, [pc, #72]	; (8002830 <HAL_InitTick+0xec>)
 80027e6:	f003 f8f9 	bl	80059dc <HAL_TIM_Base_Start_IT>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80027f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d111      	bne.n	800281c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027f8:	201e      	movs	r0, #30
 80027fa:	f000 f9f5 	bl	8002be8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b0f      	cmp	r3, #15
 8002802:	d808      	bhi.n	8002816 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002804:	2200      	movs	r2, #0
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	201e      	movs	r0, #30
 800280a:	f000 f9d1 	bl	8002bb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_InitTick+0xf4>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e002      	b.n	800281c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800281c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002820:	4618      	mov	r0, r3
 8002822:	3738      	adds	r7, #56	; 0x38
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	431bde83 	.word	0x431bde83
 8002830:	200007d0 	.word	0x200007d0
 8002834:	40000800 	.word	0x40000800
 8002838:	20000038 	.word	0x20000038

0800283c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002840:	e7fe      	b.n	8002840 <NMI_Handler+0x4>

08002842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002842:	b480      	push	{r7}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002846:	e7fe      	b.n	8002846 <HardFault_Handler+0x4>

08002848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800284c:	e7fe      	b.n	800284c <MemManage_Handler+0x4>

0800284e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002852:	e7fe      	b.n	8002852 <BusFault_Handler+0x4>

08002854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002858:	e7fe      	b.n	8002858 <UsageFault_Handler+0x4>

0800285a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800286c:	4802      	ldr	r0, [pc, #8]	; (8002878 <TIM4_IRQHandler+0x10>)
 800286e:	f003 fa17 	bl	8005ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200007d0 	.word	0x200007d0

0800287c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002880:	4802      	ldr	r0, [pc, #8]	; (800288c <OTG_FS_IRQHandler+0x10>)
 8002882:	f000 fcc6 	bl	8003212 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20005a54 	.word	0x20005a54

08002890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002898:	4a14      	ldr	r2, [pc, #80]	; (80028ec <_sbrk+0x5c>)
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <_sbrk+0x60>)
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a4:	4b13      	ldr	r3, [pc, #76]	; (80028f4 <_sbrk+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <_sbrk+0x64>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <_sbrk+0x68>)
 80028b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d207      	bcs.n	80028d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c0:	f009 fb34 	bl	800bf2c <__errno>
 80028c4:	4603      	mov	r3, r0
 80028c6:	220c      	movs	r2, #12
 80028c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	e009      	b.n	80028e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d6:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <_sbrk+0x64>)
 80028e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20018000 	.word	0x20018000
 80028f0:	00000400 	.word	0x00000400
 80028f4:	20000818 	.word	0x20000818
 80028f8:	200062c8 	.word	0x200062c8

080028fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002900:	4b06      	ldr	r3, [pc, #24]	; (800291c <SystemInit+0x20>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <SystemInit+0x20>)
 8002908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800290c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002924:	480d      	ldr	r0, [pc, #52]	; (800295c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002926:	490e      	ldr	r1, [pc, #56]	; (8002960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002928:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800293c:	4c0b      	ldr	r4, [pc, #44]	; (800296c <LoopFillZerobss+0x26>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800294a:	f7ff ffd7 	bl	80028fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800294e:	f009 faf3 	bl	800bf38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002952:	f7fe fdb9 	bl	80014c8 <main>
  bx  lr    
 8002956:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002958:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8002964:	0800c9fc 	.word	0x0800c9fc
  ldr r2, =_sbss
 8002968:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 800296c:	200062c8 	.word	0x200062c8

08002970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC_IRQHandler>
	...

08002974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002978:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <HAL_Init+0x40>)
 800297e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HAL_Init+0x40>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_Init+0x40>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 f8fc 	bl	8002b9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	200f      	movs	r0, #15
 80029a4:	f7ff fece 	bl	8002744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fdfc 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023c00 	.word	0x40023c00

080029b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_IncTick+0x20>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_IncTick+0x24>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	4a04      	ldr	r2, [pc, #16]	; (80029dc <HAL_IncTick+0x24>)
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000003c 	.word	0x2000003c
 80029dc:	2000081c 	.word	0x2000081c

080029e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return uwTick;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_GetTick+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	2000081c 	.word	0x2000081c

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff ffee 	bl	80029e0 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a10:	d005      	beq.n	8002a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <HAL_Delay+0x44>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a1e:	bf00      	nop
 8002a20:	f7ff ffde 	bl	80029e0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8f7      	bhi.n	8002a20 <HAL_Delay+0x28>
  {
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	2000003c 	.word	0x2000003c

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4907      	ldr	r1, [pc, #28]	; (8002adc <__NVIC_EnableIRQ+0x38>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff ff4c 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc2:	f7ff ff61 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002bc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	6978      	ldr	r0, [r7, #20]
 8002bce:	f7ff ffb1 	bl	8002b34 <NVIC_EncodePriority>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff80 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff54 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e159      	b.n	8002ed4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	f040 8148 	bne.w	8002ece <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d005      	beq.n	8002c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d130      	bne.n	8002cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 0201 	and.w	r2, r3, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d017      	beq.n	8002cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d123      	bne.n	8002d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	08da      	lsrs	r2, r3, #3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3208      	adds	r2, #8
 8002d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	220f      	movs	r2, #15
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	08da      	lsrs	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3208      	adds	r2, #8
 8002d42:	69b9      	ldr	r1, [r7, #24]
 8002d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0203 	and.w	r2, r3, #3
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a2 	beq.w	8002ece <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b57      	ldr	r3, [pc, #348]	; (8002eec <HAL_GPIO_Init+0x2e8>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	4a56      	ldr	r2, [pc, #344]	; (8002eec <HAL_GPIO_Init+0x2e8>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9a:	4b54      	ldr	r3, [pc, #336]	; (8002eec <HAL_GPIO_Init+0x2e8>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da6:	4a52      	ldr	r2, [pc, #328]	; (8002ef0 <HAL_GPIO_Init+0x2ec>)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a49      	ldr	r2, [pc, #292]	; (8002ef4 <HAL_GPIO_Init+0x2f0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d019      	beq.n	8002e06 <HAL_GPIO_Init+0x202>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a48      	ldr	r2, [pc, #288]	; (8002ef8 <HAL_GPIO_Init+0x2f4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_Init+0x1fe>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a47      	ldr	r2, [pc, #284]	; (8002efc <HAL_GPIO_Init+0x2f8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00d      	beq.n	8002dfe <HAL_GPIO_Init+0x1fa>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a46      	ldr	r2, [pc, #280]	; (8002f00 <HAL_GPIO_Init+0x2fc>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <HAL_GPIO_Init+0x1f6>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a45      	ldr	r2, [pc, #276]	; (8002f04 <HAL_GPIO_Init+0x300>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_GPIO_Init+0x1f2>
 8002df2:	2304      	movs	r3, #4
 8002df4:	e008      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002df6:	2307      	movs	r3, #7
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e004      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x204>
 8002e06:	2300      	movs	r3, #0
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f002 0203 	and.w	r2, r2, #3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4093      	lsls	r3, r2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e18:	4935      	ldr	r1, [pc, #212]	; (8002ef0 <HAL_GPIO_Init+0x2ec>)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e26:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4a:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e50:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e74:	4a24      	ldr	r2, [pc, #144]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e7a:	4b23      	ldr	r3, [pc, #140]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9e:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec8:	4a0f      	ldr	r2, [pc, #60]	; (8002f08 <HAL_GPIO_Init+0x304>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	f67f aea2 	bls.w	8002c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40013c00 	.word	0x40013c00

08002f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f1c:	787b      	ldrb	r3, [r7, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f28:	e003      	b.n	8002f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	041a      	lsls	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	619a      	str	r2, [r3, #24]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f50:	887a      	ldrh	r2, [r7, #2]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	041a      	lsls	r2, r3, #16
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43d9      	mvns	r1, r3
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	400b      	ands	r3, r1
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	619a      	str	r2, [r3, #24]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f74:	b08f      	sub	sp, #60	; 0x3c
 8002f76:	af0a      	add	r7, sp, #40	; 0x28
 8002f78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e10f      	b.n	80031a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f008 fc1e 	bl	800b7e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f003 fc79 	bl	80068ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	687e      	ldr	r6, [r7, #4]
 8002fd0:	466d      	mov	r5, sp
 8002fd2:	f106 0410 	add.w	r4, r6, #16
 8002fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fe2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fe6:	1d33      	adds	r3, r6, #4
 8002fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fea:	6838      	ldr	r0, [r7, #0]
 8002fec:	f003 fb50 	bl	8006690 <USB_CoreInit>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0d0      	b.n	80031a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fc67 	bl	80068dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	e04a      	b.n	80030aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	333d      	adds	r3, #61	; 0x3d
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	333c      	adds	r3, #60	; 0x3c
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	b298      	uxth	r0, r3
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3344      	adds	r3, #68	; 0x44
 8003050:	4602      	mov	r2, r0
 8003052:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	3340      	adds	r3, #64	; 0x40
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3348      	adds	r3, #72	; 0x48
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	334c      	adds	r3, #76	; 0x4c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3354      	adds	r3, #84	; 0x54
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	3301      	adds	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
 80030aa:	7bfa      	ldrb	r2, [r7, #15]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d3af      	bcc.n	8003014 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e044      	b.n	8003144 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030ba:	7bfa      	ldrb	r2, [r7, #15]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	3301      	adds	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	429a      	cmp	r2, r3
 800314c:	d3b5      	bcc.n	80030ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	687e      	ldr	r6, [r7, #4]
 8003156:	466d      	mov	r5, sp
 8003158:	f106 0410 	add.w	r4, r6, #16
 800315c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800315e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003164:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003168:	e885 0003 	stmia.w	r5, {r0, r1}
 800316c:	1d33      	adds	r3, r6, #4
 800316e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003170:	6838      	ldr	r0, [r7, #0]
 8003172:	f003 fbff 	bl	8006974 <USB_DevInit>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e00d      	b.n	80031a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f004 fd4e 	bl	8007c3e <USB_DevDisconnect>

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_PCD_Start+0x1c>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e020      	b.n	800320a <HAL_PCD_Start+0x5e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d109      	bne.n	80031ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d005      	beq.n	80031ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 fb51 	bl	8006898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 fcfe 	bl	8007bfc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003212:	b590      	push	{r4, r7, lr}
 8003214:	b08d      	sub	sp, #52	; 0x34
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f004 fdbc 	bl	8007da6 <USB_GetMode>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 848a 	bne.w	8003b4a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f004 fd20 	bl	8007c80 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8480 	beq.w	8003b48 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f004 fd0d 	bl	8007c80 <USB_ReadInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d107      	bne.n	8003280 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f002 0202 	and.w	r2, r2, #2
 800327e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f004 fcfb 	bl	8007c80 <USB_ReadInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b10      	cmp	r3, #16
 8003292:	d161      	bne.n	8003358 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0210 	bic.w	r2, r2, #16
 80032a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	0c5b      	lsrs	r3, r3, #17
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d124      	bne.n	800331a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d035      	beq.n	8003348 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6a38      	ldr	r0, [r7, #32]
 80032f0:	f004 fb32 	bl	8007958 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003300:	441a      	add	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	6a1a      	ldr	r2, [r3, #32]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003312:	441a      	add	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	621a      	str	r2, [r3, #32]
 8003318:	e016      	b.n	8003348 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	0c5b      	lsrs	r3, r3, #17
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	2b06      	cmp	r3, #6
 8003324:	d110      	bne.n	8003348 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800332c:	2208      	movs	r2, #8
 800332e:	4619      	mov	r1, r3
 8003330:	6a38      	ldr	r0, [r7, #32]
 8003332:	f004 fb11 	bl	8007958 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	6a1a      	ldr	r2, [r3, #32]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003342:	441a      	add	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0210 	orr.w	r2, r2, #16
 8003356:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fc8f 	bl	8007c80 <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003368:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800336c:	f040 80a7 	bne.w	80034be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f004 fc94 	bl	8007ca6 <USB_ReadDevAllOutEpInterrupt>
 800337e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003380:	e099      	b.n	80034b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808e 	beq.w	80034aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f004 fcb8 	bl	8007d0e <USB_ReadDevOutEPInterrupt>
 800339e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b6:	461a      	mov	r2, r3
 80033b8:	2301      	movs	r3, #1
 80033ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fec2 	bl	8004148 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	461a      	mov	r2, r3
 80033dc:	2308      	movs	r3, #8
 80033de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 ff98 	bl	8004318 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	2310      	movs	r3, #16
 8003402:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d030      	beq.n	8003470 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b80      	cmp	r3, #128	; 0x80
 8003418:	d109      	bne.n	800342e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800342e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4413      	add	r3, r2
 8003440:	3304      	adds	r3, #4
 8003442:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	78db      	ldrb	r3, [r3, #3]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d108      	bne.n	800345e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f008 fac7 	bl	800b9ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	2302      	movs	r3, #2
 800346e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003486:	461a      	mov	r2, r3
 8003488:	2320      	movs	r3, #32
 800348a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	3301      	adds	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f47f af62 	bne.w	8003382 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 fbdc 	bl	8007c80 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034d2:	f040 80db 	bne.w	800368c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f004 fbfd 	bl	8007cda <USB_ReadDevAllInEpInterrupt>
 80034e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034e6:	e0cd      	b.n	8003684 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80c2 	beq.w	8003678 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f004 fc23 	bl	8007d4a <USB_ReadDevInEPInterrupt>
 8003504:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d057      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	2201      	movs	r2, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	69f9      	ldr	r1, [r7, #28]
 800352c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003530:	4013      	ands	r3, r2
 8003532:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003540:	461a      	mov	r2, r3
 8003542:	2301      	movs	r3, #1
 8003544:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d132      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334c      	adds	r3, #76	; 0x4c
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4403      	add	r3, r0
 800356e:	3348      	adds	r3, #72	; 0x48
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4419      	add	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4403      	add	r3, r0
 8003582:	334c      	adds	r3, #76	; 0x4c
 8003584:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	2b00      	cmp	r3, #0
 800358a:	d113      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x3a2>
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3354      	adds	r3, #84	; 0x54
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035ac:	461a      	mov	r2, r3
 80035ae:	2101      	movs	r1, #1
 80035b0:	f004 fc2a 	bl	8007e08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f008 f991 	bl	800b8e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	461a      	mov	r2, r3
 80035d8:	2308      	movs	r3, #8
 80035da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f2:	461a      	mov	r2, r3
 80035f4:	2310      	movs	r3, #16
 80035f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360e:	461a      	mov	r2, r3
 8003610:	2340      	movs	r3, #64	; 0x40
 8003612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d023      	beq.n	8003666 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800361e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003620:	6a38      	ldr	r0, [r7, #32]
 8003622:	f003 fb0b 	bl	8006c3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	3338      	adds	r3, #56	; 0x38
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	3304      	adds	r3, #4
 8003638:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f008 f9de 	bl	800ba10 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003660:	461a      	mov	r2, r3
 8003662:	2302      	movs	r3, #2
 8003664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fcdb 	bl	800402e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	3301      	adds	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	f47f af2e 	bne.w	80034e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f004 faf5 	bl	8007c80 <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800369c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036a0:	d122      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d108      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036c8:	2100      	movs	r1, #0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fec2 	bl	8004454 <HAL_PCDEx_LPM_Callback>
 80036d0:	e002      	b.n	80036d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f008 f97c 	bl	800b9d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 fac7 	bl	8007c80 <USB_ReadInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fc:	d112      	bne.n	8003724 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f008 f938 	bl	800b984 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003722:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f004 faa9 	bl	8007c80 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003738:	f040 80b7 	bne.w	80038aa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2110      	movs	r1, #16
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fa70 	bl	8006c3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003760:	e046      	b.n	80037f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	461a      	mov	r2, r3
 8003770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003774:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003794:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ec:	3301      	adds	r3, #1
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d3b3      	bcc.n	8003762 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003808:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800380c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	2b00      	cmp	r3, #0
 8003814:	d016      	beq.n	8003844 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003826:	f043 030b 	orr.w	r3, r3, #11
 800382a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800383c:	f043 030b 	orr.w	r3, r3, #11
 8003840:	6453      	str	r3, [r2, #68]	; 0x44
 8003842:	e015      	b.n	8003870 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003852:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003856:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800385a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800386a:	f043 030b 	orr.w	r3, r3, #11
 800386e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800387e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003882:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003894:	461a      	mov	r2, r3
 8003896:	f004 fab7 	bl	8007e08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f004 f9e6 	bl	8007c80 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038be:	d124      	bne.n	800390a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f004 fa7c 	bl	8007dc2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f003 fa31 	bl	8006d36 <USB_GetDevSpeed>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681c      	ldr	r4, [r3, #0]
 80038e0:	f001 fa28 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 80038e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	4620      	mov	r0, r4
 80038f0:	f002 ff30 	bl	8006754 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f008 f81c 	bl	800b932 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003908:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f004 f9b6 	bl	8007c80 <USB_ReadInterrupts>
 8003914:	4603      	mov	r3, r0
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b08      	cmp	r3, #8
 800391c:	d10a      	bne.n	8003934 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f007 fff9 	bl	800b916 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695a      	ldr	r2, [r3, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f002 0208 	and.w	r2, r2, #8
 8003932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f004 f9a1 	bl	8007c80 <USB_ReadInterrupts>
 800393e:	4603      	mov	r3, r0
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b80      	cmp	r3, #128	; 0x80
 8003946:	d122      	bne.n	800398e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003954:	2301      	movs	r3, #1
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
 8003958:	e014      	b.n	8003984 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fb27 	bl	8003fcc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	3301      	adds	r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398a:	429a      	cmp	r2, r3
 800398c:	d3e5      	bcc.n	800395a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f004 f974 	bl	8007c80 <USB_ReadInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800399e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a2:	d13b      	bne.n	8003a1c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
 80039a8:	e02b      	b.n	8003a02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3340      	adds	r3, #64	; 0x40
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d115      	bne.n	80039fc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da12      	bge.n	80039fc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	333f      	adds	r3, #63	; 0x3f
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fae8 	bl	8003fcc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	3301      	adds	r3, #1
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d3ce      	bcc.n	80039aa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 f92d 	bl	8007c80 <USB_ReadInterrupts>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a30:	d155      	bne.n	8003ade <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a32:	2301      	movs	r3, #1
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
 8003a36:	e045      	b.n	8003ac4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d12e      	bne.n	8003abe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	da2b      	bge.n	8003abe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d121      	bne.n	8003abe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aba:	6053      	str	r3, [r2, #4]
            break;
 8003abc:	e007      	b.n	8003ace <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d3b4      	bcc.n	8003a38 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f004 f8cc 	bl	8007c80 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af2:	d10a      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f007 ff9d 	bl	800ba34 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f004 f8b6 	bl	8007c80 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d115      	bne.n	8003b4a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f007 ff8d 	bl	800ba50 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	e000      	b.n	8003b4a <HAL_PCD_IRQHandler+0x938>
      return;
 8003b48:	bf00      	nop
    }
  }
}
 8003b4a:	3734      	adds	r7, #52	; 0x34
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd90      	pop	{r4, r7, pc}

08003b50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_PCD_SetAddress+0x1a>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e013      	b.n	8003b92 <HAL_PCD_SetAddress+0x42>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f004 f814 	bl	8007bb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	4608      	mov	r0, r1
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4603      	mov	r3, r0
 8003baa:	70fb      	strb	r3, [r7, #3]
 8003bac:	460b      	mov	r3, r1
 8003bae:	803b      	strh	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da0f      	bge.n	8003be0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc0:	78fb      	ldrb	r3, [r7, #3]
 8003bc2:	f003 020f 	and.w	r2, r3, #15
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	3338      	adds	r3, #56	; 0x38
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	705a      	strb	r2, [r3, #1]
 8003bde:	e00f      	b.n	8003c00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	f003 020f 	and.w	r2, r3, #15
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c0c:	883a      	ldrh	r2, [r7, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	78ba      	ldrb	r2, [r7, #2]
 8003c16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c2a:	78bb      	ldrb	r3, [r7, #2]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d102      	bne.n	8003c36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_PCD_EP_Open+0xaa>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e00e      	b.n	8003c62 <HAL_PCD_EP_Open+0xc8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68f9      	ldr	r1, [r7, #12]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f003 f894 	bl	8006d80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c60:	7afb      	ldrb	r3, [r7, #11]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b084      	sub	sp, #16
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	da0f      	bge.n	8003c9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	f003 020f 	and.w	r2, r3, #15
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3338      	adds	r3, #56	; 0x38
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	3304      	adds	r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	705a      	strb	r2, [r3, #1]
 8003c9c:	e00f      	b.n	8003cbe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_PCD_EP_Close+0x6e>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e00e      	b.n	8003cf6 <HAL_PCD_EP_Close+0x8c>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f003 f8d2 	bl	8006e90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	607a      	str	r2, [r7, #4]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d0e:	7afb      	ldrb	r3, [r7, #11]
 8003d10:	f003 020f 	and.w	r2, r3, #15
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	3304      	adds	r3, #4
 8003d26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2200      	movs	r2, #0
 8003d38:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d40:	7afb      	ldrb	r3, [r7, #11]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d5a:	7afb      	ldrb	r3, [r7, #11]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	f003 fbb1 	bl	80074d8 <USB_EP0StartXfer>
 8003d76:	e008      	b.n	8003d8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	6979      	ldr	r1, [r7, #20]
 8003d86:	f003 f95f 	bl	8007048 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003db6:	681b      	ldr	r3, [r3, #0]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	f003 020f 	and.w	r2, r3, #15
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	3338      	adds	r3, #56	; 0x38
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	3304      	adds	r3, #4
 8003dea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2201      	movs	r2, #1
 8003e02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e04:	7afb      	ldrb	r3, [r7, #11]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d102      	bne.n	8003e1e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e1e:	7afb      	ldrb	r3, [r7, #11]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d109      	bne.n	8003e3c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	6979      	ldr	r1, [r7, #20]
 8003e36:	f003 fb4f 	bl	80074d8 <USB_EP0StartXfer>
 8003e3a:	e008      	b.n	8003e4e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	6979      	ldr	r1, [r7, #20]
 8003e4a:	f003 f8fd 	bl	8007048 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	f003 020f 	and.w	r2, r3, #15
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d901      	bls.n	8003e76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e050      	b.n	8003f18 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	da0f      	bge.n	8003e9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	f003 020f 	and.w	r2, r3, #15
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	3338      	adds	r3, #56	; 0x38
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	3304      	adds	r3, #4
 8003e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	705a      	strb	r2, [r3, #1]
 8003e9c:	e00d      	b.n	8003eba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e9e:	78fa      	ldrb	r2, [r7, #3]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4413      	add	r3, r2
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_PCD_EP_SetStall+0x82>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e01e      	b.n	8003f18 <HAL_PCD_EP_SetStall+0xc0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f003 fd8d 	bl	8007a08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	b2d9      	uxtb	r1, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f003 ff7d 	bl	8007e08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	f003 020f 	and.w	r2, r3, #15
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d901      	bls.n	8003f3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e042      	b.n	8003fc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da0f      	bge.n	8003f66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	3338      	adds	r3, #56	; 0x38
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	705a      	strb	r2, [r3, #1]
 8003f64:	e00f      	b.n	8003f86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	f003 020f 	and.w	r2, r3, #15
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_PCD_EP_ClrStall+0x86>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e00e      	b.n	8003fc4 <HAL_PCD_EP_ClrStall+0xa4>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68f9      	ldr	r1, [r7, #12]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f003 fd95 	bl	8007ae4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	da0c      	bge.n	8003ffa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	f003 020f 	and.w	r2, r3, #15
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	3338      	adds	r3, #56	; 0x38
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	e00c      	b.n	8004014 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68f9      	ldr	r1, [r7, #12]
 800401a:	4618      	mov	r0, r3
 800401c:	f003 fbb4 	bl	8007788 <USB_EPStopXfer>
 8004020:	4603      	mov	r3, r0
 8004022:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004024:	7afb      	ldrb	r3, [r7, #11]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b08a      	sub	sp, #40	; 0x28
 8004032:	af02      	add	r7, sp, #8
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	3338      	adds	r3, #56	; 0x38
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	3304      	adds	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	429a      	cmp	r2, r3
 8004060:	d901      	bls.n	8004066 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e06c      	b.n	8004140 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	429a      	cmp	r2, r3
 800407a:	d902      	bls.n	8004082 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3303      	adds	r3, #3
 8004086:	089b      	lsrs	r3, r3, #2
 8004088:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800408a:	e02b      	b.n	80040e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	699a      	ldr	r2, [r3, #24]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d902      	bls.n	80040a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	3303      	adds	r3, #3
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6919      	ldr	r1, [r3, #16]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	4603      	mov	r3, r0
 80040c6:	6978      	ldr	r0, [r7, #20]
 80040c8:	f003 fc08 	bl	80078dc <USB_WritePacket>

    ep->xfer_buff  += len;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	441a      	add	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	441a      	add	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d809      	bhi.n	800410e <PCD_WriteEmptyTxFifo+0xe0>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a1a      	ldr	r2, [r3, #32]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004102:	429a      	cmp	r2, r3
 8004104:	d203      	bcs.n	800410e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1be      	bne.n	800408c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	429a      	cmp	r2, r3
 8004118:	d811      	bhi.n	800413e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	2201      	movs	r2, #1
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	43db      	mvns	r3, r3
 8004134:	6939      	ldr	r1, [r7, #16]
 8004136:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800413a:	4013      	ands	r3, r2
 800413c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	333c      	adds	r3, #60	; 0x3c
 8004160:	3304      	adds	r3, #4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d17b      	bne.n	8004276 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d015      	beq.n	80041b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4a61      	ldr	r2, [pc, #388]	; (8004310 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	f240 80b9 	bls.w	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80b3 	beq.w	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	461a      	mov	r2, r3
 80041ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b0:	6093      	str	r3, [r2, #8]
 80041b2:	e0a7      	b.n	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ca:	461a      	mov	r2, r3
 80041cc:	2320      	movs	r3, #32
 80041ce:	6093      	str	r3, [r2, #8]
 80041d0:	e098      	b.n	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 8093 	bne.w	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	4a4b      	ldr	r2, [pc, #300]	; (8004310 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d90f      	bls.n	8004206 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fc:	461a      	mov	r2, r3
 80041fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004202:	6093      	str	r3, [r2, #8]
 8004204:	e07e      	b.n	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	3304      	adds	r3, #4
 800421a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	0159      	lsls	r1, r3, #5
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	440b      	add	r3, r1
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d114      	bne.n	8004268 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d109      	bne.n	800425a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004250:	461a      	mov	r2, r3
 8004252:	2101      	movs	r1, #1
 8004254:	f003 fdd8 	bl	8007e08 <USB_EP0_OutStart>
 8004258:	e006      	b.n	8004268 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	441a      	add	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4619      	mov	r1, r3
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f007 fb1c 	bl	800b8ac <HAL_PCD_DataOutStageCallback>
 8004274:	e046      	b.n	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4a26      	ldr	r2, [pc, #152]	; (8004314 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d124      	bne.n	80042c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	461a      	mov	r2, r3
 8004296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	e032      	b.n	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	461a      	mov	r2, r3
 80042b6:	2320      	movs	r3, #32
 80042b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f007 faf3 	bl	800b8ac <HAL_PCD_DataOutStageCallback>
 80042c6:	e01d      	b.n	8004304 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d114      	bne.n	80042f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	4613      	mov	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d108      	bne.n	80042f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042f0:	461a      	mov	r2, r3
 80042f2:	2100      	movs	r1, #0
 80042f4:	f003 fd88 	bl	8007e08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	4619      	mov	r1, r3
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f007 fad4 	bl	800b8ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3720      	adds	r7, #32
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	4f54300a 	.word	0x4f54300a
 8004314:	4f54310a 	.word	0x4f54310a

08004318 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	333c      	adds	r3, #60	; 0x3c
 8004330:	3304      	adds	r3, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d90e      	bls.n	800436c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004354:	2b00      	cmp	r3, #0
 8004356:	d009      	beq.n	800436c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	461a      	mov	r2, r3
 8004366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800436a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f007 fa8b 	bl	800b888 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d90c      	bls.n	8004394 <PCD_EP_OutSetupPacket_int+0x7c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d108      	bne.n	8004394 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800438c:	461a      	mov	r2, r3
 800438e:	2101      	movs	r1, #1
 8004390:	f003 fd3a 	bl	8007e08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	4f54300a 	.word	0x4f54300a

080043a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	70fb      	strb	r3, [r7, #3]
 80043b0:	4613      	mov	r3, r2
 80043b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d107      	bne.n	80043d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043c2:	883b      	ldrh	r3, [r7, #0]
 80043c4:	0419      	lsls	r1, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
 80043d0:	e028      	b.n	8004424 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4413      	add	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	e00d      	b.n	8004402 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	3340      	adds	r3, #64	; 0x40
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	4413      	add	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	3301      	adds	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	3b01      	subs	r3, #1
 8004408:	429a      	cmp	r2, r3
 800440a:	d3ec      	bcc.n	80043e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800440c:	883b      	ldrh	r3, [r7, #0]
 800440e:	0418      	lsls	r0, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	3b01      	subs	r3, #1
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	4302      	orrs	r2, r0
 800441c:	3340      	adds	r3, #64	; 0x40
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e267      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d075      	beq.n	8004576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800448a:	4b88      	ldr	r3, [pc, #544]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d00c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004496:	4b85      	ldr	r3, [pc, #532]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d112      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044a2:	4b82      	ldr	r3, [pc, #520]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	4b7e      	ldr	r3, [pc, #504]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d05b      	beq.n	8004574 <HAL_RCC_OscConfig+0x108>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d157      	bne.n	8004574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e242      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d106      	bne.n	80044e0 <HAL_RCC_OscConfig+0x74>
 80044d2:	4b76      	ldr	r3, [pc, #472]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a75      	ldr	r2, [pc, #468]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e01d      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b70      	ldr	r3, [pc, #448]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6f      	ldr	r2, [pc, #444]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b6d      	ldr	r3, [pc, #436]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6c      	ldr	r2, [pc, #432]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e00b      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 8004504:	4b69      	ldr	r3, [pc, #420]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a68      	ldr	r2, [pc, #416]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b66      	ldr	r3, [pc, #408]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a65      	ldr	r2, [pc, #404]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fe fa5c 	bl	80029e0 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800452c:	f7fe fa58 	bl	80029e0 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e207      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0xc0>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fe fa48 	bl	80029e0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004554:	f7fe fa44 	bl	80029e0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1f3      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	4b51      	ldr	r3, [pc, #324]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0xe8>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004582:	4b4a      	ldr	r3, [pc, #296]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004596:	2b08      	cmp	r3, #8
 8004598:	d11c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800459a:	4b44      	ldr	r3, [pc, #272]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	4b41      	ldr	r3, [pc, #260]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCC_OscConfig+0x152>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e1c7      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4937      	ldr	r1, [pc, #220]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	e03a      	b.n	800464a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045dc:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fe f9fd 	bl	80029e0 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fe f9f9 	bl	80029e0 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1a8      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4925      	ldr	r1, [pc, #148]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fe f9dc 	bl	80029e0 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462c:	f7fe f9d8 	bl	80029e0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e187      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d036      	beq.n	80046c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_RCC_OscConfig+0x248>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fe f9bc 	bl	80029e0 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466c:	f7fe f9b8 	bl	80029e0 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e167      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x200>
 800468a:	e01b      	b.n	80046c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <HAL_RCC_OscConfig+0x248>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fe f9a5 	bl	80029e0 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004698:	e00e      	b.n	80046b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469a:	f7fe f9a1 	bl	80029e0 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d907      	bls.n	80046b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e150      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
 80046ac:	40023800 	.word	0x40023800
 80046b0:	42470000 	.word	0x42470000
 80046b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	4b88      	ldr	r3, [pc, #544]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ea      	bne.n	800469a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8097 	beq.w	8004800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d6:	4b81      	ldr	r3, [pc, #516]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	4b7d      	ldr	r3, [pc, #500]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a7c      	ldr	r2, [pc, #496]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b7a      	ldr	r3, [pc, #488]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b77      	ldr	r3, [pc, #476]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d118      	bne.n	8004740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470e:	4b74      	ldr	r3, [pc, #464]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a73      	ldr	r2, [pc, #460]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471a:	f7fe f961 	bl	80029e0 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fe f95d 	bl	80029e0 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e10c      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	4b6a      	ldr	r3, [pc, #424]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x2ea>
 8004748:	4b64      	ldr	r3, [pc, #400]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a63      	ldr	r2, [pc, #396]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	e01c      	b.n	8004790 <HAL_RCC_OscConfig+0x324>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x30c>
 800475e:	4b5f      	ldr	r3, [pc, #380]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a5e      	ldr	r2, [pc, #376]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	6713      	str	r3, [r2, #112]	; 0x70
 800476a:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a5b      	ldr	r2, [pc, #364]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6713      	str	r3, [r2, #112]	; 0x70
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0x324>
 8004778:	4b58      	ldr	r3, [pc, #352]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	4a57      	ldr	r2, [pc, #348]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	; 0x70
 8004784:	4b55      	ldr	r3, [pc, #340]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	4a54      	ldr	r2, [pc, #336]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800478a:	f023 0304 	bic.w	r3, r3, #4
 800478e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fe f922 	bl	80029e0 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a0:	f7fe f91e 	bl	80029e0 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0cb      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b6:	4b49      	ldr	r3, [pc, #292]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ee      	beq.n	80047a0 <HAL_RCC_OscConfig+0x334>
 80047c2:	e014      	b.n	80047ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7fe f90c 	bl	80029e0 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fe f908 	bl	80029e0 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0b5      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e2:	4b3e      	ldr	r3, [pc, #248]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1ee      	bne.n	80047cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f4:	4b39      	ldr	r3, [pc, #228]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	4a38      	ldr	r2, [pc, #224]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80047fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a1 	beq.w	800494c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800480a:	4b34      	ldr	r3, [pc, #208]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b08      	cmp	r3, #8
 8004814:	d05c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d141      	bne.n	80048a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fe f8dc 	bl	80029e0 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482c:	f7fe f8d8 	bl	80029e0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e087      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	019b      	lsls	r3, r3, #6
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	491b      	ldr	r1, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fe f8b1 	bl	80029e0 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fe f8ad 	bl	80029e0 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e05c      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x416>
 80048a0:	e054      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe f89a 	bl	80029e0 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fe f896 	bl	80029e0 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e045      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x444>
 80048ce:	e03d      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e038      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40007000 	.word	0x40007000
 80048e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x4ec>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d028      	beq.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d121      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d11a      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800491e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004920:	4293      	cmp	r3, r2
 8004922:	d111      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	3b01      	subs	r3, #1
 8004932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d107      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800

0800495c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0cc      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004970:	4b68      	ldr	r3, [pc, #416]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d90c      	bls.n	8004998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b63      	ldr	r3, [pc, #396]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0b8      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b0:	4b59      	ldr	r3, [pc, #356]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a58      	ldr	r2, [pc, #352]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c8:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b50      	ldr	r3, [pc, #320]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	494d      	ldr	r1, [pc, #308]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d044      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b47      	ldr	r3, [pc, #284]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d119      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e067      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3a:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4934      	ldr	r1, [pc, #208]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a4c:	f7fd ffc8 	bl	80029e0 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a54:	f7fd ffc4 	bl	80029e0 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e04f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 020c 	and.w	r2, r3, #12
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1eb      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d20c      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e032      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4916      	ldr	r1, [pc, #88]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	490e      	ldr	r1, [pc, #56]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ae2:	f000 f821 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	490a      	ldr	r1, [pc, #40]	; (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	fa22 f303 	lsr.w	r3, r2, r3
 8004afa:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fd fe1e 	bl	8002744 <HAL_InitTick>

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023c00 	.word	0x40023c00
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	0800c9a0 	.word	0x0800c9a0
 8004b20:	20000034 	.word	0x20000034
 8004b24:	20000038 	.word	0x20000038

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b2c:	b094      	sub	sp, #80	; 0x50
 8004b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	647b      	str	r3, [r7, #68]	; 0x44
 8004b34:	2300      	movs	r3, #0
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	2300      	movs	r3, #0
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b40:	4b79      	ldr	r3, [pc, #484]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d00d      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x40>
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	f200 80e1 	bhi.w	8004d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b5a:	e0db      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b73      	ldr	r3, [pc, #460]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b60:	e0db      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b62:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b66:	e0d8      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b68:	4b6f      	ldr	r3, [pc, #444]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b72:	4b6d      	ldr	r3, [pc, #436]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	2200      	movs	r2, #0
 8004b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
 8004b92:	2300      	movs	r3, #0
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
 8004b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	f04f 0000 	mov.w	r0, #0
 8004ba2:	f04f 0100 	mov.w	r1, #0
 8004ba6:	0159      	lsls	r1, r3, #5
 8004ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bac:	0150      	lsls	r0, r2, #5
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	1a51      	subs	r1, r2, r1
 8004bb6:	6139      	str	r1, [r7, #16]
 8004bb8:	4629      	mov	r1, r5
 8004bba:	eb63 0301 	sbc.w	r3, r3, r1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bcc:	4659      	mov	r1, fp
 8004bce:	018b      	lsls	r3, r1, #6
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	018a      	lsls	r2, r1, #6
 8004bda:	4651      	mov	r1, sl
 8004bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8004be0:	4659      	mov	r1, fp
 8004be2:	eb63 0901 	sbc.w	r9, r3, r1
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfa:	4690      	mov	r8, r2
 8004bfc:	4699      	mov	r9, r3
 8004bfe:	4623      	mov	r3, r4
 8004c00:	eb18 0303 	adds.w	r3, r8, r3
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	462b      	mov	r3, r5
 8004c08:	eb49 0303 	adc.w	r3, r9, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	024b      	lsls	r3, r1, #9
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c24:	4621      	mov	r1, r4
 8004c26:	024a      	lsls	r2, r1, #9
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	2200      	movs	r2, #0
 8004c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c38:	f7fb ffa0 	bl	8000b7c <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c44:	e058      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c46:	4b38      	ldr	r3, [pc, #224]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	4611      	mov	r1, r2
 8004c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	f04f 0000 	mov.w	r0, #0
 8004c68:	f04f 0100 	mov.w	r1, #0
 8004c6c:	0159      	lsls	r1, r3, #5
 8004c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c72:	0150      	lsls	r0, r2, #5
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4641      	mov	r1, r8
 8004c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c7e:	4649      	mov	r1, r9
 8004c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c98:	ebb2 040a 	subs.w	r4, r2, sl
 8004c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	00eb      	lsls	r3, r5, #3
 8004caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cae:	00e2      	lsls	r2, r4, #3
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	461d      	mov	r5, r3
 8004cb4:	4643      	mov	r3, r8
 8004cb6:	18e3      	adds	r3, r4, r3
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	464b      	mov	r3, r9
 8004cbc:	eb45 0303 	adc.w	r3, r5, r3
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cce:	4629      	mov	r1, r5
 8004cd0:	028b      	lsls	r3, r1, #10
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd8:	4621      	mov	r1, r4
 8004cda:	028a      	lsls	r2, r1, #10
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	61fa      	str	r2, [r7, #28]
 8004ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cec:	f7fb ff46 	bl	8000b7c <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	3301      	adds	r3, #1
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d12:	e002      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3750      	adds	r7, #80	; 0x50
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	00f42400 	.word	0x00f42400
 8004d30:	007a1200 	.word	0x007a1200

08004d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d38:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000034 	.word	0x20000034

08004d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d50:	f7ff fff0 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	0a9b      	lsrs	r3, r3, #10
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4903      	ldr	r1, [pc, #12]	; (8004d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	0800c9b0 	.word	0x0800c9b0

08004d74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	220f      	movs	r2, #15
 8004d82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d84:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 0203 	and.w	r2, r3, #3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	08db      	lsrs	r3, r3, #3
 8004dae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004db6:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <HAL_RCC_GetClockConfig+0x60>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0207 	and.w	r2, r3, #7
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	601a      	str	r2, [r3, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	40023c00 	.word	0x40023c00

08004dd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e07b      	b.n	8004ee2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfa:	d009      	beq.n	8004e10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	61da      	str	r2, [r3, #28]
 8004e02:	e005      	b.n	8004e10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fd fbe6 	bl	80025fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	431a      	orrs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	ea42 0103 	orr.w	r1, r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0104 	and.w	r1, r3, #4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	f003 0210 	and.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b088      	sub	sp, #32
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_SPI_Transmit+0x22>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e126      	b.n	800515a <HAL_SPI_Transmit+0x270>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f14:	f7fd fd64 	bl	80029e0 <HAL_GetTick>
 8004f18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d002      	beq.n	8004f30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f2e:	e10b      	b.n	8005148 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_SPI_Transmit+0x52>
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d102      	bne.n	8004f42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f40:	e102      	b.n	8005148 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2203      	movs	r2, #3
 8004f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	88fa      	ldrh	r2, [r7, #6]
 8004f60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f88:	d10f      	bne.n	8004faa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d007      	beq.n	8004fc8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd0:	d14b      	bne.n	800506a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <HAL_SPI_Transmit+0xf6>
 8004fda:	8afb      	ldrh	r3, [r7, #22]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d13e      	bne.n	800505e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005004:	e02b      	b.n	800505e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d112      	bne.n	800503a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	881a      	ldrh	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005024:	1c9a      	adds	r2, r3, #2
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	86da      	strh	r2, [r3, #54]	; 0x36
 8005038:	e011      	b.n	800505e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800503a:	f7fd fcd1 	bl	80029e0 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d803      	bhi.n	8005052 <HAL_SPI_Transmit+0x168>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d102      	bne.n	8005058 <HAL_SPI_Transmit+0x16e>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800505c:	e074      	b.n	8005148 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ce      	bne.n	8005006 <HAL_SPI_Transmit+0x11c>
 8005068:	e04c      	b.n	8005104 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Transmit+0x18e>
 8005072:	8afb      	ldrh	r3, [r7, #22]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d140      	bne.n	80050fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	7812      	ldrb	r2, [r2, #0]
 8005084:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800509e:	e02c      	b.n	80050fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d113      	bne.n	80050d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80050d4:	e011      	b.n	80050fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d6:	f7fd fc83 	bl	80029e0 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d803      	bhi.n	80050ee <HAL_SPI_Transmit+0x204>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d102      	bne.n	80050f4 <HAL_SPI_Transmit+0x20a>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050f8:	e026      	b.n	8005148 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1cd      	bne.n	80050a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 fbcb 	bl	80058a4 <SPI_EndRxTxTransaction>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e000      	b.n	8005148 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005146:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005158:	7ffb      	ldrb	r3, [r7, #31]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b088      	sub	sp, #32
 8005166:	af02      	add	r7, sp, #8
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800517e:	d112      	bne.n	80051a6 <HAL_SPI_Receive+0x44>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10e      	bne.n	80051a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2204      	movs	r2, #4
 800518c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4613      	mov	r3, r2
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f8f1 	bl	8005384 <HAL_SPI_TransmitReceive>
 80051a2:	4603      	mov	r3, r0
 80051a4:	e0ea      	b.n	800537c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_SPI_Receive+0x52>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0e3      	b.n	800537c <HAL_SPI_Receive+0x21a>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051bc:	f7fd fc10 	bl	80029e0 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d002      	beq.n	80051d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
 80051d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051d2:	e0ca      	b.n	800536a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_SPI_Receive+0x7e>
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80051e4:	e0c1      	b.n	800536a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2204      	movs	r2, #4
 80051ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522c:	d10f      	bne.n	800524e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800523c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800524c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	d007      	beq.n	800526c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d162      	bne.n	800533a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005274:	e02e      	b.n	80052d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d115      	bne.n	80052b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f103 020c 	add.w	r2, r3, #12
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	7812      	ldrb	r2, [r2, #0]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052ae:	e011      	b.n	80052d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b0:	f7fd fb96 	bl	80029e0 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d803      	bhi.n	80052c8 <HAL_SPI_Receive+0x166>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d102      	bne.n	80052ce <HAL_SPI_Receive+0x16c>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052d2:	e04a      	b.n	800536a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1cb      	bne.n	8005276 <HAL_SPI_Receive+0x114>
 80052de:	e031      	b.n	8005344 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d113      	bne.n	8005316 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	b292      	uxth	r2, r2
 80052fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	1c9a      	adds	r2, r3, #2
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005314:	e011      	b.n	800533a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005316:	f7fd fb63 	bl	80029e0 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d803      	bhi.n	800532e <HAL_SPI_Receive+0x1cc>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532c:	d102      	bne.n	8005334 <HAL_SPI_Receive+0x1d2>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005338:	e017      	b.n	800536a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1cd      	bne.n	80052e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fa45 	bl	80057d8 <SPI_EndRxTransaction>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	75fb      	strb	r3, [r7, #23]
 8005366:	e000      	b.n	800536a <HAL_SPI_Receive+0x208>
  }

error :
 8005368:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800537a:	7dfb      	ldrb	r3, [r7, #23]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08c      	sub	sp, #48	; 0x30
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005392:	2301      	movs	r3, #1
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <HAL_SPI_TransmitReceive+0x26>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e18a      	b.n	80056c0 <HAL_SPI_TransmitReceive+0x33c>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053b2:	f7fd fb15 	bl	80029e0 <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053c8:	887b      	ldrh	r3, [r7, #2]
 80053ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d00f      	beq.n	80053f4 <HAL_SPI_TransmitReceive+0x70>
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053da:	d107      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d103      	bne.n	80053ec <HAL_SPI_TransmitReceive+0x68>
 80053e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d003      	beq.n	80053f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053f2:	e15b      	b.n	80056ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d005      	beq.n	8005406 <HAL_SPI_TransmitReceive+0x82>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_SPI_TransmitReceive+0x82>
 8005400:	887b      	ldrh	r3, [r7, #2]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800540c:	e14e      	b.n	80056ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b04      	cmp	r3, #4
 8005418:	d003      	beq.n	8005422 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2205      	movs	r2, #5
 800541e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	887a      	ldrh	r2, [r7, #2]
 8005432:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	887a      	ldrh	r2, [r7, #2]
 8005438:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	887a      	ldrh	r2, [r7, #2]
 8005444:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	887a      	ldrh	r2, [r7, #2]
 800544a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d007      	beq.n	8005476 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005474:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547e:	d178      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_SPI_TransmitReceive+0x10a>
 8005488:	8b7b      	ldrh	r3, [r7, #26]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d166      	bne.n	800555c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	881a      	ldrh	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	1c9a      	adds	r2, r3, #2
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054b2:	e053      	b.n	800555c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d11b      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x176>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d016      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x176>
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d113      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d6:	881a      	ldrh	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	1c9a      	adds	r2, r3, #2
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b01      	cmp	r3, #1
 8005506:	d119      	bne.n	800553c <HAL_SPI_TransmitReceive+0x1b8>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d014      	beq.n	800553c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	b292      	uxth	r2, r2
 800551e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	1c9a      	adds	r2, r3, #2
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552e:	b29b      	uxth	r3, r3
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005538:	2301      	movs	r3, #1
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800553c:	f7fd fa50 	bl	80029e0 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005548:	429a      	cmp	r2, r3
 800554a:	d807      	bhi.n	800555c <HAL_SPI_TransmitReceive+0x1d8>
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005552:	d003      	beq.n	800555c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800555a:	e0a7      	b.n	80056ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1a6      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x130>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1a1      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x130>
 8005570:	e07c      	b.n	800566c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x1fc>
 800557a:	8b7b      	ldrh	r3, [r7, #26]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d16b      	bne.n	8005658 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	330c      	adds	r3, #12
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055a6:	e057      	b.n	8005658 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d11c      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x26c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d017      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x26c>
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d114      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	330c      	adds	r3, #12
 80055d0:	7812      	ldrb	r2, [r2, #0]
 80055d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ec:	2300      	movs	r3, #0
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d119      	bne.n	8005632 <HAL_SPI_TransmitReceive+0x2ae>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d014      	beq.n	8005632 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005624:	b29b      	uxth	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800562e:	2301      	movs	r3, #1
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005632:	f7fd f9d5 	bl	80029e0 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800563e:	429a      	cmp	r2, r3
 8005640:	d803      	bhi.n	800564a <HAL_SPI_TransmitReceive+0x2c6>
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d102      	bne.n	8005650 <HAL_SPI_TransmitReceive+0x2cc>
 800564a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005656:	e029      	b.n	80056ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1a2      	bne.n	80055a8 <HAL_SPI_TransmitReceive+0x224>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d19d      	bne.n	80055a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800566c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f917 	bl	80058a4 <SPI_EndRxTxTransaction>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005688:	e010      	b.n	80056ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10b      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	e000      	b.n	80056ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3730      	adds	r7, #48	; 0x30
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	4613      	mov	r3, r2
 80056d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056d8:	f7fd f982 	bl	80029e0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4413      	add	r3, r2
 80056e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80056e8:	f7fd f97a 	bl	80029e0 <HAL_GetTick>
 80056ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80056ee:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	015b      	lsls	r3, r3, #5
 80056f4:	0d1b      	lsrs	r3, r3, #20
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	fb02 f303 	mul.w	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056fe:	e054      	b.n	80057aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d050      	beq.n	80057aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005708:	f7fd f96a 	bl	80029e0 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	429a      	cmp	r2, r3
 8005716:	d902      	bls.n	800571e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d13d      	bne.n	800579a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800572c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005736:	d111      	bne.n	800575c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005740:	d004      	beq.n	800574c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800574a:	d107      	bne.n	800575c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800575a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005764:	d10f      	bne.n	8005786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e017      	b.n	80057ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	bf0c      	ite	eq
 80057ba:	2301      	moveq	r3, #1
 80057bc:	2300      	movne	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d19b      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000034 	.word	0x20000034

080057d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ec:	d111      	bne.n	8005812 <SPI_EndRxTransaction+0x3a>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d004      	beq.n	8005802 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005800:	d107      	bne.n	8005812 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005810:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581a:	d12a      	bne.n	8005872 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d012      	beq.n	800584c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2200      	movs	r2, #0
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff ff49 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d02d      	beq.n	8005898 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	f043 0220 	orr.w	r2, r3, #32
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e026      	b.n	800589a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	2101      	movs	r1, #1
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f7ff ff36 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01a      	beq.n	8005898 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e013      	b.n	800589a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2200      	movs	r2, #0
 800587a:	2101      	movs	r1, #1
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff23 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e000      	b.n	800589a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <SPI_EndRxTxTransaction+0x7c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1b      	ldr	r2, [pc, #108]	; (8005924 <SPI_EndRxTxTransaction+0x80>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0d5b      	lsrs	r3, r3, #21
 80058bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ce:	d112      	bne.n	80058f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	2200      	movs	r2, #0
 80058d8:	2180      	movs	r1, #128	; 0x80
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7ff fef4 	bl	80056c8 <SPI_WaitFlagStateUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d016      	beq.n	8005914 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ea:	f043 0220 	orr.w	r2, r3, #32
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e00f      	b.n	8005916 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3b01      	subs	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d0f2      	beq.n	80058f6 <SPI_EndRxTxTransaction+0x52>
 8005910:	e000      	b.n	8005914 <SPI_EndRxTxTransaction+0x70>
        break;
 8005912:	bf00      	nop
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000034 	.word	0x20000034
 8005924:	165e9f81 	.word	0x165e9f81

08005928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e041      	b.n	80059be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f839 	bl	80059c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f000 fb8c 	bl	8006084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d001      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e044      	b.n	8005a7e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_TIM_Base_Start_IT+0xb0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d018      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d013      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1a      	ldr	r2, [pc, #104]	; (8005a90 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00e      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0x6c>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a16      	ldr	r2, [pc, #88]	; (8005a9c <HAL_TIM_Base_Start_IT+0xc0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d111      	bne.n	8005a6c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d010      	beq.n	8005a7c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0201 	orr.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6a:	e007      	b.n	8005a7c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0201 	orr.w	r2, r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40014000 	.word	0x40014000

08005aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e041      	b.n	8005b36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc fde0 	bl	800268c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 fad0 	bl	8006084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <HAL_TIM_PWM_Start+0x24>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	e022      	b.n	8005baa <HAL_TIM_PWM_Start+0x6a>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d109      	bne.n	8005b7e <HAL_TIM_PWM_Start+0x3e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	bf14      	ite	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	2300      	moveq	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	e015      	b.n	8005baa <HAL_TIM_PWM_Start+0x6a>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d109      	bne.n	8005b98 <HAL_TIM_PWM_Start+0x58>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e008      	b.n	8005baa <HAL_TIM_PWM_Start+0x6a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e068      	b.n	8005c84 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d104      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0x82>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc0:	e013      	b.n	8005bea <HAL_TIM_PWM_Start+0xaa>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d104      	bne.n	8005bd2 <HAL_TIM_PWM_Start+0x92>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd0:	e00b      	b.n	8005bea <HAL_TIM_PWM_Start+0xaa>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d104      	bne.n	8005be2 <HAL_TIM_PWM_Start+0xa2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be0:	e003      	b.n	8005bea <HAL_TIM_PWM_Start+0xaa>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fc52 	bl	800649c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a23      	ldr	r2, [pc, #140]	; (8005c8c <HAL_TIM_PWM_Start+0x14c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d107      	bne.n	8005c12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <HAL_TIM_PWM_Start+0x14c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d018      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x10e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c24:	d013      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x10e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a19      	ldr	r2, [pc, #100]	; (8005c90 <HAL_TIM_PWM_Start+0x150>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00e      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x10e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <HAL_TIM_PWM_Start+0x154>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x10e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a16      	ldr	r2, [pc, #88]	; (8005c98 <HAL_TIM_PWM_Start+0x158>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d004      	beq.n	8005c4e <HAL_TIM_PWM_Start+0x10e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a14      	ldr	r2, [pc, #80]	; (8005c9c <HAL_TIM_PWM_Start+0x15c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d111      	bne.n	8005c72 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b06      	cmp	r3, #6
 8005c5e:	d010      	beq.n	8005c82 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c70:	e007      	b.n	8005c82 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0201 	orr.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40010000 	.word	0x40010000
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800
 8005c98:	40000c00 	.word	0x40000c00
 8005c9c:	40014000 	.word	0x40014000

08005ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d122      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d11b      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f06f 0202 	mvn.w	r2, #2
 8005ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f9b0 	bl	8006048 <HAL_TIM_IC_CaptureCallback>
 8005ce8:	e005      	b.n	8005cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f9a2 	bl	8006034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f9b3 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d122      	bne.n	8005d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d11b      	bne.n	8005d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0204 	mvn.w	r2, #4
 8005d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f986 	bl	8006048 <HAL_TIM_IC_CaptureCallback>
 8005d3c:	e005      	b.n	8005d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f978 	bl	8006034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f989 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d122      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d11b      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0208 	mvn.w	r2, #8
 8005d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f95c 	bl	8006048 <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f94e 	bl	8006034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f95f 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d122      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d11b      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0210 	mvn.w	r2, #16
 8005dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f932 	bl	8006048 <HAL_TIM_IC_CaptureCallback>
 8005de4:	e005      	b.n	8005df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f924 	bl	8006034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f935 	bl	800605c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d10e      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d107      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0201 	mvn.w	r2, #1
 8005e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fc fba6 	bl	8002570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2e:	2b80      	cmp	r3, #128	; 0x80
 8005e30:	d10e      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d107      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fc16 	bl	800667c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d10e      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d107      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f8fa 	bl	8006070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0320 	and.w	r3, r3, #32
 8005e86:	2b20      	cmp	r3, #32
 8005e88:	d10e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0220 	mvn.w	r2, #32
 8005ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fbe0 	bl	8006668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e0ae      	b.n	800602c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b0c      	cmp	r3, #12
 8005eda:	f200 809f 	bhi.w	800601c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ede:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	0800601d 	.word	0x0800601d
 8005eec:	0800601d 	.word	0x0800601d
 8005ef0:	0800601d 	.word	0x0800601d
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	0800601d 	.word	0x0800601d
 8005efc:	0800601d 	.word	0x0800601d
 8005f00:	0800601d 	.word	0x0800601d
 8005f04:	08005f9b 	.word	0x08005f9b
 8005f08:	0800601d 	.word	0x0800601d
 8005f0c:	0800601d 	.word	0x0800601d
 8005f10:	0800601d 	.word	0x0800601d
 8005f14:	08005fdb 	.word	0x08005fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 f930 	bl	8006184 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0208 	orr.w	r2, r2, #8
 8005f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0204 	bic.w	r2, r2, #4
 8005f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6999      	ldr	r1, [r3, #24]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	619a      	str	r2, [r3, #24]
      break;
 8005f56:	e064      	b.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f976 	bl	8006250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6999      	ldr	r1, [r3, #24]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	021a      	lsls	r2, r3, #8
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	619a      	str	r2, [r3, #24]
      break;
 8005f98:	e043      	b.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 f9c1 	bl	8006328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69da      	ldr	r2, [r3, #28]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0208 	orr.w	r2, r2, #8
 8005fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0204 	bic.w	r2, r2, #4
 8005fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69d9      	ldr	r1, [r3, #28]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	691a      	ldr	r2, [r3, #16]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	61da      	str	r2, [r3, #28]
      break;
 8005fd8:	e023      	b.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fa0b 	bl	80063fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69da      	ldr	r2, [r3, #28]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69d9      	ldr	r1, [r3, #28]
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	021a      	lsls	r2, r3, #8
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	61da      	str	r2, [r3, #28]
      break;
 800601a:	e002      	b.n	8006022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
      break;
 8006020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800602a:	7dfb      	ldrb	r3, [r7, #23]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a34      	ldr	r2, [pc, #208]	; (8006168 <TIM_Base_SetConfig+0xe4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00f      	beq.n	80060bc <TIM_Base_SetConfig+0x38>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a2:	d00b      	beq.n	80060bc <TIM_Base_SetConfig+0x38>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a31      	ldr	r2, [pc, #196]	; (800616c <TIM_Base_SetConfig+0xe8>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d007      	beq.n	80060bc <TIM_Base_SetConfig+0x38>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a30      	ldr	r2, [pc, #192]	; (8006170 <TIM_Base_SetConfig+0xec>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0x38>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a2f      	ldr	r2, [pc, #188]	; (8006174 <TIM_Base_SetConfig+0xf0>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d108      	bne.n	80060ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a25      	ldr	r2, [pc, #148]	; (8006168 <TIM_Base_SetConfig+0xe4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01b      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d017      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a22      	ldr	r2, [pc, #136]	; (800616c <TIM_Base_SetConfig+0xe8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a21      	ldr	r2, [pc, #132]	; (8006170 <TIM_Base_SetConfig+0xec>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00f      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a20      	ldr	r2, [pc, #128]	; (8006174 <TIM_Base_SetConfig+0xf0>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00b      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a1f      	ldr	r2, [pc, #124]	; (8006178 <TIM_Base_SetConfig+0xf4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d007      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a1e      	ldr	r2, [pc, #120]	; (800617c <TIM_Base_SetConfig+0xf8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_Base_SetConfig+0x8a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a1d      	ldr	r2, [pc, #116]	; (8006180 <TIM_Base_SetConfig+0xfc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d108      	bne.n	8006120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a08      	ldr	r2, [pc, #32]	; (8006168 <TIM_Base_SetConfig+0xe4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d103      	bne.n	8006154 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691a      	ldr	r2, [r3, #16]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	615a      	str	r2, [r3, #20]
}
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	40010000 	.word	0x40010000
 800616c:	40000400 	.word	0x40000400
 8006170:	40000800 	.word	0x40000800
 8006174:	40000c00 	.word	0x40000c00
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800

08006184 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f023 0201 	bic.w	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f023 0302 	bic.w	r3, r3, #2
 80061cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a1c      	ldr	r2, [pc, #112]	; (800624c <TIM_OC1_SetConfig+0xc8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10c      	bne.n	80061fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0308 	bic.w	r3, r3, #8
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <TIM_OC1_SetConfig+0xc8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d111      	bne.n	8006226 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40010000 	.word	0x40010000

08006250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f023 0210 	bic.w	r2, r3, #16
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4313      	orrs	r3, r2
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f023 0320 	bic.w	r3, r3, #32
 800629a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1e      	ldr	r2, [pc, #120]	; (8006324 <TIM_OC2_SetConfig+0xd4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10d      	bne.n	80062cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a15      	ldr	r2, [pc, #84]	; (8006324 <TIM_OC2_SetConfig+0xd4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d113      	bne.n	80062fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000

08006328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0303 	bic.w	r3, r3, #3
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a1d      	ldr	r2, [pc, #116]	; (80063f8 <TIM_OC3_SetConfig+0xd0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d10d      	bne.n	80063a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800638c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <TIM_OC3_SetConfig+0xd0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d113      	bne.n	80063d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	621a      	str	r2, [r3, #32]
}
 80063ec:	bf00      	nop
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40010000 	.word	0x40010000

080063fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006432:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006446:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	031b      	lsls	r3, r3, #12
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <TIM_OC4_SetConfig+0x9c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d109      	bne.n	8006470 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006462:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	019b      	lsls	r3, r3, #6
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40010000 	.word	0x40010000

0800649c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	2201      	movs	r2, #1
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a1a      	ldr	r2, [r3, #32]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	43db      	mvns	r3, r3
 80064be:	401a      	ands	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1a      	ldr	r2, [r3, #32]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 031f 	and.w	r3, r3, #31
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	fa01 f303 	lsl.w	r3, r1, r3
 80064d4:	431a      	orrs	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	621a      	str	r2, [r3, #32]
}
 80064da:	bf00      	nop
 80064dc:	371c      	adds	r7, #28
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
	...

080064e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e050      	b.n	80065a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1c      	ldr	r2, [pc, #112]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d018      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d013      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00e      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a15      	ldr	r2, [pc, #84]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a13      	ldr	r2, [pc, #76]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d10c      	bne.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800657c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	4313      	orrs	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40010000 	.word	0x40010000
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800
 80065bc:	40000c00 	.word	0x40000c00
 80065c0:	40014000 	.word	0x40014000

080065c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065dc:	2302      	movs	r3, #2
 80065de:	e03d      	b.n	800665c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006690:	b084      	sub	sp, #16
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	f107 001c 	add.w	r0, r7, #28
 800669e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d122      	bne.n	80066ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d105      	bne.n	80066e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f001 fbee 	bl	8007ec4 <USB_CoreReset>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	e01a      	b.n	8006724 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f001 fbe2 	bl	8007ec4 <USB_CoreReset>
 8006700:	4603      	mov	r3, r0
 8006702:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
 8006716:	e005      	b.n	8006724 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006726:	2b01      	cmp	r3, #1
 8006728:	d10b      	bne.n	8006742 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f043 0206 	orr.w	r2, r3, #6
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800674e:	b004      	add	sp, #16
 8006750:	4770      	bx	lr
	...

08006754 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	2b02      	cmp	r3, #2
 8006766:	d165      	bne.n	8006834 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4a41      	ldr	r2, [pc, #260]	; (8006870 <USB_SetTurnaroundTime+0x11c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d906      	bls.n	800677e <USB_SetTurnaroundTime+0x2a>
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	4a40      	ldr	r2, [pc, #256]	; (8006874 <USB_SetTurnaroundTime+0x120>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d202      	bcs.n	800677e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006778:	230f      	movs	r3, #15
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e062      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	4a3c      	ldr	r2, [pc, #240]	; (8006874 <USB_SetTurnaroundTime+0x120>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d306      	bcc.n	8006794 <USB_SetTurnaroundTime+0x40>
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4a3b      	ldr	r2, [pc, #236]	; (8006878 <USB_SetTurnaroundTime+0x124>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d202      	bcs.n	8006794 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800678e:	230e      	movs	r3, #14
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e057      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4a38      	ldr	r2, [pc, #224]	; (8006878 <USB_SetTurnaroundTime+0x124>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d306      	bcc.n	80067aa <USB_SetTurnaroundTime+0x56>
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4a37      	ldr	r2, [pc, #220]	; (800687c <USB_SetTurnaroundTime+0x128>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d202      	bcs.n	80067aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80067a4:	230d      	movs	r3, #13
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e04c      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4a33      	ldr	r2, [pc, #204]	; (800687c <USB_SetTurnaroundTime+0x128>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d306      	bcc.n	80067c0 <USB_SetTurnaroundTime+0x6c>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4a32      	ldr	r2, [pc, #200]	; (8006880 <USB_SetTurnaroundTime+0x12c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d802      	bhi.n	80067c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80067ba:	230c      	movs	r3, #12
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	e041      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4a2f      	ldr	r2, [pc, #188]	; (8006880 <USB_SetTurnaroundTime+0x12c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d906      	bls.n	80067d6 <USB_SetTurnaroundTime+0x82>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4a2e      	ldr	r2, [pc, #184]	; (8006884 <USB_SetTurnaroundTime+0x130>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d802      	bhi.n	80067d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80067d0:	230b      	movs	r3, #11
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	e036      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4a2a      	ldr	r2, [pc, #168]	; (8006884 <USB_SetTurnaroundTime+0x130>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d906      	bls.n	80067ec <USB_SetTurnaroundTime+0x98>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4a29      	ldr	r2, [pc, #164]	; (8006888 <USB_SetTurnaroundTime+0x134>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d802      	bhi.n	80067ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80067e6:	230a      	movs	r3, #10
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e02b      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4a26      	ldr	r2, [pc, #152]	; (8006888 <USB_SetTurnaroundTime+0x134>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d906      	bls.n	8006802 <USB_SetTurnaroundTime+0xae>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4a25      	ldr	r2, [pc, #148]	; (800688c <USB_SetTurnaroundTime+0x138>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d202      	bcs.n	8006802 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067fc:	2309      	movs	r3, #9
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e020      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4a21      	ldr	r2, [pc, #132]	; (800688c <USB_SetTurnaroundTime+0x138>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d306      	bcc.n	8006818 <USB_SetTurnaroundTime+0xc4>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4a20      	ldr	r2, [pc, #128]	; (8006890 <USB_SetTurnaroundTime+0x13c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d802      	bhi.n	8006818 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006812:	2308      	movs	r3, #8
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e015      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4a1d      	ldr	r2, [pc, #116]	; (8006890 <USB_SetTurnaroundTime+0x13c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d906      	bls.n	800682e <USB_SetTurnaroundTime+0xda>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4a1c      	ldr	r2, [pc, #112]	; (8006894 <USB_SetTurnaroundTime+0x140>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d202      	bcs.n	800682e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006828:	2307      	movs	r3, #7
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e00a      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800682e:	2306      	movs	r3, #6
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e007      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800683a:	2309      	movs	r3, #9
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	e001      	b.n	8006844 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006840:	2309      	movs	r3, #9
 8006842:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	029b      	lsls	r3, r3, #10
 8006858:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800685c:	431a      	orrs	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	00d8acbf 	.word	0x00d8acbf
 8006874:	00e4e1c0 	.word	0x00e4e1c0
 8006878:	00f42400 	.word	0x00f42400
 800687c:	01067380 	.word	0x01067380
 8006880:	011a499f 	.word	0x011a499f
 8006884:	01312cff 	.word	0x01312cff
 8006888:	014ca43f 	.word	0x014ca43f
 800688c:	016e3600 	.word	0x016e3600
 8006890:	01a6ab1f 	.word	0x01a6ab1f
 8006894:	01e84800 	.word	0x01e84800

08006898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f043 0201 	orr.w	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d115      	bne.n	800692a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800690a:	2001      	movs	r0, #1
 800690c:	f7fc f874 	bl	80029f8 <HAL_Delay>
      ms++;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fa45 	bl	8007da6 <USB_GetMode>
 800691c:	4603      	mov	r3, r0
 800691e:	2b01      	cmp	r3, #1
 8006920:	d01e      	beq.n	8006960 <USB_SetCurrentMode+0x84>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b31      	cmp	r3, #49	; 0x31
 8006926:	d9f0      	bls.n	800690a <USB_SetCurrentMode+0x2e>
 8006928:	e01a      	b.n	8006960 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800692a:	78fb      	ldrb	r3, [r7, #3]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d115      	bne.n	800695c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800693c:	2001      	movs	r0, #1
 800693e:	f7fc f85b 	bl	80029f8 <HAL_Delay>
      ms++;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3301      	adds	r3, #1
 8006946:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 fa2c 	bl	8007da6 <USB_GetMode>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <USB_SetCurrentMode+0x84>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b31      	cmp	r3, #49	; 0x31
 8006958:	d9f0      	bls.n	800693c <USB_SetCurrentMode+0x60>
 800695a:	e001      	b.n	8006960 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e005      	b.n	800696c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b32      	cmp	r3, #50	; 0x32
 8006964:	d101      	bne.n	800696a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006974:	b084      	sub	sp, #16
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	e009      	b.n	80069a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	3340      	adds	r3, #64	; 0x40
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	2200      	movs	r2, #0
 80069a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	3301      	adds	r3, #1
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b0e      	cmp	r3, #14
 80069ac:	d9f2      	bls.n	8006994 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d11c      	bne.n	80069ee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c2:	f043 0302 	orr.w	r3, r3, #2
 80069c6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	639a      	str	r2, [r3, #56]	; 0x38
 80069ec:	e00b      	b.n	8006a06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	2300      	movs	r3, #0
 8006a10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a18:	4619      	mov	r1, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a20:	461a      	mov	r2, r3
 8006a22:	680b      	ldr	r3, [r1, #0]
 8006a24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10c      	bne.n	8006a46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d104      	bne.n	8006a3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a32:	2100      	movs	r1, #0
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f965 	bl	8006d04 <USB_SetDevSpeed>
 8006a3a:	e008      	b.n	8006a4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f960 	bl	8006d04 <USB_SetDevSpeed>
 8006a44:	e003      	b.n	8006a4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a46:	2103      	movs	r1, #3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f95b 	bl	8006d04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a4e:	2110      	movs	r1, #16
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f8f3 	bl	8006c3c <USB_FlushTxFifo>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f91f 	bl	8006ca4 <USB_FlushRxFifo>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a76:	461a      	mov	r2, r3
 8006a78:	2300      	movs	r3, #0
 8006a7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a82:	461a      	mov	r2, r3
 8006a84:	2300      	movs	r3, #0
 8006a86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8e:	461a      	mov	r2, r3
 8006a90:	2300      	movs	r3, #0
 8006a92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a94:	2300      	movs	r3, #0
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	e043      	b.n	8006b22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab0:	d118      	bne.n	8006ae4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e013      	b.n	8006af6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ada:	461a      	mov	r2, r3
 8006adc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	e008      	b.n	8006af6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af0:	461a      	mov	r2, r3
 8006af2:	2300      	movs	r3, #0
 8006af4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b02:	461a      	mov	r2, r3
 8006b04:	2300      	movs	r3, #0
 8006b06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	461a      	mov	r2, r3
 8006b16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d3b7      	bcc.n	8006a9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	e043      	b.n	8006bb8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b46:	d118      	bne.n	8006b7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	e013      	b.n	8006b8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b70:	461a      	mov	r2, r3
 8006b72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	e008      	b.n	8006b8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	461a      	mov	r2, r3
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b98:	461a      	mov	r2, r3
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	461a      	mov	r2, r3
 8006bac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	613b      	str	r3, [r7, #16]
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d3b7      	bcc.n	8006b30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006be0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d105      	bne.n	8006bf4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f043 0210 	orr.w	r2, r3, #16
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <USB_DevInit+0x2c4>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	f043 0208 	orr.w	r2, r3, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d107      	bne.n	8006c28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c20:	f043 0304 	orr.w	r3, r3, #4
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c34:	b004      	add	sp, #16
 8006c36:	4770      	bx	lr
 8006c38:	803c3800 	.word	0x803c3800

08006c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a13      	ldr	r2, [pc, #76]	; (8006ca0 <USB_FlushTxFifo+0x64>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d901      	bls.n	8006c5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e01b      	b.n	8006c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	daf2      	bge.n	8006c4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	019b      	lsls	r3, r3, #6
 8006c6c:	f043 0220 	orr.w	r2, r3, #32
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3301      	adds	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	4a08      	ldr	r2, [pc, #32]	; (8006ca0 <USB_FlushTxFifo+0x64>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d901      	bls.n	8006c86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e006      	b.n	8006c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d0f0      	beq.n	8006c74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	00030d40 	.word	0x00030d40

08006ca4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4a11      	ldr	r2, [pc, #68]	; (8006d00 <USB_FlushRxFifo+0x5c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d901      	bls.n	8006cc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e018      	b.n	8006cf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	daf2      	bge.n	8006cb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2210      	movs	r2, #16
 8006cd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <USB_FlushRxFifo+0x5c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d901      	bls.n	8006ce6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e006      	b.n	8006cf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b10      	cmp	r3, #16
 8006cf0:	d0f0      	beq.n	8006cd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	00030d40 	.word	0x00030d40

08006d04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d24:	4313      	orrs	r3, r2
 8006d26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b087      	sub	sp, #28
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0306 	and.w	r3, r3, #6
 8006d4e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d102      	bne.n	8006d5c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006d56:	2300      	movs	r3, #0
 8006d58:	75fb      	strb	r3, [r7, #23]
 8006d5a:	e00a      	b.n	8006d72 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d002      	beq.n	8006d68 <USB_GetDevSpeed+0x32>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b06      	cmp	r3, #6
 8006d66:	d102      	bne.n	8006d6e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	75fb      	strb	r3, [r7, #23]
 8006d6c:	e001      	b.n	8006d72 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006d6e:	230f      	movs	r3, #15
 8006d70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d13a      	bne.n	8006e12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	f003 030f 	and.w	r3, r3, #15
 8006dac:	2101      	movs	r1, #1
 8006dae:	fa01 f303 	lsl.w	r3, r1, r3
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	68f9      	ldr	r1, [r7, #12]
 8006db6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d155      	bne.n	8006e80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	791b      	ldrb	r3, [r3, #4]
 8006dee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006df0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	059b      	lsls	r3, r3, #22
 8006df6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	0151      	lsls	r1, r2, #5
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	440a      	add	r2, r1
 8006e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	e036      	b.n	8006e80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	2101      	movs	r1, #1
 8006e24:	fa01 f303 	lsl.w	r3, r1, r3
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	68f9      	ldr	r1, [r7, #12]
 8006e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e30:	4313      	orrs	r3, r2
 8006e32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d11a      	bne.n	8006e80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	791b      	ldrb	r3, [r3, #4]
 8006e64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e66:	430b      	orrs	r3, r1
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	785b      	ldrb	r3, [r3, #1]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d161      	bne.n	8006f70 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ec2:	d11f      	bne.n	8006f04 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	0151      	lsls	r1, r2, #5
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	440a      	add	r2, r1
 8006eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ee2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006efe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f02:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	2101      	movs	r1, #1
 8006f16:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f24:	4013      	ands	r3, r2
 8006f26:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2e:	69da      	ldr	r2, [r3, #28]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	2101      	movs	r1, #1
 8006f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	43db      	mvns	r3, r3
 8006f42:	68f9      	ldr	r1, [r7, #12]
 8006f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f48:	4013      	ands	r3, r2
 8006f4a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	0159      	lsls	r1, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	4619      	mov	r1, r3
 8006f68:	4b35      	ldr	r3, [pc, #212]	; (8007040 <USB_DeactivateEndpoint+0x1b0>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	600b      	str	r3, [r1, #0]
 8006f6e:	e060      	b.n	8007032 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f86:	d11f      	bne.n	8006fc8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	0151      	lsls	r1, r2, #5
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fa6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fc6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	2101      	movs	r1, #1
 8006fda:	fa01 f303 	lsl.w	r3, r1, r3
 8006fde:	041b      	lsls	r3, r3, #16
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe8:	4013      	ands	r3, r2
 8006fea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff2:	69da      	ldr	r2, [r3, #28]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f003 030f 	and.w	r3, r3, #15
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8007002:	041b      	lsls	r3, r3, #16
 8007004:	43db      	mvns	r3, r3
 8007006:	68f9      	ldr	r1, [r7, #12]
 8007008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800700c:	4013      	ands	r3, r2
 800700e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	0159      	lsls	r1, r3, #5
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	440b      	add	r3, r1
 8007026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702a:	4619      	mov	r1, r3
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <USB_DeactivateEndpoint+0x1b4>)
 800702e:	4013      	ands	r3, r2
 8007030:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	ec337800 	.word	0xec337800
 8007044:	eff37800 	.word	0xeff37800

08007048 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b01      	cmp	r3, #1
 8007066:	f040 815c 	bne.w	8007322 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d132      	bne.n	80070d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	69fa      	ldr	r2, [r7, #28]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d0:	0cdb      	lsrs	r3, r3, #19
 80070d2:	04db      	lsls	r3, r3, #19
 80070d4:	6113      	str	r3, [r2, #16]
 80070d6:	e074      	b.n	80071c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	0151      	lsls	r1, r2, #5
 80070ea:	69fa      	ldr	r2, [r7, #28]
 80070ec:	440a      	add	r2, r1
 80070ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f2:	0cdb      	lsrs	r3, r3, #19
 80070f4:	04db      	lsls	r3, r3, #19
 80070f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007112:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007116:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800711a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007128:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6999      	ldr	r1, [r3, #24]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	440b      	add	r3, r1
 8007134:	1e59      	subs	r1, r3, #1
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	fbb1 f3f3 	udiv	r3, r1, r3
 800713e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007140:	4b9d      	ldr	r3, [pc, #628]	; (80073b8 <USB_EPStartXfer+0x370>)
 8007142:	400b      	ands	r3, r1
 8007144:	69b9      	ldr	r1, [r7, #24]
 8007146:	0148      	lsls	r0, r1, #5
 8007148:	69f9      	ldr	r1, [r7, #28]
 800714a:	4401      	add	r1, r0
 800714c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007150:	4313      	orrs	r3, r2
 8007152:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800716a:	69b9      	ldr	r1, [r7, #24]
 800716c:	0148      	lsls	r0, r1, #5
 800716e:	69f9      	ldr	r1, [r7, #28]
 8007170:	4401      	add	r1, r0
 8007172:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007176:	4313      	orrs	r3, r2
 8007178:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	791b      	ldrb	r3, [r3, #4]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d11f      	bne.n	80071c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80071a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	69fa      	ldr	r2, [r7, #28]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d14b      	bne.n	8007260 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d009      	beq.n	80071e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	461a      	mov	r2, r3
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	791b      	ldrb	r3, [r3, #4]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d128      	bne.n	800723e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d110      	bne.n	800721e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e00f      	b.n	800723e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800723c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	69fa      	ldr	r2, [r7, #28]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007258:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e133      	b.n	80074c8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	0151      	lsls	r1, r2, #5
 8007272:	69fa      	ldr	r2, [r7, #28]
 8007274:	440a      	add	r2, r1
 8007276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800727e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	791b      	ldrb	r3, [r3, #4]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d015      	beq.n	80072b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 811b 	beq.w	80074c8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	2101      	movs	r1, #1
 80072a4:	fa01 f303 	lsl.w	r3, r1, r3
 80072a8:	69f9      	ldr	r1, [r7, #28]
 80072aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ae:	4313      	orrs	r3, r2
 80072b0:	634b      	str	r3, [r1, #52]	; 0x34
 80072b2:	e109      	b.n	80074c8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d110      	bne.n	80072e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	0151      	lsls	r1, r2, #5
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	440a      	add	r2, r1
 80072da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072e2:	6013      	str	r3, [r2, #0]
 80072e4:	e00f      	b.n	8007306 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007304:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6919      	ldr	r1, [r3, #16]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781a      	ldrb	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	b298      	uxth	r0, r3
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4603      	mov	r3, r0
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fade 	bl	80078dc <USB_WritePacket>
 8007320:	e0d2      	b.n	80074c8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	0151      	lsls	r1, r2, #5
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	440a      	add	r2, r1
 8007338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800733c:	0cdb      	lsrs	r3, r3, #19
 800733e:	04db      	lsls	r3, r3, #19
 8007340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	69ba      	ldr	r2, [r7, #24]
 8007352:	0151      	lsls	r1, r2, #5
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	440a      	add	r2, r1
 8007358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800735c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007360:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007364:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d126      	bne.n	80073bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737a:	691a      	ldr	r2, [r3, #16]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007384:	69b9      	ldr	r1, [r7, #24]
 8007386:	0148      	lsls	r0, r1, #5
 8007388:	69f9      	ldr	r1, [r7, #28]
 800738a:	4401      	add	r1, r0
 800738c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007390:	4313      	orrs	r3, r2
 8007392:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073b2:	6113      	str	r3, [r2, #16]
 80073b4:	e03a      	b.n	800742c <USB_EPStartXfer+0x3e4>
 80073b6:	bf00      	nop
 80073b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	699a      	ldr	r2, [r3, #24]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	1e5a      	subs	r2, r3, #1
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	8afa      	ldrh	r2, [r7, #22]
 80073d8:	fb03 f202 	mul.w	r2, r3, r2
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	8afb      	ldrh	r3, [r7, #22]
 80073f0:	04d9      	lsls	r1, r3, #19
 80073f2:	4b38      	ldr	r3, [pc, #224]	; (80074d4 <USB_EPStartXfer+0x48c>)
 80073f4:	400b      	ands	r3, r1
 80073f6:	69b9      	ldr	r1, [r7, #24]
 80073f8:	0148      	lsls	r0, r1, #5
 80073fa:	69f9      	ldr	r1, [r7, #28]
 80073fc:	4401      	add	r1, r0
 80073fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007402:	4313      	orrs	r3, r2
 8007404:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800741c:	69b9      	ldr	r1, [r7, #24]
 800741e:	0148      	lsls	r0, r1, #5
 8007420:	69f9      	ldr	r1, [r7, #28]
 8007422:	4401      	add	r1, r0
 8007424:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007428:	4313      	orrs	r3, r2
 800742a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800742c:	79fb      	ldrb	r3, [r7, #7]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d10d      	bne.n	800744e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6919      	ldr	r1, [r3, #16]
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800744a:	460a      	mov	r2, r1
 800744c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	791b      	ldrb	r3, [r3, #4]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d128      	bne.n	80074a8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007456:	69fb      	ldr	r3, [r7, #28]
 8007458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007462:	2b00      	cmp	r3, #0
 8007464:	d110      	bne.n	8007488 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	440a      	add	r2, r1
 800747c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	e00f      	b.n	80074a8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	0151      	lsls	r1, r2, #5
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	440a      	add	r2, r1
 800749e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	1ff80000 	.word	0x1ff80000

080074d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	f040 80ce 	bne.w	8007696 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d132      	bne.n	8007568 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007524:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	0151      	lsls	r1, r2, #5
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	440a      	add	r2, r1
 800753c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	0151      	lsls	r1, r2, #5
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	440a      	add	r2, r1
 800755c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007560:	0cdb      	lsrs	r3, r3, #19
 8007562:	04db      	lsls	r3, r3, #19
 8007564:	6113      	str	r3, [r2, #16]
 8007566:	e04e      	b.n	8007606 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	440a      	add	r2, r1
 800757e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007582:	0cdb      	lsrs	r3, r3, #19
 8007584:	04db      	lsls	r3, r3, #19
 8007586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	699a      	ldr	r2, [r3, #24]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d903      	bls.n	80075c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f6:	6939      	ldr	r1, [r7, #16]
 80075f8:	0148      	lsls	r0, r1, #5
 80075fa:	6979      	ldr	r1, [r7, #20]
 80075fc:	4401      	add	r1, r0
 80075fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007602:	4313      	orrs	r3, r2
 8007604:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d11e      	bne.n	800764a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d009      	beq.n	8007628 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	461a      	mov	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	0151      	lsls	r1, r2, #5
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	440a      	add	r2, r1
 800763e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	e097      	b.n	800777a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007668:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 8083 	beq.w	800777a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	f003 030f 	and.w	r3, r3, #15
 8007684:	2101      	movs	r1, #1
 8007686:	fa01 f303 	lsl.w	r3, r1, r3
 800768a:	6979      	ldr	r1, [r7, #20]
 800768c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007690:	4313      	orrs	r3, r2
 8007692:	634b      	str	r3, [r1, #52]	; 0x34
 8007694:	e071      	b.n	800777a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b0:	0cdb      	lsrs	r3, r3, #19
 80076b2:	04db      	lsls	r3, r3, #19
 80076b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	0151      	lsls	r1, r2, #5
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	440a      	add	r2, r1
 80076cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	440a      	add	r2, r1
 8007708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007710:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007728:	6939      	ldr	r1, [r7, #16]
 800772a:	0148      	lsls	r0, r1, #5
 800772c:	6979      	ldr	r1, [r7, #20]
 800772e:	4401      	add	r1, r0
 8007730:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007734:	4313      	orrs	r3, r2
 8007736:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d10d      	bne.n	800775a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6919      	ldr	r1, [r3, #16]
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007756:	460a      	mov	r2, r1
 8007758:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	440a      	add	r2, r1
 8007770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007774:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d14a      	bne.n	800783c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077be:	f040 8086 	bne.w	80078ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	7812      	ldrb	r2, [r2, #0]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	7812      	ldrb	r2, [r2, #0]
 80077fa:	0151      	lsls	r1, r2, #5
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	440a      	add	r2, r1
 8007800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007808:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3301      	adds	r3, #1
 800780e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f242 7210 	movw	r2, #10000	; 0x2710
 8007816:	4293      	cmp	r3, r2
 8007818:	d902      	bls.n	8007820 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	75fb      	strb	r3, [r7, #23]
          break;
 800781e:	e056      	b.n	80078ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007838:	d0e7      	beq.n	800780a <USB_EPStopXfer+0x82>
 800783a:	e048      	b.n	80078ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007854:	d13b      	bne.n	80078ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	0151      	lsls	r1, r2, #5
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	440a      	add	r2, r1
 8007870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007874:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007878:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	0151      	lsls	r1, r2, #5
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	440a      	add	r2, r1
 8007894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800789c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d902      	bls.n	80078b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
          break;
 80078b2:	e00c      	b.n	80078ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078cc:	d0e7      	beq.n	800789e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80078dc:	b480      	push	{r7}
 80078de:	b089      	sub	sp, #36	; 0x24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	4611      	mov	r1, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	460b      	mov	r3, r1
 80078ec:	71fb      	strb	r3, [r7, #7]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80078fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d123      	bne.n	800794a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007902:	88bb      	ldrh	r3, [r7, #4]
 8007904:	3303      	adds	r3, #3
 8007906:	089b      	lsrs	r3, r3, #2
 8007908:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800790a:	2300      	movs	r3, #0
 800790c:	61bb      	str	r3, [r7, #24]
 800790e:	e018      	b.n	8007942 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007910:	79fb      	ldrb	r3, [r7, #7]
 8007912:	031a      	lsls	r2, r3, #12
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	4413      	add	r3, r2
 8007918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791c:	461a      	mov	r2, r3
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	3301      	adds	r3, #1
 8007928:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	3301      	adds	r3, #1
 800792e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	3301      	adds	r3, #1
 8007934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	3301      	adds	r3, #1
 800793a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	3301      	adds	r3, #1
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	429a      	cmp	r2, r3
 8007948:	d3e2      	bcc.n	8007910 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3724      	adds	r7, #36	; 0x24
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007958:	b480      	push	{r7}
 800795a:	b08b      	sub	sp, #44	; 0x2c
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800796e:	88fb      	ldrh	r3, [r7, #6]
 8007970:	089b      	lsrs	r3, r3, #2
 8007972:	b29b      	uxth	r3, r3
 8007974:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007976:	88fb      	ldrh	r3, [r7, #6]
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800797e:	2300      	movs	r3, #0
 8007980:	623b      	str	r3, [r7, #32]
 8007982:	e014      	b.n	80079ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	3301      	adds	r3, #1
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007998:	3301      	adds	r3, #1
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	3301      	adds	r3, #1
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	3301      	adds	r3, #1
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	3301      	adds	r3, #1
 80079ac:	623b      	str	r3, [r7, #32]
 80079ae:	6a3a      	ldr	r2, [r7, #32]
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d3e6      	bcc.n	8007984 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079b6:	8bfb      	ldrh	r3, [r7, #30]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01e      	beq.n	80079fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c6:	461a      	mov	r2, r3
 80079c8:	f107 0310 	add.w	r3, r7, #16
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	fa22 f303 	lsr.w	r3, r2, r3
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	701a      	strb	r2, [r3, #0]
      i++;
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	3301      	adds	r3, #1
 80079e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	3301      	adds	r3, #1
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80079ee:	8bfb      	ldrh	r3, [r7, #30]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079f4:	8bfb      	ldrh	r3, [r7, #30]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1ea      	bne.n	80079d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	372c      	adds	r7, #44	; 0x2c
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	785b      	ldrb	r3, [r3, #1]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d12c      	bne.n	8007a7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	db12      	blt.n	8007a5c <USB_EPSetStall+0x54>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00f      	beq.n	8007a5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	0151      	lsls	r1, r2, #5
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	440a      	add	r2, r1
 8007a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	e02b      	b.n	8007ad6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	db12      	blt.n	8007ab6 <USB_EPSetStall+0xae>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00f      	beq.n	8007ab6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	0151      	lsls	r1, r2, #5
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	440a      	add	r2, r1
 8007aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007ab4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	0151      	lsls	r1, r2, #5
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	440a      	add	r2, r1
 8007acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ad4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d128      	bne.n	8007b52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	791b      	ldrb	r3, [r3, #4]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d003      	beq.n	8007b30 <USB_EPClearStall+0x4c>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	791b      	ldrb	r3, [r3, #4]
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d138      	bne.n	8007ba2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	e027      	b.n	8007ba2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	0151      	lsls	r1, r2, #5
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	440a      	add	r2, r1
 8007b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	791b      	ldrb	r3, [r3, #4]
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d003      	beq.n	8007b82 <USB_EPClearStall+0x9e>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	791b      	ldrb	r3, [r3, #4]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d10f      	bne.n	8007ba2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bd2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	78fb      	ldrb	r3, [r7, #3]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007be4:	68f9      	ldr	r1, [r7, #12]
 8007be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bea:	4313      	orrs	r3, r2
 8007bec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c2a:	f023 0302 	bic.w	r3, r3, #2
 8007c2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c58:	f023 0303 	bic.w	r3, r3, #3
 8007c5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c6c:	f043 0302 	orr.w	r3, r3, #2
 8007c70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4013      	ands	r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c98:	68fb      	ldr	r3, [r7, #12]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b085      	sub	sp, #20
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	0c1b      	lsrs	r3, r3, #16
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	b29b      	uxth	r3, r3
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b087      	sub	sp, #28
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
 8007d52:	460b      	mov	r3, r1
 8007d54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7a:	01db      	lsls	r3, r3, #7
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	693a      	ldr	r2, [r7, #16]
 8007d94:	4013      	ands	r3, r2
 8007d96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d98:	68bb      	ldr	r3, [r7, #8]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b083      	sub	sp, #12
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f003 0301 	and.w	r3, r3, #1
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b085      	sub	sp, #20
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ddc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007de0:	f023 0307 	bic.w	r3, r3, #7
 8007de4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007df8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	460b      	mov	r3, r1
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	333c      	adds	r3, #60	; 0x3c
 8007e1e:	3304      	adds	r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	4a26      	ldr	r2, [pc, #152]	; (8007ec0 <USB_EP0_OutStart+0xb8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d90a      	bls.n	8007e42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e3c:	d101      	bne.n	8007e42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e037      	b.n	8007eb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e48:	461a      	mov	r2, r3
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e70:	f043 0318 	orr.w	r3, r3, #24
 8007e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d10f      	bne.n	8007eb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eaa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007eae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	4f54300a 	.word	0x4f54300a

08007ec4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <USB_CoreReset+0x64>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d901      	bls.n	8007ee2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e01b      	b.n	8007f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	daf2      	bge.n	8007ed0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f043 0201 	orr.w	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3301      	adds	r3, #1
 8007efe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4a09      	ldr	r2, [pc, #36]	; (8007f28 <USB_CoreReset+0x64>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d901      	bls.n	8007f0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e006      	b.n	8007f1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d0f0      	beq.n	8007efa <USB_CoreReset+0x36>

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	00030d40 	.word	0x00030d40

08007f2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f3c:	f003 ff20 	bl	800bd80 <USBD_static_malloc>
 8007f40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d109      	bne.n	8007f5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	32b0      	adds	r2, #176	; 0xb0
 8007f52:	2100      	movs	r1, #0
 8007f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e0d4      	b.n	8008106 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007f5c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007f60:	2100      	movs	r1, #0
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f003 ff70 	bl	800be48 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	32b0      	adds	r2, #176	; 0xb0
 8007f72:	68f9      	ldr	r1, [r7, #12]
 8007f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	32b0      	adds	r2, #176	; 0xb0
 8007f82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7c1b      	ldrb	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d138      	bne.n	8008006 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f94:	4b5e      	ldr	r3, [pc, #376]	; (8008110 <USBD_CDC_Init+0x1e4>)
 8007f96:	7819      	ldrb	r1, [r3, #0]
 8007f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f003 fdcb 	bl	800bb3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fa4:	4b5a      	ldr	r3, [pc, #360]	; (8008110 <USBD_CDC_Init+0x1e4>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	f003 020f 	and.w	r2, r3, #15
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	3324      	adds	r3, #36	; 0x24
 8007fba:	2201      	movs	r2, #1
 8007fbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fbe:	4b55      	ldr	r3, [pc, #340]	; (8008114 <USBD_CDC_Init+0x1e8>)
 8007fc0:	7819      	ldrb	r1, [r3, #0]
 8007fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f003 fdb6 	bl	800bb3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fce:	4b51      	ldr	r3, [pc, #324]	; (8008114 <USBD_CDC_Init+0x1e8>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	f003 020f 	and.w	r2, r3, #15
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	440b      	add	r3, r1
 8007fe2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007fea:	4b4b      	ldr	r3, [pc, #300]	; (8008118 <USBD_CDC_Init+0x1ec>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	f003 020f 	and.w	r2, r3, #15
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	440b      	add	r3, r1
 8007ffe:	3326      	adds	r3, #38	; 0x26
 8008000:	2210      	movs	r2, #16
 8008002:	801a      	strh	r2, [r3, #0]
 8008004:	e035      	b.n	8008072 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008006:	4b42      	ldr	r3, [pc, #264]	; (8008110 <USBD_CDC_Init+0x1e4>)
 8008008:	7819      	ldrb	r1, [r3, #0]
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	2202      	movs	r2, #2
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f003 fd93 	bl	800bb3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008014:	4b3e      	ldr	r3, [pc, #248]	; (8008110 <USBD_CDC_Init+0x1e4>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 020f 	and.w	r2, r3, #15
 800801c:	6879      	ldr	r1, [r7, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	3324      	adds	r3, #36	; 0x24
 800802a:	2201      	movs	r2, #1
 800802c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800802e:	4b39      	ldr	r3, [pc, #228]	; (8008114 <USBD_CDC_Init+0x1e8>)
 8008030:	7819      	ldrb	r1, [r3, #0]
 8008032:	2340      	movs	r3, #64	; 0x40
 8008034:	2202      	movs	r2, #2
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f003 fd7f 	bl	800bb3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800803c:	4b35      	ldr	r3, [pc, #212]	; (8008114 <USBD_CDC_Init+0x1e8>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 020f 	and.w	r2, r3, #15
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	440b      	add	r3, r1
 8008050:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008054:	2201      	movs	r2, #1
 8008056:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008058:	4b2f      	ldr	r3, [pc, #188]	; (8008118 <USBD_CDC_Init+0x1ec>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	f003 020f 	and.w	r2, r3, #15
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	3326      	adds	r3, #38	; 0x26
 800806e:	2210      	movs	r2, #16
 8008070:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008072:	4b29      	ldr	r3, [pc, #164]	; (8008118 <USBD_CDC_Init+0x1ec>)
 8008074:	7819      	ldrb	r1, [r3, #0]
 8008076:	2308      	movs	r3, #8
 8008078:	2203      	movs	r2, #3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f003 fd5d 	bl	800bb3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008080:	4b25      	ldr	r3, [pc, #148]	; (8008118 <USBD_CDC_Init+0x1ec>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 020f 	and.w	r2, r3, #15
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	4613      	mov	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	440b      	add	r3, r1
 8008094:	3324      	adds	r3, #36	; 0x24
 8008096:	2201      	movs	r2, #1
 8008098:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	33b0      	adds	r3, #176	; 0xb0
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d101      	bne.n	80080d4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80080d0:	2302      	movs	r3, #2
 80080d2:	e018      	b.n	8008106 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	7c1b      	ldrb	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10a      	bne.n	80080f2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080dc:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <USBD_CDC_Init+0x1e8>)
 80080de:	7819      	ldrb	r1, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f003 fe14 	bl	800bd18 <USBD_LL_PrepareReceive>
 80080f0:	e008      	b.n	8008104 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080f2:	4b08      	ldr	r3, [pc, #32]	; (8008114 <USBD_CDC_Init+0x1e8>)
 80080f4:	7819      	ldrb	r1, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080fc:	2340      	movs	r3, #64	; 0x40
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f003 fe0a 	bl	800bd18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	200000c7 	.word	0x200000c7
 8008114:	200000c8 	.word	0x200000c8
 8008118:	200000c9 	.word	0x200000c9

0800811c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008128:	4b3a      	ldr	r3, [pc, #232]	; (8008214 <USBD_CDC_DeInit+0xf8>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f003 fd29 	bl	800bb86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008134:	4b37      	ldr	r3, [pc, #220]	; (8008214 <USBD_CDC_DeInit+0xf8>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	f003 020f 	and.w	r2, r3, #15
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	3324      	adds	r3, #36	; 0x24
 800814a:	2200      	movs	r2, #0
 800814c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800814e:	4b32      	ldr	r3, [pc, #200]	; (8008218 <USBD_CDC_DeInit+0xfc>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f003 fd16 	bl	800bb86 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <USBD_CDC_DeInit+0xfc>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	f003 020f 	and.w	r2, r3, #15
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008172:	2200      	movs	r2, #0
 8008174:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008176:	4b29      	ldr	r3, [pc, #164]	; (800821c <USBD_CDC_DeInit+0x100>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f003 fd02 	bl	800bb86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008182:	4b26      	ldr	r3, [pc, #152]	; (800821c <USBD_CDC_DeInit+0x100>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f003 020f 	and.w	r2, r3, #15
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	3324      	adds	r3, #36	; 0x24
 8008198:	2200      	movs	r2, #0
 800819a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800819c:	4b1f      	ldr	r3, [pc, #124]	; (800821c <USBD_CDC_DeInit+0x100>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	f003 020f 	and.w	r2, r3, #15
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	3326      	adds	r3, #38	; 0x26
 80081b2:	2200      	movs	r2, #0
 80081b4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	32b0      	adds	r2, #176	; 0xb0
 80081c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01f      	beq.n	8008208 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	33b0      	adds	r3, #176	; 0xb0
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32b0      	adds	r2, #176	; 0xb0
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f003 fdd6 	bl	800bd9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	32b0      	adds	r2, #176	; 0xb0
 80081fa:	2100      	movs	r1, #0
 80081fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	200000c7 	.word	0x200000c7
 8008218:	200000c8 	.word	0x200000c8
 800821c:	200000c9 	.word	0x200000c9

08008220 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	32b0      	adds	r2, #176	; 0xb0
 8008234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008238:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d101      	bne.n	8008250 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800824c:	2303      	movs	r3, #3
 800824e:	e0bf      	b.n	80083d0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008258:	2b00      	cmp	r3, #0
 800825a:	d050      	beq.n	80082fe <USBD_CDC_Setup+0xde>
 800825c:	2b20      	cmp	r3, #32
 800825e:	f040 80af 	bne.w	80083c0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	88db      	ldrh	r3, [r3, #6]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d03a      	beq.n	80082e0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	b25b      	sxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	da1b      	bge.n	80082ac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	33b0      	adds	r3, #176	; 0xb0
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800828a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	88d2      	ldrh	r2, [r2, #6]
 8008290:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	88db      	ldrh	r3, [r3, #6]
 8008296:	2b07      	cmp	r3, #7
 8008298:	bf28      	it	cs
 800829a:	2307      	movcs	r3, #7
 800829c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	89fa      	ldrh	r2, [r7, #14]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 fd89 	bl	8009dbc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80082aa:	e090      	b.n	80083ce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	785a      	ldrb	r2, [r3, #1]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	88db      	ldrh	r3, [r3, #6]
 80082ba:	2b3f      	cmp	r3, #63	; 0x3f
 80082bc:	d803      	bhi.n	80082c6 <USBD_CDC_Setup+0xa6>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	88db      	ldrh	r3, [r3, #6]
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	e000      	b.n	80082c8 <USBD_CDC_Setup+0xa8>
 80082c6:	2240      	movs	r2, #64	; 0x40
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80082ce:	6939      	ldr	r1, [r7, #16]
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80082d6:	461a      	mov	r2, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 fd9b 	bl	8009e14 <USBD_CtlPrepareRx>
      break;
 80082de:	e076      	b.n	80083ce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	33b0      	adds	r3, #176	; 0xb0
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	7850      	ldrb	r0, [r2, #1]
 80082f6:	2200      	movs	r2, #0
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	4798      	blx	r3
      break;
 80082fc:	e067      	b.n	80083ce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b0b      	cmp	r3, #11
 8008304:	d851      	bhi.n	80083aa <USBD_CDC_Setup+0x18a>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <USBD_CDC_Setup+0xec>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	0800833d 	.word	0x0800833d
 8008310:	080083b9 	.word	0x080083b9
 8008314:	080083ab 	.word	0x080083ab
 8008318:	080083ab 	.word	0x080083ab
 800831c:	080083ab 	.word	0x080083ab
 8008320:	080083ab 	.word	0x080083ab
 8008324:	080083ab 	.word	0x080083ab
 8008328:	080083ab 	.word	0x080083ab
 800832c:	080083ab 	.word	0x080083ab
 8008330:	080083ab 	.word	0x080083ab
 8008334:	08008367 	.word	0x08008367
 8008338:	08008391 	.word	0x08008391
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b03      	cmp	r3, #3
 8008346:	d107      	bne.n	8008358 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008348:	f107 030a 	add.w	r3, r7, #10
 800834c:	2202      	movs	r2, #2
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 fd33 	bl	8009dbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008356:	e032      	b.n	80083be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fcbd 	bl	8009cda <USBD_CtlError>
            ret = USBD_FAIL;
 8008360:	2303      	movs	r3, #3
 8008362:	75fb      	strb	r3, [r7, #23]
          break;
 8008364:	e02b      	b.n	80083be <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b03      	cmp	r3, #3
 8008370:	d107      	bne.n	8008382 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008372:	f107 030d 	add.w	r3, r7, #13
 8008376:	2201      	movs	r2, #1
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fd1e 	bl	8009dbc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008380:	e01d      	b.n	80083be <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 fca8 	bl	8009cda <USBD_CtlError>
            ret = USBD_FAIL;
 800838a:	2303      	movs	r3, #3
 800838c:	75fb      	strb	r3, [r7, #23]
          break;
 800838e:	e016      	b.n	80083be <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b03      	cmp	r3, #3
 800839a:	d00f      	beq.n	80083bc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fc9b 	bl	8009cda <USBD_CtlError>
            ret = USBD_FAIL;
 80083a4:	2303      	movs	r3, #3
 80083a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083a8:	e008      	b.n	80083bc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 fc94 	bl	8009cda <USBD_CtlError>
          ret = USBD_FAIL;
 80083b2:	2303      	movs	r3, #3
 80083b4:	75fb      	strb	r3, [r7, #23]
          break;
 80083b6:	e002      	b.n	80083be <USBD_CDC_Setup+0x19e>
          break;
 80083b8:	bf00      	nop
 80083ba:	e008      	b.n	80083ce <USBD_CDC_Setup+0x1ae>
          break;
 80083bc:	bf00      	nop
      }
      break;
 80083be:	e006      	b.n	80083ce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 fc89 	bl	8009cda <USBD_CtlError>
      ret = USBD_FAIL;
 80083c8:	2303      	movs	r3, #3
 80083ca:	75fb      	strb	r3, [r7, #23]
      break;
 80083cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	32b0      	adds	r2, #176	; 0xb0
 80083f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80083fe:	2303      	movs	r3, #3
 8008400:	e065      	b.n	80084ce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	32b0      	adds	r2, #176	; 0xb0
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	f003 020f 	and.w	r2, r3, #15
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	440b      	add	r3, r1
 8008424:	3318      	adds	r3, #24
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d02f      	beq.n	800848c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	f003 020f 	and.w	r2, r3, #15
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	3318      	adds	r3, #24
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	f003 010f 	and.w	r1, r3, #15
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	460b      	mov	r3, r1
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	440b      	add	r3, r1
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4403      	add	r3, r0
 8008454:	3348      	adds	r3, #72	; 0x48
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	fbb2 f1f3 	udiv	r1, r2, r3
 800845c:	fb01 f303 	mul.w	r3, r1, r3
 8008460:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008462:	2b00      	cmp	r3, #0
 8008464:	d112      	bne.n	800848c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	f003 020f 	and.w	r2, r3, #15
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	3318      	adds	r3, #24
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800847e:	78f9      	ldrb	r1, [r7, #3]
 8008480:	2300      	movs	r3, #0
 8008482:	2200      	movs	r2, #0
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f003 fc26 	bl	800bcd6 <USBD_LL_Transmit>
 800848a:	e01f      	b.n	80084cc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	33b0      	adds	r3, #176	; 0xb0
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d010      	beq.n	80084cc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	33b0      	adds	r3, #176	; 0xb0
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	4413      	add	r3, r2
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	32b0      	adds	r2, #176	; 0xb0
 80084ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	32b0      	adds	r2, #176	; 0xb0
 80084fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	e01a      	b.n	800853e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f003 fc24 	bl	800bd5a <USBD_LL_GetRxDataSize>
 8008512:	4602      	mov	r2, r0
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	33b0      	adds	r3, #176	; 0xb0
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008538:	4611      	mov	r1, r2
 800853a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	32b0      	adds	r2, #176	; 0xb0
 8008558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800855c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008564:	2303      	movs	r3, #3
 8008566:	e025      	b.n	80085b4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	33b0      	adds	r3, #176	; 0xb0
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01a      	beq.n	80085b2 <USBD_CDC_EP0_RxReady+0x6c>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008582:	2bff      	cmp	r3, #255	; 0xff
 8008584:	d015      	beq.n	80085b2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	33b0      	adds	r3, #176	; 0xb0
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800859e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085a6:	b292      	uxth	r2, r2
 80085a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	22ff      	movs	r2, #255	; 0xff
 80085ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085c4:	2182      	movs	r1, #130	; 0x82
 80085c6:	4818      	ldr	r0, [pc, #96]	; (8008628 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085c8:	f000 fd4f 	bl	800906a <USBD_GetEpDesc>
 80085cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085ce:	2101      	movs	r1, #1
 80085d0:	4815      	ldr	r0, [pc, #84]	; (8008628 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085d2:	f000 fd4a 	bl	800906a <USBD_GetEpDesc>
 80085d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085d8:	2181      	movs	r1, #129	; 0x81
 80085da:	4813      	ldr	r0, [pc, #76]	; (8008628 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80085dc:	f000 fd45 	bl	800906a <USBD_GetEpDesc>
 80085e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2210      	movs	r2, #16
 80085ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d006      	beq.n	8008602 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085fc:	711a      	strb	r2, [r3, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d006      	beq.n	8008616 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008610:	711a      	strb	r2, [r3, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2243      	movs	r2, #67	; 0x43
 800861a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800861c:	4b02      	ldr	r3, [pc, #8]	; (8008628 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000084 	.word	0x20000084

0800862c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008634:	2182      	movs	r1, #130	; 0x82
 8008636:	4818      	ldr	r0, [pc, #96]	; (8008698 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008638:	f000 fd17 	bl	800906a <USBD_GetEpDesc>
 800863c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800863e:	2101      	movs	r1, #1
 8008640:	4815      	ldr	r0, [pc, #84]	; (8008698 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008642:	f000 fd12 	bl	800906a <USBD_GetEpDesc>
 8008646:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008648:	2181      	movs	r1, #129	; 0x81
 800864a:	4813      	ldr	r0, [pc, #76]	; (8008698 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800864c:	f000 fd0d 	bl	800906a <USBD_GetEpDesc>
 8008650:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2210      	movs	r2, #16
 800865c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d006      	beq.n	8008672 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	2200      	movs	r2, #0
 8008668:	711a      	strb	r2, [r3, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f042 0202 	orr.w	r2, r2, #2
 8008670:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d006      	beq.n	8008686 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	711a      	strb	r2, [r3, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f042 0202 	orr.w	r2, r2, #2
 8008684:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2243      	movs	r2, #67	; 0x43
 800868a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000084 	.word	0x20000084

0800869c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086a4:	2182      	movs	r1, #130	; 0x82
 80086a6:	4818      	ldr	r0, [pc, #96]	; (8008708 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086a8:	f000 fcdf 	bl	800906a <USBD_GetEpDesc>
 80086ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086ae:	2101      	movs	r1, #1
 80086b0:	4815      	ldr	r0, [pc, #84]	; (8008708 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086b2:	f000 fcda 	bl	800906a <USBD_GetEpDesc>
 80086b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086b8:	2181      	movs	r1, #129	; 0x81
 80086ba:	4813      	ldr	r0, [pc, #76]	; (8008708 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80086bc:	f000 fcd5 	bl	800906a <USBD_GetEpDesc>
 80086c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2210      	movs	r2, #16
 80086cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086dc:	711a      	strb	r2, [r3, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d006      	beq.n	80086f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086f0:	711a      	strb	r2, [r3, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2243      	movs	r2, #67	; 0x43
 80086fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20000084 	.word	0x20000084

0800870c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	220a      	movs	r2, #10
 8008718:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800871a:	4b03      	ldr	r3, [pc, #12]	; (8008728 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800871c:	4618      	mov	r0, r3
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	20000040 	.word	0x20000040

0800872c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800873c:	2303      	movs	r3, #3
 800873e:	e009      	b.n	8008754 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	33b0      	adds	r3, #176	; 0xb0
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	32b0      	adds	r2, #176	; 0xb0
 8008776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008782:	2303      	movs	r3, #3
 8008784:	e008      	b.n	8008798 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	32b0      	adds	r2, #176	; 0xb0
 80087b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e004      	b.n	80087d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	32b0      	adds	r2, #176	; 0xb0
 80087f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80087f8:	2301      	movs	r3, #1
 80087fa:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	32b0      	adds	r2, #176	; 0xb0
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800880e:	2303      	movs	r3, #3
 8008810:	e025      	b.n	800885e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008818:	2b00      	cmp	r3, #0
 800881a:	d11f      	bne.n	800885c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2201      	movs	r2, #1
 8008820:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008824:	4b10      	ldr	r3, [pc, #64]	; (8008868 <USBD_CDC_TransmitPacket+0x88>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	f003 020f 	and.w	r2, r3, #15
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4403      	add	r3, r0
 800883e:	3318      	adds	r3, #24
 8008840:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008842:	4b09      	ldr	r3, [pc, #36]	; (8008868 <USBD_CDC_TransmitPacket+0x88>)
 8008844:	7819      	ldrb	r1, [r3, #0]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f003 fa3f 	bl	800bcd6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	200000c7 	.word	0x200000c7

0800886c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	32b0      	adds	r2, #176	; 0xb0
 800887e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008882:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32b0      	adds	r2, #176	; 0xb0
 800888e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008896:	2303      	movs	r3, #3
 8008898:	e018      	b.n	80088cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7c1b      	ldrb	r3, [r3, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088a2:	4b0c      	ldr	r3, [pc, #48]	; (80088d4 <USBD_CDC_ReceivePacket+0x68>)
 80088a4:	7819      	ldrb	r1, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f003 fa31 	bl	800bd18 <USBD_LL_PrepareReceive>
 80088b6:	e008      	b.n	80088ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088b8:	4b06      	ldr	r3, [pc, #24]	; (80088d4 <USBD_CDC_ReceivePacket+0x68>)
 80088ba:	7819      	ldrb	r1, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088c2:	2340      	movs	r3, #64	; 0x40
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f003 fa27 	bl	800bd18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	200000c8 	.word	0x200000c8

080088d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e01f      	b.n	8008930 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	79fa      	ldrb	r2, [r7, #7]
 8008922:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f003 f8a1 	bl	800ba6c <USBD_LL_Init>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008942:	2300      	movs	r3, #0
 8008944:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800894c:	2303      	movs	r3, #3
 800894e:	e025      	b.n	800899c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	32ae      	adds	r2, #174	; 0xae
 8008962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00f      	beq.n	800898c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	32ae      	adds	r2, #174	; 0xae
 8008976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	f107 020e 	add.w	r2, r7, #14
 8008980:	4610      	mov	r0, r2
 8008982:	4798      	blx	r3
 8008984:	4602      	mov	r2, r0
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008992:	1c5a      	adds	r2, r3, #1
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f003 f8a9 	bl	800bb04 <USBD_LL_Start>
 80089b2:	4603      	mov	r3, r0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	460b      	mov	r3, r1
 80089dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d009      	beq.n	8008a00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	78fa      	ldrb	r2, [r7, #3]
 80089f6:	4611      	mov	r1, r2
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	4798      	blx	r3
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b084      	sub	sp, #16
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	460b      	mov	r3, r1
 8008a14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	4611      	mov	r1, r2
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	4798      	blx	r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a30:	2303      	movs	r3, #3
 8008a32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 f908 	bl	8009c66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a64:	461a      	mov	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a72:	f003 031f 	and.w	r3, r3, #31
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d01a      	beq.n	8008ab0 <USBD_LL_SetupStage+0x72>
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d822      	bhi.n	8008ac4 <USBD_LL_SetupStage+0x86>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <USBD_LL_SetupStage+0x4a>
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d00a      	beq.n	8008a9c <USBD_LL_SetupStage+0x5e>
 8008a86:	e01d      	b.n	8008ac4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fb5f 	bl	8009154 <USBD_StdDevReq>
 8008a96:	4603      	mov	r3, r0
 8008a98:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9a:	e020      	b.n	8008ade <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fbc7 	bl	8009238 <USBD_StdItfReq>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	73fb      	strb	r3, [r7, #15]
      break;
 8008aae:	e016      	b.n	8008ade <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fc29 	bl	8009310 <USBD_StdEPReq>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac2:	e00c      	b.n	8008ade <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008aca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f003 f876 	bl	800bbc4 <USBD_LL_StallEP>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
      break;
 8008adc:	bf00      	nop
  }

  return ret;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	460b      	mov	r3, r1
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008afa:	7afb      	ldrb	r3, [r7, #11]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d16e      	bne.n	8008bde <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	f040 8098 	bne.w	8008c44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d913      	bls.n	8008b48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	1ad2      	subs	r2, r2, r3
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	68da      	ldr	r2, [r3, #12]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	4293      	cmp	r3, r2
 8008b38:	bf28      	it	cs
 8008b3a:	4613      	movcs	r3, r2
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f001 f984 	bl	8009e4e <USBD_CtlContinueRx>
 8008b46:	e07d      	b.n	8008c44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b4e:	f003 031f 	and.w	r3, r3, #31
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d014      	beq.n	8008b80 <USBD_LL_DataOutStage+0x98>
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d81d      	bhi.n	8008b96 <USBD_LL_DataOutStage+0xae>
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <USBD_LL_DataOutStage+0x7c>
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d003      	beq.n	8008b6a <USBD_LL_DataOutStage+0x82>
 8008b62:	e018      	b.n	8008b96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75bb      	strb	r3, [r7, #22]
            break;
 8008b68:	e018      	b.n	8008b9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	4619      	mov	r1, r3
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fa5e 	bl	8009036 <USBD_CoreFindIF>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75bb      	strb	r3, [r7, #22]
            break;
 8008b7e:	e00d      	b.n	8008b9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	4619      	mov	r1, r3
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f000 fa60 	bl	8009050 <USBD_CoreFindEP>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75bb      	strb	r3, [r7, #22]
            break;
 8008b94:	e002      	b.n	8008b9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	75bb      	strb	r3, [r7, #22]
            break;
 8008b9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b9c:	7dbb      	ldrb	r3, [r7, #22]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d119      	bne.n	8008bd6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d113      	bne.n	8008bd6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008bae:	7dba      	ldrb	r2, [r7, #22]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	32ae      	adds	r2, #174	; 0xae
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00b      	beq.n	8008bd6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008bbe:	7dba      	ldrb	r2, [r7, #22]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bc6:	7dba      	ldrb	r2, [r7, #22]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	32ae      	adds	r2, #174	; 0xae
 8008bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f001 f94a 	bl	8009e70 <USBD_CtlSendStatus>
 8008bdc:	e032      	b.n	8008c44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008bde:	7afb      	ldrb	r3, [r7, #11]
 8008be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	4619      	mov	r1, r3
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 fa31 	bl	8009050 <USBD_CoreFindEP>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bf2:	7dbb      	ldrb	r3, [r7, #22]
 8008bf4:	2bff      	cmp	r3, #255	; 0xff
 8008bf6:	d025      	beq.n	8008c44 <USBD_LL_DataOutStage+0x15c>
 8008bf8:	7dbb      	ldrb	r3, [r7, #22]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d122      	bne.n	8008c44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d117      	bne.n	8008c3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c0a:	7dba      	ldrb	r2, [r7, #22]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	32ae      	adds	r2, #174	; 0xae
 8008c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00f      	beq.n	8008c3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c1a:	7dba      	ldrb	r2, [r7, #22]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c22:	7dba      	ldrb	r2, [r7, #22]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	32ae      	adds	r2, #174	; 0xae
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	7afa      	ldrb	r2, [r7, #11]
 8008c30:	4611      	mov	r1, r2
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	4798      	blx	r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	e000      	b.n	8008c46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b086      	sub	sp, #24
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	460b      	mov	r3, r1
 8008c58:	607a      	str	r2, [r7, #4]
 8008c5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c5c:	7afb      	ldrb	r3, [r7, #11]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d16f      	bne.n	8008d42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	3314      	adds	r3, #20
 8008c66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d15a      	bne.n	8008d28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d914      	bls.n	8008ca8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	1ad2      	subs	r2, r2, r3
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6879      	ldr	r1, [r7, #4]
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f001 f8ac 	bl	8009df2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f003 f839 	bl	800bd18 <USBD_LL_PrepareReceive>
 8008ca6:	e03f      	b.n	8008d28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	68da      	ldr	r2, [r3, #12]
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d11c      	bne.n	8008cee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d316      	bcc.n	8008cee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d20f      	bcs.n	8008cee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f001 f88d 	bl	8009df2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f003 f816 	bl	800bd18 <USBD_LL_PrepareReceive>
 8008cec:	e01c      	b.n	8008d28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d10f      	bne.n	8008d1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d1a:	2180      	movs	r1, #128	; 0x80
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f002 ff51 	bl	800bbc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f001 f8b7 	bl	8009e96 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d03a      	beq.n	8008da8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fe42 	bl	80089bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d40:	e032      	b.n	8008da8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f000 f97f 	bl	8009050 <USBD_CoreFindEP>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	2bff      	cmp	r3, #255	; 0xff
 8008d5a:	d025      	beq.n	8008da8 <USBD_LL_DataInStage+0x15a>
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d122      	bne.n	8008da8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d11c      	bne.n	8008da8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d6e:	7dfa      	ldrb	r2, [r7, #23]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	32ae      	adds	r2, #174	; 0xae
 8008d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d014      	beq.n	8008da8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d7e:	7dfa      	ldrb	r2, [r7, #23]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d86:	7dfa      	ldrb	r2, [r7, #23]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	32ae      	adds	r2, #174	; 0xae
 8008d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	7afa      	ldrb	r2, [r7, #11]
 8008d94:	4611      	mov	r1, r2
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	4798      	blx	r3
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d9e:	7dbb      	ldrb	r3, [r7, #22]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008da4:	7dbb      	ldrb	r3, [r7, #22]
 8008da6:	e000      	b.n	8008daa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d014      	beq.n	8008e18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d00e      	beq.n	8008e18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	6852      	ldr	r2, [r2, #4]
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	4611      	mov	r1, r2
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	4798      	blx	r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e14:	2303      	movs	r3, #3
 8008e16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e18:	2340      	movs	r3, #64	; 0x40
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f002 fe8b 	bl	800bb3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2240      	movs	r2, #64	; 0x40
 8008e30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e34:	2340      	movs	r3, #64	; 0x40
 8008e36:	2200      	movs	r2, #0
 8008e38:	2180      	movs	r1, #128	; 0x80
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f002 fe7d 	bl	800bb3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2240      	movs	r2, #64	; 0x40
 8008e4a:	621a      	str	r2, [r3, #32]

  return ret;
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b083      	sub	sp, #12
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	78fa      	ldrb	r2, [r7, #3]
 8008e66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d106      	bne.n	8008ec4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d110      	bne.n	8008f08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef6:	69db      	ldr	r3, [r3, #28]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	32ae      	adds	r2, #174	; 0xae
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e01c      	b.n	8008f6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d115      	bne.n	8008f6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	32ae      	adds	r2, #174	; 0xae
 8008f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00b      	beq.n	8008f6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	32ae      	adds	r2, #174	; 0xae
 8008f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f62:	6a1b      	ldr	r3, [r3, #32]
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	4611      	mov	r1, r2
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b082      	sub	sp, #8
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	32ae      	adds	r2, #174	; 0xae
 8008f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e01c      	b.n	8008fd2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b03      	cmp	r3, #3
 8008fa2:	d115      	bne.n	8008fd0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	32ae      	adds	r2, #174	; 0xae
 8008fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00b      	beq.n	8008fd0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	32ae      	adds	r2, #174	; 0xae
 8008fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	78fa      	ldrb	r2, [r7, #3]
 8008fca:	4611      	mov	r1, r2
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00e      	beq.n	800902c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6852      	ldr	r2, [r2, #4]
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	4611      	mov	r1, r2
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009042:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800905c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b086      	sub	sp, #24
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	885b      	ldrh	r3, [r3, #2]
 8009086:	b29a      	uxth	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	b29b      	uxth	r3, r3
 800908e:	429a      	cmp	r2, r3
 8009090:	d920      	bls.n	80090d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800909a:	e013      	b.n	80090c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800909c:	f107 030a 	add.w	r3, r7, #10
 80090a0:	4619      	mov	r1, r3
 80090a2:	6978      	ldr	r0, [r7, #20]
 80090a4:	f000 f81b 	bl	80090de <USBD_GetNextDesc>
 80090a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	d108      	bne.n	80090c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	789b      	ldrb	r3, [r3, #2]
 80090ba:	78fa      	ldrb	r2, [r7, #3]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d008      	beq.n	80090d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090c0:	2300      	movs	r3, #0
 80090c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	885b      	ldrh	r3, [r3, #2]
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	897b      	ldrh	r3, [r7, #10]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d8e5      	bhi.n	800909c <USBD_GetEpDesc+0x32>
 80090d0:	e000      	b.n	80090d4 <USBD_GetEpDesc+0x6a>
          break;
 80090d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80090d4:	693b      	ldr	r3, [r7, #16]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	881a      	ldrh	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	4413      	add	r3, r2
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800910a:	68fb      	ldr	r3, [r7, #12]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	3301      	adds	r3, #1
 800912e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009136:	8a3b      	ldrh	r3, [r7, #16]
 8009138:	021b      	lsls	r3, r3, #8
 800913a:	b21a      	sxth	r2, r3
 800913c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009140:	4313      	orrs	r3, r2
 8009142:	b21b      	sxth	r3, r3
 8009144:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009146:	89fb      	ldrh	r3, [r7, #14]
}
 8009148:	4618      	mov	r0, r3
 800914a:	371c      	adds	r7, #28
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800916a:	2b40      	cmp	r3, #64	; 0x40
 800916c:	d005      	beq.n	800917a <USBD_StdDevReq+0x26>
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	d857      	bhi.n	8009222 <USBD_StdDevReq+0xce>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00f      	beq.n	8009196 <USBD_StdDevReq+0x42>
 8009176:	2b20      	cmp	r3, #32
 8009178:	d153      	bne.n	8009222 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	32ae      	adds	r2, #174	; 0xae
 8009184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
      break;
 8009194:	e04a      	b.n	800922c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	785b      	ldrb	r3, [r3, #1]
 800919a:	2b09      	cmp	r3, #9
 800919c:	d83b      	bhi.n	8009216 <USBD_StdDevReq+0xc2>
 800919e:	a201      	add	r2, pc, #4	; (adr r2, 80091a4 <USBD_StdDevReq+0x50>)
 80091a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a4:	080091f9 	.word	0x080091f9
 80091a8:	0800920d 	.word	0x0800920d
 80091ac:	08009217 	.word	0x08009217
 80091b0:	08009203 	.word	0x08009203
 80091b4:	08009217 	.word	0x08009217
 80091b8:	080091d7 	.word	0x080091d7
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	08009217 	.word	0x08009217
 80091c4:	080091ef 	.word	0x080091ef
 80091c8:	080091e1 	.word	0x080091e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fa3c 	bl	800964c <USBD_GetDescriptor>
          break;
 80091d4:	e024      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80091d6:	6839      	ldr	r1, [r7, #0]
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fba1 	bl	8009920 <USBD_SetAddress>
          break;
 80091de:	e01f      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fbe0 	bl	80099a8 <USBD_SetConfig>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
          break;
 80091ec:	e018      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fc83 	bl	8009afc <USBD_GetConfig>
          break;
 80091f6:	e013      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fcb4 	bl	8009b68 <USBD_GetStatus>
          break;
 8009200:	e00e      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fce3 	bl	8009bd0 <USBD_SetFeature>
          break;
 800920a:	e009      	b.n	8009220 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fd07 	bl	8009c22 <USBD_ClrFeature>
          break;
 8009214:	e004      	b.n	8009220 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fd5e 	bl	8009cda <USBD_CtlError>
          break;
 800921e:	bf00      	nop
      }
      break;
 8009220:	e004      	b.n	800922c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fd58 	bl	8009cda <USBD_CtlError>
      break;
 800922a:	bf00      	nop
  }

  return ret;
 800922c:	7bfb      	ldrb	r3, [r7, #15]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop

08009238 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800924e:	2b40      	cmp	r3, #64	; 0x40
 8009250:	d005      	beq.n	800925e <USBD_StdItfReq+0x26>
 8009252:	2b40      	cmp	r3, #64	; 0x40
 8009254:	d852      	bhi.n	80092fc <USBD_StdItfReq+0xc4>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <USBD_StdItfReq+0x26>
 800925a:	2b20      	cmp	r3, #32
 800925c:	d14e      	bne.n	80092fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009264:	b2db      	uxtb	r3, r3
 8009266:	3b01      	subs	r3, #1
 8009268:	2b02      	cmp	r3, #2
 800926a:	d840      	bhi.n	80092ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	889b      	ldrh	r3, [r3, #4]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	d836      	bhi.n	80092e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	889b      	ldrh	r3, [r3, #4]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fed9 	bl	8009036 <USBD_CoreFindIF>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2bff      	cmp	r3, #255	; 0xff
 800928c:	d01d      	beq.n	80092ca <USBD_StdItfReq+0x92>
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11a      	bne.n	80092ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009294:	7bba      	ldrb	r2, [r7, #14]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32ae      	adds	r2, #174	; 0xae
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00f      	beq.n	80092c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80092a4:	7bba      	ldrb	r2, [r7, #14]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092ac:	7bba      	ldrb	r2, [r7, #14]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	32ae      	adds	r2, #174	; 0xae
 80092b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092c2:	e004      	b.n	80092ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092c8:	e001      	b.n	80092ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80092ca:	2303      	movs	r3, #3
 80092cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	88db      	ldrh	r3, [r3, #6]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d110      	bne.n	80092f8 <USBD_StdItfReq+0xc0>
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10d      	bne.n	80092f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fdc7 	bl	8009e70 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80092e2:	e009      	b.n	80092f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 fcf7 	bl	8009cda <USBD_CtlError>
          break;
 80092ec:	e004      	b.n	80092f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fcf2 	bl	8009cda <USBD_CtlError>
          break;
 80092f6:	e000      	b.n	80092fa <USBD_StdItfReq+0xc2>
          break;
 80092f8:	bf00      	nop
      }
      break;
 80092fa:	e004      	b.n	8009306 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fceb 	bl	8009cda <USBD_CtlError>
      break;
 8009304:	bf00      	nop
  }

  return ret;
 8009306:	7bfb      	ldrb	r3, [r7, #15]
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	889b      	ldrh	r3, [r3, #4]
 8009322:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800932c:	2b40      	cmp	r3, #64	; 0x40
 800932e:	d007      	beq.n	8009340 <USBD_StdEPReq+0x30>
 8009330:	2b40      	cmp	r3, #64	; 0x40
 8009332:	f200 817f 	bhi.w	8009634 <USBD_StdEPReq+0x324>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d02a      	beq.n	8009390 <USBD_StdEPReq+0x80>
 800933a:	2b20      	cmp	r3, #32
 800933c:	f040 817a 	bne.w	8009634 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff fe83 	bl	8009050 <USBD_CoreFindEP>
 800934a:	4603      	mov	r3, r0
 800934c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800934e:	7b7b      	ldrb	r3, [r7, #13]
 8009350:	2bff      	cmp	r3, #255	; 0xff
 8009352:	f000 8174 	beq.w	800963e <USBD_StdEPReq+0x32e>
 8009356:	7b7b      	ldrb	r3, [r7, #13]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f040 8170 	bne.w	800963e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800935e:	7b7a      	ldrb	r2, [r7, #13]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009366:	7b7a      	ldrb	r2, [r7, #13]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	32ae      	adds	r2, #174	; 0xae
 800936c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 8163 	beq.w	800963e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009378:	7b7a      	ldrb	r2, [r7, #13]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	32ae      	adds	r2, #174	; 0xae
 800937e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	4798      	blx	r3
 800938a:	4603      	mov	r3, r0
 800938c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800938e:	e156      	b.n	800963e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	785b      	ldrb	r3, [r3, #1]
 8009394:	2b03      	cmp	r3, #3
 8009396:	d008      	beq.n	80093aa <USBD_StdEPReq+0x9a>
 8009398:	2b03      	cmp	r3, #3
 800939a:	f300 8145 	bgt.w	8009628 <USBD_StdEPReq+0x318>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 809b 	beq.w	80094da <USBD_StdEPReq+0x1ca>
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d03c      	beq.n	8009422 <USBD_StdEPReq+0x112>
 80093a8:	e13e      	b.n	8009628 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d002      	beq.n	80093bc <USBD_StdEPReq+0xac>
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d016      	beq.n	80093e8 <USBD_StdEPReq+0xd8>
 80093ba:	e02c      	b.n	8009416 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00d      	beq.n	80093de <USBD_StdEPReq+0xce>
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b80      	cmp	r3, #128	; 0x80
 80093c6:	d00a      	beq.n	80093de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093c8:	7bbb      	ldrb	r3, [r7, #14]
 80093ca:	4619      	mov	r1, r3
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f002 fbf9 	bl	800bbc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093d2:	2180      	movs	r1, #128	; 0x80
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f002 fbf5 	bl	800bbc4 <USBD_LL_StallEP>
 80093da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093dc:	e020      	b.n	8009420 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fc7a 	bl	8009cda <USBD_CtlError>
              break;
 80093e6:	e01b      	b.n	8009420 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	885b      	ldrh	r3, [r3, #2]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10e      	bne.n	800940e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093f0:	7bbb      	ldrb	r3, [r7, #14]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00b      	beq.n	800940e <USBD_StdEPReq+0xfe>
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	2b80      	cmp	r3, #128	; 0x80
 80093fa:	d008      	beq.n	800940e <USBD_StdEPReq+0xfe>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	88db      	ldrh	r3, [r3, #6]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d104      	bne.n	800940e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f002 fbdb 	bl	800bbc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fd2e 	bl	8009e70 <USBD_CtlSendStatus>

              break;
 8009414:	e004      	b.n	8009420 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fc5e 	bl	8009cda <USBD_CtlError>
              break;
 800941e:	bf00      	nop
          }
          break;
 8009420:	e107      	b.n	8009632 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d002      	beq.n	8009434 <USBD_StdEPReq+0x124>
 800942e:	2b03      	cmp	r3, #3
 8009430:	d016      	beq.n	8009460 <USBD_StdEPReq+0x150>
 8009432:	e04b      	b.n	80094cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009434:	7bbb      	ldrb	r3, [r7, #14]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00d      	beq.n	8009456 <USBD_StdEPReq+0x146>
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	2b80      	cmp	r3, #128	; 0x80
 800943e:	d00a      	beq.n	8009456 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009440:	7bbb      	ldrb	r3, [r7, #14]
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f002 fbbd 	bl	800bbc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800944a:	2180      	movs	r1, #128	; 0x80
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f002 fbb9 	bl	800bbc4 <USBD_LL_StallEP>
 8009452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009454:	e040      	b.n	80094d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fc3e 	bl	8009cda <USBD_CtlError>
              break;
 800945e:	e03b      	b.n	80094d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	885b      	ldrh	r3, [r3, #2]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d136      	bne.n	80094d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009468:	7bbb      	ldrb	r3, [r7, #14]
 800946a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	4619      	mov	r1, r3
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f002 fbc3 	bl	800bc02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fcf7 	bl	8009e70 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff fde2 	bl	8009050 <USBD_CoreFindEP>
 800948c:	4603      	mov	r3, r0
 800948e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009490:	7b7b      	ldrb	r3, [r7, #13]
 8009492:	2bff      	cmp	r3, #255	; 0xff
 8009494:	d01f      	beq.n	80094d6 <USBD_StdEPReq+0x1c6>
 8009496:	7b7b      	ldrb	r3, [r7, #13]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d11c      	bne.n	80094d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800949c:	7b7a      	ldrb	r2, [r7, #13]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80094a4:	7b7a      	ldrb	r2, [r7, #13]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	32ae      	adds	r2, #174	; 0xae
 80094aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d010      	beq.n	80094d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094b4:	7b7a      	ldrb	r2, [r7, #13]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	32ae      	adds	r2, #174	; 0xae
 80094ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80094ca:	e004      	b.n	80094d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fc03 	bl	8009cda <USBD_CtlError>
              break;
 80094d4:	e000      	b.n	80094d8 <USBD_StdEPReq+0x1c8>
              break;
 80094d6:	bf00      	nop
          }
          break;
 80094d8:	e0ab      	b.n	8009632 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d002      	beq.n	80094ec <USBD_StdEPReq+0x1dc>
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d032      	beq.n	8009550 <USBD_StdEPReq+0x240>
 80094ea:	e097      	b.n	800961c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d007      	beq.n	8009502 <USBD_StdEPReq+0x1f2>
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b80      	cmp	r3, #128	; 0x80
 80094f6:	d004      	beq.n	8009502 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fbed 	bl	8009cda <USBD_CtlError>
                break;
 8009500:	e091      	b.n	8009626 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009506:	2b00      	cmp	r3, #0
 8009508:	da0b      	bge.n	8009522 <USBD_StdEPReq+0x212>
 800950a:	7bbb      	ldrb	r3, [r7, #14]
 800950c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	3310      	adds	r3, #16
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4413      	add	r3, r2
 800951e:	3304      	adds	r3, #4
 8009520:	e00b      	b.n	800953a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	4413      	add	r3, r2
 8009538:	3304      	adds	r3, #4
 800953a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2200      	movs	r2, #0
 8009540:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2202      	movs	r2, #2
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fc37 	bl	8009dbc <USBD_CtlSendData>
              break;
 800954e:	e06a      	b.n	8009626 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009554:	2b00      	cmp	r3, #0
 8009556:	da11      	bge.n	800957c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	f003 020f 	and.w	r2, r3, #15
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	440b      	add	r3, r1
 800956a:	3324      	adds	r3, #36	; 0x24
 800956c:	881b      	ldrh	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d117      	bne.n	80095a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fbb0 	bl	8009cda <USBD_CtlError>
                  break;
 800957a:	e054      	b.n	8009626 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	f003 020f 	and.w	r2, r3, #15
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4613      	mov	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009592:	881b      	ldrh	r3, [r3, #0]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d104      	bne.n	80095a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fb9d 	bl	8009cda <USBD_CtlError>
                  break;
 80095a0:	e041      	b.n	8009626 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	da0b      	bge.n	80095c2 <USBD_StdEPReq+0x2b2>
 80095aa:	7bbb      	ldrb	r3, [r7, #14]
 80095ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095b0:	4613      	mov	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	3310      	adds	r3, #16
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	3304      	adds	r3, #4
 80095c0:	e00b      	b.n	80095da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	4413      	add	r3, r2
 80095d8:	3304      	adds	r3, #4
 80095da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <USBD_StdEPReq+0x2d8>
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	2b80      	cmp	r3, #128	; 0x80
 80095e6:	d103      	bne.n	80095f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	e00e      	b.n	800960e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f002 fb23 	bl	800bc40 <USBD_LL_IsStallEP>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d003      	beq.n	8009608 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	e002      	b.n	800960e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2202      	movs	r2, #2
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fbd1 	bl	8009dbc <USBD_CtlSendData>
              break;
 800961a:	e004      	b.n	8009626 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fb5b 	bl	8009cda <USBD_CtlError>
              break;
 8009624:	bf00      	nop
          }
          break;
 8009626:	e004      	b.n	8009632 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb55 	bl	8009cda <USBD_CtlError>
          break;
 8009630:	bf00      	nop
      }
      break;
 8009632:	e005      	b.n	8009640 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 fb4f 	bl	8009cda <USBD_CtlError>
      break;
 800963c:	e000      	b.n	8009640 <USBD_StdEPReq+0x330>
      break;
 800963e:	bf00      	nop
  }

  return ret;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	885b      	ldrh	r3, [r3, #2]
 8009666:	0a1b      	lsrs	r3, r3, #8
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	2b06      	cmp	r3, #6
 800966e:	f200 8128 	bhi.w	80098c2 <USBD_GetDescriptor+0x276>
 8009672:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <USBD_GetDescriptor+0x2c>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	08009695 	.word	0x08009695
 800967c:	080096ad 	.word	0x080096ad
 8009680:	080096ed 	.word	0x080096ed
 8009684:	080098c3 	.word	0x080098c3
 8009688:	080098c3 	.word	0x080098c3
 800968c:	08009863 	.word	0x08009863
 8009690:	0800988f 	.word	0x0800988f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	7c12      	ldrb	r2, [r2, #16]
 80096a0:	f107 0108 	add.w	r1, r7, #8
 80096a4:	4610      	mov	r0, r2
 80096a6:	4798      	blx	r3
 80096a8:	60f8      	str	r0, [r7, #12]
      break;
 80096aa:	e112      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7c1b      	ldrb	r3, [r3, #16]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10d      	bne.n	80096d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096bc:	f107 0208 	add.w	r2, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3301      	adds	r3, #1
 80096ca:	2202      	movs	r2, #2
 80096cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096ce:	e100      	b.n	80098d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	f107 0208 	add.w	r2, r7, #8
 80096dc:	4610      	mov	r0, r2
 80096de:	4798      	blx	r3
 80096e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	2202      	movs	r2, #2
 80096e8:	701a      	strb	r2, [r3, #0]
      break;
 80096ea:	e0f2      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	885b      	ldrh	r3, [r3, #2]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	f200 80ac 	bhi.w	8009850 <USBD_GetDescriptor+0x204>
 80096f8:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <USBD_GetDescriptor+0xb4>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	08009719 	.word	0x08009719
 8009704:	0800974d 	.word	0x0800974d
 8009708:	08009781 	.word	0x08009781
 800970c:	080097b5 	.word	0x080097b5
 8009710:	080097e9 	.word	0x080097e9
 8009714:	0800981d 	.word	0x0800981d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	7c12      	ldrb	r2, [r2, #16]
 8009730:	f107 0108 	add.w	r1, r7, #8
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
 8009738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973a:	e091      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 facb 	bl	8009cda <USBD_CtlError>
            err++;
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	3301      	adds	r3, #1
 8009748:	72fb      	strb	r3, [r7, #11]
          break;
 800974a:	e089      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7c12      	ldrb	r2, [r2, #16]
 8009764:	f107 0108 	add.w	r1, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976e:	e077      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fab1 	bl	8009cda <USBD_CtlError>
            err++;
 8009778:	7afb      	ldrb	r3, [r7, #11]
 800977a:	3301      	adds	r3, #1
 800977c:	72fb      	strb	r3, [r7, #11]
          break;
 800977e:	e06f      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7c12      	ldrb	r2, [r2, #16]
 8009798:	f107 0108 	add.w	r1, r7, #8
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
 80097a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a2:	e05d      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa97 	bl	8009cda <USBD_CtlError>
            err++;
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	3301      	adds	r3, #1
 80097b0:	72fb      	strb	r3, [r7, #11]
          break;
 80097b2:	e055      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7c12      	ldrb	r2, [r2, #16]
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d6:	e043      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa7d 	bl	8009cda <USBD_CtlError>
            err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
          break;
 80097e6:	e03b      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00b      	beq.n	800980c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	7c12      	ldrb	r2, [r2, #16]
 8009800:	f107 0108 	add.w	r1, r7, #8
 8009804:	4610      	mov	r0, r2
 8009806:	4798      	blx	r3
 8009808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800980a:	e029      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa63 	bl	8009cda <USBD_CtlError>
            err++;
 8009814:	7afb      	ldrb	r3, [r7, #11]
 8009816:	3301      	adds	r3, #1
 8009818:	72fb      	strb	r3, [r7, #11]
          break;
 800981a:	e021      	b.n	8009860 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d00b      	beq.n	8009840 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	7c12      	ldrb	r2, [r2, #16]
 8009834:	f107 0108 	add.w	r1, r7, #8
 8009838:	4610      	mov	r0, r2
 800983a:	4798      	blx	r3
 800983c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800983e:	e00f      	b.n	8009860 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fa49 	bl	8009cda <USBD_CtlError>
            err++;
 8009848:	7afb      	ldrb	r3, [r7, #11]
 800984a:	3301      	adds	r3, #1
 800984c:	72fb      	strb	r3, [r7, #11]
          break;
 800984e:	e007      	b.n	8009860 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 fa41 	bl	8009cda <USBD_CtlError>
          err++;
 8009858:	7afb      	ldrb	r3, [r7, #11]
 800985a:	3301      	adds	r3, #1
 800985c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800985e:	bf00      	nop
      }
      break;
 8009860:	e037      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7c1b      	ldrb	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d109      	bne.n	800987e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009872:	f107 0208 	add.w	r2, r7, #8
 8009876:	4610      	mov	r0, r2
 8009878:	4798      	blx	r3
 800987a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800987c:	e029      	b.n	80098d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800987e:	6839      	ldr	r1, [r7, #0]
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fa2a 	bl	8009cda <USBD_CtlError>
        err++;
 8009886:	7afb      	ldrb	r3, [r7, #11]
 8009888:	3301      	adds	r3, #1
 800988a:	72fb      	strb	r3, [r7, #11]
      break;
 800988c:	e021      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	7c1b      	ldrb	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10d      	bne.n	80098b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989e:	f107 0208 	add.w	r2, r7, #8
 80098a2:	4610      	mov	r0, r2
 80098a4:	4798      	blx	r3
 80098a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3301      	adds	r3, #1
 80098ac:	2207      	movs	r2, #7
 80098ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098b0:	e00f      	b.n	80098d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098b2:	6839      	ldr	r1, [r7, #0]
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 fa10 	bl	8009cda <USBD_CtlError>
        err++;
 80098ba:	7afb      	ldrb	r3, [r7, #11]
 80098bc:	3301      	adds	r3, #1
 80098be:	72fb      	strb	r3, [r7, #11]
      break;
 80098c0:	e007      	b.n	80098d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fa08 	bl	8009cda <USBD_CtlError>
      err++;
 80098ca:	7afb      	ldrb	r3, [r7, #11]
 80098cc:	3301      	adds	r3, #1
 80098ce:	72fb      	strb	r3, [r7, #11]
      break;
 80098d0:	bf00      	nop
  }

  if (err != 0U)
 80098d2:	7afb      	ldrb	r3, [r7, #11]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d11e      	bne.n	8009916 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	88db      	ldrh	r3, [r3, #6]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d016      	beq.n	800990e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80098e0:	893b      	ldrh	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00e      	beq.n	8009904 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	88da      	ldrh	r2, [r3, #6]
 80098ea:	893b      	ldrh	r3, [r7, #8]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	bf28      	it	cs
 80098f0:	4613      	movcs	r3, r2
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80098f6:	893b      	ldrh	r3, [r7, #8]
 80098f8:	461a      	mov	r2, r3
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fa5d 	bl	8009dbc <USBD_CtlSendData>
 8009902:	e009      	b.n	8009918 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f9e7 	bl	8009cda <USBD_CtlError>
 800990c:	e004      	b.n	8009918 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 faae 	bl	8009e70 <USBD_CtlSendStatus>
 8009914:	e000      	b.n	8009918 <USBD_GetDescriptor+0x2cc>
    return;
 8009916:	bf00      	nop
  }
}
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop

08009920 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	889b      	ldrh	r3, [r3, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d131      	bne.n	8009996 <USBD_SetAddress+0x76>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	88db      	ldrh	r3, [r3, #6]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d12d      	bne.n	8009996 <USBD_SetAddress+0x76>
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	885b      	ldrh	r3, [r3, #2]
 800993e:	2b7f      	cmp	r3, #127	; 0x7f
 8009940:	d829      	bhi.n	8009996 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	885b      	ldrh	r3, [r3, #2]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b03      	cmp	r3, #3
 8009958:	d104      	bne.n	8009964 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9bc 	bl	8009cda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009962:	e01d      	b.n	80099a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	7bfa      	ldrb	r2, [r7, #15]
 8009968:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f002 f991 	bl	800bc98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fa7a 	bl	8009e70 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800997c:	7bfb      	ldrb	r3, [r7, #15]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2202      	movs	r2, #2
 8009986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998a:	e009      	b.n	80099a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009994:	e004      	b.n	80099a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f99e 	bl	8009cda <USBD_CtlError>
  }
}
 800999e:	bf00      	nop
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	885b      	ldrh	r3, [r3, #2]
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	4b4e      	ldr	r3, [pc, #312]	; (8009af8 <USBD_SetConfig+0x150>)
 80099be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099c0:	4b4d      	ldr	r3, [pc, #308]	; (8009af8 <USBD_SetConfig+0x150>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d905      	bls.n	80099d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f985 	bl	8009cda <USBD_CtlError>
    return USBD_FAIL;
 80099d0:	2303      	movs	r3, #3
 80099d2:	e08c      	b.n	8009aee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b02      	cmp	r3, #2
 80099de:	d002      	beq.n	80099e6 <USBD_SetConfig+0x3e>
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d029      	beq.n	8009a38 <USBD_SetConfig+0x90>
 80099e4:	e075      	b.n	8009ad2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099e6:	4b44      	ldr	r3, [pc, #272]	; (8009af8 <USBD_SetConfig+0x150>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d020      	beq.n	8009a30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099ee:	4b42      	ldr	r3, [pc, #264]	; (8009af8 <USBD_SetConfig+0x150>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099f8:	4b3f      	ldr	r3, [pc, #252]	; (8009af8 <USBD_SetConfig+0x150>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7fe ffe7 	bl	80089d2 <USBD_SetClassConfig>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d008      	beq.n	8009a20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a0e:	6839      	ldr	r1, [r7, #0]
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f962 	bl	8009cda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2202      	movs	r2, #2
 8009a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a1e:	e065      	b.n	8009aec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fa25 	bl	8009e70 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2203      	movs	r2, #3
 8009a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a2e:	e05d      	b.n	8009aec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fa1d 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009a36:	e059      	b.n	8009aec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a38:	4b2f      	ldr	r3, [pc, #188]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d112      	bne.n	8009a66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009a48:	4b2b      	ldr	r3, [pc, #172]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a52:	4b29      	ldr	r3, [pc, #164]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7fe ffd6 	bl	8008a0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa06 	bl	8009e70 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a64:	e042      	b.n	8009aec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a66:	4b24      	ldr	r3, [pc, #144]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d02a      	beq.n	8009aca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7fe ffc4 	bl	8008a0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a82:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a8c:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <USBD_SetConfig+0x150>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7fe ff9d 	bl	80089d2 <USBD_SetClassConfig>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00f      	beq.n	8009ac2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f918 	bl	8009cda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fe ffa9 	bl	8008a0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ac0:	e014      	b.n	8009aec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f9d4 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009ac8:	e010      	b.n	8009aec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 f9d0 	bl	8009e70 <USBD_CtlSendStatus>
      break;
 8009ad0:	e00c      	b.n	8009aec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f900 	bl	8009cda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <USBD_SetConfig+0x150>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7fe ff92 	bl	8008a0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aea:	bf00      	nop
  }

  return ret;
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20000820 	.word	0x20000820

08009afc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	88db      	ldrh	r3, [r3, #6]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d004      	beq.n	8009b18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f8e2 	bl	8009cda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b16:	e023      	b.n	8009b60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	dc02      	bgt.n	8009b2a <USBD_GetConfig+0x2e>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dc03      	bgt.n	8009b30 <USBD_GetConfig+0x34>
 8009b28:	e015      	b.n	8009b56 <USBD_GetConfig+0x5a>
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d00b      	beq.n	8009b46 <USBD_GetConfig+0x4a>
 8009b2e:	e012      	b.n	8009b56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3308      	adds	r3, #8
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f93c 	bl	8009dbc <USBD_CtlSendData>
        break;
 8009b44:	e00c      	b.n	8009b60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f934 	bl	8009dbc <USBD_CtlSendData>
        break;
 8009b54:	e004      	b.n	8009b60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f8be 	bl	8009cda <USBD_CtlError>
        break;
 8009b5e:	bf00      	nop
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d81e      	bhi.n	8009bbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	88db      	ldrh	r3, [r3, #6]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	d004      	beq.n	8009b92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f8a5 	bl	8009cda <USBD_CtlError>
        break;
 8009b90:	e01a      	b.n	8009bc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d005      	beq.n	8009bae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	f043 0202 	orr.w	r2, r3, #2
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	330c      	adds	r3, #12
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f900 	bl	8009dbc <USBD_CtlSendData>
      break;
 8009bbc:	e004      	b.n	8009bc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f88a 	bl	8009cda <USBD_CtlError>
      break;
 8009bc6:	bf00      	nop
  }
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d107      	bne.n	8009bf2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f940 	bl	8009e70 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009bf0:	e013      	b.n	8009c1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d10b      	bne.n	8009c12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	889b      	ldrh	r3, [r3, #4]
 8009bfe:	0a1b      	lsrs	r3, r3, #8
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f930 	bl	8009e70 <USBD_CtlSendStatus>
}
 8009c10:	e003      	b.n	8009c1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f860 	bl	8009cda <USBD_CtlError>
}
 8009c1a:	bf00      	nop
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d80b      	bhi.n	8009c52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d10c      	bne.n	8009c5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f910 	bl	8009e70 <USBD_CtlSendStatus>
      }
      break;
 8009c50:	e004      	b.n	8009c5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f840 	bl	8009cda <USBD_CtlError>
      break;
 8009c5a:	e000      	b.n	8009c5e <USBD_ClrFeature+0x3c>
      break;
 8009c5c:	bf00      	nop
  }
}
 8009c5e:	bf00      	nop
 8009c60:	3708      	adds	r7, #8
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	781a      	ldrb	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	781a      	ldrb	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7ff fa41 	bl	8009118 <SWAPBYTE>
 8009c96:	4603      	mov	r3, r0
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7ff fa34 	bl	8009118 <SWAPBYTE>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff fa27 	bl	8009118 <SWAPBYTE>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	80da      	strh	r2, [r3, #6]
}
 8009cd2:	bf00      	nop
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b082      	sub	sp, #8
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ce4:	2180      	movs	r1, #128	; 0x80
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f001 ff6c 	bl	800bbc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009cec:	2100      	movs	r1, #0
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 ff68 	bl	800bbc4 <USBD_LL_StallEP>
}
 8009cf4:	bf00      	nop
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d036      	beq.n	8009d80 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d16:	6938      	ldr	r0, [r7, #16]
 8009d18:	f000 f836 	bl	8009d88 <USBD_GetLen>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	3301      	adds	r3, #1
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	4413      	add	r3, r2
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	7812      	ldrb	r2, [r2, #0]
 8009d34:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	4413      	add	r3, r2
 8009d42:	2203      	movs	r2, #3
 8009d44:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d46:	7dfb      	ldrb	r3, [r7, #23]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d4c:	e013      	b.n	8009d76 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	4413      	add	r3, r2
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	7812      	ldrb	r2, [r2, #0]
 8009d58:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	613b      	str	r3, [r7, #16]
    idx++;
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	3301      	adds	r3, #1
 8009d64:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
 8009d72:	3301      	adds	r3, #1
 8009d74:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e7      	bne.n	8009d4e <USBD_GetString+0x52>
 8009d7e:	e000      	b.n	8009d82 <USBD_GetString+0x86>
    return;
 8009d80:	bf00      	nop
  }
}
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d90:	2300      	movs	r3, #0
 8009d92:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d98:	e005      	b.n	8009da6 <USBD_GetLen+0x1e>
  {
    len++;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	3301      	adds	r3, #1
 8009da4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d1f5      	bne.n	8009d9a <USBD_GetLen+0x12>
  }

  return len;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	2100      	movs	r1, #0
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f001 ff77 	bl	800bcd6 <USBD_LL_Transmit>

  return USBD_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	2100      	movs	r1, #0
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f001 ff66 	bl	800bcd6 <USBD_LL_Transmit>

  return USBD_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2203      	movs	r2, #3
 8009e24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f001 ff6a 	bl	800bd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	60f8      	str	r0, [r7, #12]
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	2100      	movs	r1, #0
 8009e60:	68f8      	ldr	r0, [r7, #12]
 8009e62:	f001 ff59 	bl	800bd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e66:	2300      	movs	r3, #0
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e80:	2300      	movs	r3, #0
 8009e82:	2200      	movs	r2, #0
 8009e84:	2100      	movs	r1, #0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f001 ff25 	bl	800bcd6 <USBD_LL_Transmit>

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	2100      	movs	r1, #0
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f001 ff33 	bl	800bd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009eca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ece:	2b84      	cmp	r3, #132	; 0x84
 8009ed0:	d005      	beq.n	8009ede <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009ed2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4413      	add	r3, r2
 8009eda:	3303      	adds	r3, #3
 8009edc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009ede:	68fb      	ldr	r3, [r7, #12]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ef0:	f000 faf6 	bl	800a4e0 <vTaskStartScheduler>
  
  return osOK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009efc:	b089      	sub	sp, #36	; 0x24
 8009efe:	af04      	add	r7, sp, #16
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	695b      	ldr	r3, [r3, #20]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d020      	beq.n	8009f4e <osThreadCreate+0x54>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01c      	beq.n	8009f4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685c      	ldr	r4, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	691e      	ldr	r6, [r3, #16]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff ffc8 	bl	8009ebc <makeFreeRtosPriority>
 8009f2c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f36:	9202      	str	r2, [sp, #8]
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	9100      	str	r1, [sp, #0]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	4632      	mov	r2, r6
 8009f40:	4629      	mov	r1, r5
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 f8ed 	bl	800a122 <xTaskCreateStatic>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	e01c      	b.n	8009f88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	685c      	ldr	r4, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f5a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff ffaa 	bl	8009ebc <makeFreeRtosPriority>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	f107 030c 	add.w	r3, r7, #12
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	9200      	str	r2, [sp, #0]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	4632      	mov	r2, r6
 8009f76:	4629      	mov	r1, r5
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 f92f 	bl	800a1dc <xTaskCreate>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d001      	beq.n	8009f88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f84:	2300      	movs	r3, #0
 8009f86:	e000      	b.n	8009f8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f88:	68fb      	ldr	r3, [r7, #12]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <osDelay+0x16>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	e000      	b.n	8009faa <osDelay+0x18>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fa64 	bl	800a478 <vTaskDelay>
  
  return osOK;
 8009fb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f103 0208 	add.w	r2, r3, #8
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f103 0208 	add.w	r2, r3, #8
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f103 0208 	add.w	r2, r3, #8
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009fee:	bf00      	nop
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ffa:	b480      	push	{r7}
 8009ffc:	b083      	sub	sp, #12
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689a      	ldr	r2, [r3, #8]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	601a      	str	r2, [r3, #0]
}
 800a050:	bf00      	nop
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a05c:	b480      	push	{r7}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a072:	d103      	bne.n	800a07c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e00c      	b.n	800a096 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3308      	adds	r3, #8
 800a080:	60fb      	str	r3, [r7, #12]
 800a082:	e002      	b.n	800a08a <vListInsert+0x2e>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	60fb      	str	r3, [r7, #12]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	d2f6      	bcs.n	800a084 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	1c5a      	adds	r2, r3, #1
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	601a      	str	r2, [r3, #0]
}
 800a0c2:	bf00      	nop
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	6892      	ldr	r2, [r2, #8]
 800a0e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6852      	ldr	r2, [r2, #4]
 800a0ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d103      	bne.n	800a102 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	1e5a      	subs	r2, r3, #1
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a122:	b580      	push	{r7, lr}
 800a124:	b08e      	sub	sp, #56	; 0x38
 800a126:	af04      	add	r7, sp, #16
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
 800a12e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10a      	bne.n	800a14c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a148:	bf00      	nop
 800a14a:	e7fe      	b.n	800a14a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10a      	bne.n	800a168 <xTaskCreateStatic+0x46>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	61fb      	str	r3, [r7, #28]
}
 800a164:	bf00      	nop
 800a166:	e7fe      	b.n	800a166 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a168:	23a0      	movs	r3, #160	; 0xa0
 800a16a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2ba0      	cmp	r3, #160	; 0xa0
 800a170:	d00a      	beq.n	800a188 <xTaskCreateStatic+0x66>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	61bb      	str	r3, [r7, #24]
}
 800a184:	bf00      	nop
 800a186:	e7fe      	b.n	800a186 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a188:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d01e      	beq.n	800a1ce <xTaskCreateStatic+0xac>
 800a190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a192:	2b00      	cmp	r3, #0
 800a194:	d01b      	beq.n	800a1ce <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a19e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	2202      	movs	r2, #2
 800a1a4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9303      	str	r3, [sp, #12]
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	9302      	str	r3, [sp, #8]
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	68b9      	ldr	r1, [r7, #8]
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 f851 	bl	800a268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1c8:	f000 f8ec 	bl	800a3a4 <prvAddNewTaskToReadyList>
 800a1cc:	e001      	b.n	800a1d2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1d2:	697b      	ldr	r3, [r7, #20]
	}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3728      	adds	r7, #40	; 0x28
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08c      	sub	sp, #48	; 0x30
 800a1e0:	af04      	add	r7, sp, #16
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1ec:	88fb      	ldrh	r3, [r7, #6]
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fef1 	bl	800afd8 <pvPortMalloc>
 800a1f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00e      	beq.n	800a21c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1fe:	20a0      	movs	r0, #160	; 0xa0
 800a200:	f000 feea 	bl	800afd8 <pvPortMalloc>
 800a204:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	631a      	str	r2, [r3, #48]	; 0x30
 800a212:	e005      	b.n	800a220 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a214:	6978      	ldr	r0, [r7, #20]
 800a216:	f000 ffab 	bl	800b170 <vPortFree>
 800a21a:	e001      	b.n	800a220 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a21c:	2300      	movs	r3, #0
 800a21e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d017      	beq.n	800a256 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a22e:	88fa      	ldrh	r2, [r7, #6]
 800a230:	2300      	movs	r3, #0
 800a232:	9303      	str	r3, [sp, #12]
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	9302      	str	r3, [sp, #8]
 800a238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23a:	9301      	str	r3, [sp, #4]
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f80f 	bl	800a268 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a24a:	69f8      	ldr	r0, [r7, #28]
 800a24c:	f000 f8aa 	bl	800a3a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a250:	2301      	movs	r3, #1
 800a252:	61bb      	str	r3, [r7, #24]
 800a254:	e002      	b.n	800a25c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a256:	f04f 33ff 	mov.w	r3, #4294967295
 800a25a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a25c:	69bb      	ldr	r3, [r7, #24]
	}
 800a25e:	4618      	mov	r0, r3
 800a260:	3720      	adds	r7, #32
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b088      	sub	sp, #32
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a280:	3b01      	subs	r3, #1
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	f023 0307 	bic.w	r3, r3, #7
 800a28e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	617b      	str	r3, [r7, #20]
}
 800a2ac:	bf00      	nop
 800a2ae:	e7fe      	b.n	800a2ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d01f      	beq.n	800a2f6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]
 800a2ba:	e012      	b.n	800a2e2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	7819      	ldrb	r1, [r3, #0]
 800a2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3334      	adds	r3, #52	; 0x34
 800a2cc:	460a      	mov	r2, r1
 800a2ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d006      	beq.n	800a2ea <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	61fb      	str	r3, [r7, #28]
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	2b0f      	cmp	r3, #15
 800a2e6:	d9e9      	bls.n	800a2bc <prvInitialiseNewTask+0x54>
 800a2e8:	e000      	b.n	800a2ec <prvInitialiseNewTask+0x84>
			{
				break;
 800a2ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2f4:	e003      	b.n	800a2fe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	2b06      	cmp	r3, #6
 800a302:	d901      	bls.n	800a308 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a304:	2306      	movs	r3, #6
 800a306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a30c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a312:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a316:	2200      	movs	r2, #0
 800a318:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	3304      	adds	r3, #4
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff fe6b 	bl	8009ffa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a326:	3318      	adds	r3, #24
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff fe66 	bl	8009ffa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	f1c3 0207 	rsb	r2, r3, #7
 800a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	334c      	adds	r3, #76	; 0x4c
 800a358:	224c      	movs	r2, #76	; 0x4c
 800a35a:	2100      	movs	r1, #0
 800a35c:	4618      	mov	r0, r3
 800a35e:	f001 fd73 	bl	800be48 <memset>
 800a362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a364:	4a0c      	ldr	r2, [pc, #48]	; (800a398 <prvInitialiseNewTask+0x130>)
 800a366:	651a      	str	r2, [r3, #80]	; 0x50
 800a368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36a:	4a0c      	ldr	r2, [pc, #48]	; (800a39c <prvInitialiseNewTask+0x134>)
 800a36c:	655a      	str	r2, [r3, #84]	; 0x54
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	4a0b      	ldr	r2, [pc, #44]	; (800a3a0 <prvInitialiseNewTask+0x138>)
 800a372:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	68f9      	ldr	r1, [r7, #12]
 800a378:	69b8      	ldr	r0, [r7, #24]
 800a37a:	f000 fc1f 	bl	800abbc <pxPortInitialiseStack>
 800a37e:	4602      	mov	r2, r0
 800a380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a382:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a390:	bf00      	nop
 800a392:	3720      	adds	r7, #32
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20006180 	.word	0x20006180
 800a39c:	200061e8 	.word	0x200061e8
 800a3a0:	20006250 	.word	0x20006250

0800a3a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3ac:	f000 fd32 	bl	800ae14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3b0:	4b2a      	ldr	r3, [pc, #168]	; (800a45c <prvAddNewTaskToReadyList+0xb8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	4a29      	ldr	r2, [pc, #164]	; (800a45c <prvAddNewTaskToReadyList+0xb8>)
 800a3b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3ba:	4b29      	ldr	r3, [pc, #164]	; (800a460 <prvAddNewTaskToReadyList+0xbc>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3c2:	4a27      	ldr	r2, [pc, #156]	; (800a460 <prvAddNewTaskToReadyList+0xbc>)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3c8:	4b24      	ldr	r3, [pc, #144]	; (800a45c <prvAddNewTaskToReadyList+0xb8>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d110      	bne.n	800a3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3d0:	f000 facc 	bl	800a96c <prvInitialiseTaskLists>
 800a3d4:	e00d      	b.n	800a3f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3d6:	4b23      	ldr	r3, [pc, #140]	; (800a464 <prvAddNewTaskToReadyList+0xc0>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d109      	bne.n	800a3f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3de:	4b20      	ldr	r3, [pc, #128]	; (800a460 <prvAddNewTaskToReadyList+0xbc>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d802      	bhi.n	800a3f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3ec:	4a1c      	ldr	r2, [pc, #112]	; (800a460 <prvAddNewTaskToReadyList+0xbc>)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3f2:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <prvAddNewTaskToReadyList+0xc4>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	4a1b      	ldr	r2, [pc, #108]	; (800a468 <prvAddNewTaskToReadyList+0xc4>)
 800a3fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	2201      	movs	r2, #1
 800a402:	409a      	lsls	r2, r3
 800a404:	4b19      	ldr	r3, [pc, #100]	; (800a46c <prvAddNewTaskToReadyList+0xc8>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4313      	orrs	r3, r2
 800a40a:	4a18      	ldr	r2, [pc, #96]	; (800a46c <prvAddNewTaskToReadyList+0xc8>)
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4a15      	ldr	r2, [pc, #84]	; (800a470 <prvAddNewTaskToReadyList+0xcc>)
 800a41c:	441a      	add	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3304      	adds	r3, #4
 800a422:	4619      	mov	r1, r3
 800a424:	4610      	mov	r0, r2
 800a426:	f7ff fdf5 	bl	800a014 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a42a:	f000 fd23 	bl	800ae74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a42e:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <prvAddNewTaskToReadyList+0xc0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00e      	beq.n	800a454 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a436:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <prvAddNewTaskToReadyList+0xbc>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	429a      	cmp	r2, r3
 800a442:	d207      	bcs.n	800a454 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a444:	4b0b      	ldr	r3, [pc, #44]	; (800a474 <prvAddNewTaskToReadyList+0xd0>)
 800a446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a44a:	601a      	str	r2, [r3, #0]
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20000924 	.word	0x20000924
 800a460:	20000824 	.word	0x20000824
 800a464:	20000930 	.word	0x20000930
 800a468:	20000940 	.word	0x20000940
 800a46c:	2000092c 	.word	0x2000092c
 800a470:	20000828 	.word	0x20000828
 800a474:	e000ed04 	.word	0xe000ed04

0800a478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d017      	beq.n	800a4ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a48a:	4b13      	ldr	r3, [pc, #76]	; (800a4d8 <vTaskDelay+0x60>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <vTaskDelay+0x30>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	60bb      	str	r3, [r7, #8]
}
 800a4a4:	bf00      	nop
 800a4a6:	e7fe      	b.n	800a4a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a4a8:	f000 f884 	bl	800a5b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fb1e 	bl	800aaf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a4b4:	f000 f88c 	bl	800a5d0 <xTaskResumeAll>
 800a4b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d107      	bne.n	800a4d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a4c0:	4b06      	ldr	r3, [pc, #24]	; (800a4dc <vTaskDelay+0x64>)
 800a4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c6:	601a      	str	r2, [r3, #0]
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	2000094c 	.word	0x2000094c
 800a4dc:	e000ed04 	.word	0xe000ed04

0800a4e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08a      	sub	sp, #40	; 0x28
 800a4e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a4ee:	463a      	mov	r2, r7
 800a4f0:	1d39      	adds	r1, r7, #4
 800a4f2:	f107 0308 	add.w	r3, r7, #8
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7f6 ffcc 	bl	8001494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	9202      	str	r2, [sp, #8]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	2300      	movs	r3, #0
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	2300      	movs	r3, #0
 800a50c:	460a      	mov	r2, r1
 800a50e:	4921      	ldr	r1, [pc, #132]	; (800a594 <vTaskStartScheduler+0xb4>)
 800a510:	4821      	ldr	r0, [pc, #132]	; (800a598 <vTaskStartScheduler+0xb8>)
 800a512:	f7ff fe06 	bl	800a122 <xTaskCreateStatic>
 800a516:	4603      	mov	r3, r0
 800a518:	4a20      	ldr	r2, [pc, #128]	; (800a59c <vTaskStartScheduler+0xbc>)
 800a51a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a51c:	4b1f      	ldr	r3, [pc, #124]	; (800a59c <vTaskStartScheduler+0xbc>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a524:	2301      	movs	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	e001      	b.n	800a52e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d11b      	bne.n	800a56c <vTaskStartScheduler+0x8c>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	613b      	str	r3, [r7, #16]
}
 800a546:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a548:	4b15      	ldr	r3, [pc, #84]	; (800a5a0 <vTaskStartScheduler+0xc0>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	334c      	adds	r3, #76	; 0x4c
 800a54e:	4a15      	ldr	r2, [pc, #84]	; (800a5a4 <vTaskStartScheduler+0xc4>)
 800a550:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a552:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <vTaskStartScheduler+0xc8>)
 800a554:	f04f 32ff 	mov.w	r2, #4294967295
 800a558:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a55a:	4b14      	ldr	r3, [pc, #80]	; (800a5ac <vTaskStartScheduler+0xcc>)
 800a55c:	2201      	movs	r2, #1
 800a55e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a560:	4b13      	ldr	r3, [pc, #76]	; (800a5b0 <vTaskStartScheduler+0xd0>)
 800a562:	2200      	movs	r2, #0
 800a564:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a566:	f000 fbb3 	bl	800acd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a56a:	e00e      	b.n	800a58a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a572:	d10a      	bne.n	800a58a <vTaskStartScheduler+0xaa>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	60fb      	str	r3, [r7, #12]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <vTaskStartScheduler+0xa8>
}
 800a58a:	bf00      	nop
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	0800c950 	.word	0x0800c950
 800a598:	0800a93d 	.word	0x0800a93d
 800a59c:	20000948 	.word	0x20000948
 800a5a0:	20000824 	.word	0x20000824
 800a5a4:	20000180 	.word	0x20000180
 800a5a8:	20000944 	.word	0x20000944
 800a5ac:	20000930 	.word	0x20000930
 800a5b0:	20000928 	.word	0x20000928

0800a5b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a5b8:	4b04      	ldr	r3, [pc, #16]	; (800a5cc <vTaskSuspendAll+0x18>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	4a03      	ldr	r2, [pc, #12]	; (800a5cc <vTaskSuspendAll+0x18>)
 800a5c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a5c2:	bf00      	nop
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	2000094c 	.word	0x2000094c

0800a5d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a5de:	4b41      	ldr	r3, [pc, #260]	; (800a6e4 <xTaskResumeAll+0x114>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10a      	bne.n	800a5fc <xTaskResumeAll+0x2c>
	__asm volatile
 800a5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ea:	f383 8811 	msr	BASEPRI, r3
 800a5ee:	f3bf 8f6f 	isb	sy
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	603b      	str	r3, [r7, #0]
}
 800a5f8:	bf00      	nop
 800a5fa:	e7fe      	b.n	800a5fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a5fc:	f000 fc0a 	bl	800ae14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a600:	4b38      	ldr	r3, [pc, #224]	; (800a6e4 <xTaskResumeAll+0x114>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3b01      	subs	r3, #1
 800a606:	4a37      	ldr	r2, [pc, #220]	; (800a6e4 <xTaskResumeAll+0x114>)
 800a608:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a60a:	4b36      	ldr	r3, [pc, #216]	; (800a6e4 <xTaskResumeAll+0x114>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d161      	bne.n	800a6d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a612:	4b35      	ldr	r3, [pc, #212]	; (800a6e8 <xTaskResumeAll+0x118>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d05d      	beq.n	800a6d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a61a:	e02e      	b.n	800a67a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a61c:	4b33      	ldr	r3, [pc, #204]	; (800a6ec <xTaskResumeAll+0x11c>)
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3318      	adds	r3, #24
 800a628:	4618      	mov	r0, r3
 800a62a:	f7ff fd50 	bl	800a0ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3304      	adds	r3, #4
 800a632:	4618      	mov	r0, r3
 800a634:	f7ff fd4b 	bl	800a0ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63c:	2201      	movs	r2, #1
 800a63e:	409a      	lsls	r2, r3
 800a640:	4b2b      	ldr	r3, [pc, #172]	; (800a6f0 <xTaskResumeAll+0x120>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4313      	orrs	r3, r2
 800a646:	4a2a      	ldr	r2, [pc, #168]	; (800a6f0 <xTaskResumeAll+0x120>)
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64e:	4613      	mov	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	4413      	add	r3, r2
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4a27      	ldr	r2, [pc, #156]	; (800a6f4 <xTaskResumeAll+0x124>)
 800a658:	441a      	add	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3304      	adds	r3, #4
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7ff fcd7 	bl	800a014 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66a:	4b23      	ldr	r3, [pc, #140]	; (800a6f8 <xTaskResumeAll+0x128>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	429a      	cmp	r2, r3
 800a672:	d302      	bcc.n	800a67a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a674:	4b21      	ldr	r3, [pc, #132]	; (800a6fc <xTaskResumeAll+0x12c>)
 800a676:	2201      	movs	r2, #1
 800a678:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a67a:	4b1c      	ldr	r3, [pc, #112]	; (800a6ec <xTaskResumeAll+0x11c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1cc      	bne.n	800a61c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a688:	f000 fa12 	bl	800aab0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a68c:	4b1c      	ldr	r3, [pc, #112]	; (800a700 <xTaskResumeAll+0x130>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d010      	beq.n	800a6ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a698:	f000 f836 	bl	800a708 <xTaskIncrementTick>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a6a2:	4b16      	ldr	r3, [pc, #88]	; (800a6fc <xTaskResumeAll+0x12c>)
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1f1      	bne.n	800a698 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a6b4:	4b12      	ldr	r3, [pc, #72]	; (800a700 <xTaskResumeAll+0x130>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a6ba:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <xTaskResumeAll+0x12c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d009      	beq.n	800a6d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a6c6:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <xTaskResumeAll+0x134>)
 800a6c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a6d6:	f000 fbcd 	bl	800ae74 <vPortExitCritical>

	return xAlreadyYielded;
 800a6da:	68bb      	ldr	r3, [r7, #8]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	2000094c 	.word	0x2000094c
 800a6e8:	20000924 	.word	0x20000924
 800a6ec:	200008e4 	.word	0x200008e4
 800a6f0:	2000092c 	.word	0x2000092c
 800a6f4:	20000828 	.word	0x20000828
 800a6f8:	20000824 	.word	0x20000824
 800a6fc:	20000938 	.word	0x20000938
 800a700:	20000934 	.word	0x20000934
 800a704:	e000ed04 	.word	0xe000ed04

0800a708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a712:	4b4e      	ldr	r3, [pc, #312]	; (800a84c <xTaskIncrementTick+0x144>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f040 808e 	bne.w	800a838 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a71c:	4b4c      	ldr	r3, [pc, #304]	; (800a850 <xTaskIncrementTick+0x148>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3301      	adds	r3, #1
 800a722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a724:	4a4a      	ldr	r2, [pc, #296]	; (800a850 <xTaskIncrementTick+0x148>)
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d120      	bne.n	800a772 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a730:	4b48      	ldr	r3, [pc, #288]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00a      	beq.n	800a750 <xTaskIncrementTick+0x48>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	603b      	str	r3, [r7, #0]
}
 800a74c:	bf00      	nop
 800a74e:	e7fe      	b.n	800a74e <xTaskIncrementTick+0x46>
 800a750:	4b40      	ldr	r3, [pc, #256]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60fb      	str	r3, [r7, #12]
 800a756:	4b40      	ldr	r3, [pc, #256]	; (800a858 <xTaskIncrementTick+0x150>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a3e      	ldr	r2, [pc, #248]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a75c:	6013      	str	r3, [r2, #0]
 800a75e:	4a3e      	ldr	r2, [pc, #248]	; (800a858 <xTaskIncrementTick+0x150>)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	4b3d      	ldr	r3, [pc, #244]	; (800a85c <xTaskIncrementTick+0x154>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3301      	adds	r3, #1
 800a76a:	4a3c      	ldr	r2, [pc, #240]	; (800a85c <xTaskIncrementTick+0x154>)
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	f000 f99f 	bl	800aab0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a772:	4b3b      	ldr	r3, [pc, #236]	; (800a860 <xTaskIncrementTick+0x158>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d348      	bcc.n	800a80e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a77c:	4b35      	ldr	r3, [pc, #212]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d104      	bne.n	800a790 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a786:	4b36      	ldr	r3, [pc, #216]	; (800a860 <xTaskIncrementTick+0x158>)
 800a788:	f04f 32ff 	mov.w	r2, #4294967295
 800a78c:	601a      	str	r2, [r3, #0]
					break;
 800a78e:	e03e      	b.n	800a80e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a790:	4b30      	ldr	r3, [pc, #192]	; (800a854 <xTaskIncrementTick+0x14c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a7a0:	693a      	ldr	r2, [r7, #16]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d203      	bcs.n	800a7b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a7a8:	4a2d      	ldr	r2, [pc, #180]	; (800a860 <xTaskIncrementTick+0x158>)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a7ae:	e02e      	b.n	800a80e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fc8a 	bl	800a0ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d004      	beq.n	800a7cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	3318      	adds	r3, #24
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7ff fc81 	bl	800a0ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	409a      	lsls	r2, r3
 800a7d4:	4b23      	ldr	r3, [pc, #140]	; (800a864 <xTaskIncrementTick+0x15c>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	4a22      	ldr	r2, [pc, #136]	; (800a864 <xTaskIncrementTick+0x15c>)
 800a7dc:	6013      	str	r3, [r2, #0]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	4a1f      	ldr	r2, [pc, #124]	; (800a868 <xTaskIncrementTick+0x160>)
 800a7ec:	441a      	add	r2, r3
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	3304      	adds	r3, #4
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	4610      	mov	r0, r2
 800a7f6:	f7ff fc0d 	bl	800a014 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7fe:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <xTaskIncrementTick+0x164>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	429a      	cmp	r2, r3
 800a806:	d3b9      	bcc.n	800a77c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a808:	2301      	movs	r3, #1
 800a80a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a80c:	e7b6      	b.n	800a77c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a80e:	4b17      	ldr	r3, [pc, #92]	; (800a86c <xTaskIncrementTick+0x164>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a814:	4914      	ldr	r1, [pc, #80]	; (800a868 <xTaskIncrementTick+0x160>)
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	440b      	add	r3, r1
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d901      	bls.n	800a82a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a826:	2301      	movs	r3, #1
 800a828:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a82a:	4b11      	ldr	r3, [pc, #68]	; (800a870 <xTaskIncrementTick+0x168>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d007      	beq.n	800a842 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a832:	2301      	movs	r3, #1
 800a834:	617b      	str	r3, [r7, #20]
 800a836:	e004      	b.n	800a842 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a838:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <xTaskIncrementTick+0x16c>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	4a0d      	ldr	r2, [pc, #52]	; (800a874 <xTaskIncrementTick+0x16c>)
 800a840:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a842:	697b      	ldr	r3, [r7, #20]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	2000094c 	.word	0x2000094c
 800a850:	20000928 	.word	0x20000928
 800a854:	200008dc 	.word	0x200008dc
 800a858:	200008e0 	.word	0x200008e0
 800a85c:	2000093c 	.word	0x2000093c
 800a860:	20000944 	.word	0x20000944
 800a864:	2000092c 	.word	0x2000092c
 800a868:	20000828 	.word	0x20000828
 800a86c:	20000824 	.word	0x20000824
 800a870:	20000938 	.word	0x20000938
 800a874:	20000934 	.word	0x20000934

0800a878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a878:	b480      	push	{r7}
 800a87a:	b087      	sub	sp, #28
 800a87c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a87e:	4b29      	ldr	r3, [pc, #164]	; (800a924 <vTaskSwitchContext+0xac>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a886:	4b28      	ldr	r3, [pc, #160]	; (800a928 <vTaskSwitchContext+0xb0>)
 800a888:	2201      	movs	r2, #1
 800a88a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a88c:	e044      	b.n	800a918 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a88e:	4b26      	ldr	r3, [pc, #152]	; (800a928 <vTaskSwitchContext+0xb0>)
 800a890:	2200      	movs	r2, #0
 800a892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a894:	4b25      	ldr	r3, [pc, #148]	; (800a92c <vTaskSwitchContext+0xb4>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	fab3 f383 	clz	r3, r3
 800a8a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a8a2:	7afb      	ldrb	r3, [r7, #11]
 800a8a4:	f1c3 031f 	rsb	r3, r3, #31
 800a8a8:	617b      	str	r3, [r7, #20]
 800a8aa:	4921      	ldr	r1, [pc, #132]	; (800a930 <vTaskSwitchContext+0xb8>)
 800a8ac:	697a      	ldr	r2, [r7, #20]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10a      	bne.n	800a8d4 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	607b      	str	r3, [r7, #4]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <vTaskSwitchContext+0x5a>
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4a14      	ldr	r2, [pc, #80]	; (800a930 <vTaskSwitchContext+0xb8>)
 800a8e0:	4413      	add	r3, r2
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	605a      	str	r2, [r3, #4]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	3308      	adds	r3, #8
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d104      	bne.n	800a904 <vTaskSwitchContext+0x8c>
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	605a      	str	r2, [r3, #4]
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	4a0a      	ldr	r2, [pc, #40]	; (800a934 <vTaskSwitchContext+0xbc>)
 800a90c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <vTaskSwitchContext+0xbc>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	334c      	adds	r3, #76	; 0x4c
 800a914:	4a08      	ldr	r2, [pc, #32]	; (800a938 <vTaskSwitchContext+0xc0>)
 800a916:	6013      	str	r3, [r2, #0]
}
 800a918:	bf00      	nop
 800a91a:	371c      	adds	r7, #28
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	2000094c 	.word	0x2000094c
 800a928:	20000938 	.word	0x20000938
 800a92c:	2000092c 	.word	0x2000092c
 800a930:	20000828 	.word	0x20000828
 800a934:	20000824 	.word	0x20000824
 800a938:	20000180 	.word	0x20000180

0800a93c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a944:	f000 f852 	bl	800a9ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a948:	4b06      	ldr	r3, [pc, #24]	; (800a964 <prvIdleTask+0x28>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d9f9      	bls.n	800a944 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a950:	4b05      	ldr	r3, [pc, #20]	; (800a968 <prvIdleTask+0x2c>)
 800a952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a960:	e7f0      	b.n	800a944 <prvIdleTask+0x8>
 800a962:	bf00      	nop
 800a964:	20000828 	.word	0x20000828
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a972:	2300      	movs	r3, #0
 800a974:	607b      	str	r3, [r7, #4]
 800a976:	e00c      	b.n	800a992 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4a12      	ldr	r2, [pc, #72]	; (800a9cc <prvInitialiseTaskLists+0x60>)
 800a984:	4413      	add	r3, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff fb17 	bl	8009fba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3301      	adds	r3, #1
 800a990:	607b      	str	r3, [r7, #4]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b06      	cmp	r3, #6
 800a996:	d9ef      	bls.n	800a978 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a998:	480d      	ldr	r0, [pc, #52]	; (800a9d0 <prvInitialiseTaskLists+0x64>)
 800a99a:	f7ff fb0e 	bl	8009fba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a99e:	480d      	ldr	r0, [pc, #52]	; (800a9d4 <prvInitialiseTaskLists+0x68>)
 800a9a0:	f7ff fb0b 	bl	8009fba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a9a4:	480c      	ldr	r0, [pc, #48]	; (800a9d8 <prvInitialiseTaskLists+0x6c>)
 800a9a6:	f7ff fb08 	bl	8009fba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a9aa:	480c      	ldr	r0, [pc, #48]	; (800a9dc <prvInitialiseTaskLists+0x70>)
 800a9ac:	f7ff fb05 	bl	8009fba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9b0:	480b      	ldr	r0, [pc, #44]	; (800a9e0 <prvInitialiseTaskLists+0x74>)
 800a9b2:	f7ff fb02 	bl	8009fba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9b6:	4b0b      	ldr	r3, [pc, #44]	; (800a9e4 <prvInitialiseTaskLists+0x78>)
 800a9b8:	4a05      	ldr	r2, [pc, #20]	; (800a9d0 <prvInitialiseTaskLists+0x64>)
 800a9ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9bc:	4b0a      	ldr	r3, [pc, #40]	; (800a9e8 <prvInitialiseTaskLists+0x7c>)
 800a9be:	4a05      	ldr	r2, [pc, #20]	; (800a9d4 <prvInitialiseTaskLists+0x68>)
 800a9c0:	601a      	str	r2, [r3, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000828 	.word	0x20000828
 800a9d0:	200008b4 	.word	0x200008b4
 800a9d4:	200008c8 	.word	0x200008c8
 800a9d8:	200008e4 	.word	0x200008e4
 800a9dc:	200008f8 	.word	0x200008f8
 800a9e0:	20000910 	.word	0x20000910
 800a9e4:	200008dc 	.word	0x200008dc
 800a9e8:	200008e0 	.word	0x200008e0

0800a9ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9f2:	e019      	b.n	800aa28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9f4:	f000 fa0e 	bl	800ae14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9f8:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <prvCheckTasksWaitingTermination+0x50>)
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff fb62 	bl	800a0ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa0a:	4b0d      	ldr	r3, [pc, #52]	; (800aa40 <prvCheckTasksWaitingTermination+0x54>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	4a0b      	ldr	r2, [pc, #44]	; (800aa40 <prvCheckTasksWaitingTermination+0x54>)
 800aa12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa14:	4b0b      	ldr	r3, [pc, #44]	; (800aa44 <prvCheckTasksWaitingTermination+0x58>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	4a0a      	ldr	r2, [pc, #40]	; (800aa44 <prvCheckTasksWaitingTermination+0x58>)
 800aa1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa1e:	f000 fa29 	bl	800ae74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f810 	bl	800aa48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa28:	4b06      	ldr	r3, [pc, #24]	; (800aa44 <prvCheckTasksWaitingTermination+0x58>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1e1      	bne.n	800a9f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa30:	bf00      	nop
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	200008f8 	.word	0x200008f8
 800aa40:	20000924 	.word	0x20000924
 800aa44:	2000090c 	.word	0x2000090c

0800aa48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	334c      	adds	r3, #76	; 0x4c
 800aa54:	4618      	mov	r0, r3
 800aa56:	f001 fa13 	bl	800be80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d108      	bne.n	800aa76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fb81 	bl	800b170 <vPortFree>
				vPortFree( pxTCB );
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fb7e 	bl	800b170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa74:	e018      	b.n	800aaa8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d103      	bne.n	800aa88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 fb75 	bl	800b170 <vPortFree>
	}
 800aa86:	e00f      	b.n	800aaa8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	d00a      	beq.n	800aaa8 <prvDeleteTCB+0x60>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60fb      	str	r3, [r7, #12]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <prvDeleteTCB+0x5e>
	}
 800aaa8:	bf00      	nop
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aab6:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <prvResetNextTaskUnblockTime+0x38>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d104      	bne.n	800aaca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aac0:	4b0a      	ldr	r3, [pc, #40]	; (800aaec <prvResetNextTaskUnblockTime+0x3c>)
 800aac2:	f04f 32ff 	mov.w	r2, #4294967295
 800aac6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aac8:	e008      	b.n	800aadc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaca:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <prvResetNextTaskUnblockTime+0x38>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	4a04      	ldr	r2, [pc, #16]	; (800aaec <prvResetNextTaskUnblockTime+0x3c>)
 800aada:	6013      	str	r3, [r2, #0]
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	200008dc 	.word	0x200008dc
 800aaec:	20000944 	.word	0x20000944

0800aaf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aafa:	4b29      	ldr	r3, [pc, #164]	; (800aba0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab00:	4b28      	ldr	r3, [pc, #160]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3304      	adds	r3, #4
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff fae1 	bl	800a0ce <uxListRemove>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10b      	bne.n	800ab2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ab12:	4b24      	ldr	r3, [pc, #144]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab18:	2201      	movs	r2, #1
 800ab1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1e:	43da      	mvns	r2, r3
 800ab20:	4b21      	ldr	r3, [pc, #132]	; (800aba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4013      	ands	r3, r2
 800ab26:	4a20      	ldr	r2, [pc, #128]	; (800aba8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ab28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab30:	d10a      	bne.n	800ab48 <prvAddCurrentTaskToDelayedList+0x58>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d007      	beq.n	800ab48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab38:	4b1a      	ldr	r3, [pc, #104]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	4619      	mov	r1, r3
 800ab40:	481a      	ldr	r0, [pc, #104]	; (800abac <prvAddCurrentTaskToDelayedList+0xbc>)
 800ab42:	f7ff fa67 	bl	800a014 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab46:	e026      	b.n	800ab96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab50:	4b14      	ldr	r3, [pc, #80]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	68ba      	ldr	r2, [r7, #8]
 800ab56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d209      	bcs.n	800ab74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab60:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	4b0f      	ldr	r3, [pc, #60]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	f7ff fa75 	bl	800a05c <vListInsert>
}
 800ab72:	e010      	b.n	800ab96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab74:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	4b0a      	ldr	r3, [pc, #40]	; (800aba4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f7ff fa6b 	bl	800a05c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab86:	4b0c      	ldr	r3, [pc, #48]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d202      	bcs.n	800ab96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ab90:	4a09      	ldr	r2, [pc, #36]	; (800abb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	6013      	str	r3, [r2, #0]
}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	20000928 	.word	0x20000928
 800aba4:	20000824 	.word	0x20000824
 800aba8:	2000092c 	.word	0x2000092c
 800abac:	20000910 	.word	0x20000910
 800abb0:	200008e0 	.word	0x200008e0
 800abb4:	200008dc 	.word	0x200008dc
 800abb8:	20000944 	.word	0x20000944

0800abbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3b04      	subs	r3, #4
 800abcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800abd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	3b04      	subs	r3, #4
 800abda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f023 0201 	bic.w	r2, r3, #1
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3b04      	subs	r3, #4
 800abea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abec:	4a0c      	ldr	r2, [pc, #48]	; (800ac20 <pxPortInitialiseStack+0x64>)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	3b14      	subs	r3, #20
 800abf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3b04      	subs	r3, #4
 800ac02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f06f 0202 	mvn.w	r2, #2
 800ac0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	3b20      	subs	r3, #32
 800ac10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac12:	68fb      	ldr	r3, [r7, #12]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	0800ac25 	.word	0x0800ac25

0800ac24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac2e:	4b12      	ldr	r3, [pc, #72]	; (800ac78 <prvTaskExitError+0x54>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac36:	d00a      	beq.n	800ac4e <prvTaskExitError+0x2a>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	60fb      	str	r3, [r7, #12]
}
 800ac4a:	bf00      	nop
 800ac4c:	e7fe      	b.n	800ac4c <prvTaskExitError+0x28>
	__asm volatile
 800ac4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac52:	f383 8811 	msr	BASEPRI, r3
 800ac56:	f3bf 8f6f 	isb	sy
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	60bb      	str	r3, [r7, #8]
}
 800ac60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac62:	bf00      	nop
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0fc      	beq.n	800ac64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac6a:	bf00      	nop
 800ac6c:	bf00      	nop
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	200000cc 	.word	0x200000cc
 800ac7c:	00000000 	.word	0x00000000

0800ac80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac80:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <pxCurrentTCBConst2>)
 800ac82:	6819      	ldr	r1, [r3, #0]
 800ac84:	6808      	ldr	r0, [r1, #0]
 800ac86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8a:	f380 8809 	msr	PSP, r0
 800ac8e:	f3bf 8f6f 	isb	sy
 800ac92:	f04f 0000 	mov.w	r0, #0
 800ac96:	f380 8811 	msr	BASEPRI, r0
 800ac9a:	4770      	bx	lr
 800ac9c:	f3af 8000 	nop.w

0800aca0 <pxCurrentTCBConst2>:
 800aca0:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aca4:	bf00      	nop
 800aca6:	bf00      	nop

0800aca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aca8:	4808      	ldr	r0, [pc, #32]	; (800accc <prvPortStartFirstTask+0x24>)
 800acaa:	6800      	ldr	r0, [r0, #0]
 800acac:	6800      	ldr	r0, [r0, #0]
 800acae:	f380 8808 	msr	MSP, r0
 800acb2:	f04f 0000 	mov.w	r0, #0
 800acb6:	f380 8814 	msr	CONTROL, r0
 800acba:	b662      	cpsie	i
 800acbc:	b661      	cpsie	f
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	f3bf 8f6f 	isb	sy
 800acc6:	df00      	svc	0
 800acc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800acca:	bf00      	nop
 800accc:	e000ed08 	.word	0xe000ed08

0800acd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800acd6:	4b46      	ldr	r3, [pc, #280]	; (800adf0 <xPortStartScheduler+0x120>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a46      	ldr	r2, [pc, #280]	; (800adf4 <xPortStartScheduler+0x124>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d10a      	bne.n	800acf6 <xPortStartScheduler+0x26>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	613b      	str	r3, [r7, #16]
}
 800acf2:	bf00      	nop
 800acf4:	e7fe      	b.n	800acf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acf6:	4b3e      	ldr	r3, [pc, #248]	; (800adf0 <xPortStartScheduler+0x120>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a3f      	ldr	r2, [pc, #252]	; (800adf8 <xPortStartScheduler+0x128>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d10a      	bne.n	800ad16 <xPortStartScheduler+0x46>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	60fb      	str	r3, [r7, #12]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad16:	4b39      	ldr	r3, [pc, #228]	; (800adfc <xPortStartScheduler+0x12c>)
 800ad18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	22ff      	movs	r2, #255	; 0xff
 800ad26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad30:	78fb      	ldrb	r3, [r7, #3]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	4b31      	ldr	r3, [pc, #196]	; (800ae00 <xPortStartScheduler+0x130>)
 800ad3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad3e:	4b31      	ldr	r3, [pc, #196]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad40:	2207      	movs	r2, #7
 800ad42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad44:	e009      	b.n	800ad5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad46:	4b2f      	ldr	r3, [pc, #188]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	4a2d      	ldr	r2, [pc, #180]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad62:	2b80      	cmp	r3, #128	; 0x80
 800ad64:	d0ef      	beq.n	800ad46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad66:	4b27      	ldr	r3, [pc, #156]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f1c3 0307 	rsb	r3, r3, #7
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	d00a      	beq.n	800ad88 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	60bb      	str	r3, [r7, #8]
}
 800ad84:	bf00      	nop
 800ad86:	e7fe      	b.n	800ad86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad88:	4b1e      	ldr	r3, [pc, #120]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	021b      	lsls	r3, r3, #8
 800ad8e:	4a1d      	ldr	r2, [pc, #116]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad92:	4b1c      	ldr	r3, [pc, #112]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad9a:	4a1a      	ldr	r2, [pc, #104]	; (800ae04 <xPortStartScheduler+0x134>)
 800ad9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ada6:	4b18      	ldr	r3, [pc, #96]	; (800ae08 <xPortStartScheduler+0x138>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a17      	ldr	r2, [pc, #92]	; (800ae08 <xPortStartScheduler+0x138>)
 800adac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800adb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adb2:	4b15      	ldr	r3, [pc, #84]	; (800ae08 <xPortStartScheduler+0x138>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a14      	ldr	r2, [pc, #80]	; (800ae08 <xPortStartScheduler+0x138>)
 800adb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adbe:	f000 f8dd 	bl	800af7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800adc2:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <xPortStartScheduler+0x13c>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800adc8:	f000 f8fc 	bl	800afc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800adcc:	4b10      	ldr	r3, [pc, #64]	; (800ae10 <xPortStartScheduler+0x140>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a0f      	ldr	r2, [pc, #60]	; (800ae10 <xPortStartScheduler+0x140>)
 800add2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800add6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800add8:	f7ff ff66 	bl	800aca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800addc:	f7ff fd4c 	bl	800a878 <vTaskSwitchContext>
	prvTaskExitError();
 800ade0:	f7ff ff20 	bl	800ac24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	e000ed00 	.word	0xe000ed00
 800adf4:	410fc271 	.word	0x410fc271
 800adf8:	410fc270 	.word	0x410fc270
 800adfc:	e000e400 	.word	0xe000e400
 800ae00:	20000950 	.word	0x20000950
 800ae04:	20000954 	.word	0x20000954
 800ae08:	e000ed20 	.word	0xe000ed20
 800ae0c:	200000cc 	.word	0x200000cc
 800ae10:	e000ef34 	.word	0xe000ef34

0800ae14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	f383 8811 	msr	BASEPRI, r3
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	f3bf 8f4f 	dsb	sy
 800ae2a:	607b      	str	r3, [r7, #4]
}
 800ae2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae2e:	4b0f      	ldr	r3, [pc, #60]	; (800ae6c <vPortEnterCritical+0x58>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3301      	adds	r3, #1
 800ae34:	4a0d      	ldr	r2, [pc, #52]	; (800ae6c <vPortEnterCritical+0x58>)
 800ae36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae38:	4b0c      	ldr	r3, [pc, #48]	; (800ae6c <vPortEnterCritical+0x58>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d10f      	bne.n	800ae60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae40:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <vPortEnterCritical+0x5c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00a      	beq.n	800ae60 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	603b      	str	r3, [r7, #0]
}
 800ae5c:	bf00      	nop
 800ae5e:	e7fe      	b.n	800ae5e <vPortEnterCritical+0x4a>
	}
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	200000cc 	.word	0x200000cc
 800ae70:	e000ed04 	.word	0xe000ed04

0800ae74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae7a:	4b12      	ldr	r3, [pc, #72]	; (800aec4 <vPortExitCritical+0x50>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10a      	bne.n	800ae98 <vPortExitCritical+0x24>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	607b      	str	r3, [r7, #4]
}
 800ae94:	bf00      	nop
 800ae96:	e7fe      	b.n	800ae96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae98:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <vPortExitCritical+0x50>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <vPortExitCritical+0x50>)
 800aea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aea2:	4b08      	ldr	r3, [pc, #32]	; (800aec4 <vPortExitCritical+0x50>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d105      	bne.n	800aeb6 <vPortExitCritical+0x42>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aeb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aeb6:	bf00      	nop
 800aeb8:	370c      	adds	r7, #12
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	200000cc 	.word	0x200000cc
	...

0800aed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aed0:	f3ef 8009 	mrs	r0, PSP
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	4b15      	ldr	r3, [pc, #84]	; (800af30 <pxCurrentTCBConst>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	f01e 0f10 	tst.w	lr, #16
 800aee0:	bf08      	it	eq
 800aee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeea:	6010      	str	r0, [r2, #0]
 800aeec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aef4:	f380 8811 	msr	BASEPRI, r0
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f7ff fcba 	bl	800a878 <vTaskSwitchContext>
 800af04:	f04f 0000 	mov.w	r0, #0
 800af08:	f380 8811 	msr	BASEPRI, r0
 800af0c:	bc09      	pop	{r0, r3}
 800af0e:	6819      	ldr	r1, [r3, #0]
 800af10:	6808      	ldr	r0, [r1, #0]
 800af12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af16:	f01e 0f10 	tst.w	lr, #16
 800af1a:	bf08      	it	eq
 800af1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af20:	f380 8809 	msr	PSP, r0
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	f3af 8000 	nop.w

0800af30 <pxCurrentTCBConst>:
 800af30:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop

0800af38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	607b      	str	r3, [r7, #4]
}
 800af50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af52:	f7ff fbd9 	bl	800a708 <xTaskIncrementTick>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d003      	beq.n	800af64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af5c:	4b06      	ldr	r3, [pc, #24]	; (800af78 <SysTick_Handler+0x40>)
 800af5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af62:	601a      	str	r2, [r3, #0]
 800af64:	2300      	movs	r3, #0
 800af66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f383 8811 	msr	BASEPRI, r3
}
 800af6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	e000ed04 	.word	0xe000ed04

0800af7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <vPortSetupTimerInterrupt+0x34>)
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af86:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <vPortSetupTimerInterrupt+0x38>)
 800af88:	2200      	movs	r2, #0
 800af8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <vPortSetupTimerInterrupt+0x3c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <vPortSetupTimerInterrupt+0x40>)
 800af92:	fba2 2303 	umull	r2, r3, r2, r3
 800af96:	099b      	lsrs	r3, r3, #6
 800af98:	4a09      	ldr	r2, [pc, #36]	; (800afc0 <vPortSetupTimerInterrupt+0x44>)
 800af9a:	3b01      	subs	r3, #1
 800af9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af9e:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <vPortSetupTimerInterrupt+0x34>)
 800afa0:	2207      	movs	r2, #7
 800afa2:	601a      	str	r2, [r3, #0]
}
 800afa4:	bf00      	nop
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	e000e010 	.word	0xe000e010
 800afb4:	e000e018 	.word	0xe000e018
 800afb8:	20000034 	.word	0x20000034
 800afbc:	10624dd3 	.word	0x10624dd3
 800afc0:	e000e014 	.word	0xe000e014

0800afc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800afc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800afd4 <vPortEnableVFP+0x10>
 800afc8:	6801      	ldr	r1, [r0, #0]
 800afca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800afce:	6001      	str	r1, [r0, #0]
 800afd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800afd2:	bf00      	nop
 800afd4:	e000ed88 	.word	0xe000ed88

0800afd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08a      	sub	sp, #40	; 0x28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800afe4:	f7ff fae6 	bl	800a5b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800afe8:	4b5b      	ldr	r3, [pc, #364]	; (800b158 <pvPortMalloc+0x180>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aff0:	f000 f920 	bl	800b234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aff4:	4b59      	ldr	r3, [pc, #356]	; (800b15c <pvPortMalloc+0x184>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4013      	ands	r3, r2
 800affc:	2b00      	cmp	r3, #0
 800affe:	f040 8093 	bne.w	800b128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d01d      	beq.n	800b044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b008:	2208      	movs	r2, #8
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4413      	add	r3, r2
 800b00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f003 0307 	and.w	r3, r3, #7
 800b016:	2b00      	cmp	r3, #0
 800b018:	d014      	beq.n	800b044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f023 0307 	bic.w	r3, r3, #7
 800b020:	3308      	adds	r3, #8
 800b022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <pvPortMalloc+0x6c>
	__asm volatile
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	617b      	str	r3, [r7, #20]
}
 800b040:	bf00      	nop
 800b042:	e7fe      	b.n	800b042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d06e      	beq.n	800b128 <pvPortMalloc+0x150>
 800b04a:	4b45      	ldr	r3, [pc, #276]	; (800b160 <pvPortMalloc+0x188>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	429a      	cmp	r2, r3
 800b052:	d869      	bhi.n	800b128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b054:	4b43      	ldr	r3, [pc, #268]	; (800b164 <pvPortMalloc+0x18c>)
 800b056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b058:	4b42      	ldr	r3, [pc, #264]	; (800b164 <pvPortMalloc+0x18c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b05e:	e004      	b.n	800b06a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	429a      	cmp	r2, r3
 800b072:	d903      	bls.n	800b07c <pvPortMalloc+0xa4>
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1f1      	bne.n	800b060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b07c:	4b36      	ldr	r3, [pc, #216]	; (800b158 <pvPortMalloc+0x180>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b082:	429a      	cmp	r2, r3
 800b084:	d050      	beq.n	800b128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2208      	movs	r2, #8
 800b08c:	4413      	add	r3, r2
 800b08e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	1ad2      	subs	r2, r2, r3
 800b0a0:	2308      	movs	r3, #8
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d91f      	bls.n	800b0e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	f003 0307 	and.w	r3, r3, #7
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	613b      	str	r3, [r7, #16]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	685a      	ldr	r2, [r3, #4]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	1ad2      	subs	r2, r2, r3
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0e2:	69b8      	ldr	r0, [r7, #24]
 800b0e4:	f000 f908 	bl	800b2f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0e8:	4b1d      	ldr	r3, [pc, #116]	; (800b160 <pvPortMalloc+0x188>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	4a1b      	ldr	r2, [pc, #108]	; (800b160 <pvPortMalloc+0x188>)
 800b0f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0f6:	4b1a      	ldr	r3, [pc, #104]	; (800b160 <pvPortMalloc+0x188>)
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	4b1b      	ldr	r3, [pc, #108]	; (800b168 <pvPortMalloc+0x190>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d203      	bcs.n	800b10a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b102:	4b17      	ldr	r3, [pc, #92]	; (800b160 <pvPortMalloc+0x188>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a18      	ldr	r2, [pc, #96]	; (800b168 <pvPortMalloc+0x190>)
 800b108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	4b13      	ldr	r3, [pc, #76]	; (800b15c <pvPortMalloc+0x184>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	431a      	orrs	r2, r3
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b11e:	4b13      	ldr	r3, [pc, #76]	; (800b16c <pvPortMalloc+0x194>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3301      	adds	r3, #1
 800b124:	4a11      	ldr	r2, [pc, #68]	; (800b16c <pvPortMalloc+0x194>)
 800b126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b128:	f7ff fa52 	bl	800a5d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	f003 0307 	and.w	r3, r3, #7
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00a      	beq.n	800b14c <pvPortMalloc+0x174>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	60fb      	str	r3, [r7, #12]
}
 800b148:	bf00      	nop
 800b14a:	e7fe      	b.n	800b14a <pvPortMalloc+0x172>
	return pvReturn;
 800b14c:	69fb      	ldr	r3, [r7, #28]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3728      	adds	r7, #40	; 0x28
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20004560 	.word	0x20004560
 800b15c:	20004574 	.word	0x20004574
 800b160:	20004564 	.word	0x20004564
 800b164:	20004558 	.word	0x20004558
 800b168:	20004568 	.word	0x20004568
 800b16c:	2000456c 	.word	0x2000456c

0800b170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d04d      	beq.n	800b21e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b182:	2308      	movs	r3, #8
 800b184:	425b      	negs	r3, r3
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	4413      	add	r3, r2
 800b18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	4b24      	ldr	r3, [pc, #144]	; (800b228 <vPortFree+0xb8>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4013      	ands	r3, r2
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <vPortFree+0x44>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	60fb      	str	r3, [r7, #12]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00a      	beq.n	800b1d2 <vPortFree+0x62>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	60bb      	str	r3, [r7, #8]
}
 800b1ce:	bf00      	nop
 800b1d0:	e7fe      	b.n	800b1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	4b14      	ldr	r3, [pc, #80]	; (800b228 <vPortFree+0xb8>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d01e      	beq.n	800b21e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d11a      	bne.n	800b21e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	4b0e      	ldr	r3, [pc, #56]	; (800b228 <vPortFree+0xb8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	43db      	mvns	r3, r3
 800b1f2:	401a      	ands	r2, r3
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1f8:	f7ff f9dc 	bl	800a5b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <vPortFree+0xbc>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4413      	add	r3, r2
 800b206:	4a09      	ldr	r2, [pc, #36]	; (800b22c <vPortFree+0xbc>)
 800b208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b20a:	6938      	ldr	r0, [r7, #16]
 800b20c:	f000 f874 	bl	800b2f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b210:	4b07      	ldr	r3, [pc, #28]	; (800b230 <vPortFree+0xc0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3301      	adds	r3, #1
 800b216:	4a06      	ldr	r2, [pc, #24]	; (800b230 <vPortFree+0xc0>)
 800b218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b21a:	f7ff f9d9 	bl	800a5d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b21e:	bf00      	nop
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20004574 	.word	0x20004574
 800b22c:	20004564 	.word	0x20004564
 800b230:	20004570 	.word	0x20004570

0800b234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b23a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b23e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b240:	4b27      	ldr	r3, [pc, #156]	; (800b2e0 <prvHeapInit+0xac>)
 800b242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00c      	beq.n	800b268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3307      	adds	r3, #7
 800b252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0307 	bic.w	r3, r3, #7
 800b25a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	4a1f      	ldr	r2, [pc, #124]	; (800b2e0 <prvHeapInit+0xac>)
 800b264:	4413      	add	r3, r2
 800b266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b26c:	4a1d      	ldr	r2, [pc, #116]	; (800b2e4 <prvHeapInit+0xb0>)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b272:	4b1c      	ldr	r3, [pc, #112]	; (800b2e4 <prvHeapInit+0xb0>)
 800b274:	2200      	movs	r2, #0
 800b276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	4413      	add	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b280:	2208      	movs	r2, #8
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	1a9b      	subs	r3, r3, r2
 800b286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f023 0307 	bic.w	r3, r3, #7
 800b28e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4a15      	ldr	r2, [pc, #84]	; (800b2e8 <prvHeapInit+0xb4>)
 800b294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b296:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <prvHeapInit+0xb4>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2200      	movs	r2, #0
 800b29c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b29e:	4b12      	ldr	r3, [pc, #72]	; (800b2e8 <prvHeapInit+0xb4>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2b4:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <prvHeapInit+0xb4>)
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	4a0a      	ldr	r2, [pc, #40]	; (800b2ec <prvHeapInit+0xb8>)
 800b2c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	4a09      	ldr	r2, [pc, #36]	; (800b2f0 <prvHeapInit+0xbc>)
 800b2ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2cc:	4b09      	ldr	r3, [pc, #36]	; (800b2f4 <prvHeapInit+0xc0>)
 800b2ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b2d2:	601a      	str	r2, [r3, #0]
}
 800b2d4:	bf00      	nop
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	20000958 	.word	0x20000958
 800b2e4:	20004558 	.word	0x20004558
 800b2e8:	20004560 	.word	0x20004560
 800b2ec:	20004568 	.word	0x20004568
 800b2f0:	20004564 	.word	0x20004564
 800b2f4:	20004574 	.word	0x20004574

0800b2f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b300:	4b28      	ldr	r3, [pc, #160]	; (800b3a4 <prvInsertBlockIntoFreeList+0xac>)
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	e002      	b.n	800b30c <prvInsertBlockIntoFreeList+0x14>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	60fb      	str	r3, [r7, #12]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	429a      	cmp	r2, r3
 800b314:	d8f7      	bhi.n	800b306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	68ba      	ldr	r2, [r7, #8]
 800b320:	4413      	add	r3, r2
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	429a      	cmp	r2, r3
 800b326:	d108      	bne.n	800b33a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	685a      	ldr	r2, [r3, #4]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	441a      	add	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	441a      	add	r2, r3
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d118      	bne.n	800b380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681a      	ldr	r2, [r3, #0]
 800b352:	4b15      	ldr	r3, [pc, #84]	; (800b3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	429a      	cmp	r2, r3
 800b358:	d00d      	beq.n	800b376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	441a      	add	r2, r3
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e008      	b.n	800b388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b376:	4b0c      	ldr	r3, [pc, #48]	; (800b3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	e003      	b.n	800b388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d002      	beq.n	800b396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b396:	bf00      	nop
 800b398:	3714      	adds	r7, #20
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20004558 	.word	0x20004558
 800b3a8:	20004560 	.word	0x20004560

0800b3ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	4912      	ldr	r1, [pc, #72]	; (800b3fc <MX_USB_DEVICE_Init+0x50>)
 800b3b4:	4812      	ldr	r0, [pc, #72]	; (800b400 <MX_USB_DEVICE_Init+0x54>)
 800b3b6:	f7fd fa8f 	bl	80088d8 <USBD_Init>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3c0:	f7f7 f8e8 	bl	8002594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3c4:	490f      	ldr	r1, [pc, #60]	; (800b404 <MX_USB_DEVICE_Init+0x58>)
 800b3c6:	480e      	ldr	r0, [pc, #56]	; (800b400 <MX_USB_DEVICE_Init+0x54>)
 800b3c8:	f7fd fab6 	bl	8008938 <USBD_RegisterClass>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3d2:	f7f7 f8df 	bl	8002594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3d6:	490c      	ldr	r1, [pc, #48]	; (800b408 <MX_USB_DEVICE_Init+0x5c>)
 800b3d8:	4809      	ldr	r0, [pc, #36]	; (800b400 <MX_USB_DEVICE_Init+0x54>)
 800b3da:	f7fd f9a7 	bl	800872c <USBD_CDC_RegisterInterface>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3e4:	f7f7 f8d6 	bl	8002594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3e8:	4805      	ldr	r0, [pc, #20]	; (800b400 <MX_USB_DEVICE_Init+0x54>)
 800b3ea:	f7fd fadb 	bl	80089a4 <USBD_Start>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3f4:	f7f7 f8ce 	bl	8002594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3f8:	bf00      	nop
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	200000e4 	.word	0x200000e4
 800b400:	20004578 	.word	0x20004578
 800b404:	2000004c 	.word	0x2000004c
 800b408:	200000d0 	.word	0x200000d0

0800b40c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b410:	2200      	movs	r2, #0
 800b412:	4905      	ldr	r1, [pc, #20]	; (800b428 <CDC_Init_FS+0x1c>)
 800b414:	4805      	ldr	r0, [pc, #20]	; (800b42c <CDC_Init_FS+0x20>)
 800b416:	f7fd f9a3 	bl	8008760 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b41a:	4905      	ldr	r1, [pc, #20]	; (800b430 <CDC_Init_FS+0x24>)
 800b41c:	4803      	ldr	r0, [pc, #12]	; (800b42c <CDC_Init_FS+0x20>)
 800b41e:	f7fd f9c1 	bl	80087a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b422:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b424:	4618      	mov	r0, r3
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20005054 	.word	0x20005054
 800b42c:	20004578 	.word	0x20004578
 800b430:	20004854 	.word	0x20004854

0800b434 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b434:	b480      	push	{r7}
 800b436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b438:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
 800b450:	4613      	mov	r3, r2
 800b452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b454:	79fb      	ldrb	r3, [r7, #7]
 800b456:	2b23      	cmp	r3, #35	; 0x23
 800b458:	d84a      	bhi.n	800b4f0 <CDC_Control_FS+0xac>
 800b45a:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <CDC_Control_FS+0x1c>)
 800b45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b460:	0800b4f1 	.word	0x0800b4f1
 800b464:	0800b4f1 	.word	0x0800b4f1
 800b468:	0800b4f1 	.word	0x0800b4f1
 800b46c:	0800b4f1 	.word	0x0800b4f1
 800b470:	0800b4f1 	.word	0x0800b4f1
 800b474:	0800b4f1 	.word	0x0800b4f1
 800b478:	0800b4f1 	.word	0x0800b4f1
 800b47c:	0800b4f1 	.word	0x0800b4f1
 800b480:	0800b4f1 	.word	0x0800b4f1
 800b484:	0800b4f1 	.word	0x0800b4f1
 800b488:	0800b4f1 	.word	0x0800b4f1
 800b48c:	0800b4f1 	.word	0x0800b4f1
 800b490:	0800b4f1 	.word	0x0800b4f1
 800b494:	0800b4f1 	.word	0x0800b4f1
 800b498:	0800b4f1 	.word	0x0800b4f1
 800b49c:	0800b4f1 	.word	0x0800b4f1
 800b4a0:	0800b4f1 	.word	0x0800b4f1
 800b4a4:	0800b4f1 	.word	0x0800b4f1
 800b4a8:	0800b4f1 	.word	0x0800b4f1
 800b4ac:	0800b4f1 	.word	0x0800b4f1
 800b4b0:	0800b4f1 	.word	0x0800b4f1
 800b4b4:	0800b4f1 	.word	0x0800b4f1
 800b4b8:	0800b4f1 	.word	0x0800b4f1
 800b4bc:	0800b4f1 	.word	0x0800b4f1
 800b4c0:	0800b4f1 	.word	0x0800b4f1
 800b4c4:	0800b4f1 	.word	0x0800b4f1
 800b4c8:	0800b4f1 	.word	0x0800b4f1
 800b4cc:	0800b4f1 	.word	0x0800b4f1
 800b4d0:	0800b4f1 	.word	0x0800b4f1
 800b4d4:	0800b4f1 	.word	0x0800b4f1
 800b4d8:	0800b4f1 	.word	0x0800b4f1
 800b4dc:	0800b4f1 	.word	0x0800b4f1
 800b4e0:	0800b4f1 	.word	0x0800b4f1
 800b4e4:	0800b4f1 	.word	0x0800b4f1
 800b4e8:	0800b4f1 	.word	0x0800b4f1
 800b4ec:	0800b4f1 	.word	0x0800b4f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b4f0:	bf00      	nop
  }

  return (USBD_OK);
 800b4f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	480d      	ldr	r0, [pc, #52]	; (800b544 <CDC_Receive_FS+0x44>)
 800b50e:	f7fd f949 	bl	80087a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b512:	480c      	ldr	r0, [pc, #48]	; (800b544 <CDC_Receive_FS+0x44>)
 800b514:	f7fd f9aa 	bl	800886c <USBD_CDC_ReceivePacket>

  /* Copy into common buffer */
  memset(rxBuf, 0, APP_RX_DATA_SIZE);
 800b518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b51c:	2100      	movs	r1, #0
 800b51e:	480a      	ldr	r0, [pc, #40]	; (800b548 <CDC_Receive_FS+0x48>)
 800b520:	f000 fc92 	bl	800be48 <memset>
  strncpy(rxBuf,(char *)Buf, *Len);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	461a      	mov	r2, r3
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	4806      	ldr	r0, [pc, #24]	; (800b548 <CDC_Receive_FS+0x48>)
 800b52e:	f000 fc93 	bl	800be58 <strncpy>

  /* Set main state */
  receiveState = 1;
 800b532:	4b06      	ldr	r3, [pc, #24]	; (800b54c <CDC_Receive_FS+0x4c>)
 800b534:	2201      	movs	r2, #1
 800b536:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800b538:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20004578 	.word	0x20004578
 800b548:	200006c4 	.word	0x200006c4
 800b54c:	20000030 	.word	0x20000030

0800b550 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b560:	4b0d      	ldr	r3, [pc, #52]	; (800b598 <CDC_Transmit_FS+0x48>)
 800b562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b566:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b572:	2301      	movs	r3, #1
 800b574:	e00b      	b.n	800b58e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b576:	887b      	ldrh	r3, [r7, #2]
 800b578:	461a      	mov	r2, r3
 800b57a:	6879      	ldr	r1, [r7, #4]
 800b57c:	4806      	ldr	r0, [pc, #24]	; (800b598 <CDC_Transmit_FS+0x48>)
 800b57e:	f7fd f8ef 	bl	8008760 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b582:	4805      	ldr	r0, [pc, #20]	; (800b598 <CDC_Transmit_FS+0x48>)
 800b584:	f7fd f92c 	bl	80087e0 <USBD_CDC_TransmitPacket>
 800b588:	4603      	mov	r3, r0
 800b58a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	20004578 	.word	0x20004578

0800b59c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b5ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	371c      	adds	r7, #28
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
	...

0800b5c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	6039      	str	r1, [r7, #0]
 800b5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2212      	movs	r2, #18
 800b5d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5d2:	4b03      	ldr	r3, [pc, #12]	; (800b5e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	20000100 	.word	0x20000100

0800b5e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	6039      	str	r1, [r7, #0]
 800b5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	2204      	movs	r2, #4
 800b5f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5f6:	4b03      	ldr	r3, [pc, #12]	; (800b604 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr
 800b604:	20000114 	.word	0x20000114

0800b608 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	6039      	str	r1, [r7, #0]
 800b612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b614:	79fb      	ldrb	r3, [r7, #7]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d105      	bne.n	800b626 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	4907      	ldr	r1, [pc, #28]	; (800b63c <USBD_FS_ProductStrDescriptor+0x34>)
 800b61e:	4808      	ldr	r0, [pc, #32]	; (800b640 <USBD_FS_ProductStrDescriptor+0x38>)
 800b620:	f7fe fb6c 	bl	8009cfc <USBD_GetString>
 800b624:	e004      	b.n	800b630 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b626:	683a      	ldr	r2, [r7, #0]
 800b628:	4904      	ldr	r1, [pc, #16]	; (800b63c <USBD_FS_ProductStrDescriptor+0x34>)
 800b62a:	4805      	ldr	r0, [pc, #20]	; (800b640 <USBD_FS_ProductStrDescriptor+0x38>)
 800b62c:	f7fe fb66 	bl	8009cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b630:	4b02      	ldr	r3, [pc, #8]	; (800b63c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20005854 	.word	0x20005854
 800b640:	0800c958 	.word	0x0800c958

0800b644 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	4603      	mov	r3, r0
 800b64c:	6039      	str	r1, [r7, #0]
 800b64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	4904      	ldr	r1, [pc, #16]	; (800b664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b654:	4804      	ldr	r0, [pc, #16]	; (800b668 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b656:	f7fe fb51 	bl	8009cfc <USBD_GetString>
  return USBD_StrDesc;
 800b65a:	4b02      	ldr	r3, [pc, #8]	; (800b664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	20005854 	.word	0x20005854
 800b668:	0800c970 	.word	0x0800c970

0800b66c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	4603      	mov	r3, r0
 800b674:	6039      	str	r1, [r7, #0]
 800b676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	221a      	movs	r2, #26
 800b67c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b67e:	f000 f843 	bl	800b708 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b682:	4b02      	ldr	r3, [pc, #8]	; (800b68c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b684:	4618      	mov	r0, r3
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	20000118 	.word	0x20000118

0800b690 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	4603      	mov	r3, r0
 800b698:	6039      	str	r1, [r7, #0]
 800b69a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d105      	bne.n	800b6ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	4907      	ldr	r1, [pc, #28]	; (800b6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6a6:	4808      	ldr	r0, [pc, #32]	; (800b6c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6a8:	f7fe fb28 	bl	8009cfc <USBD_GetString>
 800b6ac:	e004      	b.n	800b6b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	4904      	ldr	r1, [pc, #16]	; (800b6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6b2:	4805      	ldr	r0, [pc, #20]	; (800b6c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6b4:	f7fe fb22 	bl	8009cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6b8:	4b02      	ldr	r3, [pc, #8]	; (800b6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20005854 	.word	0x20005854
 800b6c8:	0800c984 	.word	0x0800c984

0800b6cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d105      	bne.n	800b6ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	4907      	ldr	r1, [pc, #28]	; (800b700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6e2:	4808      	ldr	r0, [pc, #32]	; (800b704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6e4:	f7fe fb0a 	bl	8009cfc <USBD_GetString>
 800b6e8:	e004      	b.n	800b6f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	4904      	ldr	r1, [pc, #16]	; (800b700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6ee:	4805      	ldr	r0, [pc, #20]	; (800b704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6f0:	f7fe fb04 	bl	8009cfc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6f4:	4b02      	ldr	r3, [pc, #8]	; (800b700 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20005854 	.word	0x20005854
 800b704:	0800c990 	.word	0x0800c990

0800b708 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b70e:	4b0f      	ldr	r3, [pc, #60]	; (800b74c <Get_SerialNum+0x44>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b714:	4b0e      	ldr	r3, [pc, #56]	; (800b750 <Get_SerialNum+0x48>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b71a:	4b0e      	ldr	r3, [pc, #56]	; (800b754 <Get_SerialNum+0x4c>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4413      	add	r3, r2
 800b726:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d009      	beq.n	800b742 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b72e:	2208      	movs	r2, #8
 800b730:	4909      	ldr	r1, [pc, #36]	; (800b758 <Get_SerialNum+0x50>)
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f000 f814 	bl	800b760 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b738:	2204      	movs	r2, #4
 800b73a:	4908      	ldr	r1, [pc, #32]	; (800b75c <Get_SerialNum+0x54>)
 800b73c:	68b8      	ldr	r0, [r7, #8]
 800b73e:	f000 f80f 	bl	800b760 <IntToUnicode>
  }
}
 800b742:	bf00      	nop
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	1fff7a10 	.word	0x1fff7a10
 800b750:	1fff7a14 	.word	0x1fff7a14
 800b754:	1fff7a18 	.word	0x1fff7a18
 800b758:	2000011a 	.word	0x2000011a
 800b75c:	2000012a 	.word	0x2000012a

0800b760 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	4613      	mov	r3, r2
 800b76c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b76e:	2300      	movs	r3, #0
 800b770:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b772:	2300      	movs	r3, #0
 800b774:	75fb      	strb	r3, [r7, #23]
 800b776:	e027      	b.n	800b7c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	0f1b      	lsrs	r3, r3, #28
 800b77c:	2b09      	cmp	r3, #9
 800b77e:	d80b      	bhi.n	800b798 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	0f1b      	lsrs	r3, r3, #28
 800b784:	b2da      	uxtb	r2, r3
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	005b      	lsls	r3, r3, #1
 800b78a:	4619      	mov	r1, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	440b      	add	r3, r1
 800b790:	3230      	adds	r2, #48	; 0x30
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	701a      	strb	r2, [r3, #0]
 800b796:	e00a      	b.n	800b7ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	0f1b      	lsrs	r3, r3, #28
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	7dfb      	ldrb	r3, [r7, #23]
 800b7a0:	005b      	lsls	r3, r3, #1
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	440b      	add	r3, r1
 800b7a8:	3237      	adds	r2, #55	; 0x37
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	011b      	lsls	r3, r3, #4
 800b7b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	005b      	lsls	r3, r3, #1
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	4413      	add	r3, r2
 800b7be:	2200      	movs	r2, #0
 800b7c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7c2:	7dfb      	ldrb	r3, [r7, #23]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	75fb      	strb	r3, [r7, #23]
 800b7c8:	7dfa      	ldrb	r2, [r7, #23]
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d3d3      	bcc.n	800b778 <IntToUnicode+0x18>
  }
}
 800b7d0:	bf00      	nop
 800b7d2:	bf00      	nop
 800b7d4:	371c      	adds	r7, #28
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
	...

0800b7e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08a      	sub	sp, #40	; 0x28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	605a      	str	r2, [r3, #4]
 800b7f2:	609a      	str	r2, [r3, #8]
 800b7f4:	60da      	str	r2, [r3, #12]
 800b7f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b800:	d13a      	bne.n	800b878 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b802:	2300      	movs	r3, #0
 800b804:	613b      	str	r3, [r7, #16]
 800b806:	4b1e      	ldr	r3, [pc, #120]	; (800b880 <HAL_PCD_MspInit+0xa0>)
 800b808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80a:	4a1d      	ldr	r2, [pc, #116]	; (800b880 <HAL_PCD_MspInit+0xa0>)
 800b80c:	f043 0301 	orr.w	r3, r3, #1
 800b810:	6313      	str	r3, [r2, #48]	; 0x30
 800b812:	4b1b      	ldr	r3, [pc, #108]	; (800b880 <HAL_PCD_MspInit+0xa0>)
 800b814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	613b      	str	r3, [r7, #16]
 800b81c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b81e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b824:	2302      	movs	r3, #2
 800b826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b828:	2300      	movs	r3, #0
 800b82a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b82c:	2303      	movs	r3, #3
 800b82e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b830:	230a      	movs	r3, #10
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b834:	f107 0314 	add.w	r3, r7, #20
 800b838:	4619      	mov	r1, r3
 800b83a:	4812      	ldr	r0, [pc, #72]	; (800b884 <HAL_PCD_MspInit+0xa4>)
 800b83c:	f7f7 f9e2 	bl	8002c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b840:	4b0f      	ldr	r3, [pc, #60]	; (800b880 <HAL_PCD_MspInit+0xa0>)
 800b842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b844:	4a0e      	ldr	r2, [pc, #56]	; (800b880 <HAL_PCD_MspInit+0xa0>)
 800b846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b84a:	6353      	str	r3, [r2, #52]	; 0x34
 800b84c:	2300      	movs	r3, #0
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <HAL_PCD_MspInit+0xa0>)
 800b852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b854:	4a0a      	ldr	r2, [pc, #40]	; (800b880 <HAL_PCD_MspInit+0xa0>)
 800b856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b85a:	6453      	str	r3, [r2, #68]	; 0x44
 800b85c:	4b08      	ldr	r3, [pc, #32]	; (800b880 <HAL_PCD_MspInit+0xa0>)
 800b85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b864:	60fb      	str	r3, [r7, #12]
 800b866:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b868:	2200      	movs	r2, #0
 800b86a:	2105      	movs	r1, #5
 800b86c:	2043      	movs	r0, #67	; 0x43
 800b86e:	f7f7 f99f 	bl	8002bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b872:	2043      	movs	r0, #67	; 0x43
 800b874:	f7f7 f9b8 	bl	8002be8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b878:	bf00      	nop
 800b87a:	3728      	adds	r7, #40	; 0x28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	40023800 	.word	0x40023800
 800b884:	40020000 	.word	0x40020000

0800b888 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b89c:	4619      	mov	r1, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	f7fd f8cd 	bl	8008a3e <USBD_LL_SetupStage>
}
 800b8a4:	bf00      	nop
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8be:	78fa      	ldrb	r2, [r7, #3]
 800b8c0:	6879      	ldr	r1, [r7, #4]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	00db      	lsls	r3, r3, #3
 800b8c6:	4413      	add	r3, r2
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	440b      	add	r3, r1
 800b8cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	78fb      	ldrb	r3, [r7, #3]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f7fd f907 	bl	8008ae8 <USBD_LL_DataOutStage>
}
 800b8da:	bf00      	nop
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b082      	sub	sp, #8
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8f4:	78fa      	ldrb	r2, [r7, #3]
 800b8f6:	6879      	ldr	r1, [r7, #4]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	440b      	add	r3, r1
 800b902:	334c      	adds	r3, #76	; 0x4c
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	78fb      	ldrb	r3, [r7, #3]
 800b908:	4619      	mov	r1, r3
 800b90a:	f7fd f9a0 	bl	8008c4e <USBD_LL_DataInStage>
}
 800b90e:	bf00      	nop
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b082      	sub	sp, #8
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b924:	4618      	mov	r0, r3
 800b926:	f7fd fad4 	bl	8008ed2 <USBD_LL_SOF>
}
 800b92a:	bf00      	nop
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b084      	sub	sp, #16
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b93a:	2301      	movs	r3, #1
 800b93c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d102      	bne.n	800b94c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
 800b94a:	e008      	b.n	800b95e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	2b02      	cmp	r3, #2
 800b952:	d102      	bne.n	800b95a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b954:	2301      	movs	r3, #1
 800b956:	73fb      	strb	r3, [r7, #15]
 800b958:	e001      	b.n	800b95e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b95a:	f7f6 fe1b 	bl	8002594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b964:	7bfa      	ldrb	r2, [r7, #15]
 800b966:	4611      	mov	r1, r2
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fd fa74 	bl	8008e56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b974:	4618      	mov	r0, r3
 800b976:	f7fd fa1c 	bl	8008db2 <USBD_LL_Reset>
}
 800b97a:	bf00      	nop
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b992:	4618      	mov	r0, r3
 800b994:	f7fd fa6f 	bl	8008e76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	6812      	ldr	r2, [r2, #0]
 800b9a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9aa:	f043 0301 	orr.w	r3, r3, #1
 800b9ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d005      	beq.n	800b9c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9b8:	4b04      	ldr	r3, [pc, #16]	; (800b9cc <HAL_PCD_SuspendCallback+0x48>)
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	4a03      	ldr	r2, [pc, #12]	; (800b9cc <HAL_PCD_SuspendCallback+0x48>)
 800b9be:	f043 0306 	orr.w	r3, r3, #6
 800b9c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b9c4:	bf00      	nop
 800b9c6:	3708      	adds	r7, #8
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	e000ed00 	.word	0xe000ed00

0800b9d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7fd fa5f 	bl	8008ea2 <USBD_LL_Resume>
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9fe:	78fa      	ldrb	r2, [r7, #3]
 800ba00:	4611      	mov	r1, r2
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fd fab7 	bl	8008f76 <USBD_LL_IsoOUTIncomplete>
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba22:	78fa      	ldrb	r2, [r7, #3]
 800ba24:	4611      	mov	r1, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fd fa73 	bl	8008f12 <USBD_LL_IsoINIncomplete>
}
 800ba2c:	bf00      	nop
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fd fac9 	bl	8008fda <USBD_LL_DevConnected>
}
 800ba48:	bf00      	nop
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fd fac6 	bl	8008ff0 <USBD_LL_DevDisconnected>
}
 800ba64:	bf00      	nop
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d13c      	bne.n	800baf6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ba7c:	4a20      	ldr	r2, [pc, #128]	; (800bb00 <USBD_LL_Init+0x94>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a1e      	ldr	r2, [pc, #120]	; (800bb00 <USBD_LL_Init+0x94>)
 800ba88:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ba8c:	4b1c      	ldr	r3, [pc, #112]	; (800bb00 <USBD_LL_Init+0x94>)
 800ba8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ba92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ba94:	4b1a      	ldr	r3, [pc, #104]	; (800bb00 <USBD_LL_Init+0x94>)
 800ba96:	2204      	movs	r2, #4
 800ba98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ba9a:	4b19      	ldr	r3, [pc, #100]	; (800bb00 <USBD_LL_Init+0x94>)
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800baa0:	4b17      	ldr	r3, [pc, #92]	; (800bb00 <USBD_LL_Init+0x94>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800baa6:	4b16      	ldr	r3, [pc, #88]	; (800bb00 <USBD_LL_Init+0x94>)
 800baa8:	2202      	movs	r2, #2
 800baaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800baac:	4b14      	ldr	r3, [pc, #80]	; (800bb00 <USBD_LL_Init+0x94>)
 800baae:	2200      	movs	r2, #0
 800bab0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bab2:	4b13      	ldr	r3, [pc, #76]	; (800bb00 <USBD_LL_Init+0x94>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bab8:	4b11      	ldr	r3, [pc, #68]	; (800bb00 <USBD_LL_Init+0x94>)
 800baba:	2200      	movs	r2, #0
 800babc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800babe:	4b10      	ldr	r3, [pc, #64]	; (800bb00 <USBD_LL_Init+0x94>)
 800bac0:	2200      	movs	r2, #0
 800bac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bac4:	4b0e      	ldr	r3, [pc, #56]	; (800bb00 <USBD_LL_Init+0x94>)
 800bac6:	2200      	movs	r2, #0
 800bac8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800baca:	480d      	ldr	r0, [pc, #52]	; (800bb00 <USBD_LL_Init+0x94>)
 800bacc:	f7f7 fa51 	bl	8002f72 <HAL_PCD_Init>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bad6:	f7f6 fd5d 	bl	8002594 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bada:	2180      	movs	r1, #128	; 0x80
 800badc:	4808      	ldr	r0, [pc, #32]	; (800bb00 <USBD_LL_Init+0x94>)
 800bade:	f7f8 fca8 	bl	8004432 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bae2:	2240      	movs	r2, #64	; 0x40
 800bae4:	2100      	movs	r1, #0
 800bae6:	4806      	ldr	r0, [pc, #24]	; (800bb00 <USBD_LL_Init+0x94>)
 800bae8:	f7f8 fc5c 	bl	80043a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800baec:	2280      	movs	r2, #128	; 0x80
 800baee:	2101      	movs	r1, #1
 800baf0:	4803      	ldr	r0, [pc, #12]	; (800bb00 <USBD_LL_Init+0x94>)
 800baf2:	f7f8 fc57 	bl	80043a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	20005a54 	.word	0x20005a54

0800bb04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb10:	2300      	movs	r3, #0
 800bb12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7f7 fb46 	bl	80031ac <HAL_PCD_Start>
 800bb20:	4603      	mov	r3, r0
 800bb22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 f942 	bl	800bdb0 <USBD_Get_USB_Status>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb30:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
 800bb42:	4608      	mov	r0, r1
 800bb44:	4611      	mov	r1, r2
 800bb46:	461a      	mov	r2, r3
 800bb48:	4603      	mov	r3, r0
 800bb4a:	70fb      	strb	r3, [r7, #3]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70bb      	strb	r3, [r7, #2]
 800bb50:	4613      	mov	r3, r2
 800bb52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb62:	78bb      	ldrb	r3, [r7, #2]
 800bb64:	883a      	ldrh	r2, [r7, #0]
 800bb66:	78f9      	ldrb	r1, [r7, #3]
 800bb68:	f7f8 f817 	bl	8003b9a <HAL_PCD_EP_Open>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb70:	7bfb      	ldrb	r3, [r7, #15]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f91c 	bl	800bdb0 <USBD_Get_USB_Status>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b084      	sub	sp, #16
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb92:	2300      	movs	r3, #0
 800bb94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bba0:	78fa      	ldrb	r2, [r7, #3]
 800bba2:	4611      	mov	r1, r2
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7f8 f860 	bl	8003c6a <HAL_PCD_EP_Close>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 f8fd 	bl	800bdb0 <USBD_Get_USB_Status>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbba:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbde:	78fa      	ldrb	r2, [r7, #3]
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7f8 f938 	bl	8003e58 <HAL_PCD_EP_SetStall>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 f8de 	bl	800bdb0 <USBD_Get_USB_Status>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc12:	2300      	movs	r3, #0
 800bc14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc1c:	78fa      	ldrb	r2, [r7, #3]
 800bc1e:	4611      	mov	r1, r2
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7f8 f97d 	bl	8003f20 <HAL_PCD_EP_ClrStall>
 800bc26:	4603      	mov	r3, r0
 800bc28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc2a:	7bfb      	ldrb	r3, [r7, #15]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 f8bf 	bl	800bdb0 <USBD_Get_USB_Status>
 800bc32:	4603      	mov	r3, r0
 800bc34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bc52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	da0b      	bge.n	800bc74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc5c:	78fb      	ldrb	r3, [r7, #3]
 800bc5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc62:	68f9      	ldr	r1, [r7, #12]
 800bc64:	4613      	mov	r3, r2
 800bc66:	00db      	lsls	r3, r3, #3
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	440b      	add	r3, r1
 800bc6e:	333e      	adds	r3, #62	; 0x3e
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	e00b      	b.n	800bc8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc74:	78fb      	ldrb	r3, [r7, #3]
 800bc76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc7a:	68f9      	ldr	r1, [r7, #12]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	4413      	add	r3, r2
 800bc82:	009b      	lsls	r3, r3, #2
 800bc84:	440b      	add	r3, r1
 800bc86:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bc8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcb2:	78fa      	ldrb	r2, [r7, #3]
 800bcb4:	4611      	mov	r1, r2
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7f7 ff4a 	bl	8003b50 <HAL_PCD_SetAddress>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcc0:	7bfb      	ldrb	r3, [r7, #15]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f000 f874 	bl	800bdb0 <USBD_Get_USB_Status>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b086      	sub	sp, #24
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	603b      	str	r3, [r7, #0]
 800bce2:	460b      	mov	r3, r1
 800bce4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bcf4:	7af9      	ldrb	r1, [r7, #11]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	f7f8 f863 	bl	8003dc4 <HAL_PCD_EP_Transmit>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 f853 	bl	800bdb0 <USBD_Get_USB_Status>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	607a      	str	r2, [r7, #4]
 800bd22:	603b      	str	r3, [r7, #0]
 800bd24:	460b      	mov	r3, r1
 800bd26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bd36:	7af9      	ldrb	r1, [r7, #11]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	f7f7 ffdf 	bl	8003cfe <HAL_PCD_EP_Receive>
 800bd40:	4603      	mov	r3, r0
 800bd42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd44:	7dfb      	ldrb	r3, [r7, #23]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 f832 	bl	800bdb0 <USBD_Get_USB_Status>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd50:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3718      	adds	r7, #24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b082      	sub	sp, #8
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd6c:	78fa      	ldrb	r2, [r7, #3]
 800bd6e:	4611      	mov	r1, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7f8 f80f 	bl	8003d94 <HAL_PCD_EP_GetRxCount>
 800bd76:	4603      	mov	r3, r0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd88:	4b03      	ldr	r3, [pc, #12]	; (800bd98 <USBD_static_malloc+0x18>)
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	20005f60 	.word	0x20005f60

0800bd9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]

}
 800bda4:	bf00      	nop
 800bda6:	370c      	adds	r7, #12
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr

0800bdb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	2b03      	cmp	r3, #3
 800bdc2:	d817      	bhi.n	800bdf4 <USBD_Get_USB_Status+0x44>
 800bdc4:	a201      	add	r2, pc, #4	; (adr r2, 800bdcc <USBD_Get_USB_Status+0x1c>)
 800bdc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdca:	bf00      	nop
 800bdcc:	0800bddd 	.word	0x0800bddd
 800bdd0:	0800bde3 	.word	0x0800bde3
 800bdd4:	0800bde9 	.word	0x0800bde9
 800bdd8:	0800bdef 	.word	0x0800bdef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]
    break;
 800bde0:	e00b      	b.n	800bdfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bde2:	2303      	movs	r3, #3
 800bde4:	73fb      	strb	r3, [r7, #15]
    break;
 800bde6:	e008      	b.n	800bdfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bde8:	2301      	movs	r3, #1
 800bdea:	73fb      	strb	r3, [r7, #15]
    break;
 800bdec:	e005      	b.n	800bdfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	73fb      	strb	r3, [r7, #15]
    break;
 800bdf2:	e002      	b.n	800bdfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bdf8:	bf00      	nop
  }
  return usb_status;
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <siprintf>:
 800be08:	b40e      	push	{r1, r2, r3}
 800be0a:	b500      	push	{lr}
 800be0c:	b09c      	sub	sp, #112	; 0x70
 800be0e:	ab1d      	add	r3, sp, #116	; 0x74
 800be10:	9002      	str	r0, [sp, #8]
 800be12:	9006      	str	r0, [sp, #24]
 800be14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be18:	4809      	ldr	r0, [pc, #36]	; (800be40 <siprintf+0x38>)
 800be1a:	9107      	str	r1, [sp, #28]
 800be1c:	9104      	str	r1, [sp, #16]
 800be1e:	4909      	ldr	r1, [pc, #36]	; (800be44 <siprintf+0x3c>)
 800be20:	f853 2b04 	ldr.w	r2, [r3], #4
 800be24:	9105      	str	r1, [sp, #20]
 800be26:	6800      	ldr	r0, [r0, #0]
 800be28:	9301      	str	r3, [sp, #4]
 800be2a:	a902      	add	r1, sp, #8
 800be2c:	f000 fa0a 	bl	800c244 <_svfiprintf_r>
 800be30:	9b02      	ldr	r3, [sp, #8]
 800be32:	2200      	movs	r2, #0
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	b01c      	add	sp, #112	; 0x70
 800be38:	f85d eb04 	ldr.w	lr, [sp], #4
 800be3c:	b003      	add	sp, #12
 800be3e:	4770      	bx	lr
 800be40:	20000180 	.word	0x20000180
 800be44:	ffff0208 	.word	0xffff0208

0800be48 <memset>:
 800be48:	4402      	add	r2, r0
 800be4a:	4603      	mov	r3, r0
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d100      	bne.n	800be52 <memset+0xa>
 800be50:	4770      	bx	lr
 800be52:	f803 1b01 	strb.w	r1, [r3], #1
 800be56:	e7f9      	b.n	800be4c <memset+0x4>

0800be58 <strncpy>:
 800be58:	b510      	push	{r4, lr}
 800be5a:	3901      	subs	r1, #1
 800be5c:	4603      	mov	r3, r0
 800be5e:	b132      	cbz	r2, 800be6e <strncpy+0x16>
 800be60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be64:	f803 4b01 	strb.w	r4, [r3], #1
 800be68:	3a01      	subs	r2, #1
 800be6a:	2c00      	cmp	r4, #0
 800be6c:	d1f7      	bne.n	800be5e <strncpy+0x6>
 800be6e:	441a      	add	r2, r3
 800be70:	2100      	movs	r1, #0
 800be72:	4293      	cmp	r3, r2
 800be74:	d100      	bne.n	800be78 <strncpy+0x20>
 800be76:	bd10      	pop	{r4, pc}
 800be78:	f803 1b01 	strb.w	r1, [r3], #1
 800be7c:	e7f9      	b.n	800be72 <strncpy+0x1a>
	...

0800be80 <_reclaim_reent>:
 800be80:	4b29      	ldr	r3, [pc, #164]	; (800bf28 <_reclaim_reent+0xa8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4283      	cmp	r3, r0
 800be86:	b570      	push	{r4, r5, r6, lr}
 800be88:	4604      	mov	r4, r0
 800be8a:	d04b      	beq.n	800bf24 <_reclaim_reent+0xa4>
 800be8c:	69c3      	ldr	r3, [r0, #28]
 800be8e:	b143      	cbz	r3, 800bea2 <_reclaim_reent+0x22>
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d144      	bne.n	800bf20 <_reclaim_reent+0xa0>
 800be96:	69e3      	ldr	r3, [r4, #28]
 800be98:	6819      	ldr	r1, [r3, #0]
 800be9a:	b111      	cbz	r1, 800bea2 <_reclaim_reent+0x22>
 800be9c:	4620      	mov	r0, r4
 800be9e:	f000 f87f 	bl	800bfa0 <_free_r>
 800bea2:	6961      	ldr	r1, [r4, #20]
 800bea4:	b111      	cbz	r1, 800beac <_reclaim_reent+0x2c>
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f87a 	bl	800bfa0 <_free_r>
 800beac:	69e1      	ldr	r1, [r4, #28]
 800beae:	b111      	cbz	r1, 800beb6 <_reclaim_reent+0x36>
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 f875 	bl	800bfa0 <_free_r>
 800beb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800beb8:	b111      	cbz	r1, 800bec0 <_reclaim_reent+0x40>
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 f870 	bl	800bfa0 <_free_r>
 800bec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bec2:	b111      	cbz	r1, 800beca <_reclaim_reent+0x4a>
 800bec4:	4620      	mov	r0, r4
 800bec6:	f000 f86b 	bl	800bfa0 <_free_r>
 800beca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800becc:	b111      	cbz	r1, 800bed4 <_reclaim_reent+0x54>
 800bece:	4620      	mov	r0, r4
 800bed0:	f000 f866 	bl	800bfa0 <_free_r>
 800bed4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bed6:	b111      	cbz	r1, 800bede <_reclaim_reent+0x5e>
 800bed8:	4620      	mov	r0, r4
 800beda:	f000 f861 	bl	800bfa0 <_free_r>
 800bede:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bee0:	b111      	cbz	r1, 800bee8 <_reclaim_reent+0x68>
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 f85c 	bl	800bfa0 <_free_r>
 800bee8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800beea:	b111      	cbz	r1, 800bef2 <_reclaim_reent+0x72>
 800beec:	4620      	mov	r0, r4
 800beee:	f000 f857 	bl	800bfa0 <_free_r>
 800bef2:	6a23      	ldr	r3, [r4, #32]
 800bef4:	b1b3      	cbz	r3, 800bf24 <_reclaim_reent+0xa4>
 800bef6:	4620      	mov	r0, r4
 800bef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800befc:	4718      	bx	r3
 800befe:	5949      	ldr	r1, [r1, r5]
 800bf00:	b941      	cbnz	r1, 800bf14 <_reclaim_reent+0x94>
 800bf02:	3504      	adds	r5, #4
 800bf04:	69e3      	ldr	r3, [r4, #28]
 800bf06:	2d80      	cmp	r5, #128	; 0x80
 800bf08:	68d9      	ldr	r1, [r3, #12]
 800bf0a:	d1f8      	bne.n	800befe <_reclaim_reent+0x7e>
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f000 f847 	bl	800bfa0 <_free_r>
 800bf12:	e7c0      	b.n	800be96 <_reclaim_reent+0x16>
 800bf14:	680e      	ldr	r6, [r1, #0]
 800bf16:	4620      	mov	r0, r4
 800bf18:	f000 f842 	bl	800bfa0 <_free_r>
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	e7ef      	b.n	800bf00 <_reclaim_reent+0x80>
 800bf20:	2500      	movs	r5, #0
 800bf22:	e7ef      	b.n	800bf04 <_reclaim_reent+0x84>
 800bf24:	bd70      	pop	{r4, r5, r6, pc}
 800bf26:	bf00      	nop
 800bf28:	20000180 	.word	0x20000180

0800bf2c <__errno>:
 800bf2c:	4b01      	ldr	r3, [pc, #4]	; (800bf34 <__errno+0x8>)
 800bf2e:	6818      	ldr	r0, [r3, #0]
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	20000180 	.word	0x20000180

0800bf38 <__libc_init_array>:
 800bf38:	b570      	push	{r4, r5, r6, lr}
 800bf3a:	4d0d      	ldr	r5, [pc, #52]	; (800bf70 <__libc_init_array+0x38>)
 800bf3c:	4c0d      	ldr	r4, [pc, #52]	; (800bf74 <__libc_init_array+0x3c>)
 800bf3e:	1b64      	subs	r4, r4, r5
 800bf40:	10a4      	asrs	r4, r4, #2
 800bf42:	2600      	movs	r6, #0
 800bf44:	42a6      	cmp	r6, r4
 800bf46:	d109      	bne.n	800bf5c <__libc_init_array+0x24>
 800bf48:	4d0b      	ldr	r5, [pc, #44]	; (800bf78 <__libc_init_array+0x40>)
 800bf4a:	4c0c      	ldr	r4, [pc, #48]	; (800bf7c <__libc_init_array+0x44>)
 800bf4c:	f000 fc6a 	bl	800c824 <_init>
 800bf50:	1b64      	subs	r4, r4, r5
 800bf52:	10a4      	asrs	r4, r4, #2
 800bf54:	2600      	movs	r6, #0
 800bf56:	42a6      	cmp	r6, r4
 800bf58:	d105      	bne.n	800bf66 <__libc_init_array+0x2e>
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}
 800bf5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf60:	4798      	blx	r3
 800bf62:	3601      	adds	r6, #1
 800bf64:	e7ee      	b.n	800bf44 <__libc_init_array+0xc>
 800bf66:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf6a:	4798      	blx	r3
 800bf6c:	3601      	adds	r6, #1
 800bf6e:	e7f2      	b.n	800bf56 <__libc_init_array+0x1e>
 800bf70:	0800c9f4 	.word	0x0800c9f4
 800bf74:	0800c9f4 	.word	0x0800c9f4
 800bf78:	0800c9f4 	.word	0x0800c9f4
 800bf7c:	0800c9f8 	.word	0x0800c9f8

0800bf80 <__retarget_lock_acquire_recursive>:
 800bf80:	4770      	bx	lr

0800bf82 <__retarget_lock_release_recursive>:
 800bf82:	4770      	bx	lr

0800bf84 <memcpy>:
 800bf84:	440a      	add	r2, r1
 800bf86:	4291      	cmp	r1, r2
 800bf88:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf8c:	d100      	bne.n	800bf90 <memcpy+0xc>
 800bf8e:	4770      	bx	lr
 800bf90:	b510      	push	{r4, lr}
 800bf92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf9a:	4291      	cmp	r1, r2
 800bf9c:	d1f9      	bne.n	800bf92 <memcpy+0xe>
 800bf9e:	bd10      	pop	{r4, pc}

0800bfa0 <_free_r>:
 800bfa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfa2:	2900      	cmp	r1, #0
 800bfa4:	d044      	beq.n	800c030 <_free_r+0x90>
 800bfa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfaa:	9001      	str	r0, [sp, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f1a1 0404 	sub.w	r4, r1, #4
 800bfb2:	bfb8      	it	lt
 800bfb4:	18e4      	addlt	r4, r4, r3
 800bfb6:	f000 f8df 	bl	800c178 <__malloc_lock>
 800bfba:	4a1e      	ldr	r2, [pc, #120]	; (800c034 <_free_r+0x94>)
 800bfbc:	9801      	ldr	r0, [sp, #4]
 800bfbe:	6813      	ldr	r3, [r2, #0]
 800bfc0:	b933      	cbnz	r3, 800bfd0 <_free_r+0x30>
 800bfc2:	6063      	str	r3, [r4, #4]
 800bfc4:	6014      	str	r4, [r2, #0]
 800bfc6:	b003      	add	sp, #12
 800bfc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfcc:	f000 b8da 	b.w	800c184 <__malloc_unlock>
 800bfd0:	42a3      	cmp	r3, r4
 800bfd2:	d908      	bls.n	800bfe6 <_free_r+0x46>
 800bfd4:	6825      	ldr	r5, [r4, #0]
 800bfd6:	1961      	adds	r1, r4, r5
 800bfd8:	428b      	cmp	r3, r1
 800bfda:	bf01      	itttt	eq
 800bfdc:	6819      	ldreq	r1, [r3, #0]
 800bfde:	685b      	ldreq	r3, [r3, #4]
 800bfe0:	1949      	addeq	r1, r1, r5
 800bfe2:	6021      	streq	r1, [r4, #0]
 800bfe4:	e7ed      	b.n	800bfc2 <_free_r+0x22>
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	b10b      	cbz	r3, 800bff0 <_free_r+0x50>
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	d9fa      	bls.n	800bfe6 <_free_r+0x46>
 800bff0:	6811      	ldr	r1, [r2, #0]
 800bff2:	1855      	adds	r5, r2, r1
 800bff4:	42a5      	cmp	r5, r4
 800bff6:	d10b      	bne.n	800c010 <_free_r+0x70>
 800bff8:	6824      	ldr	r4, [r4, #0]
 800bffa:	4421      	add	r1, r4
 800bffc:	1854      	adds	r4, r2, r1
 800bffe:	42a3      	cmp	r3, r4
 800c000:	6011      	str	r1, [r2, #0]
 800c002:	d1e0      	bne.n	800bfc6 <_free_r+0x26>
 800c004:	681c      	ldr	r4, [r3, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	6053      	str	r3, [r2, #4]
 800c00a:	440c      	add	r4, r1
 800c00c:	6014      	str	r4, [r2, #0]
 800c00e:	e7da      	b.n	800bfc6 <_free_r+0x26>
 800c010:	d902      	bls.n	800c018 <_free_r+0x78>
 800c012:	230c      	movs	r3, #12
 800c014:	6003      	str	r3, [r0, #0]
 800c016:	e7d6      	b.n	800bfc6 <_free_r+0x26>
 800c018:	6825      	ldr	r5, [r4, #0]
 800c01a:	1961      	adds	r1, r4, r5
 800c01c:	428b      	cmp	r3, r1
 800c01e:	bf04      	itt	eq
 800c020:	6819      	ldreq	r1, [r3, #0]
 800c022:	685b      	ldreq	r3, [r3, #4]
 800c024:	6063      	str	r3, [r4, #4]
 800c026:	bf04      	itt	eq
 800c028:	1949      	addeq	r1, r1, r5
 800c02a:	6021      	streq	r1, [r4, #0]
 800c02c:	6054      	str	r4, [r2, #4]
 800c02e:	e7ca      	b.n	800bfc6 <_free_r+0x26>
 800c030:	b003      	add	sp, #12
 800c032:	bd30      	pop	{r4, r5, pc}
 800c034:	200062c0 	.word	0x200062c0

0800c038 <sbrk_aligned>:
 800c038:	b570      	push	{r4, r5, r6, lr}
 800c03a:	4e0e      	ldr	r6, [pc, #56]	; (800c074 <sbrk_aligned+0x3c>)
 800c03c:	460c      	mov	r4, r1
 800c03e:	6831      	ldr	r1, [r6, #0]
 800c040:	4605      	mov	r5, r0
 800c042:	b911      	cbnz	r1, 800c04a <sbrk_aligned+0x12>
 800c044:	f000 fba6 	bl	800c794 <_sbrk_r>
 800c048:	6030      	str	r0, [r6, #0]
 800c04a:	4621      	mov	r1, r4
 800c04c:	4628      	mov	r0, r5
 800c04e:	f000 fba1 	bl	800c794 <_sbrk_r>
 800c052:	1c43      	adds	r3, r0, #1
 800c054:	d00a      	beq.n	800c06c <sbrk_aligned+0x34>
 800c056:	1cc4      	adds	r4, r0, #3
 800c058:	f024 0403 	bic.w	r4, r4, #3
 800c05c:	42a0      	cmp	r0, r4
 800c05e:	d007      	beq.n	800c070 <sbrk_aligned+0x38>
 800c060:	1a21      	subs	r1, r4, r0
 800c062:	4628      	mov	r0, r5
 800c064:	f000 fb96 	bl	800c794 <_sbrk_r>
 800c068:	3001      	adds	r0, #1
 800c06a:	d101      	bne.n	800c070 <sbrk_aligned+0x38>
 800c06c:	f04f 34ff 	mov.w	r4, #4294967295
 800c070:	4620      	mov	r0, r4
 800c072:	bd70      	pop	{r4, r5, r6, pc}
 800c074:	200062c4 	.word	0x200062c4

0800c078 <_malloc_r>:
 800c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	1ccd      	adds	r5, r1, #3
 800c07e:	f025 0503 	bic.w	r5, r5, #3
 800c082:	3508      	adds	r5, #8
 800c084:	2d0c      	cmp	r5, #12
 800c086:	bf38      	it	cc
 800c088:	250c      	movcc	r5, #12
 800c08a:	2d00      	cmp	r5, #0
 800c08c:	4607      	mov	r7, r0
 800c08e:	db01      	blt.n	800c094 <_malloc_r+0x1c>
 800c090:	42a9      	cmp	r1, r5
 800c092:	d905      	bls.n	800c0a0 <_malloc_r+0x28>
 800c094:	230c      	movs	r3, #12
 800c096:	603b      	str	r3, [r7, #0]
 800c098:	2600      	movs	r6, #0
 800c09a:	4630      	mov	r0, r6
 800c09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c174 <_malloc_r+0xfc>
 800c0a4:	f000 f868 	bl	800c178 <__malloc_lock>
 800c0a8:	f8d8 3000 	ldr.w	r3, [r8]
 800c0ac:	461c      	mov	r4, r3
 800c0ae:	bb5c      	cbnz	r4, 800c108 <_malloc_r+0x90>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7ff ffc0 	bl	800c038 <sbrk_aligned>
 800c0b8:	1c43      	adds	r3, r0, #1
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	d155      	bne.n	800c16a <_malloc_r+0xf2>
 800c0be:	f8d8 4000 	ldr.w	r4, [r8]
 800c0c2:	4626      	mov	r6, r4
 800c0c4:	2e00      	cmp	r6, #0
 800c0c6:	d145      	bne.n	800c154 <_malloc_r+0xdc>
 800c0c8:	2c00      	cmp	r4, #0
 800c0ca:	d048      	beq.n	800c15e <_malloc_r+0xe6>
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	4631      	mov	r1, r6
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	eb04 0903 	add.w	r9, r4, r3
 800c0d6:	f000 fb5d 	bl	800c794 <_sbrk_r>
 800c0da:	4581      	cmp	r9, r0
 800c0dc:	d13f      	bne.n	800c15e <_malloc_r+0xe6>
 800c0de:	6821      	ldr	r1, [r4, #0]
 800c0e0:	1a6d      	subs	r5, r5, r1
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f7ff ffa7 	bl	800c038 <sbrk_aligned>
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	d037      	beq.n	800c15e <_malloc_r+0xe6>
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	442b      	add	r3, r5
 800c0f2:	6023      	str	r3, [r4, #0]
 800c0f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d038      	beq.n	800c16e <_malloc_r+0xf6>
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	42a2      	cmp	r2, r4
 800c100:	d12b      	bne.n	800c15a <_malloc_r+0xe2>
 800c102:	2200      	movs	r2, #0
 800c104:	605a      	str	r2, [r3, #4]
 800c106:	e00f      	b.n	800c128 <_malloc_r+0xb0>
 800c108:	6822      	ldr	r2, [r4, #0]
 800c10a:	1b52      	subs	r2, r2, r5
 800c10c:	d41f      	bmi.n	800c14e <_malloc_r+0xd6>
 800c10e:	2a0b      	cmp	r2, #11
 800c110:	d917      	bls.n	800c142 <_malloc_r+0xca>
 800c112:	1961      	adds	r1, r4, r5
 800c114:	42a3      	cmp	r3, r4
 800c116:	6025      	str	r5, [r4, #0]
 800c118:	bf18      	it	ne
 800c11a:	6059      	strne	r1, [r3, #4]
 800c11c:	6863      	ldr	r3, [r4, #4]
 800c11e:	bf08      	it	eq
 800c120:	f8c8 1000 	streq.w	r1, [r8]
 800c124:	5162      	str	r2, [r4, r5]
 800c126:	604b      	str	r3, [r1, #4]
 800c128:	4638      	mov	r0, r7
 800c12a:	f104 060b 	add.w	r6, r4, #11
 800c12e:	f000 f829 	bl	800c184 <__malloc_unlock>
 800c132:	f026 0607 	bic.w	r6, r6, #7
 800c136:	1d23      	adds	r3, r4, #4
 800c138:	1af2      	subs	r2, r6, r3
 800c13a:	d0ae      	beq.n	800c09a <_malloc_r+0x22>
 800c13c:	1b9b      	subs	r3, r3, r6
 800c13e:	50a3      	str	r3, [r4, r2]
 800c140:	e7ab      	b.n	800c09a <_malloc_r+0x22>
 800c142:	42a3      	cmp	r3, r4
 800c144:	6862      	ldr	r2, [r4, #4]
 800c146:	d1dd      	bne.n	800c104 <_malloc_r+0x8c>
 800c148:	f8c8 2000 	str.w	r2, [r8]
 800c14c:	e7ec      	b.n	800c128 <_malloc_r+0xb0>
 800c14e:	4623      	mov	r3, r4
 800c150:	6864      	ldr	r4, [r4, #4]
 800c152:	e7ac      	b.n	800c0ae <_malloc_r+0x36>
 800c154:	4634      	mov	r4, r6
 800c156:	6876      	ldr	r6, [r6, #4]
 800c158:	e7b4      	b.n	800c0c4 <_malloc_r+0x4c>
 800c15a:	4613      	mov	r3, r2
 800c15c:	e7cc      	b.n	800c0f8 <_malloc_r+0x80>
 800c15e:	230c      	movs	r3, #12
 800c160:	603b      	str	r3, [r7, #0]
 800c162:	4638      	mov	r0, r7
 800c164:	f000 f80e 	bl	800c184 <__malloc_unlock>
 800c168:	e797      	b.n	800c09a <_malloc_r+0x22>
 800c16a:	6025      	str	r5, [r4, #0]
 800c16c:	e7dc      	b.n	800c128 <_malloc_r+0xb0>
 800c16e:	605b      	str	r3, [r3, #4]
 800c170:	deff      	udf	#255	; 0xff
 800c172:	bf00      	nop
 800c174:	200062c0 	.word	0x200062c0

0800c178 <__malloc_lock>:
 800c178:	4801      	ldr	r0, [pc, #4]	; (800c180 <__malloc_lock+0x8>)
 800c17a:	f7ff bf01 	b.w	800bf80 <__retarget_lock_acquire_recursive>
 800c17e:	bf00      	nop
 800c180:	200062bc 	.word	0x200062bc

0800c184 <__malloc_unlock>:
 800c184:	4801      	ldr	r0, [pc, #4]	; (800c18c <__malloc_unlock+0x8>)
 800c186:	f7ff befc 	b.w	800bf82 <__retarget_lock_release_recursive>
 800c18a:	bf00      	nop
 800c18c:	200062bc 	.word	0x200062bc

0800c190 <__ssputs_r>:
 800c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c194:	688e      	ldr	r6, [r1, #8]
 800c196:	461f      	mov	r7, r3
 800c198:	42be      	cmp	r6, r7
 800c19a:	680b      	ldr	r3, [r1, #0]
 800c19c:	4682      	mov	sl, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	4690      	mov	r8, r2
 800c1a2:	d82c      	bhi.n	800c1fe <__ssputs_r+0x6e>
 800c1a4:	898a      	ldrh	r2, [r1, #12]
 800c1a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1aa:	d026      	beq.n	800c1fa <__ssputs_r+0x6a>
 800c1ac:	6965      	ldr	r5, [r4, #20]
 800c1ae:	6909      	ldr	r1, [r1, #16]
 800c1b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1b4:	eba3 0901 	sub.w	r9, r3, r1
 800c1b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1bc:	1c7b      	adds	r3, r7, #1
 800c1be:	444b      	add	r3, r9
 800c1c0:	106d      	asrs	r5, r5, #1
 800c1c2:	429d      	cmp	r5, r3
 800c1c4:	bf38      	it	cc
 800c1c6:	461d      	movcc	r5, r3
 800c1c8:	0553      	lsls	r3, r2, #21
 800c1ca:	d527      	bpl.n	800c21c <__ssputs_r+0x8c>
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	f7ff ff53 	bl	800c078 <_malloc_r>
 800c1d2:	4606      	mov	r6, r0
 800c1d4:	b360      	cbz	r0, 800c230 <__ssputs_r+0xa0>
 800c1d6:	6921      	ldr	r1, [r4, #16]
 800c1d8:	464a      	mov	r2, r9
 800c1da:	f7ff fed3 	bl	800bf84 <memcpy>
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e8:	81a3      	strh	r3, [r4, #12]
 800c1ea:	6126      	str	r6, [r4, #16]
 800c1ec:	6165      	str	r5, [r4, #20]
 800c1ee:	444e      	add	r6, r9
 800c1f0:	eba5 0509 	sub.w	r5, r5, r9
 800c1f4:	6026      	str	r6, [r4, #0]
 800c1f6:	60a5      	str	r5, [r4, #8]
 800c1f8:	463e      	mov	r6, r7
 800c1fa:	42be      	cmp	r6, r7
 800c1fc:	d900      	bls.n	800c200 <__ssputs_r+0x70>
 800c1fe:	463e      	mov	r6, r7
 800c200:	6820      	ldr	r0, [r4, #0]
 800c202:	4632      	mov	r2, r6
 800c204:	4641      	mov	r1, r8
 800c206:	f000 faab 	bl	800c760 <memmove>
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	1b9b      	subs	r3, r3, r6
 800c20e:	60a3      	str	r3, [r4, #8]
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	4433      	add	r3, r6
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	2000      	movs	r0, #0
 800c218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c21c:	462a      	mov	r2, r5
 800c21e:	f000 fac9 	bl	800c7b4 <_realloc_r>
 800c222:	4606      	mov	r6, r0
 800c224:	2800      	cmp	r0, #0
 800c226:	d1e0      	bne.n	800c1ea <__ssputs_r+0x5a>
 800c228:	6921      	ldr	r1, [r4, #16]
 800c22a:	4650      	mov	r0, sl
 800c22c:	f7ff feb8 	bl	800bfa0 <_free_r>
 800c230:	230c      	movs	r3, #12
 800c232:	f8ca 3000 	str.w	r3, [sl]
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295
 800c242:	e7e9      	b.n	800c218 <__ssputs_r+0x88>

0800c244 <_svfiprintf_r>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	4698      	mov	r8, r3
 800c24a:	898b      	ldrh	r3, [r1, #12]
 800c24c:	061b      	lsls	r3, r3, #24
 800c24e:	b09d      	sub	sp, #116	; 0x74
 800c250:	4607      	mov	r7, r0
 800c252:	460d      	mov	r5, r1
 800c254:	4614      	mov	r4, r2
 800c256:	d50e      	bpl.n	800c276 <_svfiprintf_r+0x32>
 800c258:	690b      	ldr	r3, [r1, #16]
 800c25a:	b963      	cbnz	r3, 800c276 <_svfiprintf_r+0x32>
 800c25c:	2140      	movs	r1, #64	; 0x40
 800c25e:	f7ff ff0b 	bl	800c078 <_malloc_r>
 800c262:	6028      	str	r0, [r5, #0]
 800c264:	6128      	str	r0, [r5, #16]
 800c266:	b920      	cbnz	r0, 800c272 <_svfiprintf_r+0x2e>
 800c268:	230c      	movs	r3, #12
 800c26a:	603b      	str	r3, [r7, #0]
 800c26c:	f04f 30ff 	mov.w	r0, #4294967295
 800c270:	e0d0      	b.n	800c414 <_svfiprintf_r+0x1d0>
 800c272:	2340      	movs	r3, #64	; 0x40
 800c274:	616b      	str	r3, [r5, #20]
 800c276:	2300      	movs	r3, #0
 800c278:	9309      	str	r3, [sp, #36]	; 0x24
 800c27a:	2320      	movs	r3, #32
 800c27c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c280:	f8cd 800c 	str.w	r8, [sp, #12]
 800c284:	2330      	movs	r3, #48	; 0x30
 800c286:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c42c <_svfiprintf_r+0x1e8>
 800c28a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c28e:	f04f 0901 	mov.w	r9, #1
 800c292:	4623      	mov	r3, r4
 800c294:	469a      	mov	sl, r3
 800c296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c29a:	b10a      	cbz	r2, 800c2a0 <_svfiprintf_r+0x5c>
 800c29c:	2a25      	cmp	r2, #37	; 0x25
 800c29e:	d1f9      	bne.n	800c294 <_svfiprintf_r+0x50>
 800c2a0:	ebba 0b04 	subs.w	fp, sl, r4
 800c2a4:	d00b      	beq.n	800c2be <_svfiprintf_r+0x7a>
 800c2a6:	465b      	mov	r3, fp
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	4629      	mov	r1, r5
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	f7ff ff6f 	bl	800c190 <__ssputs_r>
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	f000 80a9 	beq.w	800c40a <_svfiprintf_r+0x1c6>
 800c2b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ba:	445a      	add	r2, fp
 800c2bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c2be:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 80a1 	beq.w	800c40a <_svfiprintf_r+0x1c6>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2d2:	f10a 0a01 	add.w	sl, sl, #1
 800c2d6:	9304      	str	r3, [sp, #16]
 800c2d8:	9307      	str	r3, [sp, #28]
 800c2da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2de:	931a      	str	r3, [sp, #104]	; 0x68
 800c2e0:	4654      	mov	r4, sl
 800c2e2:	2205      	movs	r2, #5
 800c2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e8:	4850      	ldr	r0, [pc, #320]	; (800c42c <_svfiprintf_r+0x1e8>)
 800c2ea:	f7f3 ff79 	bl	80001e0 <memchr>
 800c2ee:	9a04      	ldr	r2, [sp, #16]
 800c2f0:	b9d8      	cbnz	r0, 800c32a <_svfiprintf_r+0xe6>
 800c2f2:	06d0      	lsls	r0, r2, #27
 800c2f4:	bf44      	itt	mi
 800c2f6:	2320      	movmi	r3, #32
 800c2f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2fc:	0711      	lsls	r1, r2, #28
 800c2fe:	bf44      	itt	mi
 800c300:	232b      	movmi	r3, #43	; 0x2b
 800c302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c306:	f89a 3000 	ldrb.w	r3, [sl]
 800c30a:	2b2a      	cmp	r3, #42	; 0x2a
 800c30c:	d015      	beq.n	800c33a <_svfiprintf_r+0xf6>
 800c30e:	9a07      	ldr	r2, [sp, #28]
 800c310:	4654      	mov	r4, sl
 800c312:	2000      	movs	r0, #0
 800c314:	f04f 0c0a 	mov.w	ip, #10
 800c318:	4621      	mov	r1, r4
 800c31a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c31e:	3b30      	subs	r3, #48	; 0x30
 800c320:	2b09      	cmp	r3, #9
 800c322:	d94d      	bls.n	800c3c0 <_svfiprintf_r+0x17c>
 800c324:	b1b0      	cbz	r0, 800c354 <_svfiprintf_r+0x110>
 800c326:	9207      	str	r2, [sp, #28]
 800c328:	e014      	b.n	800c354 <_svfiprintf_r+0x110>
 800c32a:	eba0 0308 	sub.w	r3, r0, r8
 800c32e:	fa09 f303 	lsl.w	r3, r9, r3
 800c332:	4313      	orrs	r3, r2
 800c334:	9304      	str	r3, [sp, #16]
 800c336:	46a2      	mov	sl, r4
 800c338:	e7d2      	b.n	800c2e0 <_svfiprintf_r+0x9c>
 800c33a:	9b03      	ldr	r3, [sp, #12]
 800c33c:	1d19      	adds	r1, r3, #4
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	9103      	str	r1, [sp, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	bfbb      	ittet	lt
 800c346:	425b      	neglt	r3, r3
 800c348:	f042 0202 	orrlt.w	r2, r2, #2
 800c34c:	9307      	strge	r3, [sp, #28]
 800c34e:	9307      	strlt	r3, [sp, #28]
 800c350:	bfb8      	it	lt
 800c352:	9204      	strlt	r2, [sp, #16]
 800c354:	7823      	ldrb	r3, [r4, #0]
 800c356:	2b2e      	cmp	r3, #46	; 0x2e
 800c358:	d10c      	bne.n	800c374 <_svfiprintf_r+0x130>
 800c35a:	7863      	ldrb	r3, [r4, #1]
 800c35c:	2b2a      	cmp	r3, #42	; 0x2a
 800c35e:	d134      	bne.n	800c3ca <_svfiprintf_r+0x186>
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	1d1a      	adds	r2, r3, #4
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	9203      	str	r2, [sp, #12]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bfb8      	it	lt
 800c36c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c370:	3402      	adds	r4, #2
 800c372:	9305      	str	r3, [sp, #20]
 800c374:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c43c <_svfiprintf_r+0x1f8>
 800c378:	7821      	ldrb	r1, [r4, #0]
 800c37a:	2203      	movs	r2, #3
 800c37c:	4650      	mov	r0, sl
 800c37e:	f7f3 ff2f 	bl	80001e0 <memchr>
 800c382:	b138      	cbz	r0, 800c394 <_svfiprintf_r+0x150>
 800c384:	9b04      	ldr	r3, [sp, #16]
 800c386:	eba0 000a 	sub.w	r0, r0, sl
 800c38a:	2240      	movs	r2, #64	; 0x40
 800c38c:	4082      	lsls	r2, r0
 800c38e:	4313      	orrs	r3, r2
 800c390:	3401      	adds	r4, #1
 800c392:	9304      	str	r3, [sp, #16]
 800c394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c398:	4825      	ldr	r0, [pc, #148]	; (800c430 <_svfiprintf_r+0x1ec>)
 800c39a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c39e:	2206      	movs	r2, #6
 800c3a0:	f7f3 ff1e 	bl	80001e0 <memchr>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d038      	beq.n	800c41a <_svfiprintf_r+0x1d6>
 800c3a8:	4b22      	ldr	r3, [pc, #136]	; (800c434 <_svfiprintf_r+0x1f0>)
 800c3aa:	bb1b      	cbnz	r3, 800c3f4 <_svfiprintf_r+0x1b0>
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	3307      	adds	r3, #7
 800c3b0:	f023 0307 	bic.w	r3, r3, #7
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ba:	4433      	add	r3, r6
 800c3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c3be:	e768      	b.n	800c292 <_svfiprintf_r+0x4e>
 800c3c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	e7a6      	b.n	800c318 <_svfiprintf_r+0xd4>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	3401      	adds	r4, #1
 800c3ce:	9305      	str	r3, [sp, #20]
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	f04f 0c0a 	mov.w	ip, #10
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3dc:	3a30      	subs	r2, #48	; 0x30
 800c3de:	2a09      	cmp	r2, #9
 800c3e0:	d903      	bls.n	800c3ea <_svfiprintf_r+0x1a6>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0c6      	beq.n	800c374 <_svfiprintf_r+0x130>
 800c3e6:	9105      	str	r1, [sp, #20]
 800c3e8:	e7c4      	b.n	800c374 <_svfiprintf_r+0x130>
 800c3ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e7f0      	b.n	800c3d6 <_svfiprintf_r+0x192>
 800c3f4:	ab03      	add	r3, sp, #12
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	462a      	mov	r2, r5
 800c3fa:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <_svfiprintf_r+0x1f4>)
 800c3fc:	a904      	add	r1, sp, #16
 800c3fe:	4638      	mov	r0, r7
 800c400:	f3af 8000 	nop.w
 800c404:	1c42      	adds	r2, r0, #1
 800c406:	4606      	mov	r6, r0
 800c408:	d1d6      	bne.n	800c3b8 <_svfiprintf_r+0x174>
 800c40a:	89ab      	ldrh	r3, [r5, #12]
 800c40c:	065b      	lsls	r3, r3, #25
 800c40e:	f53f af2d 	bmi.w	800c26c <_svfiprintf_r+0x28>
 800c412:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c414:	b01d      	add	sp, #116	; 0x74
 800c416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c41a:	ab03      	add	r3, sp, #12
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	462a      	mov	r2, r5
 800c420:	4b05      	ldr	r3, [pc, #20]	; (800c438 <_svfiprintf_r+0x1f4>)
 800c422:	a904      	add	r1, sp, #16
 800c424:	4638      	mov	r0, r7
 800c426:	f000 f879 	bl	800c51c <_printf_i>
 800c42a:	e7eb      	b.n	800c404 <_svfiprintf_r+0x1c0>
 800c42c:	0800c9b8 	.word	0x0800c9b8
 800c430:	0800c9c2 	.word	0x0800c9c2
 800c434:	00000000 	.word	0x00000000
 800c438:	0800c191 	.word	0x0800c191
 800c43c:	0800c9be 	.word	0x0800c9be

0800c440 <_printf_common>:
 800c440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c444:	4616      	mov	r6, r2
 800c446:	4699      	mov	r9, r3
 800c448:	688a      	ldr	r2, [r1, #8]
 800c44a:	690b      	ldr	r3, [r1, #16]
 800c44c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c450:	4293      	cmp	r3, r2
 800c452:	bfb8      	it	lt
 800c454:	4613      	movlt	r3, r2
 800c456:	6033      	str	r3, [r6, #0]
 800c458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c45c:	4607      	mov	r7, r0
 800c45e:	460c      	mov	r4, r1
 800c460:	b10a      	cbz	r2, 800c466 <_printf_common+0x26>
 800c462:	3301      	adds	r3, #1
 800c464:	6033      	str	r3, [r6, #0]
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	0699      	lsls	r1, r3, #26
 800c46a:	bf42      	ittt	mi
 800c46c:	6833      	ldrmi	r3, [r6, #0]
 800c46e:	3302      	addmi	r3, #2
 800c470:	6033      	strmi	r3, [r6, #0]
 800c472:	6825      	ldr	r5, [r4, #0]
 800c474:	f015 0506 	ands.w	r5, r5, #6
 800c478:	d106      	bne.n	800c488 <_printf_common+0x48>
 800c47a:	f104 0a19 	add.w	sl, r4, #25
 800c47e:	68e3      	ldr	r3, [r4, #12]
 800c480:	6832      	ldr	r2, [r6, #0]
 800c482:	1a9b      	subs	r3, r3, r2
 800c484:	42ab      	cmp	r3, r5
 800c486:	dc26      	bgt.n	800c4d6 <_printf_common+0x96>
 800c488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c48c:	1e13      	subs	r3, r2, #0
 800c48e:	6822      	ldr	r2, [r4, #0]
 800c490:	bf18      	it	ne
 800c492:	2301      	movne	r3, #1
 800c494:	0692      	lsls	r2, r2, #26
 800c496:	d42b      	bmi.n	800c4f0 <_printf_common+0xb0>
 800c498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c49c:	4649      	mov	r1, r9
 800c49e:	4638      	mov	r0, r7
 800c4a0:	47c0      	blx	r8
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	d01e      	beq.n	800c4e4 <_printf_common+0xa4>
 800c4a6:	6823      	ldr	r3, [r4, #0]
 800c4a8:	6922      	ldr	r2, [r4, #16]
 800c4aa:	f003 0306 	and.w	r3, r3, #6
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	bf02      	ittt	eq
 800c4b2:	68e5      	ldreq	r5, [r4, #12]
 800c4b4:	6833      	ldreq	r3, [r6, #0]
 800c4b6:	1aed      	subeq	r5, r5, r3
 800c4b8:	68a3      	ldr	r3, [r4, #8]
 800c4ba:	bf0c      	ite	eq
 800c4bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4c0:	2500      	movne	r5, #0
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	bfc4      	itt	gt
 800c4c6:	1a9b      	subgt	r3, r3, r2
 800c4c8:	18ed      	addgt	r5, r5, r3
 800c4ca:	2600      	movs	r6, #0
 800c4cc:	341a      	adds	r4, #26
 800c4ce:	42b5      	cmp	r5, r6
 800c4d0:	d11a      	bne.n	800c508 <_printf_common+0xc8>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e008      	b.n	800c4e8 <_printf_common+0xa8>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	4652      	mov	r2, sl
 800c4da:	4649      	mov	r1, r9
 800c4dc:	4638      	mov	r0, r7
 800c4de:	47c0      	blx	r8
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	d103      	bne.n	800c4ec <_printf_common+0xac>
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ec:	3501      	adds	r5, #1
 800c4ee:	e7c6      	b.n	800c47e <_printf_common+0x3e>
 800c4f0:	18e1      	adds	r1, r4, r3
 800c4f2:	1c5a      	adds	r2, r3, #1
 800c4f4:	2030      	movs	r0, #48	; 0x30
 800c4f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4fa:	4422      	add	r2, r4
 800c4fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c504:	3302      	adds	r3, #2
 800c506:	e7c7      	b.n	800c498 <_printf_common+0x58>
 800c508:	2301      	movs	r3, #1
 800c50a:	4622      	mov	r2, r4
 800c50c:	4649      	mov	r1, r9
 800c50e:	4638      	mov	r0, r7
 800c510:	47c0      	blx	r8
 800c512:	3001      	adds	r0, #1
 800c514:	d0e6      	beq.n	800c4e4 <_printf_common+0xa4>
 800c516:	3601      	adds	r6, #1
 800c518:	e7d9      	b.n	800c4ce <_printf_common+0x8e>
	...

0800c51c <_printf_i>:
 800c51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c520:	7e0f      	ldrb	r7, [r1, #24]
 800c522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c524:	2f78      	cmp	r7, #120	; 0x78
 800c526:	4691      	mov	r9, r2
 800c528:	4680      	mov	r8, r0
 800c52a:	460c      	mov	r4, r1
 800c52c:	469a      	mov	sl, r3
 800c52e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c532:	d807      	bhi.n	800c544 <_printf_i+0x28>
 800c534:	2f62      	cmp	r7, #98	; 0x62
 800c536:	d80a      	bhi.n	800c54e <_printf_i+0x32>
 800c538:	2f00      	cmp	r7, #0
 800c53a:	f000 80d4 	beq.w	800c6e6 <_printf_i+0x1ca>
 800c53e:	2f58      	cmp	r7, #88	; 0x58
 800c540:	f000 80c0 	beq.w	800c6c4 <_printf_i+0x1a8>
 800c544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c54c:	e03a      	b.n	800c5c4 <_printf_i+0xa8>
 800c54e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c552:	2b15      	cmp	r3, #21
 800c554:	d8f6      	bhi.n	800c544 <_printf_i+0x28>
 800c556:	a101      	add	r1, pc, #4	; (adr r1, 800c55c <_printf_i+0x40>)
 800c558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c55c:	0800c5b5 	.word	0x0800c5b5
 800c560:	0800c5c9 	.word	0x0800c5c9
 800c564:	0800c545 	.word	0x0800c545
 800c568:	0800c545 	.word	0x0800c545
 800c56c:	0800c545 	.word	0x0800c545
 800c570:	0800c545 	.word	0x0800c545
 800c574:	0800c5c9 	.word	0x0800c5c9
 800c578:	0800c545 	.word	0x0800c545
 800c57c:	0800c545 	.word	0x0800c545
 800c580:	0800c545 	.word	0x0800c545
 800c584:	0800c545 	.word	0x0800c545
 800c588:	0800c6cd 	.word	0x0800c6cd
 800c58c:	0800c5f5 	.word	0x0800c5f5
 800c590:	0800c687 	.word	0x0800c687
 800c594:	0800c545 	.word	0x0800c545
 800c598:	0800c545 	.word	0x0800c545
 800c59c:	0800c6ef 	.word	0x0800c6ef
 800c5a0:	0800c545 	.word	0x0800c545
 800c5a4:	0800c5f5 	.word	0x0800c5f5
 800c5a8:	0800c545 	.word	0x0800c545
 800c5ac:	0800c545 	.word	0x0800c545
 800c5b0:	0800c68f 	.word	0x0800c68f
 800c5b4:	682b      	ldr	r3, [r5, #0]
 800c5b6:	1d1a      	adds	r2, r3, #4
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	602a      	str	r2, [r5, #0]
 800c5bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e09f      	b.n	800c708 <_printf_i+0x1ec>
 800c5c8:	6820      	ldr	r0, [r4, #0]
 800c5ca:	682b      	ldr	r3, [r5, #0]
 800c5cc:	0607      	lsls	r7, r0, #24
 800c5ce:	f103 0104 	add.w	r1, r3, #4
 800c5d2:	6029      	str	r1, [r5, #0]
 800c5d4:	d501      	bpl.n	800c5da <_printf_i+0xbe>
 800c5d6:	681e      	ldr	r6, [r3, #0]
 800c5d8:	e003      	b.n	800c5e2 <_printf_i+0xc6>
 800c5da:	0646      	lsls	r6, r0, #25
 800c5dc:	d5fb      	bpl.n	800c5d6 <_printf_i+0xba>
 800c5de:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c5e2:	2e00      	cmp	r6, #0
 800c5e4:	da03      	bge.n	800c5ee <_printf_i+0xd2>
 800c5e6:	232d      	movs	r3, #45	; 0x2d
 800c5e8:	4276      	negs	r6, r6
 800c5ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5ee:	485a      	ldr	r0, [pc, #360]	; (800c758 <_printf_i+0x23c>)
 800c5f0:	230a      	movs	r3, #10
 800c5f2:	e012      	b.n	800c61a <_printf_i+0xfe>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	6820      	ldr	r0, [r4, #0]
 800c5f8:	1d19      	adds	r1, r3, #4
 800c5fa:	6029      	str	r1, [r5, #0]
 800c5fc:	0605      	lsls	r5, r0, #24
 800c5fe:	d501      	bpl.n	800c604 <_printf_i+0xe8>
 800c600:	681e      	ldr	r6, [r3, #0]
 800c602:	e002      	b.n	800c60a <_printf_i+0xee>
 800c604:	0641      	lsls	r1, r0, #25
 800c606:	d5fb      	bpl.n	800c600 <_printf_i+0xe4>
 800c608:	881e      	ldrh	r6, [r3, #0]
 800c60a:	4853      	ldr	r0, [pc, #332]	; (800c758 <_printf_i+0x23c>)
 800c60c:	2f6f      	cmp	r7, #111	; 0x6f
 800c60e:	bf0c      	ite	eq
 800c610:	2308      	moveq	r3, #8
 800c612:	230a      	movne	r3, #10
 800c614:	2100      	movs	r1, #0
 800c616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c61a:	6865      	ldr	r5, [r4, #4]
 800c61c:	60a5      	str	r5, [r4, #8]
 800c61e:	2d00      	cmp	r5, #0
 800c620:	bfa2      	ittt	ge
 800c622:	6821      	ldrge	r1, [r4, #0]
 800c624:	f021 0104 	bicge.w	r1, r1, #4
 800c628:	6021      	strge	r1, [r4, #0]
 800c62a:	b90e      	cbnz	r6, 800c630 <_printf_i+0x114>
 800c62c:	2d00      	cmp	r5, #0
 800c62e:	d04b      	beq.n	800c6c8 <_printf_i+0x1ac>
 800c630:	4615      	mov	r5, r2
 800c632:	fbb6 f1f3 	udiv	r1, r6, r3
 800c636:	fb03 6711 	mls	r7, r3, r1, r6
 800c63a:	5dc7      	ldrb	r7, [r0, r7]
 800c63c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c640:	4637      	mov	r7, r6
 800c642:	42bb      	cmp	r3, r7
 800c644:	460e      	mov	r6, r1
 800c646:	d9f4      	bls.n	800c632 <_printf_i+0x116>
 800c648:	2b08      	cmp	r3, #8
 800c64a:	d10b      	bne.n	800c664 <_printf_i+0x148>
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	07de      	lsls	r6, r3, #31
 800c650:	d508      	bpl.n	800c664 <_printf_i+0x148>
 800c652:	6923      	ldr	r3, [r4, #16]
 800c654:	6861      	ldr	r1, [r4, #4]
 800c656:	4299      	cmp	r1, r3
 800c658:	bfde      	ittt	le
 800c65a:	2330      	movle	r3, #48	; 0x30
 800c65c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c660:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c664:	1b52      	subs	r2, r2, r5
 800c666:	6122      	str	r2, [r4, #16]
 800c668:	f8cd a000 	str.w	sl, [sp]
 800c66c:	464b      	mov	r3, r9
 800c66e:	aa03      	add	r2, sp, #12
 800c670:	4621      	mov	r1, r4
 800c672:	4640      	mov	r0, r8
 800c674:	f7ff fee4 	bl	800c440 <_printf_common>
 800c678:	3001      	adds	r0, #1
 800c67a:	d14a      	bne.n	800c712 <_printf_i+0x1f6>
 800c67c:	f04f 30ff 	mov.w	r0, #4294967295
 800c680:	b004      	add	sp, #16
 800c682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	f043 0320 	orr.w	r3, r3, #32
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	4833      	ldr	r0, [pc, #204]	; (800c75c <_printf_i+0x240>)
 800c690:	2778      	movs	r7, #120	; 0x78
 800c692:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c696:	6823      	ldr	r3, [r4, #0]
 800c698:	6829      	ldr	r1, [r5, #0]
 800c69a:	061f      	lsls	r7, r3, #24
 800c69c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6a0:	d402      	bmi.n	800c6a8 <_printf_i+0x18c>
 800c6a2:	065f      	lsls	r7, r3, #25
 800c6a4:	bf48      	it	mi
 800c6a6:	b2b6      	uxthmi	r6, r6
 800c6a8:	07df      	lsls	r7, r3, #31
 800c6aa:	bf48      	it	mi
 800c6ac:	f043 0320 	orrmi.w	r3, r3, #32
 800c6b0:	6029      	str	r1, [r5, #0]
 800c6b2:	bf48      	it	mi
 800c6b4:	6023      	strmi	r3, [r4, #0]
 800c6b6:	b91e      	cbnz	r6, 800c6c0 <_printf_i+0x1a4>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	f023 0320 	bic.w	r3, r3, #32
 800c6be:	6023      	str	r3, [r4, #0]
 800c6c0:	2310      	movs	r3, #16
 800c6c2:	e7a7      	b.n	800c614 <_printf_i+0xf8>
 800c6c4:	4824      	ldr	r0, [pc, #144]	; (800c758 <_printf_i+0x23c>)
 800c6c6:	e7e4      	b.n	800c692 <_printf_i+0x176>
 800c6c8:	4615      	mov	r5, r2
 800c6ca:	e7bd      	b.n	800c648 <_printf_i+0x12c>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	6826      	ldr	r6, [r4, #0]
 800c6d0:	6961      	ldr	r1, [r4, #20]
 800c6d2:	1d18      	adds	r0, r3, #4
 800c6d4:	6028      	str	r0, [r5, #0]
 800c6d6:	0635      	lsls	r5, r6, #24
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	d501      	bpl.n	800c6e0 <_printf_i+0x1c4>
 800c6dc:	6019      	str	r1, [r3, #0]
 800c6de:	e002      	b.n	800c6e6 <_printf_i+0x1ca>
 800c6e0:	0670      	lsls	r0, r6, #25
 800c6e2:	d5fb      	bpl.n	800c6dc <_printf_i+0x1c0>
 800c6e4:	8019      	strh	r1, [r3, #0]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	6123      	str	r3, [r4, #16]
 800c6ea:	4615      	mov	r5, r2
 800c6ec:	e7bc      	b.n	800c668 <_printf_i+0x14c>
 800c6ee:	682b      	ldr	r3, [r5, #0]
 800c6f0:	1d1a      	adds	r2, r3, #4
 800c6f2:	602a      	str	r2, [r5, #0]
 800c6f4:	681d      	ldr	r5, [r3, #0]
 800c6f6:	6862      	ldr	r2, [r4, #4]
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f7f3 fd70 	bl	80001e0 <memchr>
 800c700:	b108      	cbz	r0, 800c706 <_printf_i+0x1ea>
 800c702:	1b40      	subs	r0, r0, r5
 800c704:	6060      	str	r0, [r4, #4]
 800c706:	6863      	ldr	r3, [r4, #4]
 800c708:	6123      	str	r3, [r4, #16]
 800c70a:	2300      	movs	r3, #0
 800c70c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c710:	e7aa      	b.n	800c668 <_printf_i+0x14c>
 800c712:	6923      	ldr	r3, [r4, #16]
 800c714:	462a      	mov	r2, r5
 800c716:	4649      	mov	r1, r9
 800c718:	4640      	mov	r0, r8
 800c71a:	47d0      	blx	sl
 800c71c:	3001      	adds	r0, #1
 800c71e:	d0ad      	beq.n	800c67c <_printf_i+0x160>
 800c720:	6823      	ldr	r3, [r4, #0]
 800c722:	079b      	lsls	r3, r3, #30
 800c724:	d413      	bmi.n	800c74e <_printf_i+0x232>
 800c726:	68e0      	ldr	r0, [r4, #12]
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	4298      	cmp	r0, r3
 800c72c:	bfb8      	it	lt
 800c72e:	4618      	movlt	r0, r3
 800c730:	e7a6      	b.n	800c680 <_printf_i+0x164>
 800c732:	2301      	movs	r3, #1
 800c734:	4632      	mov	r2, r6
 800c736:	4649      	mov	r1, r9
 800c738:	4640      	mov	r0, r8
 800c73a:	47d0      	blx	sl
 800c73c:	3001      	adds	r0, #1
 800c73e:	d09d      	beq.n	800c67c <_printf_i+0x160>
 800c740:	3501      	adds	r5, #1
 800c742:	68e3      	ldr	r3, [r4, #12]
 800c744:	9903      	ldr	r1, [sp, #12]
 800c746:	1a5b      	subs	r3, r3, r1
 800c748:	42ab      	cmp	r3, r5
 800c74a:	dcf2      	bgt.n	800c732 <_printf_i+0x216>
 800c74c:	e7eb      	b.n	800c726 <_printf_i+0x20a>
 800c74e:	2500      	movs	r5, #0
 800c750:	f104 0619 	add.w	r6, r4, #25
 800c754:	e7f5      	b.n	800c742 <_printf_i+0x226>
 800c756:	bf00      	nop
 800c758:	0800c9c9 	.word	0x0800c9c9
 800c75c:	0800c9da 	.word	0x0800c9da

0800c760 <memmove>:
 800c760:	4288      	cmp	r0, r1
 800c762:	b510      	push	{r4, lr}
 800c764:	eb01 0402 	add.w	r4, r1, r2
 800c768:	d902      	bls.n	800c770 <memmove+0x10>
 800c76a:	4284      	cmp	r4, r0
 800c76c:	4623      	mov	r3, r4
 800c76e:	d807      	bhi.n	800c780 <memmove+0x20>
 800c770:	1e43      	subs	r3, r0, #1
 800c772:	42a1      	cmp	r1, r4
 800c774:	d008      	beq.n	800c788 <memmove+0x28>
 800c776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c77a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c77e:	e7f8      	b.n	800c772 <memmove+0x12>
 800c780:	4402      	add	r2, r0
 800c782:	4601      	mov	r1, r0
 800c784:	428a      	cmp	r2, r1
 800c786:	d100      	bne.n	800c78a <memmove+0x2a>
 800c788:	bd10      	pop	{r4, pc}
 800c78a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c78e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c792:	e7f7      	b.n	800c784 <memmove+0x24>

0800c794 <_sbrk_r>:
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	4d06      	ldr	r5, [pc, #24]	; (800c7b0 <_sbrk_r+0x1c>)
 800c798:	2300      	movs	r3, #0
 800c79a:	4604      	mov	r4, r0
 800c79c:	4608      	mov	r0, r1
 800c79e:	602b      	str	r3, [r5, #0]
 800c7a0:	f7f6 f876 	bl	8002890 <_sbrk>
 800c7a4:	1c43      	adds	r3, r0, #1
 800c7a6:	d102      	bne.n	800c7ae <_sbrk_r+0x1a>
 800c7a8:	682b      	ldr	r3, [r5, #0]
 800c7aa:	b103      	cbz	r3, 800c7ae <_sbrk_r+0x1a>
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	bd38      	pop	{r3, r4, r5, pc}
 800c7b0:	200062b8 	.word	0x200062b8

0800c7b4 <_realloc_r>:
 800c7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b8:	4680      	mov	r8, r0
 800c7ba:	4614      	mov	r4, r2
 800c7bc:	460e      	mov	r6, r1
 800c7be:	b921      	cbnz	r1, 800c7ca <_realloc_r+0x16>
 800c7c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	f7ff bc57 	b.w	800c078 <_malloc_r>
 800c7ca:	b92a      	cbnz	r2, 800c7d8 <_realloc_r+0x24>
 800c7cc:	f7ff fbe8 	bl	800bfa0 <_free_r>
 800c7d0:	4625      	mov	r5, r4
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7d8:	f000 f81b 	bl	800c812 <_malloc_usable_size_r>
 800c7dc:	4284      	cmp	r4, r0
 800c7de:	4607      	mov	r7, r0
 800c7e0:	d802      	bhi.n	800c7e8 <_realloc_r+0x34>
 800c7e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7e6:	d812      	bhi.n	800c80e <_realloc_r+0x5a>
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4640      	mov	r0, r8
 800c7ec:	f7ff fc44 	bl	800c078 <_malloc_r>
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d0ed      	beq.n	800c7d2 <_realloc_r+0x1e>
 800c7f6:	42bc      	cmp	r4, r7
 800c7f8:	4622      	mov	r2, r4
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	bf28      	it	cs
 800c7fe:	463a      	movcs	r2, r7
 800c800:	f7ff fbc0 	bl	800bf84 <memcpy>
 800c804:	4631      	mov	r1, r6
 800c806:	4640      	mov	r0, r8
 800c808:	f7ff fbca 	bl	800bfa0 <_free_r>
 800c80c:	e7e1      	b.n	800c7d2 <_realloc_r+0x1e>
 800c80e:	4635      	mov	r5, r6
 800c810:	e7df      	b.n	800c7d2 <_realloc_r+0x1e>

0800c812 <_malloc_usable_size_r>:
 800c812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c816:	1f18      	subs	r0, r3, #4
 800c818:	2b00      	cmp	r3, #0
 800c81a:	bfbc      	itt	lt
 800c81c:	580b      	ldrlt	r3, [r1, r0]
 800c81e:	18c0      	addlt	r0, r0, r3
 800c820:	4770      	bx	lr
	...

0800c824 <_init>:
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	bf00      	nop
 800c828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82a:	bc08      	pop	{r3}
 800c82c:	469e      	mov	lr, r3
 800c82e:	4770      	bx	lr

0800c830 <_fini>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	bf00      	nop
 800c834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c836:	bc08      	pop	{r3}
 800c838:	469e      	mov	lr, r3
 800c83a:	4770      	bx	lr
