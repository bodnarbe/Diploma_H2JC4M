
v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800cee8  0800cee8  0001cee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d080  0800d080  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800d080  0800d080  0001d080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d088  0800d088  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d088  0800d088  0001d088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d08c  0800d08c  0001d08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d090  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051f0  20000190  0800d220  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005380  0800d220  00025380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b7aa  00000000  00000000  00020203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004848  00000000  00000000  0003b9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  000401f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000134c  00000000  00000000  00041b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bfd9  00000000  00000000  00042e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001da52  00000000  00000000  0005ee6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b945  00000000  00000000  0007c8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074a0  00000000  00000000  00118204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011f6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ced0 	.word	0x0800ced0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800ced0 	.word	0x0800ced0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b970 	b.w	8000e74 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	460d      	mov	r5, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460f      	mov	r7, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14a      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4694      	mov	ip, r2
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0xe2>
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	b143      	cbz	r3, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bcc:	f1c3 0220 	rsb	r2, r3, #32
 8000bd0:	409f      	lsls	r7, r3
 8000bd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bde:	fa1f f58c 	uxth.w	r5, ip
 8000be2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be6:	0c22      	lsrs	r2, r4, #16
 8000be8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf0:	fb01 f005 	mul.w	r0, r1, r5
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x62>
 8000bf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c00:	f080 811c 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c04:	4290      	cmp	r0, r2
 8000c06:	f240 8119 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	b2a4      	uxth	r4, r4
 8000c12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x90>
 8000c26:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2e:	f080 8107 	bcs.w	8000e40 <__udivmoddi4+0x294>
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	f240 8104 	bls.w	8000e40 <__udivmoddi4+0x294>
 8000c38:	4464      	add	r4, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c40:	1b64      	subs	r4, r4, r5
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11e      	cbz	r6, 8000c4e <__udivmoddi4+0xa2>
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0xbc>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80ed 	beq.w	8000e36 <__udivmoddi4+0x28a>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c62:	4608      	mov	r0, r1
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	fab3 f183 	clz	r1, r3
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	d149      	bne.n	8000d04 <__udivmoddi4+0x158>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d302      	bcc.n	8000c7a <__udivmoddi4+0xce>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	f200 80f8 	bhi.w	8000e6a <__udivmoddi4+0x2be>
 8000c7a:	1a84      	subs	r4, r0, r2
 8000c7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	4617      	mov	r7, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d0e2      	beq.n	8000c4e <__udivmoddi4+0xa2>
 8000c88:	e9c6 4700 	strd	r4, r7, [r6]
 8000c8c:	e7df      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xe6>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cac:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb0:	0c22      	lsrs	r2, r4, #16
 8000cb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb6:	fb0e f005 	mul.w	r0, lr, r5
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2b8>
 8000cce:	4645      	mov	r5, r8
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x14e>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x14c>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2c2>
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d02:	e79f      	b.n	8000c44 <__udivmoddi4+0x98>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa05 f401 	lsl.w	r4, r5, r1
 8000d16:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1a:	40fd      	lsrs	r5, r7
 8000d1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d34:	fb08 f50e 	mul.w	r5, r8, lr
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2b4>
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2b4>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	b29d      	uxth	r5, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2ac>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2ac>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x29c>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x298>
 8000d9c:	b156      	cbz	r6, 8000db4 <__udivmoddi4+0x208>
 8000d9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000da2:	eb64 040e 	sbc.w	r4, r4, lr
 8000da6:	fa04 f707 	lsl.w	r7, r4, r7
 8000daa:	40ca      	lsrs	r2, r1
 8000dac:	40cc      	lsrs	r4, r1
 8000dae:	4317      	orrs	r7, r2
 8000db0:	e9c6 7400 	strd	r7, r4, [r6]
 8000db4:	4618      	mov	r0, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	f1c3 0120 	rsb	r1, r3, #32
 8000dc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dcc:	409d      	lsls	r5, r3
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1510 	mls	r5, r7, r0, r1
 8000de0:	0c11      	lsrs	r1, r2, #16
 8000de2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dea:	428d      	cmp	r5, r1
 8000dec:	fa04 f403 	lsl.w	r4, r4, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x258>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000dfc:	428d      	cmp	r5, r1
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1b49      	subs	r1, r1, r5
 8000e06:	b292      	uxth	r2, r2
 8000e08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	fb05 f10e 	mul.w	r1, r5, lr
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x282>
 8000e1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000e26:	4291      	cmp	r1, r2
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000e2a:	3d02      	subs	r5, #2
 8000e2c:	4462      	add	r2, ip
 8000e2e:	1a52      	subs	r2, r2, r1
 8000e30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0xfc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e6e6      	b.n	8000c0e <__udivmoddi4+0x62>
 8000e40:	4610      	mov	r0, r2
 8000e42:	e6fb      	b.n	8000c3c <__udivmoddi4+0x90>
 8000e44:	4548      	cmp	r0, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3b01      	subs	r3, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e54:	4645      	mov	r5, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x282>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x258>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e70a      	b.n	8000c84 <__udivmoddi4+0xd8>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x14e>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <_getFirstByte>:

/**
 * Gets the first byte of a 2 byte word
 */
uint8_t _getFirstByte(uint16_t twoByteWord)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)(twoByteWord >> 8U);
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_getSecondByte>:

/**
 * Gets the second byte of the 2 byte word
 */
uint8_t _getSecondByte(uint16_t twoByteWord)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)twoByteWord;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2db      	uxtb	r3, r3
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_crc8>:

/**
 * Function for calculation the CRC.
 */
uint8_t _crc8(uint8_t *data, uint8_t length)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
    uint32_t crc;
    int16_t i, bit;

    crc = CRC_SEED;
 8000ebc:	23ff      	movs	r3, #255	; 0xff
 8000ebe:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < length; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	817b      	strh	r3, [r7, #10]
 8000ec4:	e02b      	b.n	8000f1e <_crc8+0x6e>
    {
        crc ^= data[i];
 8000ec6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4053      	eors	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]

        for (bit = 0; bit < 8; bit++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	813b      	strh	r3, [r7, #8]
 8000edc:	e015      	b.n	8000f0a <_crc8+0x5a>
        {
            if ((crc & 0x80) != 0)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d007      	beq.n	8000ef8 <_crc8+0x48>
            {
                crc <<= 1;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
                crc ^= CRC_POLYNOMIAL;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f083 031d 	eor.w	r3, r3, #29
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	e002      	b.n	8000efe <_crc8+0x4e>
            }
            else
            {
                crc <<= 1;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
        for (bit = 0; bit < 8; bit++)
 8000efe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3301      	adds	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	813b      	strh	r3, [r7, #8]
 8000f0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	dde5      	ble.n	8000ede <_crc8+0x2e>
    for (i = 0; i < length; i++)
 8000f12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	817b      	strh	r3, [r7, #10]
 8000f1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbce      	blt.n	8000ec6 <_crc8+0x16>
            }
        }
    }

    //    return (~crc) & CRC_SEED;
    return (~crc);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_crcCalc>:

/**
 * Function for calculation of the CRC
 */
uint8_t _crcCalc(uint8_t *crcData, uint8_t length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
    return _crc8(crcData, length);
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffaf 	bl	8000eb0 <_crc8>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <triggerUpdate>:

/**
 * Triggers an update
 */
void triggerUpdate(uint8_t csSelector)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    // SCK LOW
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <triggerUpdate+0x40>)
 8000f6e:	f001 fee5 	bl	8002d3c <HAL_GPIO_WritePin>
    // MOSI HIGH
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2108      	movs	r1, #8
 8000f76:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <triggerUpdate+0x44>)
 8000f78:	f001 fee0 	bl	8002d3c <HAL_GPIO_WritePin>
    SPI_CS_Enable(csSelector);
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f9e8 	bl	8001354 <SPI_CS_Enable>
    HAL_Delay(DELAYuS);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f001 fc4f 	bl	8002828 <HAL_Delay>
    SPI_CS_Disable(csSelector);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fa35 	bl	80013fc <SPI_CS_Disable>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <resetSafety>:

//when an error occurs in the safety word, the error bit remains 0(error), until the status register is read again.
//flushes out safety errors, that might have occured by reading the register without a safety word.
void resetSafety(uint8_t csSelector)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    uint16_t u16RegValue = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	81fb      	strh	r3, [r7, #14]

    triggerUpdate(csSelector);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ffd1 	bl	8000f5c <triggerUpdate>

    SPI_CS_Enable(csSelector);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f9c9 	bl	8001354 <SPI_CS_Enable>

    u16RegValue = READ_STA_CMD;
 8000fc2:	f248 0301 	movw	r3, #32769	; 0x8001
 8000fc6:	81fb      	strh	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fc8:	f107 010e 	add.w	r1, r7, #14
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	2201      	movs	r2, #1
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <resetSafety+0x64>)
 8000fd2:	f003 fea2 	bl	8004d1a <HAL_SPI_Transmit>
    u16RegValue = DUMMY;
 8000fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fda:	81fb      	strh	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fdc:	f107 010e 	add.w	r1, r7, #14
 8000fe0:	23ff      	movs	r3, #255	; 0xff
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <resetSafety+0x64>)
 8000fe6:	f003 fe98 	bl	8004d1a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fea:	f107 010e 	add.w	r1, r7, #14
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <resetSafety+0x64>)
 8000ff4:	f003 fe91 	bl	8004d1a <HAL_SPI_Transmit>

    SPI_CS_Disable(csSelector);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f9fe 	bl	80013fc <SPI_CS_Disable>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000410 	.word	0x20000410

0800100c <checkSafety>:
 * A CRC needs to be calculated using all the data sent and received (i.e. the command and the value return from the register, which is 4 bytes),
 * and needs to be checked with the CRC sent in the safety word.
 */

errorTypes checkSafety(uint16_t safety, uint16_t command, uint16_t *readreg, uint16_t length, uint8_t csSelector)
{
 800100c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001010:	b08b      	sub	sp, #44	; 0x2c
 8001012:	af00      	add	r7, sp, #0
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	461a      	mov	r2, r3
 8001018:	4603      	mov	r3, r0
 800101a:	81fb      	strh	r3, [r7, #14]
 800101c:	460b      	mov	r3, r1
 800101e:	81bb      	strh	r3, [r7, #12]
 8001020:	4613      	mov	r3, r2
 8001022:	80fb      	strh	r3, [r7, #6]
    if (0)//!((safety)&SYSTEM_ERROR_MASK))
    {
        errorCheck = SYSTEM_ERROR;
    }

    else if (!((safety)&INTERFACE_ERROR_MASK))
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <checkSafety+0x2a>
    {
        errorCheck = INTERFACE_ACCESS_ERROR;
 800102e:	2302      	movs	r3, #2
 8001030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001034:	e08e      	b.n	8001154 <checkSafety+0x148>
    }

    else if (!((safety)&INV_ANGLE_ERROR_MASK))
 8001036:	89fb      	ldrh	r3, [r7, #14]
 8001038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d103      	bne.n	8001048 <checkSafety+0x3c>
    {
        errorCheck = INVALID_ANGLE_ERROR;
 8001040:	2303      	movs	r3, #3
 8001042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001046:	e085      	b.n	8001154 <checkSafety+0x148>
    }

    else
    {
 8001048:	466b      	mov	r3, sp
 800104a:	461e      	mov	r6, r3
        uint16_t lengthOfTemp = length * 2 + 2;
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	3301      	adds	r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	847b      	strh	r3, [r7, #34]	; 0x22
        uint8_t temp[lengthOfTemp];
 8001056:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001058:	460b      	mov	r3, r1
 800105a:	3b01      	subs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	b28b      	uxth	r3, r1
 8001060:	2200      	movs	r2, #0
 8001062:	4698      	mov	r8, r3
 8001064:	4691      	mov	r9, r2
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800107a:	b28b      	uxth	r3, r1
 800107c:	2200      	movs	r2, #0
 800107e:	461c      	mov	r4, r3
 8001080:	4615      	mov	r5, r2
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	00eb      	lsls	r3, r5, #3
 800108c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001090:	00e2      	lsls	r2, r4, #3
 8001092:	460b      	mov	r3, r1
 8001094:	3307      	adds	r3, #7
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	ebad 0d03 	sub.w	sp, sp, r3
 800109e:	466b      	mov	r3, sp
 80010a0:	3300      	adds	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]

        temp[0] = _getFirstByte(command);
 80010a4:	89bb      	ldrh	r3, [r7, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fee6 	bl	8000e78 <_getFirstByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	701a      	strb	r2, [r3, #0]
        temp[1] = _getSecondByte(command);
 80010b4:	89bb      	ldrh	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff feed 	bl	8000e96 <_getSecondByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	705a      	strb	r2, [r3, #1]

        for (uint16_t i = 0; i < length; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010c8:	e021      	b.n	800110e <checkSafety+0x102>
        {
            temp[2 + 2 * i] = _getFirstByte(readreg[i]);
 80010ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d6:	3301      	adds	r3, #1
 80010d8:	005c      	lsls	r4, r3, #1
 80010da:	4610      	mov	r0, r2
 80010dc:	f7ff fecc 	bl	8000e78 <_getFirstByte>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	551a      	strb	r2, [r3, r4]
            temp[2 + 2 * i + 1] = _getSecondByte(readreg[i]);
 80010e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	4413      	add	r3, r2
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f4:	3301      	adds	r3, #1
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1c5c      	adds	r4, r3, #1
 80010fa:	4610      	mov	r0, r2
 80010fc:	f7ff fecb 	bl	8000e96 <_getSecondByte>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	551a      	strb	r2, [r3, r4]
        for (uint16_t i = 0; i < length; i++)
 8001108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800110a:	3301      	adds	r3, #1
 800110c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800110e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3d9      	bcc.n	80010ca <checkSafety+0xbe>
        }

        uint8_t crcReceivedFinal = _getSecondByte(safety);
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff febc 	bl	8000e96 <_getSecondByte>
 800111e:	4603      	mov	r3, r0
 8001120:	75fb      	strb	r3, [r7, #23]

        uint8_t crc = _crcCalc(temp, lengthOfTemp);
 8001122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4619      	mov	r1, r3
 8001128:	69b8      	ldr	r0, [r7, #24]
 800112a:	f7ff ff07 	bl	8000f3c <_crcCalc>
 800112e:	4603      	mov	r3, r0
 8001130:	75bb      	strb	r3, [r7, #22]

        if (crc == crcReceivedFinal)
 8001132:	7dba      	ldrb	r2, [r7, #22]
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	429a      	cmp	r2, r3
 8001138:	d103      	bne.n	8001142 <checkSafety+0x136>
        {
            errorCheck = NO_ERROR;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001140:	e007      	b.n	8001152 <checkSafety+0x146>
        }
        else
        {
            errorCheck = CRC_ERROR;
 8001142:	23ff      	movs	r3, #255	; 0xff
 8001144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            resetSafety(csSelector);
 8001148:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff29 	bl	8000fa4 <resetSafety>
 8001152:	46b5      	mov	sp, r6
        }
    }

    return errorCheck;
 8001154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001158:	4618      	mov	r0, r3
 800115a:	372c      	adds	r7, #44	; 0x2c
 800115c:	46bd      	mov	sp, r7
 800115e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001164 <readFromSensor>:
 * 9:4 - access to 6 bit register address
 * 3:0 - 4 bit number of data words.
 */

errorTypes readFromSensor(uint16_t command, uint16_t *data, uint8_t csSelector)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af02      	add	r7, sp, #8
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	4613      	mov	r3, r2
 8001172:	717b      	strb	r3, [r7, #5]
    uint16_t safety = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	82bb      	strh	r3, [r7, #20]
    uint16_t readreg;
    uint16_t u16RegValue = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	823b      	strh	r3, [r7, #16]

    SPI_CS_Enable(csSelector);
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f8e8 	bl	8001354 <SPI_CS_Enable>

    u16RegValue = command;
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	823b      	strh	r3, [r7, #16]
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8001188:	f107 0110 	add.w	r1, r7, #16
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	2201      	movs	r2, #1
 8001190:	481d      	ldr	r0, [pc, #116]	; (8001208 <readFromSensor+0xa4>)
 8001192:	f003 fdc2 	bl	8004d1a <HAL_SPI_Transmit>
#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_HIGH_Z;
#endif

    // workaround for reading issues...
    __HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <readFromSensor+0xa4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <readFromSensor+0xa4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    HAL_SPI_Receive(&hspi2, (uint8_t *)(&readreg), 1, 0xFF);
 80011ac:	f107 0112 	add.w	r1, r7, #18
 80011b0:	23ff      	movs	r3, #255	; 0xff
 80011b2:	2201      	movs	r2, #1
 80011b4:	4814      	ldr	r0, [pc, #80]	; (8001208 <readFromSensor+0xa4>)
 80011b6:	f003 feec 	bl	8004f92 <HAL_SPI_Receive>
    HAL_SPI_Receive(&hspi2, (uint8_t *)(&safety), 1, 0xFF);
 80011ba:	f107 0114 	add.w	r1, r7, #20
 80011be:	23ff      	movs	r3, #255	; 0xff
 80011c0:	2201      	movs	r2, #1
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <readFromSensor+0xa4>)
 80011c4:	f003 fee5 	bl	8004f92 <HAL_SPI_Receive>

#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_LOW_Z;
#endif
    SPI_CS_Disable(csSelector);
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f916 	bl	80013fc <SPI_CS_Disable>

    errorTypes checkError = checkSafety(safety, command, &readreg, 1, csSelector);
 80011d0:	8ab8      	ldrh	r0, [r7, #20]
 80011d2:	f107 0212 	add.w	r2, r7, #18
 80011d6:	88f9      	ldrh	r1, [r7, #6]
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	f7ff ff15 	bl	800100c <checkSafety>
 80011e2:	4603      	mov	r3, r0
 80011e4:	75fb      	strb	r3, [r7, #23]

    if (checkError != NO_ERROR)
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <readFromSensor+0x92>
    {
        *data = 0;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	801a      	strh	r2, [r3, #0]
        return checkError;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	e003      	b.n	80011fe <readFromSensor+0x9a>
    }
    else
    {
        *data = readreg;
 80011f6:	8a7a      	ldrh	r2, [r7, #18]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	801a      	strh	r2, [r3, #0]
        return NO_ERROR;
 80011fc:	2300      	movs	r3, #0
    }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000410 	.word	0x20000410

0800120c <readBlockCRC>:

/**
 * Reads the block of _registers from addresses 08 - 0F in order to figure out the CRC.
 */
errorTypes readBlockCRC(uint8_t csSelector)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
    uint16_t u16RegValue = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	82bb      	strh	r3, [r7, #20]
    uint16_t safety = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	827b      	strh	r3, [r7, #18]

    SPI_CS_Enable(csSelector);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f897 	bl	8001354 <SPI_CS_Enable>

    u16RegValue = READ_BLOCK_CRC;
 8001226:	f248 0388 	movw	r3, #32904	; 0x8088
 800122a:	82bb      	strh	r3, [r7, #20]
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFFFF);
 800122c:	f107 0114 	add.w	r1, r7, #20
 8001230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001234:	2201      	movs	r2, #1
 8001236:	4817      	ldr	r0, [pc, #92]	; (8001294 <readBlockCRC+0x88>)
 8001238:	f003 fd6f 	bl	8004d1a <HAL_SPI_Transmit>
#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_HIGH_Z;
#endif

    // workaround for reading issues...
    __HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <readBlockCRC+0x88>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <readBlockCRC+0x88>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

    HAL_SPI_Receive(&hspi2, (uint8_t *)(&_registers), CRC_NUM_REGISTERS, 0xFF);
 8001252:	23ff      	movs	r3, #255	; 0xff
 8001254:	2208      	movs	r2, #8
 8001256:	4910      	ldr	r1, [pc, #64]	; (8001298 <readBlockCRC+0x8c>)
 8001258:	480e      	ldr	r0, [pc, #56]	; (8001294 <readBlockCRC+0x88>)
 800125a:	f003 fe9a 	bl	8004f92 <HAL_SPI_Receive>
    HAL_SPI_Receive(&hspi2, (uint8_t *)(&safety), 1, 0xFF);
 800125e:	f107 0112 	add.w	r1, r7, #18
 8001262:	23ff      	movs	r3, #255	; 0xff
 8001264:	2201      	movs	r2, #1
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <readBlockCRC+0x88>)
 8001268:	f003 fe93 	bl	8004f92 <HAL_SPI_Receive>

#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_LOW_Z;
#endif

    SPI_CS_Disable(csSelector);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f8c4 	bl	80013fc <SPI_CS_Disable>

    errorTypes checkError = checkSafety(safety, READ_BLOCK_CRC, _registers, CRC_NUM_REGISTERS, csSelector);
 8001274:	8a78      	ldrh	r0, [r7, #18]
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2308      	movs	r3, #8
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <readBlockCRC+0x8c>)
 800127e:	f248 0188 	movw	r1, #32904	; 0x8088
 8001282:	f7ff fec3 	bl	800100c <checkSafety>
 8001286:	4603      	mov	r3, r0
 8001288:	75fb      	strb	r3, [r7, #23]


    return checkError;
 800128a:	7dfb      	ldrb	r3, [r7, #23]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000410 	.word	0x20000410
 8001298:	200001ac 	.word	0x200001ac

0800129c <readAngleValue>:

errorTypes readAngleValue(int16_t *data, uint8_t csSelector)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
    uint16_t rawData = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
    errorTypes status = readFromSensor(READ_ANGLE_VAL_CMD, &rawData, csSelector);
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	f248 0021 	movw	r0, #32801	; 0x8021
 80012b8:	f7ff ff54 	bl	8001164 <readFromSensor>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]

    if (status != NO_ERROR)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <readAngleValue+0x2e>
    {
        return status;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	e013      	b.n	80012f2 <readAngleValue+0x56>
    }

    rawData = (rawData & (DELETE_BIT_15));
 80012ca:	89bb      	ldrh	r3, [r7, #12]
 80012cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	81bb      	strh	r3, [r7, #12]

    //check if the value received is positive or negative
    if (rawData & CHECK_BIT_14)
 80012d4:	89bb      	ldrh	r3, [r7, #12]
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <readAngleValue+0x4c>
    {
        rawData = rawData - CHANGE_UINT_TO_INT_15;
 80012de:	89bb      	ldrh	r3, [r7, #12]
 80012e0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	81bb      	strh	r3, [r7, #12]
    }

    *data = rawData;
 80012e8:	89bb      	ldrh	r3, [r7, #12]
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	801a      	strh	r2, [r3, #0]

    return NO_ERROR;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <getAngleValue>:
    *finalAngleSpeed = _calculateAngleSpeed(angleRange, rawAngleSpeed, firMDVal, intMode2Prediction);

    return NO_ERROR;
}
errorTypes getAngleValue(double *angleValue, uint8_t csSelector)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
    int16_t rawAnglevalue = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	81bb      	strh	r3, [r7, #12]
    errorTypes checkError = readAngleValue(&rawAnglevalue, csSelector);
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ffc1 	bl	800129c <readAngleValue>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]

    if (checkError != NO_ERROR)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <getAngleValue+0x2c>
    {
        return checkError;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	e00f      	b.n	8001348 <getAngleValue+0x4c>
    }

    *angleValue = (ANGLE_360_VAL / POW_2_15) * ((double)rawAnglevalue);
 8001328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8f9 	bl	8000524 <__aeabi_i2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <getAngleValue+0x54>)
 8001338:	f7ff f95e 	bl	80005f8 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	e9c1 2300 	strd	r2, r3, [r1]

    return NO_ERROR;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	3f868000 	.word	0x3f868000

08001354 <SPI_CS_Enable>:

    return NO_ERROR;
}

void SPI_CS_Enable(uint8_t csSelector)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	if (csSelector == 0){
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <SPI_CS_Enable+0x14>
		__asm("NOP");
 8001364:	bf00      	nop
		}
	else {
		__asm("NOP");
	}

}
 8001366:	e042      	b.n	80013ee <SPI_CS_Enable+0x9a>
	else if (csSelector == 1) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d105      	bne.n	800137a <SPI_CS_Enable+0x26>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2110      	movs	r1, #16
 8001372:	4821      	ldr	r0, [pc, #132]	; (80013f8 <SPI_CS_Enable+0xa4>)
 8001374:	f001 fce2 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001378:	e039      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 2) {
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d105      	bne.n	800138c <SPI_CS_Enable+0x38>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2120      	movs	r1, #32
 8001384:	481c      	ldr	r0, [pc, #112]	; (80013f8 <SPI_CS_Enable+0xa4>)
 8001386:	f001 fcd9 	bl	8002d3c <HAL_GPIO_WritePin>
}
 800138a:	e030      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 3) {
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d105      	bne.n	800139e <SPI_CS_Enable+0x4a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2140      	movs	r1, #64	; 0x40
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <SPI_CS_Enable+0xa4>)
 8001398:	f001 fcd0 	bl	8002d3c <HAL_GPIO_WritePin>
}
 800139c:	e027      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 4) {
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d105      	bne.n	80013b0 <SPI_CS_Enable+0x5c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <SPI_CS_Enable+0xa4>)
 80013aa:	f001 fcc7 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80013ae:	e01e      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 5) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d106      	bne.n	80013c4 <SPI_CS_Enable+0x70>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013bc:	480e      	ldr	r0, [pc, #56]	; (80013f8 <SPI_CS_Enable+0xa4>)
 80013be:	f001 fcbd 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80013c2:	e014      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 6) {
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d106      	bne.n	80013d8 <SPI_CS_Enable+0x84>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <SPI_CS_Enable+0xa4>)
 80013d2:	f001 fcb3 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80013d6:	e00a      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 7) {
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d106      	bne.n	80013ec <SPI_CS_Enable+0x98>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <SPI_CS_Enable+0xa4>)
 80013e6:	f001 fca9 	bl	8002d3c <HAL_GPIO_WritePin>
}
 80013ea:	e000      	b.n	80013ee <SPI_CS_Enable+0x9a>
		__asm("NOP");
 80013ec:	bf00      	nop
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020400 	.word	0x40020400

080013fc <SPI_CS_Disable>:

void SPI_CS_Disable(uint8_t csSelector)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	if (csSelector == 0){
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <SPI_CS_Disable+0x14>
		__asm("NOP");
 800140c:	bf00      	nop
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
	}
	else {
		__asm("NOP");
	}
}
 800140e:	e042      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 1) {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d105      	bne.n	8001422 <SPI_CS_Disable+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2110      	movs	r1, #16
 800141a:	4821      	ldr	r0, [pc, #132]	; (80014a0 <SPI_CS_Disable+0xa4>)
 800141c:	f001 fc8e 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001420:	e039      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 2) {
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d105      	bne.n	8001434 <SPI_CS_Disable+0x38>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	481c      	ldr	r0, [pc, #112]	; (80014a0 <SPI_CS_Disable+0xa4>)
 800142e:	f001 fc85 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001432:	e030      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 3) {
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d105      	bne.n	8001446 <SPI_CS_Disable+0x4a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2140      	movs	r1, #64	; 0x40
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <SPI_CS_Disable+0xa4>)
 8001440:	f001 fc7c 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001444:	e027      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 4) {
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d105      	bne.n	8001458 <SPI_CS_Disable+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <SPI_CS_Disable+0xa4>)
 8001452:	f001 fc73 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001456:	e01e      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 5) {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b05      	cmp	r3, #5
 800145c:	d106      	bne.n	800146c <SPI_CS_Disable+0x70>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	480e      	ldr	r0, [pc, #56]	; (80014a0 <SPI_CS_Disable+0xa4>)
 8001466:	f001 fc69 	bl	8002d3c <HAL_GPIO_WritePin>
}
 800146a:	e014      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 6) {
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b06      	cmp	r3, #6
 8001470:	d106      	bne.n	8001480 <SPI_CS_Disable+0x84>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <SPI_CS_Disable+0xa4>)
 800147a:	f001 fc5f 	bl	8002d3c <HAL_GPIO_WritePin>
}
 800147e:	e00a      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 7) {
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b07      	cmp	r3, #7
 8001484:	d106      	bne.n	8001494 <SPI_CS_Disable+0x98>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <SPI_CS_Disable+0xa4>)
 800148e:	f001 fc55 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001492:	e000      	b.n	8001496 <SPI_CS_Disable+0x9a>
		__asm("NOP");
 8001494:	bf00      	nop
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020400 	.word	0x40020400

080014a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80014b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <vApplicationGetIdleTaskMemory+0x30>)
 80014ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200001bc 	.word	0x200001bc
 80014d4:	20000210 	.word	0x20000210

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	b096      	sub	sp, #88	; 0x58
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014de:	f001 f961 	bl	80027a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e2:	f000 f857 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e6:	f000 f97b 	bl	80017e0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80014ea:	f000 f8bd 	bl	8001668 <MX_SPI2_Init>
  MX_TIM1_Init();
 80014ee:	f000 f8f3 	bl	80016d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014f2:	2100      	movs	r1, #0
 80014f4:	481f      	ldr	r0, [pc, #124]	; (8001574 <main+0x9c>)
 80014f6:	f004 fa3b 	bl	8005970 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0*3600/100;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <main+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <main+0xa4>)
 8001502:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001506:	461d      	mov	r5, r3
 8001508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f008 fc21 	bl	8009d62 <osThreadCreate>
 8001520:	4603      	mov	r3, r0
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <main+0xa8>)
 8001524:	6013      	str	r3, [r2, #0]

  /* definition and creation of commTask */
  osThreadDef(commTask, StartCommTask, osPriorityNormal, 0, 256);
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <main+0xac>)
 8001528:	f107 0420 	add.w	r4, r7, #32
 800152c:	461d      	mov	r5, r3
 800152e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  commTaskHandle = osThreadCreate(osThread(commTask), NULL);
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f008 fc0e 	bl	8009d62 <osThreadCreate>
 8001546:	4603      	mov	r3, r0
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <main+0xb0>)
 800154a:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorTask */
  osThreadDef(sensorTask, StartSensorTask, osPriorityNormal, 0, 128);
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <main+0xb4>)
 800154e:	1d3c      	adds	r4, r7, #4
 8001550:	461d      	mov	r5, r3
 8001552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800155a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f008 fbfd 	bl	8009d62 <osThreadCreate>
 8001568:	4603      	mov	r3, r0
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <main+0xb8>)
 800156c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800156e:	f008 fbf1 	bl	8009d54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001572:	e7fe      	b.n	8001572 <main+0x9a>
 8001574:	20000468 	.word	0x20000468
 8001578:	40010000 	.word	0x40010000
 800157c:	0800cef4 	.word	0x0800cef4
 8001580:	200004b0 	.word	0x200004b0
 8001584:	0800cf1c 	.word	0x0800cf1c
 8001588:	200004b4 	.word	0x200004b4
 800158c:	0800cf44 	.word	0x0800cf44
 8001590:	200004b8 	.word	0x200004b8

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b094      	sub	sp, #80	; 0x50
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2230      	movs	r2, #48	; 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00a fc75 	bl	800be92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <SystemClock_Config+0xcc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a27      	ldr	r2, [pc, #156]	; (8001660 <SystemClock_Config+0xcc>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <SystemClock_Config+0xcc>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <SystemClock_Config+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <SystemClock_Config+0xd0>)
 80015e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fe:	2302      	movs	r3, #2
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001608:	2304      	movs	r3, #4
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800160c:	23c0      	movs	r3, #192	; 0xc0
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001610:	2306      	movs	r3, #6
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001614:	2308      	movs	r3, #8
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4618      	mov	r0, r3
 800161e:	f002 fe3d 	bl	800429c <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001628:	f000 fe40 	bl	80022ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2102      	movs	r1, #2
 8001648:	4618      	mov	r0, r3
 800164a:	f003 f89f 	bl	800478c <HAL_RCC_ClockConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001654:	f000 fe2a 	bl	80022ac <Error_Handler>
  }
}
 8001658:	bf00      	nop
 800165a:	3750      	adds	r7, #80	; 0x50
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_SPI2_Init+0x68>)
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <MX_SPI2_Init+0x6c>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_SPI2_Init+0x68>)
 800167c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001680:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001688:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_SPI2_Init+0x68>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001692:	2201      	movs	r2, #1
 8001694:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016b8:	220a      	movs	r2, #10
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016be:	f003 faa3 	bl	8004c08 <HAL_SPI_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80016c8:	f000 fdf0 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000410 	.word	0x20000410
 80016d4:	40003800 	.word	0x40003800

080016d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b092      	sub	sp, #72	; 0x48
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2220      	movs	r2, #32
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f00a fbc5 	bl	800be92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <MX_TIM1_Init+0x100>)
 800170a:	4a34      	ldr	r2, [pc, #208]	; (80017dc <MX_TIM1_Init+0x104>)
 800170c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <MX_TIM1_Init+0x100>)
 800171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001720:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <MX_TIM1_Init+0x100>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001734:	4828      	ldr	r0, [pc, #160]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001736:	f004 f8cb 	bl	80058d0 <HAL_TIM_PWM_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001740:	f000 fdb4 	bl	80022ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800174c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001750:	4619      	mov	r1, r3
 8001752:	4821      	ldr	r0, [pc, #132]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001754:	f004 fde0 	bl	8006318 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800175e:	f000 fda5 	bl	80022ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001762:	2360      	movs	r3, #96	; 0x60
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	2200      	movs	r2, #0
 8001784:	4619      	mov	r1, r3
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001788:	f004 faaa 	bl	8005ce0 <HAL_TIM_PWM_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001792:	f000 fd8b 	bl	80022ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_TIM1_Init+0x100>)
 80017ba:	f004 fe1b 	bl	80063f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80017c4:	f000 fd72 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_TIM1_Init+0x100>)
 80017ca:	f000 fe2b 	bl	8002424 <HAL_TIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3748      	adds	r7, #72	; 0x48
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000468 	.word	0x20000468
 80017dc:	40010000 	.word	0x40010000

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b40      	ldr	r3, [pc, #256]	; (80018fc <MX_GPIO_Init+0x11c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a3f      	ldr	r2, [pc, #252]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a38      	ldr	r2, [pc, #224]	; (80018fc <MX_GPIO_Init+0x11c>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a31      	ldr	r2, [pc, #196]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <MX_GPIO_Init+0x11c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2120      	movs	r1, #32
 800186a:	4825      	ldr	r0, [pc, #148]	; (8001900 <MX_GPIO_Init+0x120>)
 800186c:	f001 fa66 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS7_Pin|CS1_Pin|CS2_Pin|CS3_Pin
 8001870:	2200      	movs	r2, #0
 8001872:	f241 31f0 	movw	r1, #5104	; 0x13f0
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_GPIO_Init+0x124>)
 8001878:	f001 fa60 	bl	8002d3c <HAL_GPIO_WritePin>
                          |CS4_Pin|CS5_Pin|CS6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001882:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	481d      	ldr	r0, [pc, #116]	; (8001908 <MX_GPIO_Init+0x128>)
 8001894:	f001 f8ce 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001898:	230c      	movs	r3, #12
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a8:	2307      	movs	r3, #7
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <MX_GPIO_Init+0x120>)
 80018b4:	f001 f8be 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018b8:	2320      	movs	r3, #32
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <MX_GPIO_Init+0x120>)
 80018d0:	f001 f8b0 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS7_Pin CS1_Pin CS2_Pin CS3_Pin
                           CS4_Pin CS5_Pin CS6_Pin */
  GPIO_InitStruct.Pin = CS7_Pin|CS1_Pin|CS2_Pin|CS3_Pin
 80018d4:	f241 33f0 	movw	r3, #5104	; 0x13f0
 80018d8:	617b      	str	r3, [r7, #20]
                          |CS4_Pin|CS5_Pin|CS6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_GPIO_Init+0x124>)
 80018ee:	f001 f8a1 	bl	8002a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800

0800190c <SizeofCharArray>:

/* USER CODE BEGIN 4 */
uint16_t SizeofCharArray(char *ptr)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Local variables */
  uint16_t len = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	81fb      	strh	r3, [r7, #14]

  /* Search until end char */
  while (ptr[len] != '\0') {
 8001918:	e002      	b.n	8001920 <SizeofCharArray+0x14>
    len++;
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	3301      	adds	r3, #1
 800191e:	81fb      	strh	r3, [r7, #14]
  while (ptr[len] != '\0') {
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f6      	bne.n	800191a <SizeofCharArray+0xe>
  }
  return len;
 800192c:	89fb      	ldrh	r3, [r7, #14]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001944:	f009 fc3a 	bl	800b1bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8001948:	20c8      	movs	r0, #200	; 0xc8
 800194a:	f008 fa56 	bl	8009dfa <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800194e:	2120      	movs	r1, #32
 8001950:	4801      	ldr	r0, [pc, #4]	; (8001958 <StartDefaultTask+0x1c>)
 8001952:	f001 fa0c 	bl	8002d6e <HAL_GPIO_TogglePin>
    osDelay(200);
 8001956:	e7f7      	b.n	8001948 <StartDefaultTask+0xc>
 8001958:	40020000 	.word	0x40020000

0800195c <StartCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommTask */
void StartCommTask(void const * argument)
{
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	b08f      	sub	sp, #60	; 0x3c
 8001960:	af08      	add	r7, sp, #32
 8001962:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartCommTask */
	uint16_t Len = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	82fb      	strh	r3, [r7, #22]
  /* Infinite loop */
  for(;;)
  {
	  if (receiveState == 1){
 8001968:	4b94      	ldr	r3, [pc, #592]	; (8001bbc <StartCommTask+0x260>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	f040 810f 	bne.w	8001b90 <StartCommTask+0x234>
		  if ((rxBuf[0] == 'K') && (rxBuf[1] == 'A') && (rxBuf[2] == '\r')){ // KA = Keep alive (response echo)
 8001972:	4b93      	ldr	r3, [pc, #588]	; (8001bc0 <StartCommTask+0x264>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b4b      	cmp	r3, #75	; 0x4b
 8001978:	d109      	bne.n	800198e <StartCommTask+0x32>
 800197a:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <StartCommTask+0x264>)
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	2b41      	cmp	r3, #65	; 0x41
 8001980:	d105      	bne.n	800198e <StartCommTask+0x32>
 8001982:	4b8f      	ldr	r3, [pc, #572]	; (8001bc0 <StartCommTask+0x264>)
 8001984:	789b      	ldrb	r3, [r3, #2]
 8001986:	2b0d      	cmp	r3, #13
 8001988:	d101      	bne.n	800198e <StartCommTask+0x32>
			  __ASM("NOP");
 800198a:	bf00      	nop
 800198c:	e0f8      	b.n	8001b80 <StartCommTask+0x224>
		  }
		  // Clear error counter
		  else if ((rxBuf[0] == 'C') && (rxBuf[1] == 'E') && (rxBuf[2] == 'C') && (rxBuf[3] == '\r')){
 800198e:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <StartCommTask+0x264>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b43      	cmp	r3, #67	; 0x43
 8001994:	d11e      	bne.n	80019d4 <StartCommTask+0x78>
 8001996:	4b8a      	ldr	r3, [pc, #552]	; (8001bc0 <StartCommTask+0x264>)
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	2b45      	cmp	r3, #69	; 0x45
 800199c:	d11a      	bne.n	80019d4 <StartCommTask+0x78>
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <StartCommTask+0x264>)
 80019a0:	789b      	ldrb	r3, [r3, #2]
 80019a2:	2b43      	cmp	r3, #67	; 0x43
 80019a4:	d116      	bne.n	80019d4 <StartCommTask+0x78>
 80019a6:	4b86      	ldr	r3, [pc, #536]	; (8001bc0 <StartCommTask+0x264>)
 80019a8:	78db      	ldrb	r3, [r3, #3]
 80019aa:	2b0d      	cmp	r3, #13
 80019ac:	d112      	bne.n	80019d4 <StartCommTask+0x78>
			  errorCounter = 0;
 80019ae:	4b85      	ldr	r3, [pc, #532]	; (8001bc4 <StartCommTask+0x268>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	801a      	strh	r2, [r3, #0]
			  sprintf(txBuf, "OK;%s\r\n", rxBuf);
 80019b4:	4a82      	ldr	r2, [pc, #520]	; (8001bc0 <StartCommTask+0x264>)
 80019b6:	4984      	ldr	r1, [pc, #528]	; (8001bc8 <StartCommTask+0x26c>)
 80019b8:	4884      	ldr	r0, [pc, #528]	; (8001bcc <StartCommTask+0x270>)
 80019ba:	f00a fa07 	bl	800bdcc <siprintf>
			  Len = SizeofCharArray((char*)txBuf);
 80019be:	4883      	ldr	r0, [pc, #524]	; (8001bcc <StartCommTask+0x270>)
 80019c0:	f7ff ffa4 	bl	800190c <SizeofCharArray>
 80019c4:	4603      	mov	r3, r0
 80019c6:	82fb      	strh	r3, [r7, #22]
			  CDC_Transmit_FS((uint8_t*)txBuf, Len);
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	4619      	mov	r1, r3
 80019cc:	487f      	ldr	r0, [pc, #508]	; (8001bcc <StartCommTask+0x270>)
 80019ce:	f009 fcc5 	bl	800b35c <CDC_Transmit_FS>
 80019d2:	e0d5      	b.n	8001b80 <StartCommTask+0x224>
		  }
		  // Read error counter
		  else if ((rxBuf[0] == 'R') && (rxBuf[1] == 'E') && (rxBuf[2] == 'C') && (rxBuf[3] == '\r')){
 80019d4:	4b7a      	ldr	r3, [pc, #488]	; (8001bc0 <StartCommTask+0x264>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b52      	cmp	r3, #82	; 0x52
 80019da:	d11d      	bne.n	8001a18 <StartCommTask+0xbc>
 80019dc:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <StartCommTask+0x264>)
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	2b45      	cmp	r3, #69	; 0x45
 80019e2:	d119      	bne.n	8001a18 <StartCommTask+0xbc>
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <StartCommTask+0x264>)
 80019e6:	789b      	ldrb	r3, [r3, #2]
 80019e8:	2b43      	cmp	r3, #67	; 0x43
 80019ea:	d115      	bne.n	8001a18 <StartCommTask+0xbc>
 80019ec:	4b74      	ldr	r3, [pc, #464]	; (8001bc0 <StartCommTask+0x264>)
 80019ee:	78db      	ldrb	r3, [r3, #3]
 80019f0:	2b0d      	cmp	r3, #13
 80019f2:	d111      	bne.n	8001a18 <StartCommTask+0xbc>
			  sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, errorCounter);
 80019f4:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <StartCommTask+0x268>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	4a71      	ldr	r2, [pc, #452]	; (8001bc0 <StartCommTask+0x264>)
 80019fa:	4975      	ldr	r1, [pc, #468]	; (8001bd0 <StartCommTask+0x274>)
 80019fc:	4873      	ldr	r0, [pc, #460]	; (8001bcc <StartCommTask+0x270>)
 80019fe:	f00a f9e5 	bl	800bdcc <siprintf>
			  Len = SizeofCharArray((char*)txBuf);
 8001a02:	4872      	ldr	r0, [pc, #456]	; (8001bcc <StartCommTask+0x270>)
 8001a04:	f7ff ff82 	bl	800190c <SizeofCharArray>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	82fb      	strh	r3, [r7, #22]
			  CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	486e      	ldr	r0, [pc, #440]	; (8001bcc <StartCommTask+0x270>)
 8001a12:	f009 fca3 	bl	800b35c <CDC_Transmit_FS>
 8001a16:	e0b3      	b.n	8001b80 <StartCommTask+0x224>
		  }
		  else if ((rxBuf[0] == 'R') && (rxBuf[1] == 'D') && (rxBuf[2] == 'S') && (rxBuf[3] == '\r')){
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <StartCommTask+0x264>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b52      	cmp	r3, #82	; 0x52
 8001a1e:	f040 80a0 	bne.w	8001b62 <StartCommTask+0x206>
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <StartCommTask+0x264>)
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	2b44      	cmp	r3, #68	; 0x44
 8001a28:	f040 809b 	bne.w	8001b62 <StartCommTask+0x206>
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <StartCommTask+0x264>)
 8001a2e:	789b      	ldrb	r3, [r3, #2]
 8001a30:	2b53      	cmp	r3, #83	; 0x53
 8001a32:	f040 8096 	bne.w	8001b62 <StartCommTask+0x206>
 8001a36:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <StartCommTask+0x264>)
 8001a38:	78db      	ldrb	r3, [r3, #3]
 8001a3a:	2b0d      	cmp	r3, #13
 8001a3c:	f040 8091 	bne.w	8001b62 <StartCommTask+0x206>
			  sprintf(txBuf, "%s;%s;%d;%d;%d;%d;%d;%d;%d;\r\n", "OK", "RDS\r",(int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100),
 8001a40:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <StartCommTask+0x278>)
 8001a42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <StartCommTask+0x27c>)
 8001a4c:	f7fe fdd4 	bl	80005f8 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f868 	bl	8000b2c <__aeabi_d2iz>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	461c      	mov	r4, r3
 8001a62:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <StartCommTask+0x280>)
 8001a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <StartCommTask+0x27c>)
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f857 	bl	8000b2c <__aeabi_d2iz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	461d      	mov	r5, r3
 8001a84:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <StartCommTask+0x284>)
 8001a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <StartCommTask+0x27c>)
 8001a90:	f7fe fdb2 	bl	80005f8 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff f846 	bl	8000b2c <__aeabi_d2iz>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	461e      	mov	r6, r3
 8001aa6:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <StartCommTask+0x288>)
 8001aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <StartCommTask+0x27c>)
 8001ab2:	f7fe fda1 	bl	80005f8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f835 	bl	8000b2c <__aeabi_d2iz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	60bb      	str	r3, [r7, #8]
					  (int16_t)(angle5*100), (int16_t)(angle6*100), (int16_t)(angle7*100));
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <StartCommTask+0x28c>)
 8001aca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <StartCommTask+0x27c>)
 8001ad4:	f7fe fd90 	bl	80005f8 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f824 	bl	8000b2c <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b21b      	sxth	r3, r3
			  sprintf(txBuf, "%s;%s;%d;%d;%d;%d;%d;%d;%d;\r\n", "OK", "RDS\r",(int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100),
 8001ae8:	607b      	str	r3, [r7, #4]
					  (int16_t)(angle5*100), (int16_t)(angle6*100), (int16_t)(angle7*100));
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <StartCommTask+0x290>)
 8001aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <StartCommTask+0x27c>)
 8001af6:	f7fe fd7f 	bl	80005f8 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f813 	bl	8000b2c <__aeabi_d2iz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b21b      	sxth	r3, r3
			  sprintf(txBuf, "%s;%s;%d;%d;%d;%d;%d;%d;%d;\r\n", "OK", "RDS\r",(int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100),
 8001b0a:	603b      	str	r3, [r7, #0]
					  (int16_t)(angle5*100), (int16_t)(angle6*100), (int16_t)(angle7*100));
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <StartCommTask+0x294>)
 8001b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <StartCommTask+0x27c>)
 8001b18:	f7fe fd6e 	bl	80005f8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f802 	bl	8000b2c <__aeabi_d2iz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b21b      	sxth	r3, r3
			  sprintf(txBuf, "%s;%s;%d;%d;%d;%d;%d;%d;%d;\r\n", "OK", "RDS\r",(int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100),
 8001b2c:	9306      	str	r3, [sp, #24]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	9205      	str	r2, [sp, #20]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	9204      	str	r2, [sp, #16]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	9602      	str	r6, [sp, #8]
 8001b3c:	9501      	str	r5, [sp, #4]
 8001b3e:	9400      	str	r4, [sp, #0]
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <StartCommTask+0x298>)
 8001b42:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <StartCommTask+0x29c>)
 8001b44:	492d      	ldr	r1, [pc, #180]	; (8001bfc <StartCommTask+0x2a0>)
 8001b46:	4821      	ldr	r0, [pc, #132]	; (8001bcc <StartCommTask+0x270>)
 8001b48:	f00a f940 	bl	800bdcc <siprintf>
			  Len = SizeofCharArray((char*)txBuf);
 8001b4c:	481f      	ldr	r0, [pc, #124]	; (8001bcc <StartCommTask+0x270>)
 8001b4e:	f7ff fedd 	bl	800190c <SizeofCharArray>
 8001b52:	4603      	mov	r3, r0
 8001b54:	82fb      	strh	r3, [r7, #22]
			  CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001b56:	8afb      	ldrh	r3, [r7, #22]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	481c      	ldr	r0, [pc, #112]	; (8001bcc <StartCommTask+0x270>)
 8001b5c:	f009 fbfe 	bl	800b35c <CDC_Transmit_FS>
 8001b60:	e00e      	b.n	8001b80 <StartCommTask+0x224>
		  }
		  else{
			  sprintf(txBuf, "ERR;%s\r\n", rxBuf);
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <StartCommTask+0x264>)
 8001b64:	4926      	ldr	r1, [pc, #152]	; (8001c00 <StartCommTask+0x2a4>)
 8001b66:	4819      	ldr	r0, [pc, #100]	; (8001bcc <StartCommTask+0x270>)
 8001b68:	f00a f930 	bl	800bdcc <siprintf>
			  Len = SizeofCharArray((char*)txBuf);
 8001b6c:	4817      	ldr	r0, [pc, #92]	; (8001bcc <StartCommTask+0x270>)
 8001b6e:	f7ff fecd 	bl	800190c <SizeofCharArray>
 8001b72:	4603      	mov	r3, r0
 8001b74:	82fb      	strh	r3, [r7, #22]
			  CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001b76:	8afb      	ldrh	r3, [r7, #22]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <StartCommTask+0x270>)
 8001b7c:	f009 fbee 	bl	800b35c <CDC_Transmit_FS>
		  }
		  timeStamp = HAL_GetTick();
 8001b80:	f000 fe46 	bl	8002810 <HAL_GetTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <StartCommTask+0x2a8>)
 8001b88:	6013      	str	r3, [r2, #0]
		  receiveState = 0;
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <StartCommTask+0x260>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
	  }

	  timeOutGuard = HAL_GetTick() - timeStamp;
 8001b90:	f000 fe3e 	bl	8002810 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <StartCommTask+0x2a8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <StartCommTask+0x2ac>)
 8001b9e:	6013      	str	r3, [r2, #0]
	  if (timeOutGuard > timeOutGuardMax){
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <StartCommTask+0x2ac>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <StartCommTask+0x2b0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d903      	bls.n	8001bb4 <StartCommTask+0x258>
		  timeOutGuardMax = timeOutGuard;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <StartCommTask+0x2ac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <StartCommTask+0x2b0>)
 8001bb2:	6013      	str	r3, [r2, #0]
	  }

	  osDelay(10);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f008 f920 	bl	8009dfa <osDelay>
	  if (receiveState == 1){
 8001bba:	e6d5      	b.n	8001968 <StartCommTask+0xc>
 8001bbc:	20000030 	.word	0x20000030
 8001bc0:	20000678 	.word	0x20000678
 8001bc4:	200004c4 	.word	0x200004c4
 8001bc8:	0800cf60 	.word	0x0800cf60
 8001bcc:	20000578 	.word	0x20000578
 8001bd0:	0800cf68 	.word	0x0800cf68
 8001bd4:	20000538 	.word	0x20000538
 8001bd8:	40590000 	.word	0x40590000
 8001bdc:	20000540 	.word	0x20000540
 8001be0:	20000548 	.word	0x20000548
 8001be4:	20000550 	.word	0x20000550
 8001be8:	20000558 	.word	0x20000558
 8001bec:	20000560 	.word	0x20000560
 8001bf0:	20000568 	.word	0x20000568
 8001bf4:	0800cf74 	.word	0x0800cf74
 8001bf8:	0800cf7c 	.word	0x0800cf7c
 8001bfc:	0800cf80 	.word	0x0800cf80
 8001c00:	0800cfa0 	.word	0x0800cfa0
 8001c04:	200006f8 	.word	0x200006f8
 8001c08:	200006fc 	.word	0x200006fc
 8001c0c:	20000700 	.word	0x20000700

08001c10 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b08a      	sub	sp, #40	; 0x28
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN StartSensorTask */
  SPI_CS_Disable(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff fbee 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(2);
 8001c20:	2002      	movs	r0, #2
 8001c22:	f7ff fbeb 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(3);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f7ff fbe8 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(4);
 8001c2c:	2004      	movs	r0, #4
 8001c2e:	f7ff fbe5 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(5);
 8001c32:	2005      	movs	r0, #5
 8001c34:	f7ff fbe2 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(6);
 8001c38:	2006      	movs	r0, #6
 8001c3a:	f7ff fbdf 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(7);
 8001c3e:	2007      	movs	r0, #7
 8001c40:	f7ff fbdc 	bl	80013fc <SPI_CS_Disable>

  checkError = NO_ERROR;
 8001c44:	4aa7      	ldr	r2, [pc, #668]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001c46:	2300      	movs	r3, #0
 8001c48:	7013      	strb	r3, [r2, #0]
  checkError = readBlockCRC(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff fade 	bl	800120c <readBlockCRC>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4aa4      	ldr	r2, [pc, #656]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001c54:	7013      	strb	r3, [r2, #0]
  if (checkError != NO_ERROR) errorCounter++;
 8001c56:	4ba3      	ldr	r3, [pc, #652]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <StartSensorTask+0x5a>
 8001c5e:	4ba2      	ldr	r3, [pc, #648]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4aa0      	ldr	r2, [pc, #640]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001c68:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f000 fddc 	bl	8002828 <HAL_Delay>

  checkError2 = NO_ERROR;
 8001c70:	4a9e      	ldr	r2, [pc, #632]	; (8001eec <StartSensorTask+0x2dc>)
 8001c72:	2300      	movs	r3, #0
 8001c74:	7013      	strb	r3, [r2, #0]
  checkError2 = readBlockCRC(2);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff fac8 	bl	800120c <readBlockCRC>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4a9b      	ldr	r2, [pc, #620]	; (8001eec <StartSensorTask+0x2dc>)
 8001c80:	7013      	strb	r3, [r2, #0]
  if (checkError2 != NO_ERROR) errorCounter++;
 8001c82:	4b9a      	ldr	r3, [pc, #616]	; (8001eec <StartSensorTask+0x2dc>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <StartSensorTask+0x86>
 8001c8a:	4b97      	ldr	r3, [pc, #604]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4a95      	ldr	r2, [pc, #596]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001c94:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f000 fdc6 	bl	8002828 <HAL_Delay>

  checkError3 = NO_ERROR;
 8001c9c:	4a94      	ldr	r2, [pc, #592]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	7013      	strb	r3, [r2, #0]
  checkError3 = readBlockCRC(3);
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f7ff fab2 	bl	800120c <readBlockCRC>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a91      	ldr	r2, [pc, #580]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001cac:	7013      	strb	r3, [r2, #0]
  if (checkError3 != NO_ERROR) errorCounter++;
 8001cae:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <StartSensorTask+0xb2>
 8001cb6:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4a8a      	ldr	r2, [pc, #552]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001cc0:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 fdb0 	bl	8002828 <HAL_Delay>

  checkError4 = NO_ERROR;
 8001cc8:	4a8a      	ldr	r2, [pc, #552]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	7013      	strb	r3, [r2, #0]
  checkError4 = readBlockCRC(4);
 8001cce:	2004      	movs	r0, #4
 8001cd0:	f7ff fa9c 	bl	800120c <readBlockCRC>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a87      	ldr	r2, [pc, #540]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001cd8:	7013      	strb	r3, [r2, #0]
  if (checkError4 != NO_ERROR) errorCounter++;
 8001cda:	4b86      	ldr	r3, [pc, #536]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <StartSensorTask+0xde>
 8001ce2:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4a7f      	ldr	r2, [pc, #508]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001cec:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f000 fd9a 	bl	8002828 <HAL_Delay>

  checkError5 = NO_ERROR;
 8001cf4:	4a80      	ldr	r2, [pc, #512]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	7013      	strb	r3, [r2, #0]
  checkError5 = readBlockCRC(5);
 8001cfa:	2005      	movs	r0, #5
 8001cfc:	f7ff fa86 	bl	800120c <readBlockCRC>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a7d      	ldr	r2, [pc, #500]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001d04:	7013      	strb	r3, [r2, #0]
  if (checkError5 != NO_ERROR) errorCounter++;
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <StartSensorTask+0x10a>
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4a74      	ldr	r2, [pc, #464]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d18:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f000 fd84 	bl	8002828 <HAL_Delay>

  checkError6 = NO_ERROR;
 8001d20:	4a76      	ldr	r2, [pc, #472]	; (8001efc <StartSensorTask+0x2ec>)
 8001d22:	2300      	movs	r3, #0
 8001d24:	7013      	strb	r3, [r2, #0]
  checkError6 = readBlockCRC(6);
 8001d26:	2006      	movs	r0, #6
 8001d28:	f7ff fa70 	bl	800120c <readBlockCRC>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a73      	ldr	r2, [pc, #460]	; (8001efc <StartSensorTask+0x2ec>)
 8001d30:	7013      	strb	r3, [r2, #0]
  if (checkError6 != NO_ERROR) errorCounter++;
 8001d32:	4b72      	ldr	r3, [pc, #456]	; (8001efc <StartSensorTask+0x2ec>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <StartSensorTask+0x136>
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d44:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f000 fd6e 	bl	8002828 <HAL_Delay>

  checkError7 = NO_ERROR;
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	; (8001f00 <StartSensorTask+0x2f0>)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	7013      	strb	r3, [r2, #0]
  checkError7 = readBlockCRC(7);
 8001d52:	2007      	movs	r0, #7
 8001d54:	f7ff fa5a 	bl	800120c <readBlockCRC>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <StartSensorTask+0x2f0>)
 8001d5c:	7013      	strb	r3, [r2, #0]
  if (checkError7 != NO_ERROR) errorCounter++;
 8001d5e:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <StartSensorTask+0x2f0>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <StartSensorTask+0x162>
 8001d66:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d70:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f000 fd58 	bl	8002828 <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f008 f83e 	bl	8009dfa <osDelay>

    checkError = NO_ERROR;
 8001d7e:	4a59      	ldr	r2, [pc, #356]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001d80:	2300      	movs	r3, #0
 8001d82:	7013      	strb	r3, [r2, #0]
    checkError = getAngleValue(&angle1_raw,1);
 8001d84:	2101      	movs	r1, #1
 8001d86:	485f      	ldr	r0, [pc, #380]	; (8001f04 <StartSensorTask+0x2f4>)
 8001d88:	f7ff fab8 	bl	80012fc <getAngleValue>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a55      	ldr	r2, [pc, #340]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001d90:	7013      	strb	r3, [r2, #0]
    if (checkError != NO_ERROR) errorCounter++;
 8001d92:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <StartSensorTask+0x196>
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4a51      	ldr	r2, [pc, #324]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001da4:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fd3e 	bl	8002828 <HAL_Delay>

    checkError2 = NO_ERROR;
 8001dac:	4a4f      	ldr	r2, [pc, #316]	; (8001eec <StartSensorTask+0x2dc>)
 8001dae:	2300      	movs	r3, #0
 8001db0:	7013      	strb	r3, [r2, #0]
    checkError2 = getAngleValue(&angle2_raw,2);
 8001db2:	2102      	movs	r1, #2
 8001db4:	4854      	ldr	r0, [pc, #336]	; (8001f08 <StartSensorTask+0x2f8>)
 8001db6:	f7ff faa1 	bl	80012fc <getAngleValue>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <StartSensorTask+0x2dc>)
 8001dbe:	7013      	strb	r3, [r2, #0]
    if (checkError2 != NO_ERROR) errorCounter++;
 8001dc0:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <StartSensorTask+0x2dc>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <StartSensorTask+0x1c4>
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4a45      	ldr	r2, [pc, #276]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001dd2:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f000 fd27 	bl	8002828 <HAL_Delay>

    checkError3 = NO_ERROR;
 8001dda:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	7013      	strb	r3, [r2, #0]
    checkError3 = getAngleValue(&angle3_raw,3);
 8001de0:	2103      	movs	r1, #3
 8001de2:	484a      	ldr	r0, [pc, #296]	; (8001f0c <StartSensorTask+0x2fc>)
 8001de4:	f7ff fa8a 	bl	80012fc <getAngleValue>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4a41      	ldr	r2, [pc, #260]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001dec:	7013      	strb	r3, [r2, #0]
    if (checkError3 != NO_ERROR) errorCounter++;
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <StartSensorTask+0x1f2>
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e00:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f000 fd10 	bl	8002828 <HAL_Delay>

    checkError4 = NO_ERROR;
 8001e08:	4a3a      	ldr	r2, [pc, #232]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	7013      	strb	r3, [r2, #0]
    checkError4 = getAngleValue(&angle4_raw,4);
 8001e0e:	2104      	movs	r1, #4
 8001e10:	483f      	ldr	r0, [pc, #252]	; (8001f10 <StartSensorTask+0x300>)
 8001e12:	f7ff fa73 	bl	80012fc <getAngleValue>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a36      	ldr	r2, [pc, #216]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001e1a:	7013      	strb	r3, [r2, #0]
    if (checkError4 != NO_ERROR) errorCounter++;
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <StartSensorTask+0x220>
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e2e:	8013      	strh	r3, [r2, #0]

    checkError5 = NO_ERROR;
 8001e30:	4a31      	ldr	r2, [pc, #196]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001e32:	2300      	movs	r3, #0
 8001e34:	7013      	strb	r3, [r2, #0]
    checkError5 = getAngleValue(&angle5_raw,5);
 8001e36:	2105      	movs	r1, #5
 8001e38:	4836      	ldr	r0, [pc, #216]	; (8001f14 <StartSensorTask+0x304>)
 8001e3a:	f7ff fa5f 	bl	80012fc <getAngleValue>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001e42:	7013      	strb	r3, [r2, #0]
    if (checkError5 != NO_ERROR) errorCounter++;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <StartSensorTask+0x248>
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4a24      	ldr	r2, [pc, #144]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e56:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f000 fce5 	bl	8002828 <HAL_Delay>

    checkError6 = NO_ERROR;
 8001e5e:	4a27      	ldr	r2, [pc, #156]	; (8001efc <StartSensorTask+0x2ec>)
 8001e60:	2300      	movs	r3, #0
 8001e62:	7013      	strb	r3, [r2, #0]
    checkError6 = getAngleValue(&angle6_raw,6);
 8001e64:	2106      	movs	r1, #6
 8001e66:	482c      	ldr	r0, [pc, #176]	; (8001f18 <StartSensorTask+0x308>)
 8001e68:	f7ff fa48 	bl	80012fc <getAngleValue>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a23      	ldr	r2, [pc, #140]	; (8001efc <StartSensorTask+0x2ec>)
 8001e70:	7013      	strb	r3, [r2, #0]
    if (checkError6 != NO_ERROR) errorCounter++;
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <StartSensorTask+0x2ec>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <StartSensorTask+0x276>
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e84:	8013      	strh	r3, [r2, #0]

    checkError7 = NO_ERROR;
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <StartSensorTask+0x2f0>)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	7013      	strb	r3, [r2, #0]
    checkError7 = getAngleValue(&angle7_raw,7);
 8001e8c:	2107      	movs	r1, #7
 8001e8e:	4823      	ldr	r0, [pc, #140]	; (8001f1c <StartSensorTask+0x30c>)
 8001e90:	f7ff fa34 	bl	80012fc <getAngleValue>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <StartSensorTask+0x2f0>)
 8001e98:	7013      	strb	r3, [r2, #0]
    if (checkError7 != NO_ERROR) errorCounter++;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <StartSensorTask+0x2f0>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <StartSensorTask+0x29e>
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001eac:	8013      	strh	r3, [r2, #0]


    // processing raw angles

    angle1_temp = angle1_raw - offset1;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <StartSensorTask+0x2f4>)
 8001eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <StartSensorTask+0x310>)
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	f7fe f9e5 	bl	8000288 <__aeabi_dsub>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <StartSensorTask+0x314>)
 8001ec8:	e9c3 0100 	strd	r0, r1, [r3]
    if (angle1_temp >= 0){
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <StartSensorTask+0x314>)
 8001ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	f7fe fe13 	bl	8000b04 <__aeabi_dcmpge>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	e021      	b.n	8001f28 <StartSensorTask+0x318>
 8001ee4:	200004bc 	.word	0x200004bc
 8001ee8:	200004c4 	.word	0x200004c4
 8001eec:	200004bd 	.word	0x200004bd
 8001ef0:	200004be 	.word	0x200004be
 8001ef4:	200004bf 	.word	0x200004bf
 8001ef8:	200004c0 	.word	0x200004c0
 8001efc:	200004c1 	.word	0x200004c1
 8001f00:	200004c2 	.word	0x200004c2
 8001f04:	200004c8 	.word	0x200004c8
 8001f08:	200004d0 	.word	0x200004d0
 8001f0c:	200004d8 	.word	0x200004d8
 8001f10:	200004e0 	.word	0x200004e0
 8001f14:	200004e8 	.word	0x200004e8
 8001f18:	200004f0 	.word	0x200004f0
 8001f1c:	200004f8 	.word	0x200004f8
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000500 	.word	0x20000500
 8001f28:	d006      	beq.n	8001f38 <StartSensorTask+0x328>
    	angle1 = angle1_temp;
 8001f2a:	4b93      	ldr	r3, [pc, #588]	; (8002178 <StartSensorTask+0x568>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	4992      	ldr	r1, [pc, #584]	; (800217c <StartSensorTask+0x56c>)
 8001f32:	e9c1 2300 	strd	r2, r3, [r1]
 8001f36:	e016      	b.n	8001f66 <StartSensorTask+0x356>
    }
    else{
    	angle1 = -1 * (360 - (360 + angle1_temp));
 8001f38:	4b8f      	ldr	r3, [pc, #572]	; (8002178 <StartSensorTask+0x568>)
 8001f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b8f      	ldr	r3, [pc, #572]	; (8002180 <StartSensorTask+0x570>)
 8001f44:	f7fe f9a2 	bl	800028c <__adddf3>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	f04f 0000 	mov.w	r0, #0
 8001f50:	498b      	ldr	r1, [pc, #556]	; (8002180 <StartSensorTask+0x570>)
 8001f52:	f7fe f999 	bl	8000288 <__aeabi_dsub>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f60:	4b86      	ldr	r3, [pc, #536]	; (800217c <StartSensorTask+0x56c>)
 8001f62:	e9c3 4500 	strd	r4, r5, [r3]
    }

    angle2_temp = -1 * (angle2_raw - offset2);
 8001f66:	4b87      	ldr	r3, [pc, #540]	; (8002184 <StartSensorTask+0x574>)
 8001f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f6c:	4b86      	ldr	r3, [pc, #536]	; (8002188 <StartSensorTask+0x578>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe f989 	bl	8000288 <__aeabi_dsub>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4690      	mov	r8, r2
 8001f7c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001f80:	4b82      	ldr	r3, [pc, #520]	; (800218c <StartSensorTask+0x57c>)
 8001f82:	e9c3 8900 	strd	r8, r9, [r3]
    if (angle2_temp >= 0){
 8001f86:	4b81      	ldr	r3, [pc, #516]	; (800218c <StartSensorTask+0x57c>)
 8001f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f7fe fdb6 	bl	8000b04 <__aeabi_dcmpge>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d006      	beq.n	8001fac <StartSensorTask+0x39c>
    	angle2 = angle2_temp;
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	; (800218c <StartSensorTask+0x57c>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	497a      	ldr	r1, [pc, #488]	; (8002190 <StartSensorTask+0x580>)
 8001fa6:	e9c1 2300 	strd	r2, r3, [r1]
 8001faa:	e016      	b.n	8001fda <StartSensorTask+0x3ca>
    }
    else{
    	angle2 = -1 * (360 - (360 + angle2_temp));
 8001fac:	4b77      	ldr	r3, [pc, #476]	; (800218c <StartSensorTask+0x57c>)
 8001fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b72      	ldr	r3, [pc, #456]	; (8002180 <StartSensorTask+0x570>)
 8001fb8:	f7fe f968 	bl	800028c <__adddf3>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	f04f 0000 	mov.w	r0, #0
 8001fc4:	496e      	ldr	r1, [pc, #440]	; (8002180 <StartSensorTask+0x570>)
 8001fc6:	f7fe f95f 	bl	8000288 <__aeabi_dsub>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4692      	mov	sl, r2
 8001fd0:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001fd4:	4b6e      	ldr	r3, [pc, #440]	; (8002190 <StartSensorTask+0x580>)
 8001fd6:	e9c3 ab00 	strd	sl, fp, [r3]
    }

// PROBLÉMA
    angle3_temp = angle3_raw;
 8001fda:	4b6e      	ldr	r3, [pc, #440]	; (8002194 <StartSensorTask+0x584>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	496d      	ldr	r1, [pc, #436]	; (8002198 <StartSensorTask+0x588>)
 8001fe2:	e9c1 2300 	strd	r2, r3, [r1]
    if (angle3_temp >= 0){
 8001fe6:	4b6c      	ldr	r3, [pc, #432]	; (8002198 <StartSensorTask+0x588>)
 8001fe8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	f7fe fd86 	bl	8000b04 <__aeabi_dcmpge>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00f      	beq.n	800201e <StartSensorTask+0x40e>
    	angle3 = angle3_temp - offset3;
 8001ffe:	4b66      	ldr	r3, [pc, #408]	; (8002198 <StartSensorTask+0x588>)
 8002000:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002004:	4b65      	ldr	r3, [pc, #404]	; (800219c <StartSensorTask+0x58c>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe f93d 	bl	8000288 <__aeabi_dsub>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	4b62      	ldr	r3, [pc, #392]	; (80021a0 <StartSensorTask+0x590>)
 8002018:	e9c3 0100 	strd	r0, r1, [r3]
 800201c:	e00e      	b.n	800203c <StartSensorTask+0x42c>
    }
    else{
    	angle3 = angle3_temp + offset3;
 800201e:	4b5e      	ldr	r3, [pc, #376]	; (8002198 <StartSensorTask+0x588>)
 8002020:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002024:	4b5d      	ldr	r3, [pc, #372]	; (800219c <StartSensorTask+0x58c>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe f92f 	bl	800028c <__adddf3>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <StartSensorTask+0x590>)
 8002038:	e9c3 0100 	strd	r0, r1, [r3]
    }
// PROBLÉMA

    angle4_temp = -1 * (angle4_raw - offset4);
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <StartSensorTask+0x594>)
 800203e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002042:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <StartSensorTask+0x598>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe f91e 	bl	8000288 <__aeabi_dsub>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	61ba      	str	r2, [r7, #24]
 8002052:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	4b54      	ldr	r3, [pc, #336]	; (80021ac <StartSensorTask+0x59c>)
 800205a:	ed97 7b06 	vldr	d7, [r7, #24]
 800205e:	ed83 7b00 	vstr	d7, [r3]
    if (angle4_temp >= 0){
 8002062:	4b52      	ldr	r3, [pc, #328]	; (80021ac <StartSensorTask+0x59c>)
 8002064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	f7fe fd48 	bl	8000b04 <__aeabi_dcmpge>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <StartSensorTask+0x478>
    	angle4 = angle4_temp;
 800207a:	4b4c      	ldr	r3, [pc, #304]	; (80021ac <StartSensorTask+0x59c>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	494b      	ldr	r1, [pc, #300]	; (80021b0 <StartSensorTask+0x5a0>)
 8002082:	e9c1 2300 	strd	r2, r3, [r1]
 8002086:	e019      	b.n	80020bc <StartSensorTask+0x4ac>
    }
    else{
    	angle4 = -1 * (360 - (360 + angle4_temp));
 8002088:	4b48      	ldr	r3, [pc, #288]	; (80021ac <StartSensorTask+0x59c>)
 800208a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <StartSensorTask+0x570>)
 8002094:	f7fe f8fa 	bl	800028c <__adddf3>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	f04f 0000 	mov.w	r0, #0
 80020a0:	4937      	ldr	r1, [pc, #220]	; (8002180 <StartSensorTask+0x570>)
 80020a2:	f7fe f8f1 	bl	8000288 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	613a      	str	r2, [r7, #16]
 80020ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	4b3f      	ldr	r3, [pc, #252]	; (80021b0 <StartSensorTask+0x5a0>)
 80020b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80020b8:	ed83 7b00 	vstr	d7, [r3]
    }

    angle5_temp = (angle5_raw - offset5);
 80020bc:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <StartSensorTask+0x5a4>)
 80020be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <StartSensorTask+0x5a8>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe f8de 	bl	8000288 <__aeabi_dsub>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	4b39      	ldr	r3, [pc, #228]	; (80021bc <StartSensorTask+0x5ac>)
 80020d6:	e9c3 0100 	strd	r0, r1, [r3]
	if (angle5_temp >= 0){
 80020da:	4b38      	ldr	r3, [pc, #224]	; (80021bc <StartSensorTask+0x5ac>)
 80020dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	f7fe fd0c 	bl	8000b04 <__aeabi_dcmpge>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <StartSensorTask+0x4f0>
		angle5 = angle5_temp;
 80020f2:	4b32      	ldr	r3, [pc, #200]	; (80021bc <StartSensorTask+0x5ac>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	4931      	ldr	r1, [pc, #196]	; (80021c0 <StartSensorTask+0x5b0>)
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
 80020fe:	e015      	b.n	800212c <StartSensorTask+0x51c>
	}
	else{
		angle5 = (360 - (360 + angle5_temp));
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <StartSensorTask+0x5ac>)
 8002102:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <StartSensorTask+0x570>)
 800210c:	f7fe f8be 	bl	800028c <__adddf3>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	f04f 0000 	mov.w	r0, #0
 8002118:	4919      	ldr	r1, [pc, #100]	; (8002180 <StartSensorTask+0x570>)
 800211a:	f7fe f8b5 	bl	8000288 <__aeabi_dsub>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <StartSensorTask+0x5b0>)
 8002128:	e9c3 0100 	strd	r0, r1, [r3]
	}

	angle6_temp = -1 * (angle6_raw - offset6);
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <StartSensorTask+0x5b4>)
 800212e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <StartSensorTask+0x5b8>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe f8a6 	bl	8000288 <__aeabi_dsub>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	4b20      	ldr	r3, [pc, #128]	; (80021cc <StartSensorTask+0x5bc>)
 800214a:	ed97 7b02 	vldr	d7, [r7, #8]
 800214e:	ed83 7b00 	vstr	d7, [r3]
	if (angle6_temp >= 0){
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <StartSensorTask+0x5bc>)
 8002154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f7fe fcd0 	bl	8000b04 <__aeabi_dcmpge>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d034      	beq.n	80021d4 <StartSensorTask+0x5c4>
		angle6 = angle6_temp;
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <StartSensorTask+0x5bc>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	4917      	ldr	r1, [pc, #92]	; (80021d0 <StartSensorTask+0x5c0>)
 8002172:	e9c1 2300 	strd	r2, r3, [r1]
 8002176:	e047      	b.n	8002208 <StartSensorTask+0x5f8>
 8002178:	20000500 	.word	0x20000500
 800217c:	20000538 	.word	0x20000538
 8002180:	40768000 	.word	0x40768000
 8002184:	200004d0 	.word	0x200004d0
 8002188:	20000008 	.word	0x20000008
 800218c:	20000508 	.word	0x20000508
 8002190:	20000540 	.word	0x20000540
 8002194:	200004d8 	.word	0x200004d8
 8002198:	20000510 	.word	0x20000510
 800219c:	20000010 	.word	0x20000010
 80021a0:	20000548 	.word	0x20000548
 80021a4:	200004e0 	.word	0x200004e0
 80021a8:	20000018 	.word	0x20000018
 80021ac:	20000518 	.word	0x20000518
 80021b0:	20000550 	.word	0x20000550
 80021b4:	200004e8 	.word	0x200004e8
 80021b8:	20000020 	.word	0x20000020
 80021bc:	20000520 	.word	0x20000520
 80021c0:	20000558 	.word	0x20000558
 80021c4:	200004f0 	.word	0x200004f0
 80021c8:	20000028 	.word	0x20000028
 80021cc:	20000528 	.word	0x20000528
 80021d0:	20000560 	.word	0x20000560
	}
	else{
		angle6 = -1 * (360 - (360 + angle6_temp));
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <StartSensorTask+0x65c>)
 80021d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b24      	ldr	r3, [pc, #144]	; (8002270 <StartSensorTask+0x660>)
 80021e0:	f7fe f854 	bl	800028c <__adddf3>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	f04f 0000 	mov.w	r0, #0
 80021ec:	4920      	ldr	r1, [pc, #128]	; (8002270 <StartSensorTask+0x660>)
 80021ee:	f7fe f84b 	bl	8000288 <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	603a      	str	r2, [r7, #0]
 80021f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <StartSensorTask+0x664>)
 8002200:	ed97 7b00 	vldr	d7, [r7]
 8002204:	ed83 7b00 	vstr	d7, [r3]
	}

	angle7_temp = (angle7_raw - offset7);
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <StartSensorTask+0x668>)
 800220a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <StartSensorTask+0x66c>)
 8002210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002214:	f7fe f838 	bl	8000288 <__aeabi_dsub>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <StartSensorTask+0x670>)
 8002222:	e9c3 0100 	strd	r0, r1, [r3]
	if (angle7_temp >= 0){
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <StartSensorTask+0x670>)
 8002228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f7fe fc66 	bl	8000b04 <__aeabi_dcmpge>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <StartSensorTask+0x63c>
		angle7 = angle7_temp;
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <StartSensorTask+0x670>)
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	490f      	ldr	r1, [pc, #60]	; (8002284 <StartSensorTask+0x674>)
 8002246:	e9c1 2300 	strd	r2, r3, [r1]
 800224a:	e595      	b.n	8001d78 <StartSensorTask+0x168>
	}
	else{
		angle7 = (360 + angle7_temp);
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <StartSensorTask+0x670>)
 800224e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <StartSensorTask+0x660>)
 8002258:	f7fe f818 	bl	800028c <__adddf3>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <StartSensorTask+0x674>)
 8002266:	e9c3 0100 	strd	r0, r1, [r3]
    osDelay(10);
 800226a:	e585      	b.n	8001d78 <StartSensorTask+0x168>
 800226c:	20000528 	.word	0x20000528
 8002270:	40768000 	.word	0x40768000
 8002274:	20000560 	.word	0x20000560
 8002278:	200004f8 	.word	0x200004f8
 800227c:	20000570 	.word	0x20000570
 8002280:	20000530 	.word	0x20000530
 8002284:	20000568 	.word	0x20000568

08002288 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a04      	ldr	r2, [pc, #16]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800229a:	f000 faa5 	bl	80027e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40000800 	.word	0x40000800

080022ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b0:	b672      	cpsid	i
}
 80022b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <Error_Handler+0x8>
	...

080022b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_MspInit+0x54>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_MspInit+0x54>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	6453      	str	r3, [r2, #68]	; 0x44
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <HAL_MspInit+0x54>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	607b      	str	r3, [r7, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_MspInit+0x54>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_MspInit+0x54>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_MspInit+0x54>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	210f      	movs	r1, #15
 80022fa:	f06f 0001 	mvn.w	r0, #1
 80022fe:	f000 fb6f 	bl	80029e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a28      	ldr	r2, [pc, #160]	; (80023d0 <HAL_SPI_MspInit+0xc0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d14a      	bne.n	80023c8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a26      	ldr	r2, [pc, #152]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 800233c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a1f      	ldr	r2, [pc, #124]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 8002358:	f043 0304 	orr.w	r3, r3, #4
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a18      	ldr	r2, [pc, #96]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <HAL_SPI_MspInit+0xc4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002386:	2308      	movs	r3, #8
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002396:	2305      	movs	r3, #5
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	480d      	ldr	r0, [pc, #52]	; (80023d8 <HAL_SPI_MspInit+0xc8>)
 80023a2:	f000 fb47 	bl	8002a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023b8:	2305      	movs	r3, #5
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <HAL_SPI_MspInit+0xcc>)
 80023c4:	f000 fb36 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	; 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40003800 	.word	0x40003800
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020800 	.word	0x40020800
 80023dc:	40020400 	.word	0x40020400

080023e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0b      	ldr	r2, [pc, #44]	; (800241c <HAL_TIM_PWM_MspInit+0x3c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10d      	bne.n	800240e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_TIM_PWM_MspInit+0x40>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <HAL_TIM_PWM_MspInit+0x40>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_TIM_PWM_MspInit+0x40>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40010000 	.word	0x40010000
 8002420:	40023800 	.word	0x40023800

08002424 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_TIM_MspPostInit+0x68>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d11e      	bne.n	8002484 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_TIM_MspPostInit+0x6c>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	4a10      	ldr	r2, [pc, #64]	; (8002490 <HAL_TIM_MspPostInit+0x6c>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_TIM_MspPostInit+0x6c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002466:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002474:	2301      	movs	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <HAL_TIM_MspPostInit+0x70>)
 8002480:	f000 fad8 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	3720      	adds	r7, #32
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40010000 	.word	0x40010000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020000 	.word	0x40020000

08002498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	; 0x38
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_InitTick+0xe4>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4a32      	ldr	r2, [pc, #200]	; (800257c <HAL_InitTick+0xe4>)
 80024b2:	f043 0304 	orr.w	r3, r3, #4
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
 80024b8:	4b30      	ldr	r3, [pc, #192]	; (800257c <HAL_InitTick+0xe4>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024c4:	f107 0210 	add.w	r2, r7, #16
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fb68 	bl	8004ba4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d103      	bne.n	80024e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024de:	f002 fb4d 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80024e2:	6378      	str	r0, [r7, #52]	; 0x34
 80024e4:	e004      	b.n	80024f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024e6:	f002 fb49 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 80024ea:	4603      	mov	r3, r0
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	4a23      	ldr	r2, [pc, #140]	; (8002580 <HAL_InitTick+0xe8>)
 80024f4:	fba2 2303 	umull	r2, r3, r2, r3
 80024f8:	0c9b      	lsrs	r3, r3, #18
 80024fa:	3b01      	subs	r3, #1
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_InitTick+0xec>)
 8002500:	4a21      	ldr	r2, [pc, #132]	; (8002588 <HAL_InitTick+0xf0>)
 8002502:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_InitTick+0xec>)
 8002506:	f240 32e7 	movw	r2, #999	; 0x3e7
 800250a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800250c:	4a1d      	ldr	r2, [pc, #116]	; (8002584 <HAL_InitTick+0xec>)
 800250e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002510:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_InitTick+0xec>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002518:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <HAL_InitTick+0xec>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251e:	4b19      	ldr	r3, [pc, #100]	; (8002584 <HAL_InitTick+0xec>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002524:	4817      	ldr	r0, [pc, #92]	; (8002584 <HAL_InitTick+0xec>)
 8002526:	f003 f917 	bl	8005758 <HAL_TIM_Base_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11b      	bne.n	8002570 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002538:	4812      	ldr	r0, [pc, #72]	; (8002584 <HAL_InitTick+0xec>)
 800253a:	f003 f967 	bl	800580c <HAL_TIM_Base_Start_IT>
 800253e:	4603      	mov	r3, r0
 8002540:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002544:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002548:	2b00      	cmp	r3, #0
 800254a:	d111      	bne.n	8002570 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800254c:	201e      	movs	r0, #30
 800254e:	f000 fa63 	bl	8002a18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b0f      	cmp	r3, #15
 8002556:	d808      	bhi.n	800256a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002558:	2200      	movs	r2, #0
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	201e      	movs	r0, #30
 800255e:	f000 fa3f 	bl	80029e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_InitTick+0xf4>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e002      	b.n	8002570 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002574:	4618      	mov	r0, r3
 8002576:	3738      	adds	r7, #56	; 0x38
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	431bde83 	.word	0x431bde83
 8002584:	20000704 	.word	0x20000704
 8002588:	40000800 	.word	0x40000800
 800258c:	20000038 	.word	0x20000038

08002590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002594:	e7fe      	b.n	8002594 <NMI_Handler+0x4>

08002596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259a:	e7fe      	b.n	800259a <HardFault_Handler+0x4>

0800259c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <MemManage_Handler+0x4>

080025a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <BusFault_Handler+0x4>

080025a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <UsageFault_Handler+0x4>

080025ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <TIM4_IRQHandler+0x10>)
 80025c2:	f003 fa85 	bl	8005ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000704 	.word	0x20000704

080025d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <OTG_FS_IRQHandler+0x10>)
 80025d6:	f000 fd34 	bl	8003042 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20004b08 	.word	0x20004b08

080025e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e00a      	b.n	800260c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025f6:	f3af 8000 	nop.w
 80025fa:	4601      	mov	r1, r0
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	60ba      	str	r2, [r7, #8]
 8002602:	b2ca      	uxtb	r2, r1
 8002604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	dbf0      	blt.n	80025f6 <_read+0x12>
  }

  return len;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e009      	b.n	8002644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60ba      	str	r2, [r7, #8]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3301      	adds	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	429a      	cmp	r2, r3
 800264a:	dbf1      	blt.n	8002630 <_write+0x12>
  }
  return len;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <_close>:

int _close(int file)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267e:	605a      	str	r2, [r3, #4]
  return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_isatty>:

int _isatty(int file)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <_sbrk+0x5c>)
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <_sbrk+0x60>)
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d102      	bne.n	80026e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <_sbrk+0x64>)
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <_sbrk+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <_sbrk+0x64>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d207      	bcs.n	8002700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f0:	f009 fc30 	bl	800bf54 <__errno>
 80026f4:	4603      	mov	r3, r0
 80026f6:	220c      	movs	r2, #12
 80026f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295
 80026fe:	e009      	b.n	8002714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <_sbrk+0x64>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <_sbrk+0x64>)
 8002710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002712:	68fb      	ldr	r3, [r7, #12]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20018000 	.word	0x20018000
 8002720:	00000400 	.word	0x00000400
 8002724:	2000074c 	.word	0x2000074c
 8002728:	20005380 	.word	0x20005380

0800272c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <SystemInit+0x20>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <SystemInit+0x20>)
 8002738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002754:	480d      	ldr	r0, [pc, #52]	; (800278c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002756:	490e      	ldr	r1, [pc, #56]	; (8002790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002758:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800275c:	e002      	b.n	8002764 <LoopCopyDataInit>

0800275e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002762:	3304      	adds	r3, #4

08002764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002768:	d3f9      	bcc.n	800275e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800276c:	4c0b      	ldr	r4, [pc, #44]	; (800279c <LoopFillZerobss+0x26>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002770:	e001      	b.n	8002776 <LoopFillZerobss>

08002772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002774:	3204      	adds	r2, #4

08002776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002778:	d3fb      	bcc.n	8002772 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800277a:	f7ff ffd7 	bl	800272c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800277e:	f009 fbef 	bl	800bf60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002782:	f7fe fea9 	bl	80014d8 <main>
  bx  lr    
 8002786:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002788:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800278c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002790:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002794:	0800d090 	.word	0x0800d090
  ldr r2, =_sbss
 8002798:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800279c:	20005380 	.word	0x20005380

080027a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a0:	e7fe      	b.n	80027a0 <ADC_IRQHandler>
	...

080027a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_Init+0x40>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <HAL_Init+0x40>)
 80027ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_Init+0x40>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_Init+0x40>)
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_Init+0x40>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <HAL_Init+0x40>)
 80027c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027cc:	2003      	movs	r0, #3
 80027ce:	f000 f8fc 	bl	80029ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d2:	200f      	movs	r0, #15
 80027d4:	f7ff fe60 	bl	8002498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027d8:	f7ff fd6e 	bl	80022b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00

080027e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x20>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x24>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_IncTick+0x24>)
 80027fa:	6013      	str	r3, [r2, #0]
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	2000003c 	.word	0x2000003c
 800280c:	20000750 	.word	0x20000750

08002810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return uwTick;
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_GetTick+0x14>)
 8002816:	681b      	ldr	r3, [r3, #0]
}
 8002818:	4618      	mov	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000750 	.word	0x20000750

08002828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002830:	f7ff ffee 	bl	8002810 <HAL_GetTick>
 8002834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d005      	beq.n	800284e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_Delay+0x44>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800284e:	bf00      	nop
 8002850:	f7ff ffde 	bl	8002810 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d8f7      	bhi.n	8002850 <HAL_Delay+0x28>
  {
  }
}
 8002860:	bf00      	nop
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000003c 	.word	0x2000003c

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	; (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	; (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	; (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	; 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b082      	sub	sp, #8
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff4c 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f2:	f7ff ff61 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 80029f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	6978      	ldr	r0, [r7, #20]
 80029fe:	f7ff ffb1 	bl	8002964 <NVIC_EncodePriority>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ff80 	bl	8002910 <__NVIC_SetPriority>
}
 8002a10:	bf00      	nop
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff54 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	e159      	b.n	8002d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a50:	2201      	movs	r2, #1
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f040 8148 	bne.w	8002cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d005      	beq.n	8002a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d130      	bne.n	8002ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d017      	beq.n	8002b24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	2203      	movs	r2, #3
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d123      	bne.n	8002b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	08da      	lsrs	r2, r3, #3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3208      	adds	r2, #8
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	220f      	movs	r2, #15
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	691a      	ldr	r2, [r3, #16]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	08da      	lsrs	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3208      	adds	r2, #8
 8002b72:	69b9      	ldr	r1, [r7, #24]
 8002b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 80a2 	beq.w	8002cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	4a56      	ldr	r2, [pc, #344]	; (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bca:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd6:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_GPIO_Init+0x2ec>)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <HAL_GPIO_Init+0x2f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d019      	beq.n	8002c36 <HAL_GPIO_Init+0x202>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a48      	ldr	r2, [pc, #288]	; (8002d28 <HAL_GPIO_Init+0x2f4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d013      	beq.n	8002c32 <HAL_GPIO_Init+0x1fe>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a47      	ldr	r2, [pc, #284]	; (8002d2c <HAL_GPIO_Init+0x2f8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d00d      	beq.n	8002c2e <HAL_GPIO_Init+0x1fa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a46      	ldr	r2, [pc, #280]	; (8002d30 <HAL_GPIO_Init+0x2fc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d007      	beq.n	8002c2a <HAL_GPIO_Init+0x1f6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a45      	ldr	r2, [pc, #276]	; (8002d34 <HAL_GPIO_Init+0x300>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_GPIO_Init+0x1f2>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e008      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c26:	2307      	movs	r3, #7
 8002c28:	e006      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e004      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e002      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c36:	2300      	movs	r3, #0
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	f002 0203 	and.w	r2, r2, #3
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	4093      	lsls	r3, r2
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c48:	4935      	ldr	r1, [pc, #212]	; (8002d20 <HAL_GPIO_Init+0x2ec>)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c56:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7a:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca4:	4a24      	ldr	r2, [pc, #144]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002caa:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cce:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd4:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf8:	4a0f      	ldr	r2, [pc, #60]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3301      	adds	r3, #1
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b0f      	cmp	r3, #15
 8002d08:	f67f aea2 	bls.w	8002a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40013800 	.word	0x40013800
 8002d24:	40020000 	.word	0x40020000
 8002d28:	40020400 	.word	0x40020400
 8002d2c:	40020800 	.word	0x40020800
 8002d30:	40020c00 	.word	0x40020c00
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d58:	e003      	b.n	8002d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	041a      	lsls	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	619a      	str	r2, [r3, #24]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d80:	887a      	ldrh	r2, [r7, #2]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	041a      	lsls	r2, r3, #16
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	43d9      	mvns	r1, r3
 8002d8c:	887b      	ldrh	r3, [r7, #2]
 8002d8e:	400b      	ands	r3, r1
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	619a      	str	r2, [r3, #24]
}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da4:	b08f      	sub	sp, #60	; 0x3c
 8002da6:	af0a      	add	r7, sp, #40	; 0x28
 8002da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e10f      	b.n	8002fd4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f008 fc0c 	bl	800b5ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 fc79 	bl	80066ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	687e      	ldr	r6, [r7, #4]
 8002e00:	466d      	mov	r5, sp
 8002e02:	f106 0410 	add.w	r4, r6, #16
 8002e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e12:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e16:	1d33      	adds	r3, r6, #4
 8002e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e1a:	6838      	ldr	r0, [r7, #0]
 8002e1c:	f003 fb50 	bl	80064c0 <USB_CoreInit>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0d0      	b.n	8002fd4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fc67 	bl	800670c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
 8002e42:	e04a      	b.n	8002eda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	333d      	adds	r3, #61	; 0x3d
 8002e54:	2201      	movs	r2, #1
 8002e56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	333c      	adds	r3, #60	; 0x3c
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
 8002e70:	b298      	uxth	r0, r3
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3344      	adds	r3, #68	; 0x44
 8002e80:	4602      	mov	r2, r0
 8002e82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3340      	adds	r3, #64	; 0x40
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3348      	adds	r3, #72	; 0x48
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eac:	7bfa      	ldrb	r2, [r7, #15]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	334c      	adds	r3, #76	; 0x4c
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3354      	adds	r3, #84	; 0x54
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d3af      	bcc.n	8002e44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	e044      	b.n	8002f74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	3301      	adds	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d3b5      	bcc.n	8002eea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	687e      	ldr	r6, [r7, #4]
 8002f86:	466d      	mov	r5, sp
 8002f88:	f106 0410 	add.w	r4, r6, #16
 8002f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f98:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f9c:	1d33      	adds	r3, r6, #4
 8002f9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa0:	6838      	ldr	r0, [r7, #0]
 8002fa2:	f003 fbff 	bl	80067a4 <USB_DevInit>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e00d      	b.n	8002fd4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fd4e 	bl	8007a6e <USB_DevDisconnect>

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_PCD_Start+0x1c>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e020      	b.n	800303a <HAL_PCD_Start+0x5e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b01      	cmp	r3, #1
 8003006:	d109      	bne.n	800301c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800300c:	2b01      	cmp	r3, #1
 800300e:	d005      	beq.n	800301c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f003 fb51 	bl	80066c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fcfe 	bl	8007a2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003042:	b590      	push	{r4, r7, lr}
 8003044:	b08d      	sub	sp, #52	; 0x34
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f004 fdbc 	bl	8007bd6 <USB_GetMode>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 848a 	bne.w	800397a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fd20 	bl	8007ab0 <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8480 	beq.w	8003978 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f004 fd0d 	bl	8007ab0 <USB_ReadInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b02      	cmp	r3, #2
 800309e:	d107      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f002 0202 	and.w	r2, r2, #2
 80030ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 fcfb 	bl	8007ab0 <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d161      	bne.n	8003188 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699a      	ldr	r2, [r3, #24]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0210 	bic.w	r2, r2, #16
 80030d2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3304      	adds	r3, #4
 80030f2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	0c5b      	lsrs	r3, r3, #17
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d124      	bne.n	800314a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003106:	4013      	ands	r3, r2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d035      	beq.n	8003178 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800311a:	b29b      	uxth	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	6a38      	ldr	r0, [r7, #32]
 8003120:	f004 fb32 	bl	8007788 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003130:	441a      	add	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003142:	441a      	add	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	621a      	str	r2, [r3, #32]
 8003148:	e016      	b.n	8003178 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	0c5b      	lsrs	r3, r3, #17
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	2b06      	cmp	r3, #6
 8003154:	d110      	bne.n	8003178 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800315c:	2208      	movs	r2, #8
 800315e:	4619      	mov	r1, r3
 8003160:	6a38      	ldr	r0, [r7, #32]
 8003162:	f004 fb11 	bl	8007788 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003172:	441a      	add	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0210 	orr.w	r2, r2, #16
 8003186:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f004 fc8f 	bl	8007ab0 <USB_ReadInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003198:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800319c:	f040 80a7 	bne.w	80032ee <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f004 fc94 	bl	8007ad6 <USB_ReadDevAllOutEpInterrupt>
 80031ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031b0:	e099      	b.n	80032e6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 808e 	beq.w	80032da <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fcb8 	bl	8007b3e <USB_ReadDevOutEPInterrupt>
 80031ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00c      	beq.n	80031f4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e6:	461a      	mov	r2, r3
 80031e8:	2301      	movs	r3, #1
 80031ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fec2 	bl	8003f78 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00c      	beq.n	8003218 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320a:	461a      	mov	r2, r3
 800320c:	2308      	movs	r3, #8
 800320e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 ff98 	bl	8004148 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	2310      	movs	r3, #16
 8003232:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d030      	beq.n	80032a0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003246:	2b80      	cmp	r3, #128	; 0x80
 8003248:	d109      	bne.n	800325e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4413      	add	r3, r2
 8003270:	3304      	adds	r3, #4
 8003272:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	78db      	ldrb	r3, [r3, #3]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d108      	bne.n	800328e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2200      	movs	r2, #0
 8003280:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	b2db      	uxtb	r3, r3
 8003286:	4619      	mov	r1, r3
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f008 fab5 	bl	800b7f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	4413      	add	r3, r2
 8003296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329a:	461a      	mov	r2, r3
 800329c:	2302      	movs	r3, #2
 800329e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b6:	461a      	mov	r2, r3
 80032b8:	2320      	movs	r3, #32
 80032ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d2:	461a      	mov	r2, r3
 80032d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	3301      	adds	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f47f af62 	bne.w	80031b2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 fbdc 	bl	8007ab0 <USB_ReadInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003302:	f040 80db 	bne.w	80034bc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f004 fbfd 	bl	8007b0a <USB_ReadDevAllInEpInterrupt>
 8003310:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003316:	e0cd      	b.n	80034b4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80c2 	beq.w	80034a8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f004 fc23 	bl	8007b7a <USB_ReadDevInEPInterrupt>
 8003334:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d057      	beq.n	80033f0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	2201      	movs	r2, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	43db      	mvns	r3, r3
 800335a:	69f9      	ldr	r1, [r7, #28]
 800335c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003360:	4013      	ands	r3, r2
 8003362:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003370:	461a      	mov	r2, r3
 8003372:	2301      	movs	r3, #1
 8003374:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d132      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	334c      	adds	r3, #76	; 0x4c
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	3348      	adds	r3, #72	; 0x48
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4419      	add	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4403      	add	r3, r0
 80033b2:	334c      	adds	r3, #76	; 0x4c
 80033b4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d113      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x3a2>
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3354      	adds	r3, #84	; 0x54
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033dc:	461a      	mov	r2, r3
 80033de:	2101      	movs	r1, #1
 80033e0:	f004 fc2a 	bl	8007c38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f008 f97f 	bl	800b6ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	4413      	add	r3, r2
 8003402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003406:	461a      	mov	r2, r3
 8003408:	2308      	movs	r3, #8
 800340a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003422:	461a      	mov	r2, r3
 8003424:	2310      	movs	r3, #16
 8003426:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343e:	461a      	mov	r2, r3
 8003440:	2340      	movs	r3, #64	; 0x40
 8003442:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d023      	beq.n	8003496 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800344e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003450:	6a38      	ldr	r0, [r7, #32]
 8003452:	f003 fb0b 	bl	8006a6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003458:	4613      	mov	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	3338      	adds	r3, #56	; 0x38
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4413      	add	r3, r2
 8003466:	3304      	adds	r3, #4
 8003468:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	78db      	ldrb	r3, [r3, #3]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d108      	bne.n	8003484 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2200      	movs	r2, #0
 8003476:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f008 f9cc 	bl	800b81c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003490:	461a      	mov	r2, r3
 8003492:	2302      	movs	r3, #2
 8003494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fcdb 	bl	8003e5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	3301      	adds	r3, #1
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f47f af2e 	bne.w	8003318 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 faf5 	bl	8007ab0 <USB_ReadInterrupts>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d0:	d122      	bne.n	8003518 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d108      	bne.n	8003502 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034f8:	2100      	movs	r1, #0
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fec2 	bl	8004284 <HAL_PCDEx_LPM_Callback>
 8003500:	e002      	b.n	8003508 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f008 f96a 	bl	800b7dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f004 fac7 	bl	8007ab0 <USB_ReadInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352c:	d112      	bne.n	8003554 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f008 f926 	bl	800b790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003552:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f004 faa9 	bl	8007ab0 <USB_ReadInterrupts>
 800355e:	4603      	mov	r3, r0
 8003560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003568:	f040 80b7 	bne.w	80036da <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2110      	movs	r1, #16
 8003586:	4618      	mov	r0, r3
 8003588:	f003 fa70 	bl	8006a6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358c:	2300      	movs	r3, #0
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003590:	e046      	b.n	8003620 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359e:	461a      	mov	r2, r3
 80035a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b6:	0151      	lsls	r1, r2, #5
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	440a      	add	r2, r1
 80035bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	461a      	mov	r2, r3
 80035d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ea:	0151      	lsls	r1, r2, #5
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	440a      	add	r2, r1
 80035f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360a:	0151      	lsls	r1, r2, #5
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	440a      	add	r2, r1
 8003610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003614:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003618:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	3301      	adds	r3, #1
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003626:	429a      	cmp	r2, r3
 8003628:	d3b3      	bcc.n	8003592 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003638:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800363c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	2b00      	cmp	r3, #0
 8003644:	d016      	beq.n	8003674 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003656:	f043 030b 	orr.w	r3, r3, #11
 800365a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366c:	f043 030b 	orr.w	r3, r3, #11
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
 8003672:	e015      	b.n	80036a0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003686:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800368a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369a:	f043 030b 	orr.w	r3, r3, #11
 800369e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036c4:	461a      	mov	r2, r3
 80036c6:	f004 fab7 	bl	8007c38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 f9e6 	bl	8007ab0 <USB_ReadInterrupts>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ee:	d124      	bne.n	800373a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 fa7c 	bl	8007bf2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f003 fa31 	bl	8006b66 <USB_GetDevSpeed>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681c      	ldr	r4, [r3, #0]
 8003710:	f001 fa28 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8003714:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	4620      	mov	r0, r4
 8003720:	f002 ff30 	bl	8006584 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f008 f80a 	bl	800b73e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003738:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f004 f9b6 	bl	8007ab0 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b08      	cmp	r3, #8
 800374c:	d10a      	bne.n	8003764 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f007 ffe7 	bl	800b722 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695a      	ldr	r2, [r3, #20]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f002 0208 	and.w	r2, r2, #8
 8003762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f004 f9a1 	bl	8007ab0 <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b80      	cmp	r3, #128	; 0x80
 8003776:	d122      	bne.n	80037be <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003784:	2301      	movs	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
 8003788:	e014      	b.n	80037b4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fb27 	bl	8003dfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	3301      	adds	r3, #1
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d3e5      	bcc.n	800378a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 f974 	bl	8007ab0 <USB_ReadInterrupts>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d2:	d13b      	bne.n	800384c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d4:	2301      	movs	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e02b      	b.n	8003832 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3340      	adds	r3, #64	; 0x40
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d115      	bne.n	800382c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003800:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003802:	2b00      	cmp	r3, #0
 8003804:	da12      	bge.n	800382c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	333f      	adds	r3, #63	; 0x3f
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003822:	b2db      	uxtb	r3, r3
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fae8 	bl	8003dfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	3301      	adds	r3, #1
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003838:	429a      	cmp	r2, r3
 800383a:	d3ce      	bcc.n	80037da <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800384a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f004 f92d 	bl	8007ab0 <USB_ReadInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800385c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003860:	d155      	bne.n	800390e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003862:	2301      	movs	r3, #1
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
 8003866:	e045      	b.n	80038f4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	4613      	mov	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d12e      	bne.n	80038ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003890:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003892:	2b00      	cmp	r3, #0
 8003894:	da2b      	bge.n	80038ee <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038a2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d121      	bne.n	80038ee <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ea:	6053      	str	r3, [r2, #4]
            break;
 80038ec:	e007      	b.n	80038fe <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	3301      	adds	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3b4      	bcc.n	8003868 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800390c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f004 f8cc 	bl	8007ab0 <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003922:	d10a      	bne.n	800393a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f007 ff8b 	bl	800b840 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f004 f8b6 	bl	8007ab0 <USB_ReadInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d115      	bne.n	800397a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f007 ff7b 	bl	800b85c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	e000      	b.n	800397a <HAL_PCD_IRQHandler+0x938>
      return;
 8003978:	bf00      	nop
    }
  }
}
 800397a:	3734      	adds	r7, #52	; 0x34
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_PCD_SetAddress+0x1a>
 8003996:	2302      	movs	r3, #2
 8003998:	e013      	b.n	80039c2 <HAL_PCD_SetAddress+0x42>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f004 f814 	bl	80079e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	4608      	mov	r0, r1
 80039d4:	4611      	mov	r1, r2
 80039d6:	461a      	mov	r2, r3
 80039d8:	4603      	mov	r3, r0
 80039da:	70fb      	strb	r3, [r7, #3]
 80039dc:	460b      	mov	r3, r1
 80039de:	803b      	strh	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da0f      	bge.n	8003a10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	3338      	adds	r3, #56	; 0x38
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4413      	add	r3, r2
 8003a04:	3304      	adds	r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	705a      	strb	r2, [r3, #1]
 8003a0e:	e00f      	b.n	8003a30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a3c:	883a      	ldrh	r2, [r7, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	78ba      	ldrb	r2, [r7, #2]
 8003a46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a5a:	78bb      	ldrb	r3, [r7, #2]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d102      	bne.n	8003a66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_PCD_EP_Open+0xaa>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e00e      	b.n	8003a92 <HAL_PCD_EP_Open+0xc8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 f894 	bl	8006bb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a90:	7afb      	ldrb	r3, [r7, #11]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da0f      	bge.n	8003ace <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	3338      	adds	r3, #56	; 0x38
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	705a      	strb	r2, [r3, #1]
 8003acc:	e00f      	b.n	8003aee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_PCD_EP_Close+0x6e>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e00e      	b.n	8003b26 <HAL_PCD_EP_Close+0x8c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68f9      	ldr	r1, [r7, #12]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 f8d2 	bl	8006cc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	7afb      	ldrb	r3, [r7, #11]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	f003 fbb1 	bl	8007308 <USB_EP0StartXfer>
 8003ba6:	e008      	b.n	8003bba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	6979      	ldr	r1, [r7, #20]
 8003bb6:	f003 f95f 	bl	8006e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 020f 	and.w	r2, r3, #15
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	460b      	mov	r3, r1
 8003c02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c04:	7afb      	ldrb	r3, [r7, #11]
 8003c06:	f003 020f 	and.w	r2, r3, #15
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	3338      	adds	r3, #56	; 0x38
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4413      	add	r3, r2
 8003c18:	3304      	adds	r3, #4
 8003c1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2201      	movs	r2, #1
 8003c32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c34:	7afb      	ldrb	r3, [r7, #11]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d102      	bne.n	8003c4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c4e:	7afb      	ldrb	r3, [r7, #11]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	6979      	ldr	r1, [r7, #20]
 8003c66:	f003 fb4f 	bl	8007308 <USB_EP0StartXfer>
 8003c6a:	e008      	b.n	8003c7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	f003 f8fd 	bl	8006e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 020f 	and.w	r2, r3, #15
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d901      	bls.n	8003ca6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e050      	b.n	8003d48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da0f      	bge.n	8003cce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	3338      	adds	r3, #56	; 0x38
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	705a      	strb	r2, [r3, #1]
 8003ccc:	e00d      	b.n	8003cea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_PCD_EP_SetStall+0x82>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e01e      	b.n	8003d48 <HAL_PCD_EP_SetStall+0xc0>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f003 fd8d 	bl	8007838 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10a      	bne.n	8003d3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	b2d9      	uxtb	r1, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f003 ff7d 	bl	8007c38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	f003 020f 	and.w	r2, r3, #15
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d901      	bls.n	8003d6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e042      	b.n	8003df4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da0f      	bge.n	8003d96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	f003 020f 	and.w	r2, r3, #15
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	3338      	adds	r3, #56	; 0x38
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	705a      	strb	r2, [r3, #1]
 8003d94:	e00f      	b.n	8003db6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_PCD_EP_ClrStall+0x86>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e00e      	b.n	8003df4 <HAL_PCD_EP_ClrStall+0xa4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 fd95 	bl	8007914 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	da0c      	bge.n	8003e2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	3338      	adds	r3, #56	; 0x38
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e00c      	b.n	8003e44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	f003 020f 	and.w	r2, r3, #15
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f003 fbb4 	bl	80075b8 <USB_EPStopXfer>
 8003e50:	4603      	mov	r3, r0
 8003e52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e54:	7afb      	ldrb	r3, [r7, #11]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b08a      	sub	sp, #40	; 0x28
 8003e62:	af02      	add	r7, sp, #8
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	3338      	adds	r3, #56	; 0x38
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	3304      	adds	r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d901      	bls.n	8003e96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06c      	b.n	8003f70 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d902      	bls.n	8003eb2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3303      	adds	r3, #3
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eba:	e02b      	b.n	8003f14 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d902      	bls.n	8003ed8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3303      	adds	r3, #3
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6919      	ldr	r1, [r3, #16]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	6978      	ldr	r0, [r7, #20]
 8003ef8:	f003 fc08 	bl	800770c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	441a      	add	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a1a      	ldr	r2, [r3, #32]
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	441a      	add	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d809      	bhi.n	8003f3e <PCD_WriteEmptyTxFifo+0xe0>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d203      	bcs.n	8003f3e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1be      	bne.n	8003ebc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d811      	bhi.n	8003f6e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2201      	movs	r2, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	6939      	ldr	r1, [r7, #16]
 8003f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	333c      	adds	r3, #60	; 0x3c
 8003f90:	3304      	adds	r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d17b      	bne.n	80040a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4a61      	ldr	r2, [pc, #388]	; (8004140 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	f240 80b9 	bls.w	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80b3 	beq.w	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe0:	6093      	str	r3, [r2, #8]
 8003fe2:	e0a7      	b.n	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	6093      	str	r3, [r2, #8]
 8004000:	e098      	b.n	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 8093 	bne.w	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	4a4b      	ldr	r2, [pc, #300]	; (8004140 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d90f      	bls.n	8004036 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	461a      	mov	r2, r3
 800402e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004032:	6093      	str	r3, [r2, #8]
 8004034:	e07e      	b.n	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	3304      	adds	r3, #4
 800404a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	0159      	lsls	r1, r3, #5
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	440b      	add	r3, r1
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004062:	1ad2      	subs	r2, r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d114      	bne.n	8004098 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004080:	461a      	mov	r2, r3
 8004082:	2101      	movs	r1, #1
 8004084:	f003 fdd8 	bl	8007c38 <USB_EP0_OutStart>
 8004088:	e006      	b.n	8004098 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f007 fb0a 	bl	800b6b8 <HAL_PCD_DataOutStageCallback>
 80040a4:	e046      	b.n	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4a26      	ldr	r2, [pc, #152]	; (8004144 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d124      	bne.n	80040f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	461a      	mov	r2, r3
 80040c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ca:	6093      	str	r3, [r2, #8]
 80040cc:	e032      	b.n	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	2320      	movs	r3, #32
 80040e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4619      	mov	r1, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f007 fae1 	bl	800b6b8 <HAL_PCD_DataOutStageCallback>
 80040f6:	e01d      	b.n	8004134 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d114      	bne.n	8004128 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d108      	bne.n	8004128 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004120:	461a      	mov	r2, r3
 8004122:	2100      	movs	r1, #0
 8004124:	f003 fd88 	bl	8007c38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f007 fac2 	bl	800b6b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3720      	adds	r7, #32
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	4f54300a 	.word	0x4f54300a
 8004144:	4f54310a 	.word	0x4f54310a

08004148 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	333c      	adds	r3, #60	; 0x3c
 8004160:	3304      	adds	r3, #4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a15      	ldr	r2, [pc, #84]	; (80041d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d90e      	bls.n	800419c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004184:	2b00      	cmp	r3, #0
 8004186:	d009      	beq.n	800419c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	015a      	lsls	r2, r3, #5
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4413      	add	r3, r2
 8004190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004194:	461a      	mov	r2, r3
 8004196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f007 fa79 	bl	800b694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d90c      	bls.n	80041c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d108      	bne.n	80041c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041bc:	461a      	mov	r2, r3
 80041be:	2101      	movs	r1, #1
 80041c0:	f003 fd3a 	bl	8007c38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	4f54300a 	.word	0x4f54300a

080041d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	70fb      	strb	r3, [r7, #3]
 80041e0:	4613      	mov	r3, r2
 80041e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d107      	bne.n	8004202 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041f2:	883b      	ldrh	r3, [r7, #0]
 80041f4:	0419      	lsls	r1, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	629a      	str	r2, [r3, #40]	; 0x28
 8004200:	e028      	b.n	8004254 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	4413      	add	r3, r2
 800420e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e00d      	b.n	8004232 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	3340      	adds	r3, #64	; 0x40
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4413      	add	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	3301      	adds	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	3b01      	subs	r3, #1
 8004238:	429a      	cmp	r2, r3
 800423a:	d3ec      	bcc.n	8004216 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800423c:	883b      	ldrh	r3, [r7, #0]
 800423e:	0418      	lsls	r0, r3, #16
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	3b01      	subs	r3, #1
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	4302      	orrs	r2, r0
 800424c:	3340      	adds	r3, #64	; 0x40
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e267      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d075      	beq.n	80043a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ba:	4b88      	ldr	r3, [pc, #544]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d00c      	beq.n	80042e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c6:	4b85      	ldr	r3, [pc, #532]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d112      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4b82      	ldr	r3, [pc, #520]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042de:	d10b      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	4b7e      	ldr	r3, [pc, #504]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d05b      	beq.n	80043a4 <HAL_RCC_OscConfig+0x108>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d157      	bne.n	80043a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e242      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d106      	bne.n	8004310 <HAL_RCC_OscConfig+0x74>
 8004302:	4b76      	ldr	r3, [pc, #472]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a75      	ldr	r2, [pc, #468]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e01d      	b.n	800434c <HAL_RCC_OscConfig+0xb0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0x98>
 800431a:	4b70      	ldr	r3, [pc, #448]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6f      	ldr	r2, [pc, #444]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b6d      	ldr	r3, [pc, #436]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6c      	ldr	r2, [pc, #432]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0xb0>
 8004334:	4b69      	ldr	r3, [pc, #420]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a68      	ldr	r2, [pc, #416]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b66      	ldr	r3, [pc, #408]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a65      	ldr	r2, [pc, #404]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800434a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fe fa5c 	bl	8002810 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800435c:	f7fe fa58 	bl	8002810 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e207      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b5b      	ldr	r3, [pc, #364]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0xc0>
 800437a:	e014      	b.n	80043a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe fa48 	bl	8002810 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004384:	f7fe fa44 	bl	8002810 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1f3      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	4b51      	ldr	r3, [pc, #324]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0xe8>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d063      	beq.n	800447a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043b2:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043be:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d11c      	bne.n	8004404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b44      	ldr	r3, [pc, #272]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d116      	bne.n	8004404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_RCC_OscConfig+0x152>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e1c7      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ee:	4b3b      	ldr	r3, [pc, #236]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4937      	ldr	r1, [pc, #220]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	e03a      	b.n	800447a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440c:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <HAL_RCC_OscConfig+0x244>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004412:	f7fe f9fd 	bl	8002810 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800441a:	f7fe f9f9 	bl	8002810 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e1a8      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442c:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004438:	4b28      	ldr	r3, [pc, #160]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4925      	ldr	r1, [pc, #148]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]
 800444c:	e015      	b.n	800447a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444e:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <HAL_RCC_OscConfig+0x244>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fe f9dc 	bl	8002810 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445c:	f7fe f9d8 	bl	8002810 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e187      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d036      	beq.n	80044f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448e:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_RCC_OscConfig+0x248>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fe f9bc 	bl	8002810 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800449c:	f7fe f9b8 	bl	8002810 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e167      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_OscConfig+0x240>)
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x200>
 80044ba:	e01b      	b.n	80044f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCC_OscConfig+0x248>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c2:	f7fe f9a5 	bl	8002810 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	e00e      	b.n	80044e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ca:	f7fe f9a1 	bl	8002810 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d907      	bls.n	80044e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e150      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
 80044dc:	40023800 	.word	0x40023800
 80044e0:	42470000 	.word	0x42470000
 80044e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	4b88      	ldr	r3, [pc, #544]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80044ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ea      	bne.n	80044ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8097 	beq.w	8004630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004506:	4b81      	ldr	r3, [pc, #516]	; (800470c <HAL_RCC_OscConfig+0x470>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	4b7d      	ldr	r3, [pc, #500]	; (800470c <HAL_RCC_OscConfig+0x470>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a7c      	ldr	r2, [pc, #496]	; (800470c <HAL_RCC_OscConfig+0x470>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	4b7a      	ldr	r3, [pc, #488]	; (800470c <HAL_RCC_OscConfig+0x470>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004532:	4b77      	ldr	r3, [pc, #476]	; (8004710 <HAL_RCC_OscConfig+0x474>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d118      	bne.n	8004570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453e:	4b74      	ldr	r3, [pc, #464]	; (8004710 <HAL_RCC_OscConfig+0x474>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a73      	ldr	r2, [pc, #460]	; (8004710 <HAL_RCC_OscConfig+0x474>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454a:	f7fe f961 	bl	8002810 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004552:	f7fe f95d 	bl	8002810 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e10c      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004564:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCC_OscConfig+0x474>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x2ea>
 8004578:	4b64      	ldr	r3, [pc, #400]	; (800470c <HAL_RCC_OscConfig+0x470>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	4a63      	ldr	r2, [pc, #396]	; (800470c <HAL_RCC_OscConfig+0x470>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6713      	str	r3, [r2, #112]	; 0x70
 8004584:	e01c      	b.n	80045c0 <HAL_RCC_OscConfig+0x324>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b05      	cmp	r3, #5
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x30c>
 800458e:	4b5f      	ldr	r3, [pc, #380]	; (800470c <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a5e      	ldr	r2, [pc, #376]	; (800470c <HAL_RCC_OscConfig+0x470>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	6713      	str	r3, [r2, #112]	; 0x70
 800459a:	4b5c      	ldr	r3, [pc, #368]	; (800470c <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a5b      	ldr	r2, [pc, #364]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70
 80045a6:	e00b      	b.n	80045c0 <HAL_RCC_OscConfig+0x324>
 80045a8:	4b58      	ldr	r3, [pc, #352]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ac:	4a57      	ldr	r2, [pc, #348]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	6713      	str	r3, [r2, #112]	; 0x70
 80045b4:	4b55      	ldr	r3, [pc, #340]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	4a54      	ldr	r2, [pc, #336]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80045ba:	f023 0304 	bic.w	r3, r3, #4
 80045be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d015      	beq.n	80045f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fe f922 	bl	8002810 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ce:	e00a      	b.n	80045e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d0:	f7fe f91e 	bl	8002810 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	; 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e0cb      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	4b49      	ldr	r3, [pc, #292]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ee      	beq.n	80045d0 <HAL_RCC_OscConfig+0x334>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f4:	f7fe f90c 	bl	8002810 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fe f908 	bl	8002810 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e0b5      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004612:	4b3e      	ldr	r3, [pc, #248]	; (800470c <HAL_RCC_OscConfig+0x470>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ee      	bne.n	80045fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d105      	bne.n	8004630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004624:	4b39      	ldr	r3, [pc, #228]	; (800470c <HAL_RCC_OscConfig+0x470>)
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	4a38      	ldr	r2, [pc, #224]	; (800470c <HAL_RCC_OscConfig+0x470>)
 800462a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80a1 	beq.w	800477c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463a:	4b34      	ldr	r3, [pc, #208]	; (800470c <HAL_RCC_OscConfig+0x470>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b08      	cmp	r3, #8
 8004644:	d05c      	beq.n	8004700 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d141      	bne.n	80046d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_RCC_OscConfig+0x478>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fe f8dc 	bl	8002810 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465c:	f7fe f8d8 	bl	8002810 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e087      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466e:	4b27      	ldr	r3, [pc, #156]	; (800470c <HAL_RCC_OscConfig+0x470>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	3b01      	subs	r3, #1
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	491b      	ldr	r1, [pc, #108]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a4:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_RCC_OscConfig+0x478>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fe f8b1 	bl	8002810 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046b2:	f7fe f8ad 	bl	8002810 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e05c      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0f0      	beq.n	80046b2 <HAL_RCC_OscConfig+0x416>
 80046d0:	e054      	b.n	800477c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b10      	ldr	r3, [pc, #64]	; (8004714 <HAL_RCC_OscConfig+0x478>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fe f89a 	bl	8002810 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fe f896 	bl	8002810 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e045      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_OscConfig+0x470>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x444>
 80046fe:	e03d      	b.n	800477c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d107      	bne.n	8004718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e038      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
 800470c:	40023800 	.word	0x40023800
 8004710:	40007000 	.word	0x40007000
 8004714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004718:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <HAL_RCC_OscConfig+0x4ec>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d028      	beq.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d121      	bne.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d11a      	bne.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800474e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004750:	4293      	cmp	r3, r2
 8004752:	d111      	bne.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	3b01      	subs	r3, #1
 8004762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d107      	bne.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800

0800478c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0cc      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047a0:	4b68      	ldr	r3, [pc, #416]	; (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d90c      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	4b65      	ldr	r3, [pc, #404]	; (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0b8      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e0:	4b59      	ldr	r3, [pc, #356]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a58      	ldr	r2, [pc, #352]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f8:	4b53      	ldr	r3, [pc, #332]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a52      	ldr	r2, [pc, #328]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b50      	ldr	r3, [pc, #320]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	494d      	ldr	r1, [pc, #308]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d044      	beq.n	80048ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b47      	ldr	r3, [pc, #284]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d119      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e07f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d003      	beq.n	800484a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	2b03      	cmp	r3, #3
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484a:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e06f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485a:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e067      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800486a:	4b37      	ldr	r3, [pc, #220]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 0203 	bic.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4934      	ldr	r1, [pc, #208]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800487c:	f7fd ffc8 	bl	8002810 <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	e00a      	b.n	800489a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004884:	f7fd ffc4 	bl	8002810 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e04f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	4b2b      	ldr	r3, [pc, #172]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 020c 	and.w	r2, r3, #12
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d1eb      	bne.n	8004884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ac:	4b25      	ldr	r3, [pc, #148]	; (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d20c      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b22      	ldr	r3, [pc, #136]	; (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e032      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e0:	4b19      	ldr	r3, [pc, #100]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4916      	ldr	r1, [pc, #88]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048fe:	4b12      	ldr	r3, [pc, #72]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	490e      	ldr	r1, [pc, #56]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004912:	f000 f821 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	490a      	ldr	r1, [pc, #40]	; (800494c <HAL_RCC_ClockConfig+0x1c0>)
 8004924:	5ccb      	ldrb	r3, [r1, r3]
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_RCC_ClockConfig+0x1c4>)
 800492c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_RCC_ClockConfig+0x1c8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fdb0 	bl	8002498 <HAL_InitTick>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023c00 	.word	0x40023c00
 8004948:	40023800 	.word	0x40023800
 800494c:	0800d034 	.word	0x0800d034
 8004950:	20000034 	.word	0x20000034
 8004954:	20000038 	.word	0x20000038

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495c:	b094      	sub	sp, #80	; 0x50
 800495e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	647b      	str	r3, [r7, #68]	; 0x44
 8004964:	2300      	movs	r3, #0
 8004966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004968:	2300      	movs	r3, #0
 800496a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004970:	4b79      	ldr	r3, [pc, #484]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d00d      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x40>
 800497c:	2b08      	cmp	r3, #8
 800497e:	f200 80e1 	bhi.w	8004b44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x34>
 8004986:	2b04      	cmp	r3, #4
 8004988:	d003      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x3a>
 800498a:	e0db      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b73      	ldr	r3, [pc, #460]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x204>)
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004990:	e0db      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004992:	4b73      	ldr	r3, [pc, #460]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004994:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004996:	e0d8      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004998:	4b6f      	ldr	r3, [pc, #444]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049a2:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d063      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ae:	4b6a      	ldr	r3, [pc, #424]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	099b      	lsrs	r3, r3, #6
 80049b4:	2200      	movs	r2, #0
 80049b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30
 80049c2:	2300      	movs	r3, #0
 80049c4:	637b      	str	r3, [r7, #52]	; 0x34
 80049c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ca:	4622      	mov	r2, r4
 80049cc:	462b      	mov	r3, r5
 80049ce:	f04f 0000 	mov.w	r0, #0
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	0159      	lsls	r1, r3, #5
 80049d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049dc:	0150      	lsls	r0, r2, #5
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4621      	mov	r1, r4
 80049e4:	1a51      	subs	r1, r2, r1
 80049e6:	6139      	str	r1, [r7, #16]
 80049e8:	4629      	mov	r1, r5
 80049ea:	eb63 0301 	sbc.w	r3, r3, r1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049fc:	4659      	mov	r1, fp
 80049fe:	018b      	lsls	r3, r1, #6
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a06:	4651      	mov	r1, sl
 8004a08:	018a      	lsls	r2, r1, #6
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a10:	4659      	mov	r1, fp
 8004a12:	eb63 0901 	sbc.w	r9, r3, r1
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a2a:	4690      	mov	r8, r2
 8004a2c:	4699      	mov	r9, r3
 8004a2e:	4623      	mov	r3, r4
 8004a30:	eb18 0303 	adds.w	r3, r8, r3
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	462b      	mov	r3, r5
 8004a38:	eb49 0303 	adc.w	r3, r9, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	024b      	lsls	r3, r1, #9
 8004a4e:	4621      	mov	r1, r4
 8004a50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a54:	4621      	mov	r1, r4
 8004a56:	024a      	lsls	r2, r1, #9
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5e:	2200      	movs	r2, #0
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a68:	f7fc f888 	bl	8000b7c <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	e058      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a76:	4b38      	ldr	r3, [pc, #224]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	099b      	lsrs	r3, r3, #6
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	4611      	mov	r1, r2
 8004a82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a90:	4642      	mov	r2, r8
 8004a92:	464b      	mov	r3, r9
 8004a94:	f04f 0000 	mov.w	r0, #0
 8004a98:	f04f 0100 	mov.w	r1, #0
 8004a9c:	0159      	lsls	r1, r3, #5
 8004a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa2:	0150      	lsls	r0, r2, #5
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aae:	4649      	mov	r1, r9
 8004ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8004acc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	00eb      	lsls	r3, r5, #3
 8004ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ade:	00e2      	lsls	r2, r4, #3
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	461d      	mov	r5, r3
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	18e3      	adds	r3, r4, r3
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	464b      	mov	r3, r9
 8004aec:	eb45 0303 	adc.w	r3, r5, r3
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004afe:	4629      	mov	r1, r5
 8004b00:	028b      	lsls	r3, r1, #10
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b08:	4621      	mov	r1, r4
 8004b0a:	028a      	lsls	r2, r1, #10
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b12:	2200      	movs	r2, #0
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	61fa      	str	r2, [r7, #28]
 8004b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b1c:	f7fc f82e 	bl	8000b7c <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	3301      	adds	r3, #1
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3750      	adds	r7, #80	; 0x50
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	007a1200 	.word	0x007a1200

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000034 	.word	0x20000034

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff fff0 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a9b      	lsrs	r3, r3, #10
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	; (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	0800d044 	.word	0x0800d044

08004ba4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	220f      	movs	r2, #15
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_RCC_GetClockConfig+0x5c>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0203 	and.w	r2, r3, #3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <HAL_RCC_GetClockConfig+0x5c>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <HAL_RCC_GetClockConfig+0x5c>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_GetClockConfig+0x5c>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <HAL_RCC_GetClockConfig+0x60>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0207 	and.w	r2, r3, #7
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	601a      	str	r2, [r3, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40023c00 	.word	0x40023c00

08004c08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e07b      	b.n	8004d12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2a:	d009      	beq.n	8004c40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	61da      	str	r2, [r3, #28]
 8004c32:	e005      	b.n	8004c40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7fd fb58 	bl	8002310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	ea42 0103 	orr.w	r1, r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	0c1b      	lsrs	r3, r3, #16
 8004cde:	f003 0104 	and.w	r1, r3, #4
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0210 	and.w	r2, r3, #16
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	60b9      	str	r1, [r7, #8]
 8004d24:	603b      	str	r3, [r7, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_SPI_Transmit+0x22>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e126      	b.n	8004f8a <HAL_SPI_Transmit+0x270>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d44:	f7fd fd64 	bl	8002810 <HAL_GetTick>
 8004d48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d002      	beq.n	8004d60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d5e:	e10b      	b.n	8004f78 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Transmit+0x52>
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d70:	e102      	b.n	8004f78 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2203      	movs	r2, #3
 8004d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db8:	d10f      	bne.n	8004dda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b40      	cmp	r3, #64	; 0x40
 8004de6:	d007      	beq.n	8004df8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e00:	d14b      	bne.n	8004e9a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Transmit+0xf6>
 8004e0a:	8afb      	ldrh	r3, [r7, #22]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d13e      	bne.n	8004e8e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e34:	e02b      	b.n	8004e8e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d112      	bne.n	8004e6a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	881a      	ldrh	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e68:	e011      	b.n	8004e8e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6a:	f7fd fcd1 	bl	8002810 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d803      	bhi.n	8004e82 <HAL_SPI_Transmit+0x168>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_Transmit+0x16e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e8c:	e074      	b.n	8004f78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1ce      	bne.n	8004e36 <HAL_SPI_Transmit+0x11c>
 8004e98:	e04c      	b.n	8004f34 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SPI_Transmit+0x18e>
 8004ea2:	8afb      	ldrh	r3, [r7, #22]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d140      	bne.n	8004f2a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	7812      	ldrb	r2, [r2, #0]
 8004eb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ece:	e02c      	b.n	8004f2a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d113      	bne.n	8004f06 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	330c      	adds	r3, #12
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f04:	e011      	b.n	8004f2a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f06:	f7fd fc83 	bl	8002810 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d803      	bhi.n	8004f1e <HAL_SPI_Transmit+0x204>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d102      	bne.n	8004f24 <HAL_SPI_Transmit+0x20a>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f28:	e026      	b.n	8004f78 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1cd      	bne.n	8004ed0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	6839      	ldr	r1, [r7, #0]
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fbcb 	bl	80056d4 <SPI_EndRxTxTransaction>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	77fb      	strb	r3, [r7, #31]
 8004f74:	e000      	b.n	8004f78 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b088      	sub	sp, #32
 8004f96:	af02      	add	r7, sp, #8
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fae:	d112      	bne.n	8004fd6 <HAL_SPI_Receive+0x44>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004fc0:	88fa      	ldrh	r2, [r7, #6]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f8f1 	bl	80051b4 <HAL_SPI_TransmitReceive>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	e0ea      	b.n	80051ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_SPI_Receive+0x52>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e0e3      	b.n	80051ac <HAL_SPI_Receive+0x21a>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fec:	f7fd fc10 	bl	8002810 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
 8005000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005002:	e0ca      	b.n	800519a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_Receive+0x7e>
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005014:	e0c1      	b.n	800519a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2204      	movs	r2, #4
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505c:	d10f      	bne.n	800507e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800507c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d007      	beq.n	800509c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d162      	bne.n	800516a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050a4:	e02e      	b.n	8005104 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d115      	bne.n	80050e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f103 020c 	add.w	r2, r3, #12
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050de:	e011      	b.n	8005104 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e0:	f7fd fb96 	bl	8002810 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d803      	bhi.n	80050f8 <HAL_SPI_Receive+0x166>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f6:	d102      	bne.n	80050fe <HAL_SPI_Receive+0x16c>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005102:	e04a      	b.n	800519a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1cb      	bne.n	80050a6 <HAL_SPI_Receive+0x114>
 800510e:	e031      	b.n	8005174 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b01      	cmp	r3, #1
 800511c:	d113      	bne.n	8005146 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	b292      	uxth	r2, r2
 800512a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005144:	e011      	b.n	800516a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005146:	f7fd fb63 	bl	8002810 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d803      	bhi.n	800515e <HAL_SPI_Receive+0x1cc>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d102      	bne.n	8005164 <HAL_SPI_Receive+0x1d2>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005168:	e017      	b.n	800519a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1cd      	bne.n	8005110 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fa45 	bl	8005608 <SPI_EndRxTransaction>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	75fb      	strb	r3, [r7, #23]
 8005196:	e000      	b.n	800519a <HAL_SPI_Receive+0x208>
  }

error :
 8005198:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	; 0x30
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
 80051c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051c2:	2301      	movs	r3, #1
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_SPI_TransmitReceive+0x26>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e18a      	b.n	80054f0 <HAL_SPI_TransmitReceive+0x33c>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051e2:	f7fd fb15 	bl	8002810 <HAL_GetTick>
 80051e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80051f8:	887b      	ldrh	r3, [r7, #2]
 80051fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005200:	2b01      	cmp	r3, #1
 8005202:	d00f      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x70>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520a:	d107      	bne.n	800521c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <HAL_SPI_TransmitReceive+0x68>
 8005214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005218:	2b04      	cmp	r3, #4
 800521a:	d003      	beq.n	8005224 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800521c:	2302      	movs	r3, #2
 800521e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005222:	e15b      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x82>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x82>
 8005230:	887b      	ldrh	r3, [r7, #2]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d103      	bne.n	800523e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800523c:	e14e      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b04      	cmp	r3, #4
 8005248:	d003      	beq.n	8005252 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2205      	movs	r2, #5
 800524e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	887a      	ldrh	r2, [r7, #2]
 8005262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	887a      	ldrh	r2, [r7, #2]
 8005268:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	887a      	ldrh	r2, [r7, #2]
 8005274:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	887a      	ldrh	r2, [r7, #2]
 800527a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d007      	beq.n	80052a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d178      	bne.n	80053a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_SPI_TransmitReceive+0x10a>
 80052b8:	8b7b      	ldrh	r3, [r7, #26]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d166      	bne.n	800538c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e2:	e053      	b.n	800538c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d11b      	bne.n	800532a <HAL_SPI_TransmitReceive+0x176>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d016      	beq.n	800532a <HAL_SPI_TransmitReceive+0x176>
 80052fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d113      	bne.n	800532a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	881a      	ldrh	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d119      	bne.n	800536c <HAL_SPI_TransmitReceive+0x1b8>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d014      	beq.n	800536c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	b292      	uxth	r2, r2
 800534e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	1c9a      	adds	r2, r3, #2
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005368:	2301      	movs	r3, #1
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800536c:	f7fd fa50 	bl	8002810 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005378:	429a      	cmp	r2, r3
 800537a:	d807      	bhi.n	800538c <HAL_SPI_TransmitReceive+0x1d8>
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d003      	beq.n	800538c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800538a:	e0a7      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1a6      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x130>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1a1      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x130>
 80053a0:	e07c      	b.n	800549c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_TransmitReceive+0x1fc>
 80053aa:	8b7b      	ldrh	r3, [r7, #26]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d16b      	bne.n	8005488 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d6:	e057      	b.n	8005488 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d11c      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x26c>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d017      	beq.n	8005420 <HAL_SPI_TransmitReceive+0x26c>
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d114      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	330c      	adds	r3, #12
 8005400:	7812      	ldrb	r2, [r2, #0]
 8005402:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005412:	b29b      	uxth	r3, r3
 8005414:	3b01      	subs	r3, #1
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b01      	cmp	r3, #1
 800542c:	d119      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x2ae>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d014      	beq.n	8005462 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800545e:	2301      	movs	r3, #1
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005462:	f7fd f9d5 	bl	8002810 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800546e:	429a      	cmp	r2, r3
 8005470:	d803      	bhi.n	800547a <HAL_SPI_TransmitReceive+0x2c6>
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d102      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x2cc>
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005486:	e029      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1a2      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x224>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d19d      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f917 	bl	80056d4 <SPI_EndRxTxTransaction>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d006      	beq.n	80054ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054b8:	e010      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	e000      	b.n	80054dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80054da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3730      	adds	r7, #48	; 0x30
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005508:	f7fd f982 	bl	8002810 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	4413      	add	r3, r2
 8005516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005518:	f7fd f97a 	bl	8002810 <HAL_GetTick>
 800551c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800551e:	4b39      	ldr	r3, [pc, #228]	; (8005604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	015b      	lsls	r3, r3, #5
 8005524:	0d1b      	lsrs	r3, r3, #20
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800552e:	e054      	b.n	80055da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d050      	beq.n	80055da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005538:	f7fd f96a 	bl	8002810 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	429a      	cmp	r2, r3
 8005546:	d902      	bls.n	800554e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d13d      	bne.n	80055ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800555c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005566:	d111      	bne.n	800558c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005570:	d004      	beq.n	800557c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557a:	d107      	bne.n	800558c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005594:	d10f      	bne.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e017      	b.n	80055fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d19b      	bne.n	8005530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000034 	.word	0x20000034

08005608 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561c:	d111      	bne.n	8005642 <SPI_EndRxTransaction+0x3a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005626:	d004      	beq.n	8005632 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005630:	d107      	bne.n	8005642 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005640:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800564a:	d12a      	bne.n	80056a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005654:	d012      	beq.n	800567c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2200      	movs	r2, #0
 800565e:	2180      	movs	r1, #128	; 0x80
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff ff49 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d02d      	beq.n	80056c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	f043 0220 	orr.w	r2, r3, #32
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e026      	b.n	80056ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2200      	movs	r2, #0
 8005684:	2101      	movs	r1, #1
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff ff36 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01a      	beq.n	80056c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e013      	b.n	80056ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2200      	movs	r2, #0
 80056aa:	2101      	movs	r1, #1
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff ff23 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d007      	beq.n	80056c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	f043 0220 	orr.w	r2, r3, #32
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e000      	b.n	80056ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056e0:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <SPI_EndRxTxTransaction+0x7c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <SPI_EndRxTxTransaction+0x80>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	0d5b      	lsrs	r3, r3, #21
 80056ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d112      	bne.n	8005726 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2200      	movs	r2, #0
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff fef4 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d016      	beq.n	8005744 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e00f      	b.n	8005746 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3b01      	subs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d0f2      	beq.n	8005726 <SPI_EndRxTxTransaction+0x52>
 8005740:	e000      	b.n	8005744 <SPI_EndRxTxTransaction+0x70>
        break;
 8005742:	bf00      	nop
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000034 	.word	0x20000034
 8005754:	165e9f81 	.word	0x165e9f81

08005758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e041      	b.n	80057ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f839 	bl	80057f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f000 fb8c 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b085      	sub	sp, #20
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b01      	cmp	r3, #1
 800581e:	d001      	beq.n	8005824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e044      	b.n	80058ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0201 	orr.w	r2, r2, #1
 800583a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <HAL_TIM_Base_Start_IT+0xb0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584e:	d013      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1a      	ldr	r2, [pc, #104]	; (80058c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a19      	ldr	r2, [pc, #100]	; (80058c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x6c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a16      	ldr	r2, [pc, #88]	; (80058cc <HAL_TIM_Base_Start_IT+0xc0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d111      	bne.n	800589c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b06      	cmp	r3, #6
 8005888:	d010      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589a:	e007      	b.n	80058ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40014000 	.word	0x40014000

080058d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e041      	b.n	8005966 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fc fd72 	bl	80023e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3304      	adds	r3, #4
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f000 fad0 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <HAL_TIM_PWM_Start+0x24>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	bf14      	ite	ne
 800598c:	2301      	movne	r3, #1
 800598e:	2300      	moveq	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	e022      	b.n	80059da <HAL_TIM_PWM_Start+0x6a>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b04      	cmp	r3, #4
 8005998:	d109      	bne.n	80059ae <HAL_TIM_PWM_Start+0x3e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	bf14      	ite	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	2300      	moveq	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	e015      	b.n	80059da <HAL_TIM_PWM_Start+0x6a>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d109      	bne.n	80059c8 <HAL_TIM_PWM_Start+0x58>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	e008      	b.n	80059da <HAL_TIM_PWM_Start+0x6a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	bf14      	ite	ne
 80059d4:	2301      	movne	r3, #1
 80059d6:	2300      	moveq	r3, #0
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e068      	b.n	8005ab4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Start+0x82>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f0:	e013      	b.n	8005a1a <HAL_TIM_PWM_Start+0xaa>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_PWM_Start+0x92>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a00:	e00b      	b.n	8005a1a <HAL_TIM_PWM_Start+0xaa>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0xa2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a10:	e003      	b.n	8005a1a <HAL_TIM_PWM_Start+0xaa>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fc52 	bl	80062cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a23      	ldr	r2, [pc, #140]	; (8005abc <HAL_TIM_PWM_Start+0x14c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d107      	bne.n	8005a42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <HAL_TIM_PWM_Start+0x14c>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x10e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d013      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x10e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_TIM_PWM_Start+0x150>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x10e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a17      	ldr	r2, [pc, #92]	; (8005ac4 <HAL_TIM_PWM_Start+0x154>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x10e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <HAL_TIM_PWM_Start+0x158>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x10e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a14      	ldr	r2, [pc, #80]	; (8005acc <HAL_TIM_PWM_Start+0x15c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d111      	bne.n	8005aa2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b06      	cmp	r3, #6
 8005a8e:	d010      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa0:	e007      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0201 	orr.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	40014000 	.word	0x40014000

08005ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d122      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d11b      	bne.n	8005b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0202 	mvn.w	r2, #2
 8005afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9b0 	bl	8005e78 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e005      	b.n	8005b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9a2 	bl	8005e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f9b3 	bl	8005e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d122      	bne.n	8005b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d11b      	bne.n	8005b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0204 	mvn.w	r2, #4
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f986 	bl	8005e78 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f978 	bl	8005e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f989 	bl	8005e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d122      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0208 	mvn.w	r2, #8
 8005ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f95c 	bl	8005e78 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f94e 	bl	8005e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f95f 	bl	8005e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d122      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d11b      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0210 	mvn.w	r2, #16
 8005bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f932 	bl	8005e78 <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f924 	bl	8005e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f935 	bl	8005e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10e      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0201 	mvn.w	r2, #1
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc fb1a 	bl	8002288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5e:	2b80      	cmp	r3, #128	; 0x80
 8005c60:	d10e      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6c:	2b80      	cmp	r3, #128	; 0x80
 8005c6e:	d107      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fc16 	bl	80064ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d10e      	bne.n	8005cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d107      	bne.n	8005cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f8fa 	bl	8005ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d10e      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d107      	bne.n	8005cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0220 	mvn.w	r2, #32
 8005cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fbe0 	bl	8006498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e0ae      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b0c      	cmp	r3, #12
 8005d0a:	f200 809f 	bhi.w	8005e4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d0e:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d14:	08005d49 	.word	0x08005d49
 8005d18:	08005e4d 	.word	0x08005e4d
 8005d1c:	08005e4d 	.word	0x08005e4d
 8005d20:	08005e4d 	.word	0x08005e4d
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005e4d 	.word	0x08005e4d
 8005d2c:	08005e4d 	.word	0x08005e4d
 8005d30:	08005e4d 	.word	0x08005e4d
 8005d34:	08005dcb 	.word	0x08005dcb
 8005d38:	08005e4d 	.word	0x08005e4d
 8005d3c:	08005e4d 	.word	0x08005e4d
 8005d40:	08005e4d 	.word	0x08005e4d
 8005d44:	08005e0b 	.word	0x08005e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 f930 	bl	8005fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0208 	orr.w	r2, r2, #8
 8005d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0204 	bic.w	r2, r2, #4
 8005d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6999      	ldr	r1, [r3, #24]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	619a      	str	r2, [r3, #24]
      break;
 8005d86:	e064      	b.n	8005e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f976 	bl	8006080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6999      	ldr	r1, [r3, #24]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	021a      	lsls	r2, r3, #8
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	619a      	str	r2, [r3, #24]
      break;
 8005dc8:	e043      	b.n	8005e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f9c1 	bl	8006158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0208 	orr.w	r2, r2, #8
 8005de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0204 	bic.w	r2, r2, #4
 8005df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69d9      	ldr	r1, [r3, #28]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	61da      	str	r2, [r3, #28]
      break;
 8005e08:	e023      	b.n	8005e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fa0b 	bl	800622c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69d9      	ldr	r1, [r3, #28]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	021a      	lsls	r2, r3, #8
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	61da      	str	r2, [r3, #28]
      break;
 8005e4a:	e002      	b.n	8005e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a34      	ldr	r2, [pc, #208]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00f      	beq.n	8005eec <TIM_Base_SetConfig+0x38>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed2:	d00b      	beq.n	8005eec <TIM_Base_SetConfig+0x38>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a31      	ldr	r2, [pc, #196]	; (8005f9c <TIM_Base_SetConfig+0xe8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_Base_SetConfig+0x38>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a30      	ldr	r2, [pc, #192]	; (8005fa0 <TIM_Base_SetConfig+0xec>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0x38>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a2f      	ldr	r2, [pc, #188]	; (8005fa4 <TIM_Base_SetConfig+0xf0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d108      	bne.n	8005efe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a25      	ldr	r2, [pc, #148]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01b      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0c:	d017      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <TIM_Base_SetConfig+0xe8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <TIM_Base_SetConfig+0xec>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a20      	ldr	r2, [pc, #128]	; (8005fa4 <TIM_Base_SetConfig+0xf0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1f      	ldr	r2, [pc, #124]	; (8005fa8 <TIM_Base_SetConfig+0xf4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1e      	ldr	r2, [pc, #120]	; (8005fac <TIM_Base_SetConfig+0xf8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_Base_SetConfig+0x8a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <TIM_Base_SetConfig+0xfc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d108      	bne.n	8005f50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d103      	bne.n	8005f84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	615a      	str	r2, [r3, #20]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0303 	bic.w	r3, r3, #3
 8005fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f023 0302 	bic.w	r3, r3, #2
 8005ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a1c      	ldr	r2, [pc, #112]	; (800607c <TIM_OC1_SetConfig+0xc8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10c      	bne.n	800602a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0308 	bic.w	r3, r3, #8
 8006016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 0304 	bic.w	r3, r3, #4
 8006028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a13      	ldr	r2, [pc, #76]	; (800607c <TIM_OC1_SetConfig+0xc8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d111      	bne.n	8006056 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	4313      	orrs	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	621a      	str	r2, [r3, #32]
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40010000 	.word	0x40010000

08006080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0210 	bic.w	r2, r3, #16
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0320 	bic.w	r3, r3, #32
 80060ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <TIM_OC2_SetConfig+0xd4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10d      	bne.n	80060fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a15      	ldr	r2, [pc, #84]	; (8006154 <TIM_OC2_SetConfig+0xd4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d113      	bne.n	800612c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800610a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000

08006158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	021b      	lsls	r3, r3, #8
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <TIM_OC3_SetConfig+0xd0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d10d      	bne.n	80061d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a14      	ldr	r2, [pc, #80]	; (8006228 <TIM_OC3_SetConfig+0xd0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d113      	bne.n	8006202 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	621a      	str	r2, [r3, #32]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40010000 	.word	0x40010000

0800622c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	031b      	lsls	r3, r3, #12
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <TIM_OC4_SetConfig+0x9c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d109      	bne.n	80062a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	019b      	lsls	r3, r3, #6
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40010000 	.word	0x40010000

080062cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	2201      	movs	r2, #1
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1a      	ldr	r2, [r3, #32]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	401a      	ands	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6a1a      	ldr	r2, [r3, #32]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	431a      	orrs	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800632c:	2302      	movs	r3, #2
 800632e:	e050      	b.n	80063d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1c      	ldr	r2, [pc, #112]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d018      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637c:	d013      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a18      	ldr	r2, [pc, #96]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00e      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d009      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a15      	ldr	r2, [pc, #84]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d004      	beq.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d10c      	bne.n	80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40000400 	.word	0x40000400
 80063e8:	40000800 	.word	0x40000800
 80063ec:	40000c00 	.word	0x40000c00
 80063f0:	40014000 	.word	0x40014000

080063f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800640c:	2302      	movs	r3, #2
 800640e:	e03d      	b.n	800648c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064c0:	b084      	sub	sp, #16
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	f107 001c 	add.w	r0, r7, #28
 80064ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d122      	bne.n	800651e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006502:	2b01      	cmp	r3, #1
 8006504:	d105      	bne.n	8006512 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f001 fbee 	bl	8007cf4 <USB_CoreReset>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	e01a      	b.n	8006554 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fbe2 	bl	8007cf4 <USB_CoreReset>
 8006530:	4603      	mov	r3, r0
 8006532:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	639a      	str	r2, [r3, #56]	; 0x38
 8006546:	e005      	b.n	8006554 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10b      	bne.n	8006572 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f043 0206 	orr.w	r2, r3, #6
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006572:	7bfb      	ldrb	r3, [r7, #15]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800657e:	b004      	add	sp, #16
 8006580:	4770      	bx	lr
	...

08006584 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	2b02      	cmp	r3, #2
 8006596:	d165      	bne.n	8006664 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4a41      	ldr	r2, [pc, #260]	; (80066a0 <USB_SetTurnaroundTime+0x11c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d906      	bls.n	80065ae <USB_SetTurnaroundTime+0x2a>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4a40      	ldr	r2, [pc, #256]	; (80066a4 <USB_SetTurnaroundTime+0x120>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d202      	bcs.n	80065ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80065a8:	230f      	movs	r3, #15
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	e062      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	4a3c      	ldr	r2, [pc, #240]	; (80066a4 <USB_SetTurnaroundTime+0x120>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d306      	bcc.n	80065c4 <USB_SetTurnaroundTime+0x40>
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	4a3b      	ldr	r2, [pc, #236]	; (80066a8 <USB_SetTurnaroundTime+0x124>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d202      	bcs.n	80065c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80065be:	230e      	movs	r3, #14
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e057      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4a38      	ldr	r2, [pc, #224]	; (80066a8 <USB_SetTurnaroundTime+0x124>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d306      	bcc.n	80065da <USB_SetTurnaroundTime+0x56>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	4a37      	ldr	r2, [pc, #220]	; (80066ac <USB_SetTurnaroundTime+0x128>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d202      	bcs.n	80065da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80065d4:	230d      	movs	r3, #13
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e04c      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4a33      	ldr	r2, [pc, #204]	; (80066ac <USB_SetTurnaroundTime+0x128>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d306      	bcc.n	80065f0 <USB_SetTurnaroundTime+0x6c>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <USB_SetTurnaroundTime+0x12c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d802      	bhi.n	80065f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80065ea:	230c      	movs	r3, #12
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e041      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4a2f      	ldr	r2, [pc, #188]	; (80066b0 <USB_SetTurnaroundTime+0x12c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d906      	bls.n	8006606 <USB_SetTurnaroundTime+0x82>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4a2e      	ldr	r2, [pc, #184]	; (80066b4 <USB_SetTurnaroundTime+0x130>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d802      	bhi.n	8006606 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006600:	230b      	movs	r3, #11
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	e036      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4a2a      	ldr	r2, [pc, #168]	; (80066b4 <USB_SetTurnaroundTime+0x130>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d906      	bls.n	800661c <USB_SetTurnaroundTime+0x98>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4a29      	ldr	r2, [pc, #164]	; (80066b8 <USB_SetTurnaroundTime+0x134>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d802      	bhi.n	800661c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006616:	230a      	movs	r3, #10
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e02b      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4a26      	ldr	r2, [pc, #152]	; (80066b8 <USB_SetTurnaroundTime+0x134>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d906      	bls.n	8006632 <USB_SetTurnaroundTime+0xae>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4a25      	ldr	r2, [pc, #148]	; (80066bc <USB_SetTurnaroundTime+0x138>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d202      	bcs.n	8006632 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800662c:	2309      	movs	r3, #9
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	e020      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	4a21      	ldr	r2, [pc, #132]	; (80066bc <USB_SetTurnaroundTime+0x138>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d306      	bcc.n	8006648 <USB_SetTurnaroundTime+0xc4>
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4a20      	ldr	r2, [pc, #128]	; (80066c0 <USB_SetTurnaroundTime+0x13c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d802      	bhi.n	8006648 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006642:	2308      	movs	r3, #8
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	e015      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <USB_SetTurnaroundTime+0x13c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d906      	bls.n	800665e <USB_SetTurnaroundTime+0xda>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4a1c      	ldr	r2, [pc, #112]	; (80066c4 <USB_SetTurnaroundTime+0x140>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d202      	bcs.n	800665e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006658:	2307      	movs	r3, #7
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	e00a      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800665e:	2306      	movs	r3, #6
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	e007      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006664:	79fb      	ldrb	r3, [r7, #7]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800666a:	2309      	movs	r3, #9
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	e001      	b.n	8006674 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006670:	2309      	movs	r3, #9
 8006672:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800668c:	431a      	orrs	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	00d8acbf 	.word	0x00d8acbf
 80066a4:	00e4e1c0 	.word	0x00e4e1c0
 80066a8:	00f42400 	.word	0x00f42400
 80066ac:	01067380 	.word	0x01067380
 80066b0:	011a499f 	.word	0x011a499f
 80066b4:	01312cff 	.word	0x01312cff
 80066b8:	014ca43f 	.word	0x014ca43f
 80066bc:	016e3600 	.word	0x016e3600
 80066c0:	01a6ab1f 	.word	0x01a6ab1f
 80066c4:	01e84800 	.word	0x01e84800

080066c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f043 0201 	orr.w	r2, r3, #1
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f023 0201 	bic.w	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006728:	78fb      	ldrb	r3, [r7, #3]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d115      	bne.n	800675a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800673a:	2001      	movs	r0, #1
 800673c:	f7fc f874 	bl	8002828 <HAL_Delay>
      ms++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f001 fa45 	bl	8007bd6 <USB_GetMode>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d01e      	beq.n	8006790 <USB_SetCurrentMode+0x84>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b31      	cmp	r3, #49	; 0x31
 8006756:	d9f0      	bls.n	800673a <USB_SetCurrentMode+0x2e>
 8006758:	e01a      	b.n	8006790 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d115      	bne.n	800678c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800676c:	2001      	movs	r0, #1
 800676e:	f7fc f85b 	bl	8002828 <HAL_Delay>
      ms++;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3301      	adds	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fa2c 	bl	8007bd6 <USB_GetMode>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d005      	beq.n	8006790 <USB_SetCurrentMode+0x84>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b31      	cmp	r3, #49	; 0x31
 8006788:	d9f0      	bls.n	800676c <USB_SetCurrentMode+0x60>
 800678a:	e001      	b.n	8006790 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e005      	b.n	800679c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b32      	cmp	r3, #50	; 0x32
 8006794:	d101      	bne.n	800679a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067a4:	b084      	sub	sp, #16
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b086      	sub	sp, #24
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
 80067c2:	e009      	b.n	80067d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	3340      	adds	r3, #64	; 0x40
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3301      	adds	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b0e      	cmp	r3, #14
 80067dc:	d9f2      	bls.n	80067c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11c      	bne.n	800681e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067f2:	f043 0302 	orr.w	r3, r3, #2
 80067f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
 800681c:	e00b      	b.n	8006836 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800683c:	461a      	mov	r2, r3
 800683e:	2300      	movs	r3, #0
 8006840:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006848:	4619      	mov	r1, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006850:	461a      	mov	r2, r3
 8006852:	680b      	ldr	r3, [r1, #0]
 8006854:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	2b01      	cmp	r3, #1
 800685a:	d10c      	bne.n	8006876 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006862:	2100      	movs	r1, #0
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f965 	bl	8006b34 <USB_SetDevSpeed>
 800686a:	e008      	b.n	800687e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800686c:	2101      	movs	r1, #1
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f960 	bl	8006b34 <USB_SetDevSpeed>
 8006874:	e003      	b.n	800687e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006876:	2103      	movs	r1, #3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f95b 	bl	8006b34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800687e:	2110      	movs	r1, #16
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f8f3 	bl	8006a6c <USB_FlushTxFifo>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f91f 	bl	8006ad4 <USB_FlushRxFifo>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a6:	461a      	mov	r2, r3
 80068a8:	2300      	movs	r3, #0
 80068aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	461a      	mov	r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068be:	461a      	mov	r2, r3
 80068c0:	2300      	movs	r3, #0
 80068c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c4:	2300      	movs	r3, #0
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	e043      	b.n	8006952 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e0:	d118      	bne.n	8006914 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	461a      	mov	r2, r3
 80068f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	e013      	b.n	8006926 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690a:	461a      	mov	r2, r3
 800690c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	e008      	b.n	8006926 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	461a      	mov	r2, r3
 8006922:	2300      	movs	r3, #0
 8006924:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006932:	461a      	mov	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006944:	461a      	mov	r2, r3
 8006946:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800694a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	3301      	adds	r3, #1
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	429a      	cmp	r2, r3
 8006958:	d3b7      	bcc.n	80068ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	e043      	b.n	80069e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006976:	d118      	bne.n	80069aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	461a      	mov	r2, r3
 800698c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e013      	b.n	80069bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	461a      	mov	r2, r3
 80069a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	e008      	b.n	80069bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	461a      	mov	r2, r3
 80069b8:	2300      	movs	r3, #0
 80069ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c8:	461a      	mov	r2, r3
 80069ca:	2300      	movs	r3, #0
 80069cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	461a      	mov	r2, r3
 80069dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3301      	adds	r3, #1
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d3b7      	bcc.n	8006960 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f043 0210 	orr.w	r2, r3, #16
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	699a      	ldr	r2, [r3, #24]
 8006a28:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <USB_DevInit+0x2c4>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f043 0208 	orr.w	r2, r3, #8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d107      	bne.n	8006a58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a50:	f043 0304 	orr.w	r3, r3, #4
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a64:	b004      	add	sp, #16
 8006a66:	4770      	bx	lr
 8006a68:	803c3800 	.word	0x803c3800

08006a6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <USB_FlushTxFifo+0x64>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e01b      	b.n	8006ac4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	daf2      	bge.n	8006a7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	019b      	lsls	r3, r3, #6
 8006a9c:	f043 0220 	orr.w	r2, r3, #32
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a08      	ldr	r2, [pc, #32]	; (8006ad0 <USB_FlushTxFifo+0x64>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e006      	b.n	8006ac4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d0f0      	beq.n	8006aa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	00030d40 	.word	0x00030d40

08006ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a11      	ldr	r2, [pc, #68]	; (8006b30 <USB_FlushRxFifo+0x5c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d901      	bls.n	8006af2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e018      	b.n	8006b24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	daf2      	bge.n	8006ae0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2210      	movs	r2, #16
 8006b02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <USB_FlushRxFifo+0x5c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d901      	bls.n	8006b16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e006      	b.n	8006b24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b10      	cmp	r3, #16
 8006b20:	d0f0      	beq.n	8006b04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	00030d40 	.word	0x00030d40

08006b34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b54:	4313      	orrs	r3, r2
 8006b56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b087      	sub	sp, #28
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 0306 	and.w	r3, r3, #6
 8006b7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]
 8006b8a:	e00a      	b.n	8006ba2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d002      	beq.n	8006b98 <USB_GetDevSpeed+0x32>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b06      	cmp	r3, #6
 8006b96:	d102      	bne.n	8006b9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	75fb      	strb	r3, [r7, #23]
 8006b9c:	e001      	b.n	8006ba2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b9e:	230f      	movs	r3, #15
 8006ba0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	785b      	ldrb	r3, [r3, #1]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d13a      	bne.n	8006c42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd2:	69da      	ldr	r2, [r3, #28]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	2101      	movs	r1, #1
 8006bde:	fa01 f303 	lsl.w	r3, r1, r3
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	68f9      	ldr	r1, [r7, #12]
 8006be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bea:	4313      	orrs	r3, r2
 8006bec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d155      	bne.n	8006cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	791b      	ldrb	r3, [r3, #4]
 8006c1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	059b      	lsls	r3, r3, #22
 8006c26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c3e:	6013      	str	r3, [r2, #0]
 8006c40:	e036      	b.n	8006cb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	2101      	movs	r1, #1
 8006c54:	fa01 f303 	lsl.w	r3, r1, r3
 8006c58:	041b      	lsls	r3, r3, #16
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c60:	4313      	orrs	r3, r2
 8006c62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d11a      	bne.n	8006cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	791b      	ldrb	r3, [r3, #4]
 8006c94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c96:	430b      	orrs	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	785b      	ldrb	r3, [r3, #1]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d161      	bne.n	8006da0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cf2:	d11f      	bne.n	8006d34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	2101      	movs	r1, #1
 8006d46:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	68f9      	ldr	r1, [r7, #12]
 8006d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d54:	4013      	ands	r3, r2
 8006d56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	2101      	movs	r1, #1
 8006d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	43db      	mvns	r3, r3
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d78:	4013      	ands	r3, r2
 8006d7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	0159      	lsls	r1, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	440b      	add	r3, r1
 8006d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d96:	4619      	mov	r1, r3
 8006d98:	4b35      	ldr	r3, [pc, #212]	; (8006e70 <USB_DeactivateEndpoint+0x1b0>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	600b      	str	r3, [r1, #0]
 8006d9e:	e060      	b.n	8006e62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006db6:	d11f      	bne.n	8006df8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006df6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	2101      	movs	r1, #1
 8006e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	43db      	mvns	r3, r3
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e18:	4013      	ands	r3, r2
 8006e1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	43db      	mvns	r3, r3
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	0159      	lsls	r1, r3, #5
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	440b      	add	r3, r1
 8006e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <USB_DeactivateEndpoint+0x1b4>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	ec337800 	.word	0xec337800
 8006e74:	eff37800 	.word	0xeff37800

08006e78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	f040 815c 	bne.w	8007152 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d132      	bne.n	8006f08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	0151      	lsls	r1, r2, #5
 8006eb4:	69fa      	ldr	r2, [r7, #28]
 8006eb6:	440a      	add	r2, r1
 8006eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ebc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ec0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	0151      	lsls	r1, r2, #5
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	440a      	add	r2, r1
 8006edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ee0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f00:	0cdb      	lsrs	r3, r3, #19
 8006f02:	04db      	lsls	r3, r3, #19
 8006f04:	6113      	str	r3, [r2, #16]
 8006f06:	e074      	b.n	8006ff2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f22:	0cdb      	lsrs	r3, r3, #19
 8006f24:	04db      	lsls	r3, r3, #19
 8006f26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6999      	ldr	r1, [r3, #24]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	440b      	add	r3, r1
 8006f64:	1e59      	subs	r1, r3, #1
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f6e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006f70:	4b9d      	ldr	r3, [pc, #628]	; (80071e8 <USB_EPStartXfer+0x370>)
 8006f72:	400b      	ands	r3, r1
 8006f74:	69b9      	ldr	r1, [r7, #24]
 8006f76:	0148      	lsls	r0, r1, #5
 8006f78:	69f9      	ldr	r1, [r7, #28]
 8006f7a:	4401      	add	r1, r0
 8006f7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f80:	4313      	orrs	r3, r2
 8006f82:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f9a:	69b9      	ldr	r1, [r7, #24]
 8006f9c:	0148      	lsls	r0, r1, #5
 8006f9e:	69f9      	ldr	r1, [r7, #28]
 8006fa0:	4401      	add	r1, r0
 8006fa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	791b      	ldrb	r3, [r3, #4]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d11f      	bne.n	8006ff2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006fd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ff0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d14b      	bne.n	8007090 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d009      	beq.n	8007014 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700c:	461a      	mov	r2, r3
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	791b      	ldrb	r3, [r3, #4]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d128      	bne.n	800706e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007028:	2b00      	cmp	r3, #0
 800702a:	d110      	bne.n	800704e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	e00f      	b.n	800706e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800706c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007088:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	e133      	b.n	80072f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	791b      	ldrb	r3, [r3, #4]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d015      	beq.n	80070e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 811b 	beq.w	80072f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	2101      	movs	r1, #1
 80070d4:	fa01 f303 	lsl.w	r3, r1, r3
 80070d8:	69f9      	ldr	r1, [r7, #28]
 80070da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070de:	4313      	orrs	r3, r2
 80070e0:	634b      	str	r3, [r1, #52]	; 0x34
 80070e2:	e109      	b.n	80072f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d110      	bne.n	8007116 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	0151      	lsls	r1, r2, #5
 8007106:	69fa      	ldr	r2, [r7, #28]
 8007108:	440a      	add	r2, r1
 800710a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800710e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	e00f      	b.n	8007136 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007134:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6919      	ldr	r1, [r3, #16]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	781a      	ldrb	r2, [r3, #0]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	b298      	uxth	r0, r3
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4603      	mov	r3, r0
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fade 	bl	800770c <USB_WritePacket>
 8007150:	e0d2      	b.n	80072f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716c:	0cdb      	lsrs	r3, r3, #19
 800716e:	04db      	lsls	r3, r3, #19
 8007170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007194:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d126      	bne.n	80071ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b4:	69b9      	ldr	r1, [r7, #24]
 80071b6:	0148      	lsls	r0, r1, #5
 80071b8:	69f9      	ldr	r1, [r7, #28]
 80071ba:	4401      	add	r1, r0
 80071bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071c0:	4313      	orrs	r3, r2
 80071c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	0151      	lsls	r1, r2, #5
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	440a      	add	r2, r1
 80071da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071e2:	6113      	str	r3, [r2, #16]
 80071e4:	e03a      	b.n	800725c <USB_EPStartXfer+0x3e4>
 80071e6:	bf00      	nop
 80071e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	1e5a      	subs	r2, r3, #1
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	8afa      	ldrh	r2, [r7, #22]
 8007208:	fb03 f202 	mul.w	r2, r3, r2
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	8afb      	ldrh	r3, [r7, #22]
 8007220:	04d9      	lsls	r1, r3, #19
 8007222:	4b38      	ldr	r3, [pc, #224]	; (8007304 <USB_EPStartXfer+0x48c>)
 8007224:	400b      	ands	r3, r1
 8007226:	69b9      	ldr	r1, [r7, #24]
 8007228:	0148      	lsls	r0, r1, #5
 800722a:	69f9      	ldr	r1, [r7, #28]
 800722c:	4401      	add	r1, r0
 800722e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007232:	4313      	orrs	r3, r2
 8007234:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	0148      	lsls	r0, r1, #5
 8007250:	69f9      	ldr	r1, [r7, #28]
 8007252:	4401      	add	r1, r0
 8007254:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007258:	4313      	orrs	r3, r2
 800725a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d10d      	bne.n	800727e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6919      	ldr	r1, [r3, #16]
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800727a:	460a      	mov	r2, r1
 800727c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	791b      	ldrb	r3, [r3, #4]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d128      	bne.n	80072d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007292:	2b00      	cmp	r3, #0
 8007294:	d110      	bne.n	80072b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	015a      	lsls	r2, r3, #5
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4413      	add	r3, r2
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	e00f      	b.n	80072d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3720      	adds	r7, #32
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	1ff80000 	.word	0x1ff80000

08007308 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	2b01      	cmp	r3, #1
 8007326:	f040 80ce 	bne.w	80074c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d132      	bne.n	8007398 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	0151      	lsls	r1, r2, #5
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	440a      	add	r2, r1
 8007348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800734c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007350:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007390:	0cdb      	lsrs	r3, r3, #19
 8007392:	04db      	lsls	r3, r3, #19
 8007394:	6113      	str	r3, [r2, #16]
 8007396:	e04e      	b.n	8007436 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b2:	0cdb      	lsrs	r3, r3, #19
 80073b4:	04db      	lsls	r3, r3, #19
 80073b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	699a      	ldr	r2, [r3, #24]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d903      	bls.n	80073f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	68da      	ldr	r2, [r3, #12]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	0151      	lsls	r1, r2, #5
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	440a      	add	r2, r1
 8007406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800740e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007426:	6939      	ldr	r1, [r7, #16]
 8007428:	0148      	lsls	r0, r1, #5
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	4401      	add	r1, r0
 800742e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007432:	4313      	orrs	r3, r2
 8007434:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d11e      	bne.n	800747a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d009      	beq.n	8007458 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	015a      	lsls	r2, r3, #5
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	4413      	add	r3, r2
 800744c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007450:	461a      	mov	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	e097      	b.n	80075aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	440a      	add	r2, r1
 8007490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007494:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007498:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 8083 	beq.w	80075aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	2101      	movs	r1, #1
 80074b6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ba:	6979      	ldr	r1, [r7, #20]
 80074bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074c0:	4313      	orrs	r3, r2
 80074c2:	634b      	str	r3, [r1, #52]	; 0x34
 80074c4:	e071      	b.n	80075aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e0:	0cdb      	lsrs	r3, r3, #19
 80074e2:	04db      	lsls	r3, r3, #19
 80074e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007500:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007504:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007508:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800753c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007558:	6939      	ldr	r1, [r7, #16]
 800755a:	0148      	lsls	r0, r1, #5
 800755c:	6979      	ldr	r1, [r7, #20]
 800755e:	4401      	add	r1, r0
 8007560:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007564:	4313      	orrs	r3, r2
 8007566:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d10d      	bne.n	800758a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	6919      	ldr	r1, [r3, #16]
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007586:	460a      	mov	r2, r1
 8007588:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	785b      	ldrb	r3, [r3, #1]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d14a      	bne.n	800766c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075ee:	f040 8086 	bne.w	80076fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	7812      	ldrb	r2, [r2, #0]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007610:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007614:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	7812      	ldrb	r2, [r2, #0]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f242 7210 	movw	r2, #10000	; 0x2710
 8007646:	4293      	cmp	r3, r2
 8007648:	d902      	bls.n	8007650 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
          break;
 800764e:	e056      	b.n	80076fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007668:	d0e7      	beq.n	800763a <USB_EPStopXfer+0x82>
 800766a:	e048      	b.n	80076fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007684:	d13b      	bne.n	80076fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	7812      	ldrb	r2, [r2, #0]
 800769a:	0151      	lsls	r1, r2, #5
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	440a      	add	r2, r1
 80076a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	3301      	adds	r3, #1
 80076d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80076da:	4293      	cmp	r3, r2
 80076dc:	d902      	bls.n	80076e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]
          break;
 80076e2:	e00c      	b.n	80076fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076fc:	d0e7      	beq.n	80076ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80076fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007700:	4618      	mov	r0, r3
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800770c:	b480      	push	{r7}
 800770e:	b089      	sub	sp, #36	; 0x24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	4611      	mov	r1, r2
 8007718:	461a      	mov	r2, r3
 800771a:	460b      	mov	r3, r1
 800771c:	71fb      	strb	r3, [r7, #7]
 800771e:	4613      	mov	r3, r2
 8007720:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800772a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800772e:	2b00      	cmp	r3, #0
 8007730:	d123      	bne.n	800777a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007732:	88bb      	ldrh	r3, [r7, #4]
 8007734:	3303      	adds	r3, #3
 8007736:	089b      	lsrs	r3, r3, #2
 8007738:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800773a:	2300      	movs	r3, #0
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	e018      	b.n	8007772 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	031a      	lsls	r2, r3, #12
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	4413      	add	r3, r2
 8007748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800774c:	461a      	mov	r2, r3
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	3301      	adds	r3, #1
 8007758:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	3301      	adds	r3, #1
 800775e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	3301      	adds	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	3301      	adds	r3, #1
 800776a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	3301      	adds	r3, #1
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	429a      	cmp	r2, r3
 8007778:	d3e2      	bcc.n	8007740 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3724      	adds	r7, #36	; 0x24
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007788:	b480      	push	{r7}
 800778a:	b08b      	sub	sp, #44	; 0x2c
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	089b      	lsrs	r3, r3, #2
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	623b      	str	r3, [r7, #32]
 80077b2:	e014      	b.n	80077de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	601a      	str	r2, [r3, #0]
    pDest++;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	3301      	adds	r3, #1
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c8:	3301      	adds	r3, #1
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	3301      	adds	r3, #1
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80077d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d4:	3301      	adds	r3, #1
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	3301      	adds	r3, #1
 80077dc:	623b      	str	r3, [r7, #32]
 80077de:	6a3a      	ldr	r2, [r7, #32]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d3e6      	bcc.n	80077b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077e6:	8bfb      	ldrh	r3, [r7, #30]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01e      	beq.n	800782a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f6:	461a      	mov	r2, r3
 80077f8:	f107 0310 	add.w	r3, r7, #16
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
 800780c:	b2da      	uxtb	r2, r3
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	701a      	strb	r2, [r3, #0]
      i++;
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	3301      	adds	r3, #1
 8007816:	623b      	str	r3, [r7, #32]
      pDest++;
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	3301      	adds	r3, #1
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800781e:	8bfb      	ldrh	r3, [r7, #30]
 8007820:	3b01      	subs	r3, #1
 8007822:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007824:	8bfb      	ldrh	r3, [r7, #30]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1ea      	bne.n	8007800 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800782c:	4618      	mov	r0, r3
 800782e:	372c      	adds	r7, #44	; 0x2c
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d12c      	bne.n	80078ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	db12      	blt.n	800788c <USB_EPSetStall+0x54>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00f      	beq.n	800788c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800788a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	e02b      	b.n	8007906 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	db12      	blt.n	80078e6 <USB_EPSetStall+0xae>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00f      	beq.n	80078e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	0151      	lsls	r1, r2, #5
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	440a      	add	r2, r1
 80078dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	0151      	lsls	r1, r2, #5
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	440a      	add	r2, r1
 80078fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007904:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d128      	bne.n	8007982 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	440a      	add	r2, r1
 8007946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800794a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800794e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	791b      	ldrb	r3, [r3, #4]
 8007954:	2b03      	cmp	r3, #3
 8007956:	d003      	beq.n	8007960 <USB_EPClearStall+0x4c>
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	791b      	ldrb	r3, [r3, #4]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d138      	bne.n	80079d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800797a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	e027      	b.n	80079d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	440a      	add	r2, r1
 8007998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d003      	beq.n	80079b2 <USB_EPClearStall+0x9e>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	791b      	ldrb	r3, [r3, #4]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d10f      	bne.n	80079d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a14:	68f9      	ldr	r1, [r7, #12]
 8007a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a46:	f023 0303 	bic.w	r3, r3, #3
 8007a4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a5a:	f023 0302 	bic.w	r3, r3, #2
 8007a5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3714      	adds	r7, #20
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b085      	sub	sp, #20
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a88:	f023 0303 	bic.w	r3, r3, #3
 8007a8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a9c:	f043 0302 	orr.w	r3, r3, #2
 8007aa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b085      	sub	sp, #20
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	4013      	ands	r3, r2
 8007af8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	0c1b      	lsrs	r3, r3, #16
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	b29b      	uxth	r3, r3
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b087      	sub	sp, #28
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	01db      	lsls	r3, r3, #7
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	015a      	lsls	r2, r3, #5
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	4413      	add	r3, r2
 8007bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0301 	and.w	r3, r3, #1
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c10:	f023 0307 	bic.w	r3, r3, #7
 8007c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	460b      	mov	r3, r1
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	333c      	adds	r3, #60	; 0x3c
 8007c4e:	3304      	adds	r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4a26      	ldr	r2, [pc, #152]	; (8007cf0 <USB_EP0_OutStart+0xb8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d90a      	bls.n	8007c72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c6c:	d101      	bne.n	8007c72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e037      	b.n	8007ce2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c78:	461a      	mov	r2, r3
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	697a      	ldr	r2, [r7, #20]
 8007c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca0:	f043 0318 	orr.w	r3, r3, #24
 8007ca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d10f      	bne.n	8007ce0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007cde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	4f54300a 	.word	0x4f54300a

08007cf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <USB_CoreReset+0x64>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e01b      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	daf2      	bge.n	8007d00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f043 0201 	orr.w	r2, r3, #1
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <USB_CoreReset+0x64>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d901      	bls.n	8007d3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e006      	b.n	8007d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d0f0      	beq.n	8007d2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	00030d40 	.word	0x00030d40

08007d5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d6c:	f003 ff0e 	bl	800bb8c <USBD_static_malloc>
 8007d70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d109      	bne.n	8007d8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	32b0      	adds	r2, #176	; 0xb0
 8007d82:	2100      	movs	r1, #0
 8007d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	e0d4      	b.n	8007f36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007d8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007d90:	2100      	movs	r1, #0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f004 f87d 	bl	800be92 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32b0      	adds	r2, #176	; 0xb0
 8007da2:	68f9      	ldr	r1, [r7, #12]
 8007da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	32b0      	adds	r2, #176	; 0xb0
 8007db2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	7c1b      	ldrb	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d138      	bne.n	8007e36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007dc4:	4b5e      	ldr	r3, [pc, #376]	; (8007f40 <USBD_CDC_Init+0x1e4>)
 8007dc6:	7819      	ldrb	r1, [r3, #0]
 8007dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dcc:	2202      	movs	r2, #2
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f003 fdb9 	bl	800b946 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007dd4:	4b5a      	ldr	r3, [pc, #360]	; (8007f40 <USBD_CDC_Init+0x1e4>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	f003 020f 	and.w	r2, r3, #15
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	3324      	adds	r3, #36	; 0x24
 8007dea:	2201      	movs	r2, #1
 8007dec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007dee:	4b55      	ldr	r3, [pc, #340]	; (8007f44 <USBD_CDC_Init+0x1e8>)
 8007df0:	7819      	ldrb	r1, [r3, #0]
 8007df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007df6:	2202      	movs	r2, #2
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f003 fda4 	bl	800b946 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007dfe:	4b51      	ldr	r3, [pc, #324]	; (8007f44 <USBD_CDC_Init+0x1e8>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f003 020f 	and.w	r2, r3, #15
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	440b      	add	r3, r1
 8007e12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e16:	2201      	movs	r2, #1
 8007e18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007e1a:	4b4b      	ldr	r3, [pc, #300]	; (8007f48 <USBD_CDC_Init+0x1ec>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	f003 020f 	and.w	r2, r3, #15
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	440b      	add	r3, r1
 8007e2e:	3326      	adds	r3, #38	; 0x26
 8007e30:	2210      	movs	r2, #16
 8007e32:	801a      	strh	r2, [r3, #0]
 8007e34:	e035      	b.n	8007ea2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007e36:	4b42      	ldr	r3, [pc, #264]	; (8007f40 <USBD_CDC_Init+0x1e4>)
 8007e38:	7819      	ldrb	r1, [r3, #0]
 8007e3a:	2340      	movs	r3, #64	; 0x40
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f003 fd81 	bl	800b946 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e44:	4b3e      	ldr	r3, [pc, #248]	; (8007f40 <USBD_CDC_Init+0x1e4>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	f003 020f 	and.w	r2, r3, #15
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	3324      	adds	r3, #36	; 0x24
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e5e:	4b39      	ldr	r3, [pc, #228]	; (8007f44 <USBD_CDC_Init+0x1e8>)
 8007e60:	7819      	ldrb	r1, [r3, #0]
 8007e62:	2340      	movs	r3, #64	; 0x40
 8007e64:	2202      	movs	r2, #2
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f003 fd6d 	bl	800b946 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e6c:	4b35      	ldr	r3, [pc, #212]	; (8007f44 <USBD_CDC_Init+0x1e8>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f003 020f 	and.w	r2, r3, #15
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e84:	2201      	movs	r2, #1
 8007e86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007e88:	4b2f      	ldr	r3, [pc, #188]	; (8007f48 <USBD_CDC_Init+0x1ec>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 020f 	and.w	r2, r3, #15
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3326      	adds	r3, #38	; 0x26
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ea2:	4b29      	ldr	r3, [pc, #164]	; (8007f48 <USBD_CDC_Init+0x1ec>)
 8007ea4:	7819      	ldrb	r1, [r3, #0]
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f003 fd4b 	bl	800b946 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007eb0:	4b25      	ldr	r3, [pc, #148]	; (8007f48 <USBD_CDC_Init+0x1ec>)
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	f003 020f 	and.w	r2, r3, #15
 8007eb8:	6879      	ldr	r1, [r7, #4]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	440b      	add	r3, r1
 8007ec4:	3324      	adds	r3, #36	; 0x24
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	33b0      	adds	r3, #176	; 0xb0
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007f00:	2302      	movs	r3, #2
 8007f02:	e018      	b.n	8007f36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	7c1b      	ldrb	r3, [r3, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <USBD_CDC_Init+0x1e8>)
 8007f0e:	7819      	ldrb	r1, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f003 fe02 	bl	800bb24 <USBD_LL_PrepareReceive>
 8007f20:	e008      	b.n	8007f34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007f22:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <USBD_CDC_Init+0x1e8>)
 8007f24:	7819      	ldrb	r1, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f2c:	2340      	movs	r3, #64	; 0x40
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f003 fdf8 	bl	800bb24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200000c7 	.word	0x200000c7
 8007f44:	200000c8 	.word	0x200000c8
 8007f48:	200000c9 	.word	0x200000c9

08007f4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	460b      	mov	r3, r1
 8007f56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007f58:	4b3a      	ldr	r3, [pc, #232]	; (8008044 <USBD_CDC_DeInit+0xf8>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f003 fd17 	bl	800b992 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007f64:	4b37      	ldr	r3, [pc, #220]	; (8008044 <USBD_CDC_DeInit+0xf8>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	3324      	adds	r3, #36	; 0x24
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007f7e:	4b32      	ldr	r3, [pc, #200]	; (8008048 <USBD_CDC_DeInit+0xfc>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f003 fd04 	bl	800b992 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007f8a:	4b2f      	ldr	r3, [pc, #188]	; (8008048 <USBD_CDC_DeInit+0xfc>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	f003 020f 	and.w	r2, r3, #15
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007fa6:	4b29      	ldr	r3, [pc, #164]	; (800804c <USBD_CDC_DeInit+0x100>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f003 fcf0 	bl	800b992 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007fb2:	4b26      	ldr	r3, [pc, #152]	; (800804c <USBD_CDC_DeInit+0x100>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	f003 020f 	and.w	r2, r3, #15
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	3324      	adds	r3, #36	; 0x24
 8007fc8:	2200      	movs	r2, #0
 8007fca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007fcc:	4b1f      	ldr	r3, [pc, #124]	; (800804c <USBD_CDC_DeInit+0x100>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 020f 	and.w	r2, r3, #15
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	3326      	adds	r3, #38	; 0x26
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32b0      	adds	r2, #176	; 0xb0
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01f      	beq.n	8008038 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	33b0      	adds	r3, #176	; 0xb0
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	32b0      	adds	r2, #176	; 0xb0
 8008016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801a:	4618      	mov	r0, r3
 800801c:	f003 fdc4 	bl	800bba8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	32b0      	adds	r2, #176	; 0xb0
 800802a:	2100      	movs	r1, #0
 800802c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	200000c7 	.word	0x200000c7
 8008048:	200000c8 	.word	0x200000c8
 800804c:	200000c9 	.word	0x200000c9

08008050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	32b0      	adds	r2, #176	; 0xb0
 8008064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008068:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	e0bf      	b.n	8008200 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008088:	2b00      	cmp	r3, #0
 800808a:	d050      	beq.n	800812e <USBD_CDC_Setup+0xde>
 800808c:	2b20      	cmp	r3, #32
 800808e:	f040 80af 	bne.w	80081f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	88db      	ldrh	r3, [r3, #6]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d03a      	beq.n	8008110 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b25b      	sxtb	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	da1b      	bge.n	80080dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	33b0      	adds	r3, #176	; 0xb0
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80080ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	88d2      	ldrh	r2, [r2, #6]
 80080c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	88db      	ldrh	r3, [r3, #6]
 80080c6:	2b07      	cmp	r3, #7
 80080c8:	bf28      	it	cs
 80080ca:	2307      	movcs	r3, #7
 80080cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	89fa      	ldrh	r2, [r7, #14]
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 fda5 	bl	8009c24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80080da:	e090      	b.n	80081fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	785a      	ldrb	r2, [r3, #1]
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	88db      	ldrh	r3, [r3, #6]
 80080ea:	2b3f      	cmp	r3, #63	; 0x3f
 80080ec:	d803      	bhi.n	80080f6 <USBD_CDC_Setup+0xa6>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	88db      	ldrh	r3, [r3, #6]
 80080f2:	b2da      	uxtb	r2, r3
 80080f4:	e000      	b.n	80080f8 <USBD_CDC_Setup+0xa8>
 80080f6:	2240      	movs	r2, #64	; 0x40
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80080fe:	6939      	ldr	r1, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008106:	461a      	mov	r2, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 fdb7 	bl	8009c7c <USBD_CtlPrepareRx>
      break;
 800810e:	e076      	b.n	80081fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	33b0      	adds	r3, #176	; 0xb0
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	7850      	ldrb	r0, [r2, #1]
 8008126:	2200      	movs	r2, #0
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	4798      	blx	r3
      break;
 800812c:	e067      	b.n	80081fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b0b      	cmp	r3, #11
 8008134:	d851      	bhi.n	80081da <USBD_CDC_Setup+0x18a>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <USBD_CDC_Setup+0xec>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	0800816d 	.word	0x0800816d
 8008140:	080081e9 	.word	0x080081e9
 8008144:	080081db 	.word	0x080081db
 8008148:	080081db 	.word	0x080081db
 800814c:	080081db 	.word	0x080081db
 8008150:	080081db 	.word	0x080081db
 8008154:	080081db 	.word	0x080081db
 8008158:	080081db 	.word	0x080081db
 800815c:	080081db 	.word	0x080081db
 8008160:	080081db 	.word	0x080081db
 8008164:	08008197 	.word	0x08008197
 8008168:	080081c1 	.word	0x080081c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b03      	cmp	r3, #3
 8008176:	d107      	bne.n	8008188 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008178:	f107 030a 	add.w	r3, r7, #10
 800817c:	2202      	movs	r2, #2
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 fd4f 	bl	8009c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008186:	e032      	b.n	80081ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fcd9 	bl	8009b42 <USBD_CtlError>
            ret = USBD_FAIL;
 8008190:	2303      	movs	r3, #3
 8008192:	75fb      	strb	r3, [r7, #23]
          break;
 8008194:	e02b      	b.n	80081ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d107      	bne.n	80081b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80081a2:	f107 030d 	add.w	r3, r7, #13
 80081a6:	2201      	movs	r2, #1
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 fd3a 	bl	8009c24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081b0:	e01d      	b.n	80081ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 fcc4 	bl	8009b42 <USBD_CtlError>
            ret = USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	75fb      	strb	r3, [r7, #23]
          break;
 80081be:	e016      	b.n	80081ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d00f      	beq.n	80081ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 fcb7 	bl	8009b42 <USBD_CtlError>
            ret = USBD_FAIL;
 80081d4:	2303      	movs	r3, #3
 80081d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081d8:	e008      	b.n	80081ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 fcb0 	bl	8009b42 <USBD_CtlError>
          ret = USBD_FAIL;
 80081e2:	2303      	movs	r3, #3
 80081e4:	75fb      	strb	r3, [r7, #23]
          break;
 80081e6:	e002      	b.n	80081ee <USBD_CDC_Setup+0x19e>
          break;
 80081e8:	bf00      	nop
 80081ea:	e008      	b.n	80081fe <USBD_CDC_Setup+0x1ae>
          break;
 80081ec:	bf00      	nop
      }
      break;
 80081ee:	e006      	b.n	80081fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 fca5 	bl	8009b42 <USBD_CtlError>
      ret = USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	75fb      	strb	r3, [r7, #23]
      break;
 80081fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800821a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	32b0      	adds	r2, #176	; 0xb0
 8008226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800822e:	2303      	movs	r3, #3
 8008230:	e065      	b.n	80082fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	32b0      	adds	r2, #176	; 0xb0
 800823c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008240:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	f003 020f 	and.w	r2, r3, #15
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	3318      	adds	r3, #24
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d02f      	beq.n	80082bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	f003 020f 	and.w	r2, r3, #15
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	3318      	adds	r3, #24
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	f003 010f 	and.w	r1, r3, #15
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	460b      	mov	r3, r1
 800827c:	00db      	lsls	r3, r3, #3
 800827e:	440b      	add	r3, r1
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4403      	add	r3, r0
 8008284:	3348      	adds	r3, #72	; 0x48
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	fbb2 f1f3 	udiv	r1, r2, r3
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008292:	2b00      	cmp	r3, #0
 8008294:	d112      	bne.n	80082bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	f003 020f 	and.w	r2, r3, #15
 800829c:	6879      	ldr	r1, [r7, #4]
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	440b      	add	r3, r1
 80082a8:	3318      	adds	r3, #24
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082ae:	78f9      	ldrb	r1, [r7, #3]
 80082b0:	2300      	movs	r3, #0
 80082b2:	2200      	movs	r2, #0
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f003 fc14 	bl	800bae2 <USBD_LL_Transmit>
 80082ba:	e01f      	b.n	80082fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	33b0      	adds	r3, #176	; 0xb0
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d010      	beq.n	80082fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	33b0      	adds	r3, #176	; 0xb0
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80082f8:	78fa      	ldrb	r2, [r7, #3]
 80082fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	32b0      	adds	r2, #176	; 0xb0
 800831c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008320:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	32b0      	adds	r2, #176	; 0xb0
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008334:	2303      	movs	r3, #3
 8008336:	e01a      	b.n	800836e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f003 fc12 	bl	800bb66 <USBD_LL_GetRxDataSize>
 8008342:	4602      	mov	r2, r0
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	33b0      	adds	r3, #176	; 0xb0
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008368:	4611      	mov	r1, r2
 800836a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	32b0      	adds	r2, #176	; 0xb0
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008394:	2303      	movs	r3, #3
 8008396:	e025      	b.n	80083e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	33b0      	adds	r3, #176	; 0xb0
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d01a      	beq.n	80083e2 <USBD_CDC_EP0_RxReady+0x6c>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083b2:	2bff      	cmp	r3, #255	; 0xff
 80083b4:	d015      	beq.n	80083e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	33b0      	adds	r3, #176	; 0xb0
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80083ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80083d6:	b292      	uxth	r2, r2
 80083d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	22ff      	movs	r2, #255	; 0xff
 80083de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083f4:	2182      	movs	r1, #130	; 0x82
 80083f6:	4818      	ldr	r0, [pc, #96]	; (8008458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80083f8:	f000 fd6b 	bl	8008ed2 <USBD_GetEpDesc>
 80083fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083fe:	2101      	movs	r1, #1
 8008400:	4815      	ldr	r0, [pc, #84]	; (8008458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008402:	f000 fd66 	bl	8008ed2 <USBD_GetEpDesc>
 8008406:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008408:	2181      	movs	r1, #129	; 0x81
 800840a:	4813      	ldr	r0, [pc, #76]	; (8008458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800840c:	f000 fd61 	bl	8008ed2 <USBD_GetEpDesc>
 8008410:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2210      	movs	r2, #16
 800841c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d006      	beq.n	8008432 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	2200      	movs	r2, #0
 8008428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800842c:	711a      	strb	r2, [r3, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d006      	beq.n	8008446 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008440:	711a      	strb	r2, [r3, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2243      	movs	r2, #67	; 0x43
 800844a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000084 	.word	0x20000084

0800845c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008464:	2182      	movs	r1, #130	; 0x82
 8008466:	4818      	ldr	r0, [pc, #96]	; (80084c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008468:	f000 fd33 	bl	8008ed2 <USBD_GetEpDesc>
 800846c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800846e:	2101      	movs	r1, #1
 8008470:	4815      	ldr	r0, [pc, #84]	; (80084c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008472:	f000 fd2e 	bl	8008ed2 <USBD_GetEpDesc>
 8008476:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008478:	2181      	movs	r1, #129	; 0x81
 800847a:	4813      	ldr	r0, [pc, #76]	; (80084c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800847c:	f000 fd29 	bl	8008ed2 <USBD_GetEpDesc>
 8008480:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2210      	movs	r2, #16
 800848c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d006      	beq.n	80084a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2200      	movs	r2, #0
 8008498:	711a      	strb	r2, [r3, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f042 0202 	orr.w	r2, r2, #2
 80084a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d006      	beq.n	80084b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	711a      	strb	r2, [r3, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f042 0202 	orr.w	r2, r2, #2
 80084b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2243      	movs	r2, #67	; 0x43
 80084ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000084 	.word	0x20000084

080084cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80084d4:	2182      	movs	r1, #130	; 0x82
 80084d6:	4818      	ldr	r0, [pc, #96]	; (8008538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80084d8:	f000 fcfb 	bl	8008ed2 <USBD_GetEpDesc>
 80084dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80084de:	2101      	movs	r1, #1
 80084e0:	4815      	ldr	r0, [pc, #84]	; (8008538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80084e2:	f000 fcf6 	bl	8008ed2 <USBD_GetEpDesc>
 80084e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084e8:	2181      	movs	r1, #129	; 0x81
 80084ea:	4813      	ldr	r0, [pc, #76]	; (8008538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80084ec:	f000 fcf1 	bl	8008ed2 <USBD_GetEpDesc>
 80084f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2210      	movs	r2, #16
 80084fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d006      	beq.n	8008512 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2200      	movs	r2, #0
 8008508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800850c:	711a      	strb	r2, [r3, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d006      	beq.n	8008526 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008520:	711a      	strb	r2, [r3, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2243      	movs	r2, #67	; 0x43
 800852a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800852c:	4b02      	ldr	r3, [pc, #8]	; (8008538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000084 	.word	0x20000084

0800853c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	220a      	movs	r2, #10
 8008548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800854a:	4b03      	ldr	r3, [pc, #12]	; (8008558 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr
 8008558:	20000040 	.word	0x20000040

0800855c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800856c:	2303      	movs	r3, #3
 800856e:	e009      	b.n	8008584 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	33b0      	adds	r3, #176	; 0xb0
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	32b0      	adds	r2, #176	; 0xb0
 80085a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085aa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e008      	b.n	80085c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	32b0      	adds	r2, #176	; 0xb0
 80085e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e004      	b.n	8008602 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
	...

08008610 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	32b0      	adds	r2, #176	; 0xb0
 8008622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008626:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	32b0      	adds	r2, #176	; 0xb0
 8008636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800863e:	2303      	movs	r3, #3
 8008640:	e025      	b.n	800868e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008648:	2b00      	cmp	r3, #0
 800864a:	d11f      	bne.n	800868c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2201      	movs	r2, #1
 8008650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008654:	4b10      	ldr	r3, [pc, #64]	; (8008698 <USBD_CDC_TransmitPacket+0x88>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	f003 020f 	and.w	r2, r3, #15
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4403      	add	r3, r0
 800866e:	3318      	adds	r3, #24
 8008670:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <USBD_CDC_TransmitPacket+0x88>)
 8008674:	7819      	ldrb	r1, [r3, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f003 fa2d 	bl	800bae2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800868c:	7bfb      	ldrb	r3, [r7, #15]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200000c7 	.word	0x200000c7

0800869c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	32b0      	adds	r2, #176	; 0xb0
 80086ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	32b0      	adds	r2, #176	; 0xb0
 80086be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e018      	b.n	80086fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	7c1b      	ldrb	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <USBD_CDC_ReceivePacket+0x68>)
 80086d4:	7819      	ldrb	r1, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f003 fa1f 	bl	800bb24 <USBD_LL_PrepareReceive>
 80086e6:	e008      	b.n	80086fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086e8:	4b06      	ldr	r3, [pc, #24]	; (8008704 <USBD_CDC_ReceivePacket+0x68>)
 80086ea:	7819      	ldrb	r1, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086f2:	2340      	movs	r3, #64	; 0x40
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f003 fa15 	bl	800bb24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	200000c8 	.word	0x200000c8

08008708 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	4613      	mov	r3, r2
 8008714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800871c:	4817      	ldr	r0, [pc, #92]	; (800877c <USBD_Init+0x74>)
 800871e:	f003 fb3b 	bl	800bd98 <iprintf>
 8008722:	4817      	ldr	r0, [pc, #92]	; (8008780 <USBD_Init+0x78>)
 8008724:	f003 fb38 	bl	800bd98 <iprintf>
 8008728:	200a      	movs	r0, #10
 800872a:	f003 fb47 	bl	800bdbc <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800872e:	2303      	movs	r3, #3
 8008730:	e01f      	b.n	8008772 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	79fa      	ldrb	r2, [r7, #7]
 8008764:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f003 f886 	bl	800b878 <USBD_LL_Init>
 800876c:	4603      	mov	r3, r0
 800876e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008770:	7dfb      	ldrb	r3, [r7, #23]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	0800cfac 	.word	0x0800cfac
 8008780:	0800cfb4 	.word	0x0800cfb4

08008784 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8008798:	481a      	ldr	r0, [pc, #104]	; (8008804 <USBD_RegisterClass+0x80>)
 800879a:	f003 fafd 	bl	800bd98 <iprintf>
 800879e:	481a      	ldr	r0, [pc, #104]	; (8008808 <USBD_RegisterClass+0x84>)
 80087a0:	f003 fafa 	bl	800bd98 <iprintf>
 80087a4:	200a      	movs	r0, #10
 80087a6:	f003 fb09 	bl	800bdbc <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e025      	b.n	80087fa <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	32ae      	adds	r2, #174	; 0xae
 80087c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00f      	beq.n	80087ea <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	32ae      	adds	r2, #174	; 0xae
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087da:	f107 020e 	add.w	r2, r7, #14
 80087de:	4610      	mov	r0, r2
 80087e0:	4798      	blx	r3
 80087e2:	4602      	mov	r2, r0
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80087f0:	1c5a      	adds	r2, r3, #1
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	0800cfac 	.word	0x0800cfac
 8008808:	0800cfcc 	.word	0x0800cfcc

0800880c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f003 f87b 	bl	800b910 <USBD_LL_Start>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008850:	2b00      	cmp	r3, #0
 8008852:	d009      	beq.n	8008868 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	4611      	mov	r1, r2
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4798      	blx	r3
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	460b      	mov	r3, r1
 800887c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	78fa      	ldrb	r2, [r7, #3]
 800888c:	4611      	mov	r1, r2
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 f908 	bl	8009ace <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80088cc:	461a      	mov	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088da:	f003 031f 	and.w	r3, r3, #31
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d01a      	beq.n	8008918 <USBD_LL_SetupStage+0x72>
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d822      	bhi.n	800892c <USBD_LL_SetupStage+0x86>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <USBD_LL_SetupStage+0x4a>
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d00a      	beq.n	8008904 <USBD_LL_SetupStage+0x5e>
 80088ee:	e01d      	b.n	800892c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fb5f 	bl	8008fbc <USBD_StdDevReq>
 80088fe:	4603      	mov	r3, r0
 8008900:	73fb      	strb	r3, [r7, #15]
      break;
 8008902:	e020      	b.n	8008946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fbc7 	bl	80090a0 <USBD_StdItfReq>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]
      break;
 8008916:	e016      	b.n	8008946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fc29 	bl	8009178 <USBD_StdEPReq>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
      break;
 800892a:	e00c      	b.n	8008946 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008932:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008936:	b2db      	uxtb	r3, r3
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f003 f848 	bl	800b9d0 <USBD_LL_StallEP>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
      break;
 8008944:	bf00      	nop
  }

  return ret;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	460b      	mov	r3, r1
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008962:	7afb      	ldrb	r3, [r7, #11]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d16e      	bne.n	8008a46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800896e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008976:	2b03      	cmp	r3, #3
 8008978:	f040 8098 	bne.w	8008aac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d913      	bls.n	80089b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	1ad2      	subs	r2, r2, r3
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	4293      	cmp	r3, r2
 80089a0:	bf28      	it	cs
 80089a2:	4613      	movcs	r3, r2
 80089a4:	461a      	mov	r2, r3
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f001 f984 	bl	8009cb6 <USBD_CtlContinueRx>
 80089ae:	e07d      	b.n	8008aac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d014      	beq.n	80089e8 <USBD_LL_DataOutStage+0x98>
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d81d      	bhi.n	80089fe <USBD_LL_DataOutStage+0xae>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <USBD_LL_DataOutStage+0x7c>
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d003      	beq.n	80089d2 <USBD_LL_DataOutStage+0x82>
 80089ca:	e018      	b.n	80089fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	75bb      	strb	r3, [r7, #22]
            break;
 80089d0:	e018      	b.n	8008a04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fa5e 	bl	8008e9e <USBD_CoreFindIF>
 80089e2:	4603      	mov	r3, r0
 80089e4:	75bb      	strb	r3, [r7, #22]
            break;
 80089e6:	e00d      	b.n	8008a04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	4619      	mov	r1, r3
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 fa60 	bl	8008eb8 <USBD_CoreFindEP>
 80089f8:	4603      	mov	r3, r0
 80089fa:	75bb      	strb	r3, [r7, #22]
            break;
 80089fc:	e002      	b.n	8008a04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80089fe:	2300      	movs	r3, #0
 8008a00:	75bb      	strb	r3, [r7, #22]
            break;
 8008a02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008a04:	7dbb      	ldrb	r3, [r7, #22]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d119      	bne.n	8008a3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d113      	bne.n	8008a3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008a16:	7dba      	ldrb	r2, [r7, #22]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	32ae      	adds	r2, #174	; 0xae
 8008a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a20:	691b      	ldr	r3, [r3, #16]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00b      	beq.n	8008a3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008a26:	7dba      	ldrb	r2, [r7, #22]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008a2e:	7dba      	ldrb	r2, [r7, #22]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	32ae      	adds	r2, #174	; 0xae
 8008a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f001 f94a 	bl	8009cd8 <USBD_CtlSendStatus>
 8008a44:	e032      	b.n	8008aac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	4619      	mov	r1, r3
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 fa31 	bl	8008eb8 <USBD_CoreFindEP>
 8008a56:	4603      	mov	r3, r0
 8008a58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a5a:	7dbb      	ldrb	r3, [r7, #22]
 8008a5c:	2bff      	cmp	r3, #255	; 0xff
 8008a5e:	d025      	beq.n	8008aac <USBD_LL_DataOutStage+0x15c>
 8008a60:	7dbb      	ldrb	r3, [r7, #22]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d122      	bne.n	8008aac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d117      	bne.n	8008aa2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a72:	7dba      	ldrb	r2, [r7, #22]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	32ae      	adds	r2, #174	; 0xae
 8008a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00f      	beq.n	8008aa2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a82:	7dba      	ldrb	r2, [r7, #22]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008a8a:	7dba      	ldrb	r2, [r7, #22]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	32ae      	adds	r2, #174	; 0xae
 8008a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	7afa      	ldrb	r2, [r7, #11]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	4798      	blx	r3
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008aa8:	7dfb      	ldrb	r3, [r7, #23]
 8008aaa:	e000      	b.n	8008aae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3718      	adds	r7, #24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b086      	sub	sp, #24
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	60f8      	str	r0, [r7, #12]
 8008abe:	460b      	mov	r3, r1
 8008ac0:	607a      	str	r2, [r7, #4]
 8008ac2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ac4:	7afb      	ldrb	r3, [r7, #11]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d16f      	bne.n	8008baa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	3314      	adds	r3, #20
 8008ace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d15a      	bne.n	8008b90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d914      	bls.n	8008b10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f001 f8ac 	bl	8009c5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b02:	2300      	movs	r3, #0
 8008b04:	2200      	movs	r2, #0
 8008b06:	2100      	movs	r1, #0
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f003 f80b 	bl	800bb24 <USBD_LL_PrepareReceive>
 8008b0e:	e03f      	b.n	8008b90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	68da      	ldr	r2, [r3, #12]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d11c      	bne.n	8008b56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d316      	bcc.n	8008b56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d20f      	bcs.n	8008b56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f001 f88d 	bl	8009c5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b48:	2300      	movs	r3, #0
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f002 ffe8 	bl	800bb24 <USBD_LL_PrepareReceive>
 8008b54:	e01c      	b.n	8008b90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d10f      	bne.n	8008b82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b82:	2180      	movs	r1, #128	; 0x80
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f002 ff23 	bl	800b9d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f001 f8b7 	bl	8009cfe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d03a      	beq.n	8008c10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f7ff fe42 	bl	8008824 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ba8:	e032      	b.n	8008c10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 f97f 	bl	8008eb8 <USBD_CoreFindEP>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	2bff      	cmp	r3, #255	; 0xff
 8008bc2:	d025      	beq.n	8008c10 <USBD_LL_DataInStage+0x15a>
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d122      	bne.n	8008c10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d11c      	bne.n	8008c10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008bd6:	7dfa      	ldrb	r2, [r7, #23]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	32ae      	adds	r2, #174	; 0xae
 8008bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d014      	beq.n	8008c10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008be6:	7dfa      	ldrb	r2, [r7, #23]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008bee:	7dfa      	ldrb	r2, [r7, #23]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	32ae      	adds	r2, #174	; 0xae
 8008bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	7afa      	ldrb	r2, [r7, #11]
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	4798      	blx	r3
 8008c02:	4603      	mov	r3, r0
 8008c04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008c06:	7dbb      	ldrb	r3, [r7, #22]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008c0c:	7dbb      	ldrb	r3, [r7, #22]
 8008c0e:	e000      	b.n	8008c12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d014      	beq.n	8008c80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00e      	beq.n	8008c80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	6852      	ldr	r2, [r2, #4]
 8008c6e:	b2d2      	uxtb	r2, r2
 8008c70:	4611      	mov	r1, r2
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	4798      	blx	r3
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c7c:	2303      	movs	r3, #3
 8008c7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	2200      	movs	r2, #0
 8008c84:	2100      	movs	r1, #0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 fe5d 	bl	800b946 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2240      	movs	r2, #64	; 0x40
 8008c98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c9c:	2340      	movs	r3, #64	; 0x40
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2180      	movs	r1, #128	; 0x80
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f002 fe4f 	bl	800b946 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2240      	movs	r2, #64	; 0x40
 8008cb2:	621a      	str	r2, [r3, #32]

  return ret;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008cd0:	2300      	movs	r3, #0
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2204      	movs	r2, #4
 8008cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b04      	cmp	r3, #4
 8008d1c:	d106      	bne.n	8008d2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b082      	sub	sp, #8
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d110      	bne.n	8008d70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	460b      	mov	r3, r1
 8008d84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	32ae      	adds	r2, #174	; 0xae
 8008d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e01c      	b.n	8008dd6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d115      	bne.n	8008dd4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	32ae      	adds	r2, #174	; 0xae
 8008db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	32ae      	adds	r2, #174	; 0xae
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	78fa      	ldrb	r2, [r7, #3]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	460b      	mov	r3, r1
 8008de8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	32ae      	adds	r2, #174	; 0xae
 8008df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d101      	bne.n	8008e00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e01c      	b.n	8008e3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d115      	bne.n	8008e38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	32ae      	adds	r2, #174	; 0xae
 8008e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00b      	beq.n	8008e38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	32ae      	adds	r2, #174	; 0xae
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	4611      	mov	r1, r2
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b083      	sub	sp, #12
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00e      	beq.n	8008e94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6852      	ldr	r2, [r2, #4]
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	4611      	mov	r1, r2
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008e90:	2303      	movs	r3, #3
 8008e92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008e9e:	b480      	push	{r7}
 8008ea0:	b083      	sub	sp, #12
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008eaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ec4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b086      	sub	sp, #24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	460b      	mov	r3, r1
 8008edc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	885b      	ldrh	r3, [r3, #2]
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d920      	bls.n	8008f3c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f02:	e013      	b.n	8008f2c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f04:	f107 030a 	add.w	r3, r7, #10
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6978      	ldr	r0, [r7, #20]
 8008f0c:	f000 f81b 	bl	8008f46 <USBD_GetNextDesc>
 8008f10:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d108      	bne.n	8008f2c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	789b      	ldrb	r3, [r3, #2]
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d008      	beq.n	8008f3a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	897b      	ldrh	r3, [r7, #10]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d8e5      	bhi.n	8008f04 <USBD_GetEpDesc+0x32>
 8008f38:	e000      	b.n	8008f3c <USBD_GetEpDesc+0x6a>
          break;
 8008f3a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f3c:	693b      	ldr	r3, [r7, #16]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	881a      	ldrh	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4413      	add	r3, r2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4413      	add	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f72:	68fb      	ldr	r3, [r7, #12]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	3301      	adds	r3, #1
 8008f96:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008f9e:	8a3b      	ldrh	r3, [r7, #16]
 8008fa0:	021b      	lsls	r3, r3, #8
 8008fa2:	b21a      	sxth	r2, r3
 8008fa4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	b21b      	sxth	r3, r3
 8008fac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008fae:	89fb      	ldrh	r3, [r7, #14]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fd2:	2b40      	cmp	r3, #64	; 0x40
 8008fd4:	d005      	beq.n	8008fe2 <USBD_StdDevReq+0x26>
 8008fd6:	2b40      	cmp	r3, #64	; 0x40
 8008fd8:	d857      	bhi.n	800908a <USBD_StdDevReq+0xce>
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00f      	beq.n	8008ffe <USBD_StdDevReq+0x42>
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	d153      	bne.n	800908a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	32ae      	adds	r2, #174	; 0xae
 8008fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	6839      	ldr	r1, [r7, #0]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	4798      	blx	r3
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffc:	e04a      	b.n	8009094 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	785b      	ldrb	r3, [r3, #1]
 8009002:	2b09      	cmp	r3, #9
 8009004:	d83b      	bhi.n	800907e <USBD_StdDevReq+0xc2>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <USBD_StdDevReq+0x50>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009061 	.word	0x08009061
 8009010:	08009075 	.word	0x08009075
 8009014:	0800907f 	.word	0x0800907f
 8009018:	0800906b 	.word	0x0800906b
 800901c:	0800907f 	.word	0x0800907f
 8009020:	0800903f 	.word	0x0800903f
 8009024:	08009035 	.word	0x08009035
 8009028:	0800907f 	.word	0x0800907f
 800902c:	08009057 	.word	0x08009057
 8009030:	08009049 	.word	0x08009049
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fa3c 	bl	80094b4 <USBD_GetDescriptor>
          break;
 800903c:	e024      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fba1 	bl	8009788 <USBD_SetAddress>
          break;
 8009046:	e01f      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fbe0 	bl	8009810 <USBD_SetConfig>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
          break;
 8009054:	e018      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fc83 	bl	8009964 <USBD_GetConfig>
          break;
 800905e:	e013      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fcb4 	bl	80099d0 <USBD_GetStatus>
          break;
 8009068:	e00e      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fce3 	bl	8009a38 <USBD_SetFeature>
          break;
 8009072:	e009      	b.n	8009088 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fd07 	bl	8009a8a <USBD_ClrFeature>
          break;
 800907c:	e004      	b.n	8009088 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 fd5e 	bl	8009b42 <USBD_CtlError>
          break;
 8009086:	bf00      	nop
      }
      break;
 8009088:	e004      	b.n	8009094 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fd58 	bl	8009b42 <USBD_CtlError>
      break;
 8009092:	bf00      	nop
  }

  return ret;
 8009094:	7bfb      	ldrb	r3, [r7, #15]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop

080090a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090b6:	2b40      	cmp	r3, #64	; 0x40
 80090b8:	d005      	beq.n	80090c6 <USBD_StdItfReq+0x26>
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	d852      	bhi.n	8009164 <USBD_StdItfReq+0xc4>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <USBD_StdItfReq+0x26>
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	d14e      	bne.n	8009164 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d840      	bhi.n	8009156 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	889b      	ldrh	r3, [r3, #4]
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d836      	bhi.n	800914c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	889b      	ldrh	r3, [r3, #4]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff fed9 	bl	8008e9e <USBD_CoreFindIF>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	2bff      	cmp	r3, #255	; 0xff
 80090f4:	d01d      	beq.n	8009132 <USBD_StdItfReq+0x92>
 80090f6:	7bbb      	ldrb	r3, [r7, #14]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11a      	bne.n	8009132 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80090fc:	7bba      	ldrb	r2, [r7, #14]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	32ae      	adds	r2, #174	; 0xae
 8009102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00f      	beq.n	800912c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800910c:	7bba      	ldrb	r2, [r7, #14]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009114:	7bba      	ldrb	r2, [r7, #14]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	32ae      	adds	r2, #174	; 0xae
 800911a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	4798      	blx	r3
 8009126:	4603      	mov	r3, r0
 8009128:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800912a:	e004      	b.n	8009136 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009130:	e001      	b.n	8009136 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009132:	2303      	movs	r3, #3
 8009134:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	88db      	ldrh	r3, [r3, #6]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d110      	bne.n	8009160 <USBD_StdItfReq+0xc0>
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10d      	bne.n	8009160 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fdc7 	bl	8009cd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800914a:	e009      	b.n	8009160 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fcf7 	bl	8009b42 <USBD_CtlError>
          break;
 8009154:	e004      	b.n	8009160 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fcf2 	bl	8009b42 <USBD_CtlError>
          break;
 800915e:	e000      	b.n	8009162 <USBD_StdItfReq+0xc2>
          break;
 8009160:	bf00      	nop
      }
      break;
 8009162:	e004      	b.n	800916e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fceb 	bl	8009b42 <USBD_CtlError>
      break;
 800916c:	bf00      	nop
  }

  return ret;
 800916e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	889b      	ldrh	r3, [r3, #4]
 800918a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d007      	beq.n	80091a8 <USBD_StdEPReq+0x30>
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	f200 817f 	bhi.w	800949c <USBD_StdEPReq+0x324>
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d02a      	beq.n	80091f8 <USBD_StdEPReq+0x80>
 80091a2:	2b20      	cmp	r3, #32
 80091a4:	f040 817a 	bne.w	800949c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff fe83 	bl	8008eb8 <USBD_CoreFindEP>
 80091b2:	4603      	mov	r3, r0
 80091b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091b6:	7b7b      	ldrb	r3, [r7, #13]
 80091b8:	2bff      	cmp	r3, #255	; 0xff
 80091ba:	f000 8174 	beq.w	80094a6 <USBD_StdEPReq+0x32e>
 80091be:	7b7b      	ldrb	r3, [r7, #13]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f040 8170 	bne.w	80094a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80091c6:	7b7a      	ldrb	r2, [r7, #13]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80091ce:	7b7a      	ldrb	r2, [r7, #13]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	32ae      	adds	r2, #174	; 0xae
 80091d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 8163 	beq.w	80094a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80091e0:	7b7a      	ldrb	r2, [r7, #13]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	32ae      	adds	r2, #174	; 0xae
 80091e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4798      	blx	r3
 80091f2:	4603      	mov	r3, r0
 80091f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091f6:	e156      	b.n	80094a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	785b      	ldrb	r3, [r3, #1]
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d008      	beq.n	8009212 <USBD_StdEPReq+0x9a>
 8009200:	2b03      	cmp	r3, #3
 8009202:	f300 8145 	bgt.w	8009490 <USBD_StdEPReq+0x318>
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 809b 	beq.w	8009342 <USBD_StdEPReq+0x1ca>
 800920c:	2b01      	cmp	r3, #1
 800920e:	d03c      	beq.n	800928a <USBD_StdEPReq+0x112>
 8009210:	e13e      	b.n	8009490 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b02      	cmp	r3, #2
 800921c:	d002      	beq.n	8009224 <USBD_StdEPReq+0xac>
 800921e:	2b03      	cmp	r3, #3
 8009220:	d016      	beq.n	8009250 <USBD_StdEPReq+0xd8>
 8009222:	e02c      	b.n	800927e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00d      	beq.n	8009246 <USBD_StdEPReq+0xce>
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b80      	cmp	r3, #128	; 0x80
 800922e:	d00a      	beq.n	8009246 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009230:	7bbb      	ldrb	r3, [r7, #14]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f002 fbcb 	bl	800b9d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800923a:	2180      	movs	r1, #128	; 0x80
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f002 fbc7 	bl	800b9d0 <USBD_LL_StallEP>
 8009242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009244:	e020      	b.n	8009288 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009246:	6839      	ldr	r1, [r7, #0]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fc7a 	bl	8009b42 <USBD_CtlError>
              break;
 800924e:	e01b      	b.n	8009288 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	885b      	ldrh	r3, [r3, #2]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10e      	bne.n	8009276 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <USBD_StdEPReq+0xfe>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d008      	beq.n	8009276 <USBD_StdEPReq+0xfe>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	88db      	ldrh	r3, [r3, #6]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d104      	bne.n	8009276 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f002 fbad 	bl	800b9d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fd2e 	bl	8009cd8 <USBD_CtlSendStatus>

              break;
 800927c:	e004      	b.n	8009288 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fc5e 	bl	8009b42 <USBD_CtlError>
              break;
 8009286:	bf00      	nop
          }
          break;
 8009288:	e107      	b.n	800949a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d002      	beq.n	800929c <USBD_StdEPReq+0x124>
 8009296:	2b03      	cmp	r3, #3
 8009298:	d016      	beq.n	80092c8 <USBD_StdEPReq+0x150>
 800929a:	e04b      	b.n	8009334 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00d      	beq.n	80092be <USBD_StdEPReq+0x146>
 80092a2:	7bbb      	ldrb	r3, [r7, #14]
 80092a4:	2b80      	cmp	r3, #128	; 0x80
 80092a6:	d00a      	beq.n	80092be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80092a8:	7bbb      	ldrb	r3, [r7, #14]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f002 fb8f 	bl	800b9d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80092b2:	2180      	movs	r1, #128	; 0x80
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f002 fb8b 	bl	800b9d0 <USBD_LL_StallEP>
 80092ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80092bc:	e040      	b.n	8009340 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80092be:	6839      	ldr	r1, [r7, #0]
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fc3e 	bl	8009b42 <USBD_CtlError>
              break;
 80092c6:	e03b      	b.n	8009340 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	885b      	ldrh	r3, [r3, #2]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d136      	bne.n	800933e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d004      	beq.n	80092e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f002 fb95 	bl	800ba0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fcf7 	bl	8009cd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
 80092ec:	4619      	mov	r1, r3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f7ff fde2 	bl	8008eb8 <USBD_CoreFindEP>
 80092f4:	4603      	mov	r3, r0
 80092f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092f8:	7b7b      	ldrb	r3, [r7, #13]
 80092fa:	2bff      	cmp	r3, #255	; 0xff
 80092fc:	d01f      	beq.n	800933e <USBD_StdEPReq+0x1c6>
 80092fe:	7b7b      	ldrb	r3, [r7, #13]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d11c      	bne.n	800933e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009304:	7b7a      	ldrb	r2, [r7, #13]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800930c:	7b7a      	ldrb	r2, [r7, #13]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	32ae      	adds	r2, #174	; 0xae
 8009312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d010      	beq.n	800933e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800931c:	7b7a      	ldrb	r2, [r7, #13]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	32ae      	adds	r2, #174	; 0xae
 8009322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
 800932e:	4603      	mov	r3, r0
 8009330:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009332:	e004      	b.n	800933e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fc03 	bl	8009b42 <USBD_CtlError>
              break;
 800933c:	e000      	b.n	8009340 <USBD_StdEPReq+0x1c8>
              break;
 800933e:	bf00      	nop
          }
          break;
 8009340:	e0ab      	b.n	800949a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d002      	beq.n	8009354 <USBD_StdEPReq+0x1dc>
 800934e:	2b03      	cmp	r3, #3
 8009350:	d032      	beq.n	80093b8 <USBD_StdEPReq+0x240>
 8009352:	e097      	b.n	8009484 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d007      	beq.n	800936a <USBD_StdEPReq+0x1f2>
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b80      	cmp	r3, #128	; 0x80
 800935e:	d004      	beq.n	800936a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fbed 	bl	8009b42 <USBD_CtlError>
                break;
 8009368:	e091      	b.n	800948e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800936a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800936e:	2b00      	cmp	r3, #0
 8009370:	da0b      	bge.n	800938a <USBD_StdEPReq+0x212>
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009378:	4613      	mov	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	3310      	adds	r3, #16
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	3304      	adds	r3, #4
 8009388:	e00b      	b.n	80093a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	4413      	add	r3, r2
 80093a0:	3304      	adds	r3, #4
 80093a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2202      	movs	r2, #2
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc37 	bl	8009c24 <USBD_CtlSendData>
              break;
 80093b6:	e06a      	b.n	800948e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80093b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da11      	bge.n	80093e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	f003 020f 	and.w	r2, r3, #15
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	3324      	adds	r3, #36	; 0x24
 80093d4:	881b      	ldrh	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d117      	bne.n	800940a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80093da:	6839      	ldr	r1, [r7, #0]
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fbb0 	bl	8009b42 <USBD_CtlError>
                  break;
 80093e2:	e054      	b.n	800948e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	f003 020f 	and.w	r2, r3, #15
 80093ea:	6879      	ldr	r1, [r7, #4]
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	440b      	add	r3, r1
 80093f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d104      	bne.n	800940a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fb9d 	bl	8009b42 <USBD_CtlError>
                  break;
 8009408:	e041      	b.n	800948e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800940a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800940e:	2b00      	cmp	r3, #0
 8009410:	da0b      	bge.n	800942a <USBD_StdEPReq+0x2b2>
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	3310      	adds	r3, #16
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	4413      	add	r3, r2
 8009426:	3304      	adds	r3, #4
 8009428:	e00b      	b.n	8009442 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	4413      	add	r3, r2
 8009440:	3304      	adds	r3, #4
 8009442:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <USBD_StdEPReq+0x2d8>
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	2b80      	cmp	r3, #128	; 0x80
 800944e:	d103      	bne.n	8009458 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e00e      	b.n	8009476 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f002 faf5 	bl	800ba4c <USBD_LL_IsStallEP>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d003      	beq.n	8009470 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2201      	movs	r2, #1
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	e002      	b.n	8009476 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2202      	movs	r2, #2
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fbd1 	bl	8009c24 <USBD_CtlSendData>
              break;
 8009482:	e004      	b.n	800948e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fb5b 	bl	8009b42 <USBD_CtlError>
              break;
 800948c:	bf00      	nop
          }
          break;
 800948e:	e004      	b.n	800949a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fb55 	bl	8009b42 <USBD_CtlError>
          break;
 8009498:	bf00      	nop
      }
      break;
 800949a:	e005      	b.n	80094a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fb4f 	bl	8009b42 <USBD_CtlError>
      break;
 80094a4:	e000      	b.n	80094a8 <USBD_StdEPReq+0x330>
      break;
 80094a6:	bf00      	nop
  }

  return ret;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	885b      	ldrh	r3, [r3, #2]
 80094ce:	0a1b      	lsrs	r3, r3, #8
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	2b06      	cmp	r3, #6
 80094d6:	f200 8128 	bhi.w	800972a <USBD_GetDescriptor+0x276>
 80094da:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <USBD_GetDescriptor+0x2c>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	080094fd 	.word	0x080094fd
 80094e4:	08009515 	.word	0x08009515
 80094e8:	08009555 	.word	0x08009555
 80094ec:	0800972b 	.word	0x0800972b
 80094f0:	0800972b 	.word	0x0800972b
 80094f4:	080096cb 	.word	0x080096cb
 80094f8:	080096f7 	.word	0x080096f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	7c12      	ldrb	r2, [r2, #16]
 8009508:	f107 0108 	add.w	r1, r7, #8
 800950c:	4610      	mov	r0, r2
 800950e:	4798      	blx	r3
 8009510:	60f8      	str	r0, [r7, #12]
      break;
 8009512:	e112      	b.n	800973a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	7c1b      	ldrb	r3, [r3, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10d      	bne.n	8009538 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	f107 0208 	add.w	r2, r7, #8
 8009528:	4610      	mov	r0, r2
 800952a:	4798      	blx	r3
 800952c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3301      	adds	r3, #1
 8009532:	2202      	movs	r2, #2
 8009534:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009536:	e100      	b.n	800973a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	f107 0208 	add.w	r2, r7, #8
 8009544:	4610      	mov	r0, r2
 8009546:	4798      	blx	r3
 8009548:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3301      	adds	r3, #1
 800954e:	2202      	movs	r2, #2
 8009550:	701a      	strb	r2, [r3, #0]
      break;
 8009552:	e0f2      	b.n	800973a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	885b      	ldrh	r3, [r3, #2]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b05      	cmp	r3, #5
 800955c:	f200 80ac 	bhi.w	80096b8 <USBD_GetDescriptor+0x204>
 8009560:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <USBD_GetDescriptor+0xb4>)
 8009562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009566:	bf00      	nop
 8009568:	08009581 	.word	0x08009581
 800956c:	080095b5 	.word	0x080095b5
 8009570:	080095e9 	.word	0x080095e9
 8009574:	0800961d 	.word	0x0800961d
 8009578:	08009651 	.word	0x08009651
 800957c:	08009685 	.word	0x08009685
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095a2:	e091      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 facb 	bl	8009b42 <USBD_CtlError>
            err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
          break;
 80095b2:	e089      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	7c12      	ldrb	r2, [r2, #16]
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
 80095d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095d6:	e077      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fab1 	bl	8009b42 <USBD_CtlError>
            err++;
 80095e0:	7afb      	ldrb	r3, [r7, #11]
 80095e2:	3301      	adds	r3, #1
 80095e4:	72fb      	strb	r3, [r7, #11]
          break;
 80095e6:	e06f      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7c12      	ldrb	r2, [r2, #16]
 8009600:	f107 0108 	add.w	r1, r7, #8
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800960a:	e05d      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fa97 	bl	8009b42 <USBD_CtlError>
            err++;
 8009614:	7afb      	ldrb	r3, [r7, #11]
 8009616:	3301      	adds	r3, #1
 8009618:	72fb      	strb	r3, [r7, #11]
          break;
 800961a:	e055      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	7c12      	ldrb	r2, [r2, #16]
 8009634:	f107 0108 	add.w	r1, r7, #8
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
 800963c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800963e:	e043      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fa7d 	bl	8009b42 <USBD_CtlError>
            err++;
 8009648:	7afb      	ldrb	r3, [r7, #11]
 800964a:	3301      	adds	r3, #1
 800964c:	72fb      	strb	r3, [r7, #11]
          break;
 800964e:	e03b      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	7c12      	ldrb	r2, [r2, #16]
 8009668:	f107 0108 	add.w	r1, r7, #8
 800966c:	4610      	mov	r0, r2
 800966e:	4798      	blx	r3
 8009670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009672:	e029      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa63 	bl	8009b42 <USBD_CtlError>
            err++;
 800967c:	7afb      	ldrb	r3, [r7, #11]
 800967e:	3301      	adds	r3, #1
 8009680:	72fb      	strb	r3, [r7, #11]
          break;
 8009682:	e021      	b.n	80096c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	7c12      	ldrb	r2, [r2, #16]
 800969c:	f107 0108 	add.w	r1, r7, #8
 80096a0:	4610      	mov	r0, r2
 80096a2:	4798      	blx	r3
 80096a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096a6:	e00f      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096a8:	6839      	ldr	r1, [r7, #0]
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fa49 	bl	8009b42 <USBD_CtlError>
            err++;
 80096b0:	7afb      	ldrb	r3, [r7, #11]
 80096b2:	3301      	adds	r3, #1
 80096b4:	72fb      	strb	r3, [r7, #11]
          break;
 80096b6:	e007      	b.n	80096c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fa41 	bl	8009b42 <USBD_CtlError>
          err++;
 80096c0:	7afb      	ldrb	r3, [r7, #11]
 80096c2:	3301      	adds	r3, #1
 80096c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80096c6:	bf00      	nop
      }
      break;
 80096c8:	e037      	b.n	800973a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	7c1b      	ldrb	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d109      	bne.n	80096e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096da:	f107 0208 	add.w	r2, r7, #8
 80096de:	4610      	mov	r0, r2
 80096e0:	4798      	blx	r3
 80096e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096e4:	e029      	b.n	800973a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa2a 	bl	8009b42 <USBD_CtlError>
        err++;
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	3301      	adds	r3, #1
 80096f2:	72fb      	strb	r3, [r7, #11]
      break;
 80096f4:	e021      	b.n	800973a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	7c1b      	ldrb	r3, [r3, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10d      	bne.n	800971a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009706:	f107 0208 	add.w	r2, r7, #8
 800970a:	4610      	mov	r0, r2
 800970c:	4798      	blx	r3
 800970e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
 8009714:	2207      	movs	r2, #7
 8009716:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009718:	e00f      	b.n	800973a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fa10 	bl	8009b42 <USBD_CtlError>
        err++;
 8009722:	7afb      	ldrb	r3, [r7, #11]
 8009724:	3301      	adds	r3, #1
 8009726:	72fb      	strb	r3, [r7, #11]
      break;
 8009728:	e007      	b.n	800973a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fa08 	bl	8009b42 <USBD_CtlError>
      err++;
 8009732:	7afb      	ldrb	r3, [r7, #11]
 8009734:	3301      	adds	r3, #1
 8009736:	72fb      	strb	r3, [r7, #11]
      break;
 8009738:	bf00      	nop
  }

  if (err != 0U)
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d11e      	bne.n	800977e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	88db      	ldrh	r3, [r3, #6]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d016      	beq.n	8009776 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009748:	893b      	ldrh	r3, [r7, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00e      	beq.n	800976c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	88da      	ldrh	r2, [r3, #6]
 8009752:	893b      	ldrh	r3, [r7, #8]
 8009754:	4293      	cmp	r3, r2
 8009756:	bf28      	it	cs
 8009758:	4613      	movcs	r3, r2
 800975a:	b29b      	uxth	r3, r3
 800975c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800975e:	893b      	ldrh	r3, [r7, #8]
 8009760:	461a      	mov	r2, r3
 8009762:	68f9      	ldr	r1, [r7, #12]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fa5d 	bl	8009c24 <USBD_CtlSendData>
 800976a:	e009      	b.n	8009780 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f9e7 	bl	8009b42 <USBD_CtlError>
 8009774:	e004      	b.n	8009780 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 faae 	bl	8009cd8 <USBD_CtlSendStatus>
 800977c:	e000      	b.n	8009780 <USBD_GetDescriptor+0x2cc>
    return;
 800977e:	bf00      	nop
  }
}
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop

08009788 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	889b      	ldrh	r3, [r3, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d131      	bne.n	80097fe <USBD_SetAddress+0x76>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	88db      	ldrh	r3, [r3, #6]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d12d      	bne.n	80097fe <USBD_SetAddress+0x76>
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	885b      	ldrh	r3, [r3, #2]
 80097a6:	2b7f      	cmp	r3, #127	; 0x7f
 80097a8:	d829      	bhi.n	80097fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d104      	bne.n	80097cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f9bc 	bl	8009b42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ca:	e01d      	b.n	8009808 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7bfa      	ldrb	r2, [r7, #15]
 80097d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f002 f963 	bl	800baa4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa7a 	bl	8009cd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2202      	movs	r2, #2
 80097ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097f2:	e009      	b.n	8009808 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097fc:	e004      	b.n	8009808 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f99e 	bl	8009b42 <USBD_CtlError>
  }
}
 8009806:	bf00      	nop
 8009808:	bf00      	nop
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	885b      	ldrh	r3, [r3, #2]
 8009822:	b2da      	uxtb	r2, r3
 8009824:	4b4e      	ldr	r3, [pc, #312]	; (8009960 <USBD_SetConfig+0x150>)
 8009826:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009828:	4b4d      	ldr	r3, [pc, #308]	; (8009960 <USBD_SetConfig+0x150>)
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d905      	bls.n	800983c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f985 	bl	8009b42 <USBD_CtlError>
    return USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	e08c      	b.n	8009956 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b02      	cmp	r3, #2
 8009846:	d002      	beq.n	800984e <USBD_SetConfig+0x3e>
 8009848:	2b03      	cmp	r3, #3
 800984a:	d029      	beq.n	80098a0 <USBD_SetConfig+0x90>
 800984c:	e075      	b.n	800993a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800984e:	4b44      	ldr	r3, [pc, #272]	; (8009960 <USBD_SetConfig+0x150>)
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d020      	beq.n	8009898 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009856:	4b42      	ldr	r3, [pc, #264]	; (8009960 <USBD_SetConfig+0x150>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009860:	4b3f      	ldr	r3, [pc, #252]	; (8009960 <USBD_SetConfig+0x150>)
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	4619      	mov	r1, r3
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7fe ffe7 	bl	800883a <USBD_SetClassConfig>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009870:	7bfb      	ldrb	r3, [r7, #15]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d008      	beq.n	8009888 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f962 	bl	8009b42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2202      	movs	r2, #2
 8009882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009886:	e065      	b.n	8009954 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fa25 	bl	8009cd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2203      	movs	r2, #3
 8009892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009896:	e05d      	b.n	8009954 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fa1d 	bl	8009cd8 <USBD_CtlSendStatus>
      break;
 800989e:	e059      	b.n	8009954 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098a0:	4b2f      	ldr	r3, [pc, #188]	; (8009960 <USBD_SetConfig+0x150>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d112      	bne.n	80098ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2202      	movs	r2, #2
 80098ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80098b0:	4b2b      	ldr	r3, [pc, #172]	; (8009960 <USBD_SetConfig+0x150>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80098ba:	4b29      	ldr	r3, [pc, #164]	; (8009960 <USBD_SetConfig+0x150>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7fe ffd6 	bl	8008872 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fa06 	bl	8009cd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098cc:	e042      	b.n	8009954 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80098ce:	4b24      	ldr	r3, [pc, #144]	; (8009960 <USBD_SetConfig+0x150>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d02a      	beq.n	8009932 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7fe ffc4 	bl	8008872 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80098ea:	4b1d      	ldr	r3, [pc, #116]	; (8009960 <USBD_SetConfig+0x150>)
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098f4:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <USBD_SetConfig+0x150>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7fe ff9d 	bl	800883a <USBD_SetClassConfig>
 8009900:	4603      	mov	r3, r0
 8009902:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00f      	beq.n	800992a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f918 	bl	8009b42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	b2db      	uxtb	r3, r3
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fe ffa9 	bl	8008872 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009928:	e014      	b.n	8009954 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f9d4 	bl	8009cd8 <USBD_CtlSendStatus>
      break;
 8009930:	e010      	b.n	8009954 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f9d0 	bl	8009cd8 <USBD_CtlSendStatus>
      break;
 8009938:	e00c      	b.n	8009954 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f900 	bl	8009b42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009942:	4b07      	ldr	r3, [pc, #28]	; (8009960 <USBD_SetConfig+0x150>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7fe ff92 	bl	8008872 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800994e:	2303      	movs	r3, #3
 8009950:	73fb      	strb	r3, [r7, #15]
      break;
 8009952:	bf00      	nop
  }

  return ret;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	20000754 	.word	0x20000754

08009964 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	88db      	ldrh	r3, [r3, #6]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d004      	beq.n	8009980 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f8e2 	bl	8009b42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800997e:	e023      	b.n	80099c8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	dc02      	bgt.n	8009992 <USBD_GetConfig+0x2e>
 800998c:	2b00      	cmp	r3, #0
 800998e:	dc03      	bgt.n	8009998 <USBD_GetConfig+0x34>
 8009990:	e015      	b.n	80099be <USBD_GetConfig+0x5a>
 8009992:	2b03      	cmp	r3, #3
 8009994:	d00b      	beq.n	80099ae <USBD_GetConfig+0x4a>
 8009996:	e012      	b.n	80099be <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3308      	adds	r3, #8
 80099a2:	2201      	movs	r2, #1
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f93c 	bl	8009c24 <USBD_CtlSendData>
        break;
 80099ac:	e00c      	b.n	80099c8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3304      	adds	r3, #4
 80099b2:	2201      	movs	r2, #1
 80099b4:	4619      	mov	r1, r3
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f934 	bl	8009c24 <USBD_CtlSendData>
        break;
 80099bc:	e004      	b.n	80099c8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f8be 	bl	8009b42 <USBD_CtlError>
        break;
 80099c6:	bf00      	nop
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d81e      	bhi.n	8009a26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	88db      	ldrh	r3, [r3, #6]
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d004      	beq.n	80099fa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f8a5 	bl	8009b42 <USBD_CtlError>
        break;
 80099f8:	e01a      	b.n	8009a30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f043 0202 	orr.w	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	330c      	adds	r3, #12
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f900 	bl	8009c24 <USBD_CtlSendData>
      break;
 8009a24:	e004      	b.n	8009a30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f88a 	bl	8009b42 <USBD_CtlError>
      break;
 8009a2e:	bf00      	nop
  }
}
 8009a30:	bf00      	nop
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d107      	bne.n	8009a5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f940 	bl	8009cd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009a58:	e013      	b.n	8009a82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	885b      	ldrh	r3, [r3, #2]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d10b      	bne.n	8009a7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	889b      	ldrh	r3, [r3, #4]
 8009a66:	0a1b      	lsrs	r3, r3, #8
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f930 	bl	8009cd8 <USBD_CtlSendStatus>
}
 8009a78:	e003      	b.n	8009a82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 f860 	bl	8009b42 <USBD_CtlError>
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d80b      	bhi.n	8009aba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	885b      	ldrh	r3, [r3, #2]
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d10c      	bne.n	8009ac4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 f910 	bl	8009cd8 <USBD_CtlSendStatus>
      }
      break;
 8009ab8:	e004      	b.n	8009ac4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f840 	bl	8009b42 <USBD_CtlError>
      break;
 8009ac2:	e000      	b.n	8009ac6 <USBD_ClrFeature+0x3c>
      break;
 8009ac4:	bf00      	nop
  }
}
 8009ac6:	bf00      	nop
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	781a      	ldrb	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	781a      	ldrb	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3301      	adds	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff fa41 	bl	8008f80 <SWAPBYTE>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f7ff fa34 	bl	8008f80 <SWAPBYTE>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff fa27 	bl	8008f80 <SWAPBYTE>
 8009b32:	4603      	mov	r3, r0
 8009b34:	461a      	mov	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	80da      	strh	r2, [r3, #6]
}
 8009b3a:	bf00      	nop
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b082      	sub	sp, #8
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	6078      	str	r0, [r7, #4]
 8009b4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b4c:	2180      	movs	r1, #128	; 0x80
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 ff3e 	bl	800b9d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b54:	2100      	movs	r1, #0
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f001 ff3a 	bl	800b9d0 <USBD_LL_StallEP>
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d036      	beq.n	8009be8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b7e:	6938      	ldr	r0, [r7, #16]
 8009b80:	f000 f836 	bl	8009bf0 <USBD_GetLen>
 8009b84:	4603      	mov	r3, r0
 8009b86:	3301      	adds	r3, #1
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	b29a      	uxth	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	68ba      	ldr	r2, [r7, #8]
 8009b96:	4413      	add	r3, r2
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	7812      	ldrb	r2, [r2, #0]
 8009b9c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	4413      	add	r3, r2
 8009baa:	2203      	movs	r2, #3
 8009bac:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009bb4:	e013      	b.n	8009bde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	4413      	add	r3, r2
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	613b      	str	r3, [r7, #16]
    idx++;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e7      	bne.n	8009bb6 <USBD_GetString+0x52>
 8009be6:	e000      	b.n	8009bea <USBD_GetString+0x86>
    return;
 8009be8:	bf00      	nop
  }
}
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c00:	e005      	b.n	8009c0e <USBD_GetLen+0x1e>
  {
    len++;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	3301      	adds	r3, #1
 8009c06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1f5      	bne.n	8009c02 <USBD_GetLen+0x12>
  }

  return len;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	2100      	movs	r1, #0
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f001 ff49 	bl	800bae2 <USBD_LL_Transmit>

  return USBD_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f001 ff38 	bl	800bae2 <USBD_LL_Transmit>

  return USBD_OK;
 8009c72:	2300      	movs	r3, #0
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2203      	movs	r2, #3
 8009c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f001 ff3c 	bl	800bb24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	2100      	movs	r1, #0
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f001 ff2b 	bl	800bb24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2204      	movs	r2, #4
 8009ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ce8:	2300      	movs	r3, #0
 8009cea:	2200      	movs	r2, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 fef7 	bl	800bae2 <USBD_LL_Transmit>

  return USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b082      	sub	sp, #8
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2205      	movs	r2, #5
 8009d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d0e:	2300      	movs	r3, #0
 8009d10:	2200      	movs	r2, #0
 8009d12:	2100      	movs	r1, #0
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 ff05 	bl	800bb24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d36:	2b84      	cmp	r3, #132	; 0x84
 8009d38:	d005      	beq.n	8009d46 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	3303      	adds	r3, #3
 8009d44:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d46:	68fb      	ldr	r3, [r7, #12]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d58:	f000 fade 	bl	800a318 <vTaskStartScheduler>
  
  return osOK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d64:	b089      	sub	sp, #36	; 0x24
 8009d66:	af04      	add	r7, sp, #16
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d020      	beq.n	8009db6 <osThreadCreate+0x54>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d01c      	beq.n	8009db6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685c      	ldr	r4, [r3, #4]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	691e      	ldr	r6, [r3, #16]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff ffc8 	bl	8009d24 <makeFreeRtosPriority>
 8009d94:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d9e:	9202      	str	r2, [sp, #8]
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	9100      	str	r1, [sp, #0]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	4632      	mov	r2, r6
 8009da8:	4629      	mov	r1, r5
 8009daa:	4620      	mov	r0, r4
 8009dac:	f000 f8ed 	bl	8009f8a <xTaskCreateStatic>
 8009db0:	4603      	mov	r3, r0
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	e01c      	b.n	8009df0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685c      	ldr	r4, [r3, #4]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dc2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff ffaa 	bl	8009d24 <makeFreeRtosPriority>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	f107 030c 	add.w	r3, r7, #12
 8009dd6:	9301      	str	r3, [sp, #4]
 8009dd8:	9200      	str	r2, [sp, #0]
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	4632      	mov	r2, r6
 8009dde:	4629      	mov	r1, r5
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 f92f 	bl	800a044 <xTaskCreate>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d001      	beq.n	8009df0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009dec:	2300      	movs	r3, #0
 8009dee:	e000      	b.n	8009df2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009df0:	68fb      	ldr	r3, [r7, #12]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dfa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <osDelay+0x16>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	e000      	b.n	8009e12 <osDelay+0x18>
 8009e10:	2301      	movs	r3, #1
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fa4c 	bl	800a2b0 <vTaskDelay>
  
  return osOK;
 8009e18:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f103 0208 	add.w	r2, r3, #8
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f103 0208 	add.w	r2, r3, #8
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f103 0208 	add.w	r2, r3, #8
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	689a      	ldr	r2, [r3, #8]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	601a      	str	r2, [r3, #0]
}
 8009eb8:	bf00      	nop
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d103      	bne.n	8009ee4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	e00c      	b.n	8009efe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3308      	adds	r3, #8
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	e002      	b.n	8009ef2 <vListInsert+0x2e>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d2f6      	bcs.n	8009eec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	683a      	ldr	r2, [r7, #0]
 8009f0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	1c5a      	adds	r2, r3, #1
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	601a      	str	r2, [r3, #0]
}
 8009f2a:	bf00      	nop
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f36:	b480      	push	{r7}
 8009f38:	b085      	sub	sp, #20
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	6892      	ldr	r2, [r2, #8]
 8009f4c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6852      	ldr	r2, [r2, #4]
 8009f56:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d103      	bne.n	8009f6a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	689a      	ldr	r2, [r3, #8]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	1e5a      	subs	r2, r3, #1
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b08e      	sub	sp, #56	; 0x38
 8009f8e:	af04      	add	r7, sp, #16
 8009f90:	60f8      	str	r0, [r7, #12]
 8009f92:	60b9      	str	r1, [r7, #8]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10a      	bne.n	8009fb4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009fb0:	bf00      	nop
 8009fb2:	e7fe      	b.n	8009fb2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10a      	bne.n	8009fd0 <xTaskCreateStatic+0x46>
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	61fb      	str	r3, [r7, #28]
}
 8009fcc:	bf00      	nop
 8009fce:	e7fe      	b.n	8009fce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fd0:	2354      	movs	r3, #84	; 0x54
 8009fd2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2b54      	cmp	r3, #84	; 0x54
 8009fd8:	d00a      	beq.n	8009ff0 <xTaskCreateStatic+0x66>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	61bb      	str	r3, [r7, #24]
}
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ff0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d01e      	beq.n	800a036 <xTaskCreateStatic+0xac>
 8009ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d01b      	beq.n	800a036 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a006:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	2202      	movs	r2, #2
 800a00c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a010:	2300      	movs	r3, #0
 800a012:	9303      	str	r3, [sp, #12]
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	9302      	str	r3, [sp, #8]
 800a018:	f107 0314 	add.w	r3, r7, #20
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	68b9      	ldr	r1, [r7, #8]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 f850 	bl	800a0ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a02e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a030:	f000 f8d4 	bl	800a1dc <prvAddNewTaskToReadyList>
 800a034:	e001      	b.n	800a03a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a03a:	697b      	ldr	r3, [r7, #20]
	}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3728      	adds	r7, #40	; 0x28
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08c      	sub	sp, #48	; 0x30
 800a048:	af04      	add	r7, sp, #16
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	603b      	str	r3, [r7, #0]
 800a050:	4613      	mov	r3, r2
 800a052:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a054:	88fb      	ldrh	r3, [r7, #6]
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 fec5 	bl	800ade8 <pvPortMalloc>
 800a05e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00e      	beq.n	800a084 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a066:	2054      	movs	r0, #84	; 0x54
 800a068:	f000 febe 	bl	800ade8 <pvPortMalloc>
 800a06c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	631a      	str	r2, [r3, #48]	; 0x30
 800a07a:	e005      	b.n	800a088 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a07c:	6978      	ldr	r0, [r7, #20]
 800a07e:	f000 ff7f 	bl	800af80 <vPortFree>
 800a082:	e001      	b.n	800a088 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a084:	2300      	movs	r3, #0
 800a086:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d017      	beq.n	800a0be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a096:	88fa      	ldrh	r2, [r7, #6]
 800a098:	2300      	movs	r3, #0
 800a09a:	9303      	str	r3, [sp, #12]
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	9302      	str	r3, [sp, #8]
 800a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a2:	9301      	str	r3, [sp, #4]
 800a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	68b9      	ldr	r1, [r7, #8]
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 f80e 	bl	800a0ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0b2:	69f8      	ldr	r0, [r7, #28]
 800a0b4:	f000 f892 	bl	800a1dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	61bb      	str	r3, [r7, #24]
 800a0bc:	e002      	b.n	800a0c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0be:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
	}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3720      	adds	r7, #32
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b088      	sub	sp, #32
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	607a      	str	r2, [r7, #4]
 800a0da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	f023 0307 	bic.w	r3, r3, #7
 800a0f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	f003 0307 	and.w	r3, r3, #7
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00a      	beq.n	800a116 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	617b      	str	r3, [r7, #20]
}
 800a112:	bf00      	nop
 800a114:	e7fe      	b.n	800a114 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01f      	beq.n	800a15c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a11c:	2300      	movs	r3, #0
 800a11e:	61fb      	str	r3, [r7, #28]
 800a120:	e012      	b.n	800a148 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	4413      	add	r3, r2
 800a128:	7819      	ldrb	r1, [r3, #0]
 800a12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	4413      	add	r3, r2
 800a130:	3334      	adds	r3, #52	; 0x34
 800a132:	460a      	mov	r2, r1
 800a134:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	4413      	add	r3, r2
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d006      	beq.n	800a150 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	3301      	adds	r3, #1
 800a146:	61fb      	str	r3, [r7, #28]
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	2b0f      	cmp	r3, #15
 800a14c:	d9e9      	bls.n	800a122 <prvInitialiseNewTask+0x54>
 800a14e:	e000      	b.n	800a152 <prvInitialiseNewTask+0x84>
			{
				break;
 800a150:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a15a:	e003      	b.n	800a164 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	2b06      	cmp	r3, #6
 800a168:	d901      	bls.n	800a16e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a16a:	2306      	movs	r3, #6
 800a16c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a172:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a178:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	2200      	movs	r2, #0
 800a17e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	3304      	adds	r3, #4
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fe6c 	bl	8009e62 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18c:	3318      	adds	r3, #24
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff fe67 	bl	8009e62 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a198:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	f1c3 0207 	rsb	r2, r3, #7
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	68f9      	ldr	r1, [r7, #12]
 800a1bc:	69b8      	ldr	r0, [r7, #24]
 800a1be:	f000 fc05 	bl	800a9cc <pxPortInitialiseStack>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1d4:	bf00      	nop
 800a1d6:	3720      	adds	r7, #32
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1e4:	f000 fd1e 	bl	800ac24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1e8:	4b2a      	ldr	r3, [pc, #168]	; (800a294 <prvAddNewTaskToReadyList+0xb8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	4a29      	ldr	r2, [pc, #164]	; (800a294 <prvAddNewTaskToReadyList+0xb8>)
 800a1f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1f2:	4b29      	ldr	r3, [pc, #164]	; (800a298 <prvAddNewTaskToReadyList+0xbc>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d109      	bne.n	800a20e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1fa:	4a27      	ldr	r2, [pc, #156]	; (800a298 <prvAddNewTaskToReadyList+0xbc>)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a200:	4b24      	ldr	r3, [pc, #144]	; (800a294 <prvAddNewTaskToReadyList+0xb8>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d110      	bne.n	800a22a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a208:	f000 fabc 	bl	800a784 <prvInitialiseTaskLists>
 800a20c:	e00d      	b.n	800a22a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a20e:	4b23      	ldr	r3, [pc, #140]	; (800a29c <prvAddNewTaskToReadyList+0xc0>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a216:	4b20      	ldr	r3, [pc, #128]	; (800a298 <prvAddNewTaskToReadyList+0xbc>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	429a      	cmp	r2, r3
 800a222:	d802      	bhi.n	800a22a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a224:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <prvAddNewTaskToReadyList+0xbc>)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a22a:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <prvAddNewTaskToReadyList+0xc4>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3301      	adds	r3, #1
 800a230:	4a1b      	ldr	r2, [pc, #108]	; (800a2a0 <prvAddNewTaskToReadyList+0xc4>)
 800a232:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	2201      	movs	r2, #1
 800a23a:	409a      	lsls	r2, r3
 800a23c:	4b19      	ldr	r3, [pc, #100]	; (800a2a4 <prvAddNewTaskToReadyList+0xc8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4313      	orrs	r3, r2
 800a242:	4a18      	ldr	r2, [pc, #96]	; (800a2a4 <prvAddNewTaskToReadyList+0xc8>)
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24a:	4613      	mov	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4a15      	ldr	r2, [pc, #84]	; (800a2a8 <prvAddNewTaskToReadyList+0xcc>)
 800a254:	441a      	add	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3304      	adds	r3, #4
 800a25a:	4619      	mov	r1, r3
 800a25c:	4610      	mov	r0, r2
 800a25e:	f7ff fe0d 	bl	8009e7c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a262:	f000 fd0f 	bl	800ac84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a266:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <prvAddNewTaskToReadyList+0xc0>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00e      	beq.n	800a28c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a26e:	4b0a      	ldr	r3, [pc, #40]	; (800a298 <prvAddNewTaskToReadyList+0xbc>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	429a      	cmp	r2, r3
 800a27a:	d207      	bcs.n	800a28c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a27c:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <prvAddNewTaskToReadyList+0xd0>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a28c:	bf00      	nop
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20000858 	.word	0x20000858
 800a298:	20000758 	.word	0x20000758
 800a29c:	20000864 	.word	0x20000864
 800a2a0:	20000874 	.word	0x20000874
 800a2a4:	20000860 	.word	0x20000860
 800a2a8:	2000075c 	.word	0x2000075c
 800a2ac:	e000ed04 	.word	0xe000ed04

0800a2b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d017      	beq.n	800a2f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a2c2:	4b13      	ldr	r3, [pc, #76]	; (800a310 <vTaskDelay+0x60>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <vTaskDelay+0x30>
	__asm volatile
 800a2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ce:	f383 8811 	msr	BASEPRI, r3
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	60bb      	str	r3, [r7, #8]
}
 800a2dc:	bf00      	nop
 800a2de:	e7fe      	b.n	800a2de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a2e0:	f000 f87a 	bl	800a3d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fb0a 	bl	800a900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a2ec:	f000 f882 	bl	800a3f4 <xTaskResumeAll>
 800a2f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d107      	bne.n	800a308 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a2f8:	4b06      	ldr	r3, [pc, #24]	; (800a314 <vTaskDelay+0x64>)
 800a2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fe:	601a      	str	r2, [r3, #0]
 800a300:	f3bf 8f4f 	dsb	sy
 800a304:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a308:	bf00      	nop
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20000880 	.word	0x20000880
 800a314:	e000ed04 	.word	0xe000ed04

0800a318 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	; 0x28
 800a31c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a322:	2300      	movs	r3, #0
 800a324:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a326:	463a      	mov	r2, r7
 800a328:	1d39      	adds	r1, r7, #4
 800a32a:	f107 0308 	add.w	r3, r7, #8
 800a32e:	4618      	mov	r0, r3
 800a330:	f7f7 f8b8 	bl	80014a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	9202      	str	r2, [sp, #8]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	2300      	movs	r3, #0
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	2300      	movs	r3, #0
 800a344:	460a      	mov	r2, r1
 800a346:	491e      	ldr	r1, [pc, #120]	; (800a3c0 <vTaskStartScheduler+0xa8>)
 800a348:	481e      	ldr	r0, [pc, #120]	; (800a3c4 <vTaskStartScheduler+0xac>)
 800a34a:	f7ff fe1e 	bl	8009f8a <xTaskCreateStatic>
 800a34e:	4603      	mov	r3, r0
 800a350:	4a1d      	ldr	r2, [pc, #116]	; (800a3c8 <vTaskStartScheduler+0xb0>)
 800a352:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a354:	4b1c      	ldr	r3, [pc, #112]	; (800a3c8 <vTaskStartScheduler+0xb0>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d002      	beq.n	800a362 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a35c:	2301      	movs	r3, #1
 800a35e:	617b      	str	r3, [r7, #20]
 800a360:	e001      	b.n	800a366 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d116      	bne.n	800a39a <vTaskStartScheduler+0x82>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	613b      	str	r3, [r7, #16]
}
 800a37e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a380:	4b12      	ldr	r3, [pc, #72]	; (800a3cc <vTaskStartScheduler+0xb4>)
 800a382:	f04f 32ff 	mov.w	r2, #4294967295
 800a386:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a388:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <vTaskStartScheduler+0xb8>)
 800a38a:	2201      	movs	r2, #1
 800a38c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a38e:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <vTaskStartScheduler+0xbc>)
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a394:	f000 fba4 	bl	800aae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a398:	e00e      	b.n	800a3b8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a0:	d10a      	bne.n	800a3b8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	60fb      	str	r3, [r7, #12]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <vTaskStartScheduler+0x9e>
}
 800a3b8:	bf00      	nop
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	0800cfe4 	.word	0x0800cfe4
 800a3c4:	0800a755 	.word	0x0800a755
 800a3c8:	2000087c 	.word	0x2000087c
 800a3cc:	20000878 	.word	0x20000878
 800a3d0:	20000864 	.word	0x20000864
 800a3d4:	2000085c 	.word	0x2000085c

0800a3d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a3dc:	4b04      	ldr	r3, [pc, #16]	; (800a3f0 <vTaskSuspendAll+0x18>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	4a03      	ldr	r2, [pc, #12]	; (800a3f0 <vTaskSuspendAll+0x18>)
 800a3e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a3e6:	bf00      	nop
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	20000880 	.word	0x20000880

0800a3f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a402:	4b41      	ldr	r3, [pc, #260]	; (800a508 <xTaskResumeAll+0x114>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10a      	bne.n	800a420 <xTaskResumeAll+0x2c>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	603b      	str	r3, [r7, #0]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a420:	f000 fc00 	bl	800ac24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a424:	4b38      	ldr	r3, [pc, #224]	; (800a508 <xTaskResumeAll+0x114>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3b01      	subs	r3, #1
 800a42a:	4a37      	ldr	r2, [pc, #220]	; (800a508 <xTaskResumeAll+0x114>)
 800a42c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a42e:	4b36      	ldr	r3, [pc, #216]	; (800a508 <xTaskResumeAll+0x114>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d161      	bne.n	800a4fa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a436:	4b35      	ldr	r3, [pc, #212]	; (800a50c <xTaskResumeAll+0x118>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d05d      	beq.n	800a4fa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a43e:	e02e      	b.n	800a49e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a440:	4b33      	ldr	r3, [pc, #204]	; (800a510 <xTaskResumeAll+0x11c>)
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3318      	adds	r3, #24
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7ff fd72 	bl	8009f36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3304      	adds	r3, #4
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff fd6d 	bl	8009f36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	2201      	movs	r2, #1
 800a462:	409a      	lsls	r2, r3
 800a464:	4b2b      	ldr	r3, [pc, #172]	; (800a514 <xTaskResumeAll+0x120>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4313      	orrs	r3, r2
 800a46a:	4a2a      	ldr	r2, [pc, #168]	; (800a514 <xTaskResumeAll+0x120>)
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a472:	4613      	mov	r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	4413      	add	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4a27      	ldr	r2, [pc, #156]	; (800a518 <xTaskResumeAll+0x124>)
 800a47c:	441a      	add	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3304      	adds	r3, #4
 800a482:	4619      	mov	r1, r3
 800a484:	4610      	mov	r0, r2
 800a486:	f7ff fcf9 	bl	8009e7c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48e:	4b23      	ldr	r3, [pc, #140]	; (800a51c <xTaskResumeAll+0x128>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	429a      	cmp	r2, r3
 800a496:	d302      	bcc.n	800a49e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a498:	4b21      	ldr	r3, [pc, #132]	; (800a520 <xTaskResumeAll+0x12c>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a49e:	4b1c      	ldr	r3, [pc, #112]	; (800a510 <xTaskResumeAll+0x11c>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1cc      	bne.n	800a440 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4ac:	f000 fa08 	bl	800a8c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a4b0:	4b1c      	ldr	r3, [pc, #112]	; (800a524 <xTaskResumeAll+0x130>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d010      	beq.n	800a4de <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4bc:	f000 f836 	bl	800a52c <xTaskIncrementTick>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a4c6:	4b16      	ldr	r3, [pc, #88]	; (800a520 <xTaskResumeAll+0x12c>)
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1f1      	bne.n	800a4bc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a4d8:	4b12      	ldr	r3, [pc, #72]	; (800a524 <xTaskResumeAll+0x130>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4de:	4b10      	ldr	r3, [pc, #64]	; (800a520 <xTaskResumeAll+0x12c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d009      	beq.n	800a4fa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4ea:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <xTaskResumeAll+0x134>)
 800a4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4fa:	f000 fbc3 	bl	800ac84 <vPortExitCritical>

	return xAlreadyYielded;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	20000880 	.word	0x20000880
 800a50c:	20000858 	.word	0x20000858
 800a510:	20000818 	.word	0x20000818
 800a514:	20000860 	.word	0x20000860
 800a518:	2000075c 	.word	0x2000075c
 800a51c:	20000758 	.word	0x20000758
 800a520:	2000086c 	.word	0x2000086c
 800a524:	20000868 	.word	0x20000868
 800a528:	e000ed04 	.word	0xe000ed04

0800a52c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a532:	2300      	movs	r3, #0
 800a534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a536:	4b4e      	ldr	r3, [pc, #312]	; (800a670 <xTaskIncrementTick+0x144>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f040 808e 	bne.w	800a65c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a540:	4b4c      	ldr	r3, [pc, #304]	; (800a674 <xTaskIncrementTick+0x148>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a548:	4a4a      	ldr	r2, [pc, #296]	; (800a674 <xTaskIncrementTick+0x148>)
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d120      	bne.n	800a596 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a554:	4b48      	ldr	r3, [pc, #288]	; (800a678 <xTaskIncrementTick+0x14c>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <xTaskIncrementTick+0x48>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	603b      	str	r3, [r7, #0]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <xTaskIncrementTick+0x46>
 800a574:	4b40      	ldr	r3, [pc, #256]	; (800a678 <xTaskIncrementTick+0x14c>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	60fb      	str	r3, [r7, #12]
 800a57a:	4b40      	ldr	r3, [pc, #256]	; (800a67c <xTaskIncrementTick+0x150>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a3e      	ldr	r2, [pc, #248]	; (800a678 <xTaskIncrementTick+0x14c>)
 800a580:	6013      	str	r3, [r2, #0]
 800a582:	4a3e      	ldr	r2, [pc, #248]	; (800a67c <xTaskIncrementTick+0x150>)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	4b3d      	ldr	r3, [pc, #244]	; (800a680 <xTaskIncrementTick+0x154>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3301      	adds	r3, #1
 800a58e:	4a3c      	ldr	r2, [pc, #240]	; (800a680 <xTaskIncrementTick+0x154>)
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	f000 f995 	bl	800a8c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a596:	4b3b      	ldr	r3, [pc, #236]	; (800a684 <xTaskIncrementTick+0x158>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d348      	bcc.n	800a632 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5a0:	4b35      	ldr	r3, [pc, #212]	; (800a678 <xTaskIncrementTick+0x14c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d104      	bne.n	800a5b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5aa:	4b36      	ldr	r3, [pc, #216]	; (800a684 <xTaskIncrementTick+0x158>)
 800a5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b0:	601a      	str	r2, [r3, #0]
					break;
 800a5b2:	e03e      	b.n	800a632 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b4:	4b30      	ldr	r3, [pc, #192]	; (800a678 <xTaskIncrementTick+0x14c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d203      	bcs.n	800a5d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5cc:	4a2d      	ldr	r2, [pc, #180]	; (800a684 <xTaskIncrementTick+0x158>)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5d2:	e02e      	b.n	800a632 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7ff fcac 	bl	8009f36 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d004      	beq.n	800a5f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	3318      	adds	r3, #24
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7ff fca3 	bl	8009f36 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	409a      	lsls	r2, r3
 800a5f8:	4b23      	ldr	r3, [pc, #140]	; (800a688 <xTaskIncrementTick+0x15c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	4a22      	ldr	r2, [pc, #136]	; (800a688 <xTaskIncrementTick+0x15c>)
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4a1f      	ldr	r2, [pc, #124]	; (800a68c <xTaskIncrementTick+0x160>)
 800a610:	441a      	add	r2, r3
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	3304      	adds	r3, #4
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f7ff fc2f 	bl	8009e7c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a622:	4b1b      	ldr	r3, [pc, #108]	; (800a690 <xTaskIncrementTick+0x164>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a628:	429a      	cmp	r2, r3
 800a62a:	d3b9      	bcc.n	800a5a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a62c:	2301      	movs	r3, #1
 800a62e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a630:	e7b6      	b.n	800a5a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a632:	4b17      	ldr	r3, [pc, #92]	; (800a690 <xTaskIncrementTick+0x164>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a638:	4914      	ldr	r1, [pc, #80]	; (800a68c <xTaskIncrementTick+0x160>)
 800a63a:	4613      	mov	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	440b      	add	r3, r1
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d901      	bls.n	800a64e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a64a:	2301      	movs	r3, #1
 800a64c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a64e:	4b11      	ldr	r3, [pc, #68]	; (800a694 <xTaskIncrementTick+0x168>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d007      	beq.n	800a666 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a656:	2301      	movs	r3, #1
 800a658:	617b      	str	r3, [r7, #20]
 800a65a:	e004      	b.n	800a666 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <xTaskIncrementTick+0x16c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3301      	adds	r3, #1
 800a662:	4a0d      	ldr	r2, [pc, #52]	; (800a698 <xTaskIncrementTick+0x16c>)
 800a664:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a666:	697b      	ldr	r3, [r7, #20]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	20000880 	.word	0x20000880
 800a674:	2000085c 	.word	0x2000085c
 800a678:	20000810 	.word	0x20000810
 800a67c:	20000814 	.word	0x20000814
 800a680:	20000870 	.word	0x20000870
 800a684:	20000878 	.word	0x20000878
 800a688:	20000860 	.word	0x20000860
 800a68c:	2000075c 	.word	0x2000075c
 800a690:	20000758 	.word	0x20000758
 800a694:	2000086c 	.word	0x2000086c
 800a698:	20000868 	.word	0x20000868

0800a69c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6a2:	4b27      	ldr	r3, [pc, #156]	; (800a740 <vTaskSwitchContext+0xa4>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6aa:	4b26      	ldr	r3, [pc, #152]	; (800a744 <vTaskSwitchContext+0xa8>)
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6b0:	e03f      	b.n	800a732 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800a6b2:	4b24      	ldr	r3, [pc, #144]	; (800a744 <vTaskSwitchContext+0xa8>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6b8:	4b23      	ldr	r3, [pc, #140]	; (800a748 <vTaskSwitchContext+0xac>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	fab3 f383 	clz	r3, r3
 800a6c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a6c6:	7afb      	ldrb	r3, [r7, #11]
 800a6c8:	f1c3 031f 	rsb	r3, r3, #31
 800a6cc:	617b      	str	r3, [r7, #20]
 800a6ce:	491f      	ldr	r1, [pc, #124]	; (800a74c <vTaskSwitchContext+0xb0>)
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	440b      	add	r3, r1
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10a      	bne.n	800a6f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	607b      	str	r3, [r7, #4]
}
 800a6f4:	bf00      	nop
 800a6f6:	e7fe      	b.n	800a6f6 <vTaskSwitchContext+0x5a>
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4a12      	ldr	r2, [pc, #72]	; (800a74c <vTaskSwitchContext+0xb0>)
 800a704:	4413      	add	r3, r2
 800a706:	613b      	str	r3, [r7, #16]
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	605a      	str	r2, [r3, #4]
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	3308      	adds	r3, #8
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d104      	bne.n	800a728 <vTaskSwitchContext+0x8c>
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	605a      	str	r2, [r3, #4]
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	4a08      	ldr	r2, [pc, #32]	; (800a750 <vTaskSwitchContext+0xb4>)
 800a730:	6013      	str	r3, [r2, #0]
}
 800a732:	bf00      	nop
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	20000880 	.word	0x20000880
 800a744:	2000086c 	.word	0x2000086c
 800a748:	20000860 	.word	0x20000860
 800a74c:	2000075c 	.word	0x2000075c
 800a750:	20000758 	.word	0x20000758

0800a754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a75c:	f000 f852 	bl	800a804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a760:	4b06      	ldr	r3, [pc, #24]	; (800a77c <prvIdleTask+0x28>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d9f9      	bls.n	800a75c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <prvIdleTask+0x2c>)
 800a76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76e:	601a      	str	r2, [r3, #0]
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a778:	e7f0      	b.n	800a75c <prvIdleTask+0x8>
 800a77a:	bf00      	nop
 800a77c:	2000075c 	.word	0x2000075c
 800a780:	e000ed04 	.word	0xe000ed04

0800a784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a78a:	2300      	movs	r3, #0
 800a78c:	607b      	str	r3, [r7, #4]
 800a78e:	e00c      	b.n	800a7aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	4613      	mov	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4a12      	ldr	r2, [pc, #72]	; (800a7e4 <prvInitialiseTaskLists+0x60>)
 800a79c:	4413      	add	r3, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7ff fb3f 	bl	8009e22 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	607b      	str	r3, [r7, #4]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b06      	cmp	r3, #6
 800a7ae:	d9ef      	bls.n	800a790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7b0:	480d      	ldr	r0, [pc, #52]	; (800a7e8 <prvInitialiseTaskLists+0x64>)
 800a7b2:	f7ff fb36 	bl	8009e22 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7b6:	480d      	ldr	r0, [pc, #52]	; (800a7ec <prvInitialiseTaskLists+0x68>)
 800a7b8:	f7ff fb33 	bl	8009e22 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7bc:	480c      	ldr	r0, [pc, #48]	; (800a7f0 <prvInitialiseTaskLists+0x6c>)
 800a7be:	f7ff fb30 	bl	8009e22 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7c2:	480c      	ldr	r0, [pc, #48]	; (800a7f4 <prvInitialiseTaskLists+0x70>)
 800a7c4:	f7ff fb2d 	bl	8009e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7c8:	480b      	ldr	r0, [pc, #44]	; (800a7f8 <prvInitialiseTaskLists+0x74>)
 800a7ca:	f7ff fb2a 	bl	8009e22 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7ce:	4b0b      	ldr	r3, [pc, #44]	; (800a7fc <prvInitialiseTaskLists+0x78>)
 800a7d0:	4a05      	ldr	r2, [pc, #20]	; (800a7e8 <prvInitialiseTaskLists+0x64>)
 800a7d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7d4:	4b0a      	ldr	r3, [pc, #40]	; (800a800 <prvInitialiseTaskLists+0x7c>)
 800a7d6:	4a05      	ldr	r2, [pc, #20]	; (800a7ec <prvInitialiseTaskLists+0x68>)
 800a7d8:	601a      	str	r2, [r3, #0]
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	2000075c 	.word	0x2000075c
 800a7e8:	200007e8 	.word	0x200007e8
 800a7ec:	200007fc 	.word	0x200007fc
 800a7f0:	20000818 	.word	0x20000818
 800a7f4:	2000082c 	.word	0x2000082c
 800a7f8:	20000844 	.word	0x20000844
 800a7fc:	20000810 	.word	0x20000810
 800a800:	20000814 	.word	0x20000814

0800a804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a80a:	e019      	b.n	800a840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a80c:	f000 fa0a 	bl	800ac24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a810:	4b10      	ldr	r3, [pc, #64]	; (800a854 <prvCheckTasksWaitingTermination+0x50>)
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7ff fb8a 	bl	8009f36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a822:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <prvCheckTasksWaitingTermination+0x54>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3b01      	subs	r3, #1
 800a828:	4a0b      	ldr	r2, [pc, #44]	; (800a858 <prvCheckTasksWaitingTermination+0x54>)
 800a82a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a82c:	4b0b      	ldr	r3, [pc, #44]	; (800a85c <prvCheckTasksWaitingTermination+0x58>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	3b01      	subs	r3, #1
 800a832:	4a0a      	ldr	r2, [pc, #40]	; (800a85c <prvCheckTasksWaitingTermination+0x58>)
 800a834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a836:	f000 fa25 	bl	800ac84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f810 	bl	800a860 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <prvCheckTasksWaitingTermination+0x58>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e1      	bne.n	800a80c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	2000082c 	.word	0x2000082c
 800a858:	20000858 	.word	0x20000858
 800a85c:	20000840 	.word	0x20000840

0800a860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d108      	bne.n	800a884 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a876:	4618      	mov	r0, r3
 800a878:	f000 fb82 	bl	800af80 <vPortFree>
				vPortFree( pxTCB );
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fb7f 	bl	800af80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a882:	e018      	b.n	800a8b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d103      	bne.n	800a896 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fb76 	bl	800af80 <vPortFree>
	}
 800a894:	e00f      	b.n	800a8b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d00a      	beq.n	800a8b6 <prvDeleteTCB+0x56>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	60fb      	str	r3, [r7, #12]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <prvDeleteTCB+0x54>
	}
 800a8b6:	bf00      	nop
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
	...

0800a8c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	; (800a8f8 <prvResetNextTaskUnblockTime+0x38>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d104      	bne.n	800a8da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8d0:	4b0a      	ldr	r3, [pc, #40]	; (800a8fc <prvResetNextTaskUnblockTime+0x3c>)
 800a8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8d8:	e008      	b.n	800a8ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8da:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <prvResetNextTaskUnblockTime+0x38>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	4a04      	ldr	r2, [pc, #16]	; (800a8fc <prvResetNextTaskUnblockTime+0x3c>)
 800a8ea:	6013      	str	r3, [r2, #0]
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	20000810 	.word	0x20000810
 800a8fc:	20000878 	.word	0x20000878

0800a900 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a90a:	4b29      	ldr	r3, [pc, #164]	; (800a9b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a910:	4b28      	ldr	r3, [pc, #160]	; (800a9b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3304      	adds	r3, #4
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff fb0d 	bl	8009f36 <uxListRemove>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10b      	bne.n	800a93a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a922:	4b24      	ldr	r3, [pc, #144]	; (800a9b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	2201      	movs	r2, #1
 800a92a:	fa02 f303 	lsl.w	r3, r2, r3
 800a92e:	43da      	mvns	r2, r3
 800a930:	4b21      	ldr	r3, [pc, #132]	; (800a9b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4013      	ands	r3, r2
 800a936:	4a20      	ldr	r2, [pc, #128]	; (800a9b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a938:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a940:	d10a      	bne.n	800a958 <prvAddCurrentTaskToDelayedList+0x58>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d007      	beq.n	800a958 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a948:	4b1a      	ldr	r3, [pc, #104]	; (800a9b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4619      	mov	r1, r3
 800a950:	481a      	ldr	r0, [pc, #104]	; (800a9bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a952:	f7ff fa93 	bl	8009e7c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a956:	e026      	b.n	800a9a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4413      	add	r3, r2
 800a95e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a960:	4b14      	ldr	r3, [pc, #80]	; (800a9b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a968:	68ba      	ldr	r2, [r7, #8]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d209      	bcs.n	800a984 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a970:	4b13      	ldr	r3, [pc, #76]	; (800a9c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	4b0f      	ldr	r3, [pc, #60]	; (800a9b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	3304      	adds	r3, #4
 800a97a:	4619      	mov	r1, r3
 800a97c:	4610      	mov	r0, r2
 800a97e:	f7ff faa1 	bl	8009ec4 <vListInsert>
}
 800a982:	e010      	b.n	800a9a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a984:	4b0f      	ldr	r3, [pc, #60]	; (800a9c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3304      	adds	r3, #4
 800a98e:	4619      	mov	r1, r3
 800a990:	4610      	mov	r0, r2
 800a992:	f7ff fa97 	bl	8009ec4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a996:	4b0c      	ldr	r3, [pc, #48]	; (800a9c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d202      	bcs.n	800a9a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a9a0:	4a09      	ldr	r2, [pc, #36]	; (800a9c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	6013      	str	r3, [r2, #0]
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	2000085c 	.word	0x2000085c
 800a9b4:	20000758 	.word	0x20000758
 800a9b8:	20000860 	.word	0x20000860
 800a9bc:	20000844 	.word	0x20000844
 800a9c0:	20000814 	.word	0x20000814
 800a9c4:	20000810 	.word	0x20000810
 800a9c8:	20000878 	.word	0x20000878

0800a9cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3b04      	subs	r3, #4
 800a9dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	f023 0201 	bic.w	r2, r3, #1
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3b04      	subs	r3, #4
 800a9fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9fc:	4a0c      	ldr	r2, [pc, #48]	; (800aa30 <pxPortInitialiseStack+0x64>)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3b14      	subs	r3, #20
 800aa06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3b04      	subs	r3, #4
 800aa12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f06f 0202 	mvn.w	r2, #2
 800aa1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	3b20      	subs	r3, #32
 800aa20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa22:	68fb      	ldr	r3, [r7, #12]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	0800aa35 	.word	0x0800aa35

0800aa34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa3e:	4b12      	ldr	r3, [pc, #72]	; (800aa88 <prvTaskExitError+0x54>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa46:	d00a      	beq.n	800aa5e <prvTaskExitError+0x2a>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	60fb      	str	r3, [r7, #12]
}
 800aa5a:	bf00      	nop
 800aa5c:	e7fe      	b.n	800aa5c <prvTaskExitError+0x28>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	60bb      	str	r3, [r7, #8]
}
 800aa70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa72:	bf00      	nop
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0fc      	beq.n	800aa74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa7a:	bf00      	nop
 800aa7c:	bf00      	nop
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	200000cc 	.word	0x200000cc
 800aa8c:	00000000 	.word	0x00000000

0800aa90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <pxCurrentTCBConst2>)
 800aa92:	6819      	ldr	r1, [r3, #0]
 800aa94:	6808      	ldr	r0, [r1, #0]
 800aa96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9a:	f380 8809 	msr	PSP, r0
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f04f 0000 	mov.w	r0, #0
 800aaa6:	f380 8811 	msr	BASEPRI, r0
 800aaaa:	4770      	bx	lr
 800aaac:	f3af 8000 	nop.w

0800aab0 <pxCurrentTCBConst2>:
 800aab0:	20000758 	.word	0x20000758
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop

0800aab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aab8:	4808      	ldr	r0, [pc, #32]	; (800aadc <prvPortStartFirstTask+0x24>)
 800aaba:	6800      	ldr	r0, [r0, #0]
 800aabc:	6800      	ldr	r0, [r0, #0]
 800aabe:	f380 8808 	msr	MSP, r0
 800aac2:	f04f 0000 	mov.w	r0, #0
 800aac6:	f380 8814 	msr	CONTROL, r0
 800aaca:	b662      	cpsie	i
 800aacc:	b661      	cpsie	f
 800aace:	f3bf 8f4f 	dsb	sy
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	df00      	svc	0
 800aad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aada:	bf00      	nop
 800aadc:	e000ed08 	.word	0xe000ed08

0800aae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aae6:	4b46      	ldr	r3, [pc, #280]	; (800ac00 <xPortStartScheduler+0x120>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a46      	ldr	r2, [pc, #280]	; (800ac04 <xPortStartScheduler+0x124>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d10a      	bne.n	800ab06 <xPortStartScheduler+0x26>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	613b      	str	r3, [r7, #16]
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab06:	4b3e      	ldr	r3, [pc, #248]	; (800ac00 <xPortStartScheduler+0x120>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a3f      	ldr	r2, [pc, #252]	; (800ac08 <xPortStartScheduler+0x128>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d10a      	bne.n	800ab26 <xPortStartScheduler+0x46>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	60fb      	str	r3, [r7, #12]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ab26:	4b39      	ldr	r3, [pc, #228]	; (800ac0c <xPortStartScheduler+0x12c>)
 800ab28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	22ff      	movs	r2, #255	; 0xff
 800ab36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	4b31      	ldr	r3, [pc, #196]	; (800ac10 <xPortStartScheduler+0x130>)
 800ab4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ab4e:	4b31      	ldr	r3, [pc, #196]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab50:	2207      	movs	r2, #7
 800ab52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab54:	e009      	b.n	800ab6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ab56:	4b2f      	ldr	r3, [pc, #188]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	4a2d      	ldr	r2, [pc, #180]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab72:	2b80      	cmp	r3, #128	; 0x80
 800ab74:	d0ef      	beq.n	800ab56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab76:	4b27      	ldr	r3, [pc, #156]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f1c3 0307 	rsb	r3, r3, #7
 800ab7e:	2b04      	cmp	r3, #4
 800ab80:	d00a      	beq.n	800ab98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	60bb      	str	r3, [r7, #8]
}
 800ab94:	bf00      	nop
 800ab96:	e7fe      	b.n	800ab96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab98:	4b1e      	ldr	r3, [pc, #120]	; (800ac14 <xPortStartScheduler+0x134>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	021b      	lsls	r3, r3, #8
 800ab9e:	4a1d      	ldr	r2, [pc, #116]	; (800ac14 <xPortStartScheduler+0x134>)
 800aba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aba2:	4b1c      	ldr	r3, [pc, #112]	; (800ac14 <xPortStartScheduler+0x134>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abaa:	4a1a      	ldr	r2, [pc, #104]	; (800ac14 <xPortStartScheduler+0x134>)
 800abac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abb6:	4b18      	ldr	r3, [pc, #96]	; (800ac18 <xPortStartScheduler+0x138>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a17      	ldr	r2, [pc, #92]	; (800ac18 <xPortStartScheduler+0x138>)
 800abbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abc2:	4b15      	ldr	r3, [pc, #84]	; (800ac18 <xPortStartScheduler+0x138>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a14      	ldr	r2, [pc, #80]	; (800ac18 <xPortStartScheduler+0x138>)
 800abc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800abcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800abce:	f000 f8dd 	bl	800ad8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800abd2:	4b12      	ldr	r3, [pc, #72]	; (800ac1c <xPortStartScheduler+0x13c>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800abd8:	f000 f8fc 	bl	800add4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800abdc:	4b10      	ldr	r3, [pc, #64]	; (800ac20 <xPortStartScheduler+0x140>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a0f      	ldr	r2, [pc, #60]	; (800ac20 <xPortStartScheduler+0x140>)
 800abe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800abe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800abe8:	f7ff ff66 	bl	800aab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800abec:	f7ff fd56 	bl	800a69c <vTaskSwitchContext>
	prvTaskExitError();
 800abf0:	f7ff ff20 	bl	800aa34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3718      	adds	r7, #24
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	e000ed00 	.word	0xe000ed00
 800ac04:	410fc271 	.word	0x410fc271
 800ac08:	410fc270 	.word	0x410fc270
 800ac0c:	e000e400 	.word	0xe000e400
 800ac10:	20000884 	.word	0x20000884
 800ac14:	20000888 	.word	0x20000888
 800ac18:	e000ed20 	.word	0xe000ed20
 800ac1c:	200000cc 	.word	0x200000cc
 800ac20:	e000ef34 	.word	0xe000ef34

0800ac24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	607b      	str	r3, [r7, #4]
}
 800ac3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ac3e:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <vPortEnterCritical+0x58>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	3301      	adds	r3, #1
 800ac44:	4a0d      	ldr	r2, [pc, #52]	; (800ac7c <vPortEnterCritical+0x58>)
 800ac46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ac48:	4b0c      	ldr	r3, [pc, #48]	; (800ac7c <vPortEnterCritical+0x58>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d10f      	bne.n	800ac70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ac50:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <vPortEnterCritical+0x5c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	603b      	str	r3, [r7, #0]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <vPortEnterCritical+0x4a>
	}
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	200000cc 	.word	0x200000cc
 800ac80:	e000ed04 	.word	0xe000ed04

0800ac84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac8a:	4b12      	ldr	r3, [pc, #72]	; (800acd4 <vPortExitCritical+0x50>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10a      	bne.n	800aca8 <vPortExitCritical+0x24>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	f383 8811 	msr	BASEPRI, r3
 800ac9a:	f3bf 8f6f 	isb	sy
 800ac9e:	f3bf 8f4f 	dsb	sy
 800aca2:	607b      	str	r3, [r7, #4]
}
 800aca4:	bf00      	nop
 800aca6:	e7fe      	b.n	800aca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aca8:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <vPortExitCritical+0x50>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3b01      	subs	r3, #1
 800acae:	4a09      	ldr	r2, [pc, #36]	; (800acd4 <vPortExitCritical+0x50>)
 800acb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800acb2:	4b08      	ldr	r3, [pc, #32]	; (800acd4 <vPortExitCritical+0x50>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d105      	bne.n	800acc6 <vPortExitCritical+0x42>
 800acba:	2300      	movs	r3, #0
 800acbc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800acc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800acc6:	bf00      	nop
 800acc8:	370c      	adds	r7, #12
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	200000cc 	.word	0x200000cc
	...

0800ace0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ace0:	f3ef 8009 	mrs	r0, PSP
 800ace4:	f3bf 8f6f 	isb	sy
 800ace8:	4b15      	ldr	r3, [pc, #84]	; (800ad40 <pxCurrentTCBConst>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	f01e 0f10 	tst.w	lr, #16
 800acf0:	bf08      	it	eq
 800acf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800acf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfa:	6010      	str	r0, [r2, #0]
 800acfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad04:	f380 8811 	msr	BASEPRI, r0
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f7ff fcc4 	bl	800a69c <vTaskSwitchContext>
 800ad14:	f04f 0000 	mov.w	r0, #0
 800ad18:	f380 8811 	msr	BASEPRI, r0
 800ad1c:	bc09      	pop	{r0, r3}
 800ad1e:	6819      	ldr	r1, [r3, #0]
 800ad20:	6808      	ldr	r0, [r1, #0]
 800ad22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad26:	f01e 0f10 	tst.w	lr, #16
 800ad2a:	bf08      	it	eq
 800ad2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad30:	f380 8809 	msr	PSP, r0
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	f3af 8000 	nop.w

0800ad40 <pxCurrentTCBConst>:
 800ad40:	20000758 	.word	0x20000758
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop

0800ad48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	607b      	str	r3, [r7, #4]
}
 800ad60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad62:	f7ff fbe3 	bl	800a52c <xTaskIncrementTick>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad6c:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <SysTick_Handler+0x40>)
 800ad6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	2300      	movs	r3, #0
 800ad76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	f383 8811 	msr	BASEPRI, r3
}
 800ad7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad90:	4b0b      	ldr	r3, [pc, #44]	; (800adc0 <vPortSetupTimerInterrupt+0x34>)
 800ad92:	2200      	movs	r2, #0
 800ad94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad96:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <vPortSetupTimerInterrupt+0x38>)
 800ad98:	2200      	movs	r2, #0
 800ad9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	; (800adc8 <vPortSetupTimerInterrupt+0x3c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a0a      	ldr	r2, [pc, #40]	; (800adcc <vPortSetupTimerInterrupt+0x40>)
 800ada2:	fba2 2303 	umull	r2, r3, r2, r3
 800ada6:	099b      	lsrs	r3, r3, #6
 800ada8:	4a09      	ldr	r2, [pc, #36]	; (800add0 <vPortSetupTimerInterrupt+0x44>)
 800adaa:	3b01      	subs	r3, #1
 800adac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800adae:	4b04      	ldr	r3, [pc, #16]	; (800adc0 <vPortSetupTimerInterrupt+0x34>)
 800adb0:	2207      	movs	r2, #7
 800adb2:	601a      	str	r2, [r3, #0]
}
 800adb4:	bf00      	nop
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	e000e010 	.word	0xe000e010
 800adc4:	e000e018 	.word	0xe000e018
 800adc8:	20000034 	.word	0x20000034
 800adcc:	10624dd3 	.word	0x10624dd3
 800add0:	e000e014 	.word	0xe000e014

0800add4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800add4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ade4 <vPortEnableVFP+0x10>
 800add8:	6801      	ldr	r1, [r0, #0]
 800adda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800adde:	6001      	str	r1, [r0, #0]
 800ade0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ade2:	bf00      	nop
 800ade4:	e000ed88 	.word	0xe000ed88

0800ade8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08a      	sub	sp, #40	; 0x28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adf0:	2300      	movs	r3, #0
 800adf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800adf4:	f7ff faf0 	bl	800a3d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adf8:	4b5b      	ldr	r3, [pc, #364]	; (800af68 <pvPortMalloc+0x180>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d101      	bne.n	800ae04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae00:	f000 f920 	bl	800b044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae04:	4b59      	ldr	r3, [pc, #356]	; (800af6c <pvPortMalloc+0x184>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f040 8093 	bne.w	800af38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d01d      	beq.n	800ae54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ae18:	2208      	movs	r2, #8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f003 0307 	and.w	r3, r3, #7
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d014      	beq.n	800ae54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f023 0307 	bic.w	r3, r3, #7
 800ae30:	3308      	adds	r3, #8
 800ae32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f003 0307 	and.w	r3, r3, #7
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00a      	beq.n	800ae54 <pvPortMalloc+0x6c>
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	617b      	str	r3, [r7, #20]
}
 800ae50:	bf00      	nop
 800ae52:	e7fe      	b.n	800ae52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d06e      	beq.n	800af38 <pvPortMalloc+0x150>
 800ae5a:	4b45      	ldr	r3, [pc, #276]	; (800af70 <pvPortMalloc+0x188>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d869      	bhi.n	800af38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae64:	4b43      	ldr	r3, [pc, #268]	; (800af74 <pvPortMalloc+0x18c>)
 800ae66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae68:	4b42      	ldr	r3, [pc, #264]	; (800af74 <pvPortMalloc+0x18c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae6e:	e004      	b.n	800ae7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d903      	bls.n	800ae8c <pvPortMalloc+0xa4>
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1f1      	bne.n	800ae70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae8c:	4b36      	ldr	r3, [pc, #216]	; (800af68 <pvPortMalloc+0x180>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d050      	beq.n	800af38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2208      	movs	r2, #8
 800ae9c:	4413      	add	r3, r2
 800ae9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	6a3b      	ldr	r3, [r7, #32]
 800aea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	2308      	movs	r3, #8
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d91f      	bls.n	800aef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aeb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4413      	add	r3, r2
 800aebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00a      	beq.n	800aee0 <pvPortMalloc+0xf8>
	__asm volatile
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	613b      	str	r3, [r7, #16]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	685a      	ldr	r2, [r3, #4]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	1ad2      	subs	r2, r2, r3
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aef2:	69b8      	ldr	r0, [r7, #24]
 800aef4:	f000 f908 	bl	800b108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aef8:	4b1d      	ldr	r3, [pc, #116]	; (800af70 <pvPortMalloc+0x188>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	4a1b      	ldr	r2, [pc, #108]	; (800af70 <pvPortMalloc+0x188>)
 800af04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af06:	4b1a      	ldr	r3, [pc, #104]	; (800af70 <pvPortMalloc+0x188>)
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	4b1b      	ldr	r3, [pc, #108]	; (800af78 <pvPortMalloc+0x190>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d203      	bcs.n	800af1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af12:	4b17      	ldr	r3, [pc, #92]	; (800af70 <pvPortMalloc+0x188>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a18      	ldr	r2, [pc, #96]	; (800af78 <pvPortMalloc+0x190>)
 800af18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	685a      	ldr	r2, [r3, #4]
 800af1e:	4b13      	ldr	r3, [pc, #76]	; (800af6c <pvPortMalloc+0x184>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	431a      	orrs	r2, r3
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	2200      	movs	r2, #0
 800af2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800af2e:	4b13      	ldr	r3, [pc, #76]	; (800af7c <pvPortMalloc+0x194>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3301      	adds	r3, #1
 800af34:	4a11      	ldr	r2, [pc, #68]	; (800af7c <pvPortMalloc+0x194>)
 800af36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af38:	f7ff fa5c 	bl	800a3f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	f003 0307 	and.w	r3, r3, #7
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00a      	beq.n	800af5c <pvPortMalloc+0x174>
	__asm volatile
 800af46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4a:	f383 8811 	msr	BASEPRI, r3
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f3bf 8f4f 	dsb	sy
 800af56:	60fb      	str	r3, [r7, #12]
}
 800af58:	bf00      	nop
 800af5a:	e7fe      	b.n	800af5a <pvPortMalloc+0x172>
	return pvReturn;
 800af5c:	69fb      	ldr	r3, [r7, #28]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3728      	adds	r7, #40	; 0x28
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20004494 	.word	0x20004494
 800af6c:	200044a8 	.word	0x200044a8
 800af70:	20004498 	.word	0x20004498
 800af74:	2000448c 	.word	0x2000448c
 800af78:	2000449c 	.word	0x2000449c
 800af7c:	200044a0 	.word	0x200044a0

0800af80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d04d      	beq.n	800b02e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af92:	2308      	movs	r3, #8
 800af94:	425b      	negs	r3, r3
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	4413      	add	r3, r2
 800af9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	685a      	ldr	r2, [r3, #4]
 800afa4:	4b24      	ldr	r3, [pc, #144]	; (800b038 <vPortFree+0xb8>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4013      	ands	r3, r2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <vPortFree+0x44>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	60fb      	str	r3, [r7, #12]
}
 800afc0:	bf00      	nop
 800afc2:	e7fe      	b.n	800afc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00a      	beq.n	800afe2 <vPortFree+0x62>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	60bb      	str	r3, [r7, #8]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	4b14      	ldr	r3, [pc, #80]	; (800b038 <vPortFree+0xb8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4013      	ands	r3, r2
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01e      	beq.n	800b02e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d11a      	bne.n	800b02e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	4b0e      	ldr	r3, [pc, #56]	; (800b038 <vPortFree+0xb8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	43db      	mvns	r3, r3
 800b002:	401a      	ands	r2, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b008:	f7ff f9e6 	bl	800a3d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <vPortFree+0xbc>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4413      	add	r3, r2
 800b016:	4a09      	ldr	r2, [pc, #36]	; (800b03c <vPortFree+0xbc>)
 800b018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b01a:	6938      	ldr	r0, [r7, #16]
 800b01c:	f000 f874 	bl	800b108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b020:	4b07      	ldr	r3, [pc, #28]	; (800b040 <vPortFree+0xc0>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3301      	adds	r3, #1
 800b026:	4a06      	ldr	r2, [pc, #24]	; (800b040 <vPortFree+0xc0>)
 800b028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b02a:	f7ff f9e3 	bl	800a3f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b02e:	bf00      	nop
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	200044a8 	.word	0x200044a8
 800b03c:	20004498 	.word	0x20004498
 800b040:	200044a4 	.word	0x200044a4

0800b044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b04a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b04e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b050:	4b27      	ldr	r3, [pc, #156]	; (800b0f0 <prvHeapInit+0xac>)
 800b052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00c      	beq.n	800b078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3307      	adds	r3, #7
 800b062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 0307 	bic.w	r3, r3, #7
 800b06a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	4a1f      	ldr	r2, [pc, #124]	; (800b0f0 <prvHeapInit+0xac>)
 800b074:	4413      	add	r3, r2
 800b076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b07c:	4a1d      	ldr	r2, [pc, #116]	; (800b0f4 <prvHeapInit+0xb0>)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b082:	4b1c      	ldr	r3, [pc, #112]	; (800b0f4 <prvHeapInit+0xb0>)
 800b084:	2200      	movs	r2, #0
 800b086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	4413      	add	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b090:	2208      	movs	r2, #8
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1a9b      	subs	r3, r3, r2
 800b096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f023 0307 	bic.w	r3, r3, #7
 800b09e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	4a15      	ldr	r2, [pc, #84]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0a6:	4b14      	ldr	r3, [pc, #80]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0ae:	4b12      	ldr	r3, [pc, #72]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	1ad2      	subs	r2, r2, r3
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0c4:	4b0c      	ldr	r3, [pc, #48]	; (800b0f8 <prvHeapInit+0xb4>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4a0a      	ldr	r2, [pc, #40]	; (800b0fc <prvHeapInit+0xb8>)
 800b0d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	4a09      	ldr	r2, [pc, #36]	; (800b100 <prvHeapInit+0xbc>)
 800b0da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0dc:	4b09      	ldr	r3, [pc, #36]	; (800b104 <prvHeapInit+0xc0>)
 800b0de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0e2:	601a      	str	r2, [r3, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	2000088c 	.word	0x2000088c
 800b0f4:	2000448c 	.word	0x2000448c
 800b0f8:	20004494 	.word	0x20004494
 800b0fc:	2000449c 	.word	0x2000449c
 800b100:	20004498 	.word	0x20004498
 800b104:	200044a8 	.word	0x200044a8

0800b108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b110:	4b28      	ldr	r3, [pc, #160]	; (800b1b4 <prvInsertBlockIntoFreeList+0xac>)
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e002      	b.n	800b11c <prvInsertBlockIntoFreeList+0x14>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	429a      	cmp	r2, r3
 800b124:	d8f7      	bhi.n	800b116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	4413      	add	r3, r2
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	429a      	cmp	r2, r3
 800b136:	d108      	bne.n	800b14a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	441a      	add	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	441a      	add	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d118      	bne.n	800b190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	4b15      	ldr	r3, [pc, #84]	; (800b1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d00d      	beq.n	800b186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	441a      	add	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	601a      	str	r2, [r3, #0]
 800b184:	e008      	b.n	800b198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b186:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	601a      	str	r2, [r3, #0]
 800b18e:	e003      	b.n	800b198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b198:	68fa      	ldr	r2, [r7, #12]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d002      	beq.n	800b1a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a6:	bf00      	nop
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	2000448c 	.word	0x2000448c
 800b1b8:	20004494 	.word	0x20004494

0800b1bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	4912      	ldr	r1, [pc, #72]	; (800b20c <MX_USB_DEVICE_Init+0x50>)
 800b1c4:	4812      	ldr	r0, [pc, #72]	; (800b210 <MX_USB_DEVICE_Init+0x54>)
 800b1c6:	f7fd fa9f 	bl	8008708 <USBD_Init>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b1d0:	f7f7 f86c 	bl	80022ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b1d4:	490f      	ldr	r1, [pc, #60]	; (800b214 <MX_USB_DEVICE_Init+0x58>)
 800b1d6:	480e      	ldr	r0, [pc, #56]	; (800b210 <MX_USB_DEVICE_Init+0x54>)
 800b1d8:	f7fd fad4 	bl	8008784 <USBD_RegisterClass>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b1e2:	f7f7 f863 	bl	80022ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b1e6:	490c      	ldr	r1, [pc, #48]	; (800b218 <MX_USB_DEVICE_Init+0x5c>)
 800b1e8:	4809      	ldr	r0, [pc, #36]	; (800b210 <MX_USB_DEVICE_Init+0x54>)
 800b1ea:	f7fd f9b7 	bl	800855c <USBD_CDC_RegisterInterface>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b1f4:	f7f7 f85a 	bl	80022ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b1f8:	4805      	ldr	r0, [pc, #20]	; (800b210 <MX_USB_DEVICE_Init+0x54>)
 800b1fa:	f7fd fb07 	bl	800880c <USBD_Start>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d001      	beq.n	800b208 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b204:	f7f7 f852 	bl	80022ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b208:	bf00      	nop
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	200000e4 	.word	0x200000e4
 800b210:	200044ac 	.word	0x200044ac
 800b214:	2000004c 	.word	0x2000004c
 800b218:	200000d0 	.word	0x200000d0

0800b21c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b220:	2200      	movs	r2, #0
 800b222:	4905      	ldr	r1, [pc, #20]	; (800b238 <CDC_Init_FS+0x1c>)
 800b224:	4805      	ldr	r0, [pc, #20]	; (800b23c <CDC_Init_FS+0x20>)
 800b226:	f7fd f9b3 	bl	8008590 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b22a:	4905      	ldr	r1, [pc, #20]	; (800b240 <CDC_Init_FS+0x24>)
 800b22c:	4803      	ldr	r0, [pc, #12]	; (800b23c <CDC_Init_FS+0x20>)
 800b22e:	f7fd f9d1 	bl	80085d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b232:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b234:	4618      	mov	r0, r3
 800b236:	bd80      	pop	{r7, pc}
 800b238:	20004808 	.word	0x20004808
 800b23c:	200044ac 	.word	0x200044ac
 800b240:	20004788 	.word	0x20004788

0800b244 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b244:	b480      	push	{r7}
 800b246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b248:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	4603      	mov	r3, r0
 800b25c:	6039      	str	r1, [r7, #0]
 800b25e:	71fb      	strb	r3, [r7, #7]
 800b260:	4613      	mov	r3, r2
 800b262:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b264:	79fb      	ldrb	r3, [r7, #7]
 800b266:	2b23      	cmp	r3, #35	; 0x23
 800b268:	d84a      	bhi.n	800b300 <CDC_Control_FS+0xac>
 800b26a:	a201      	add	r2, pc, #4	; (adr r2, 800b270 <CDC_Control_FS+0x1c>)
 800b26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b270:	0800b301 	.word	0x0800b301
 800b274:	0800b301 	.word	0x0800b301
 800b278:	0800b301 	.word	0x0800b301
 800b27c:	0800b301 	.word	0x0800b301
 800b280:	0800b301 	.word	0x0800b301
 800b284:	0800b301 	.word	0x0800b301
 800b288:	0800b301 	.word	0x0800b301
 800b28c:	0800b301 	.word	0x0800b301
 800b290:	0800b301 	.word	0x0800b301
 800b294:	0800b301 	.word	0x0800b301
 800b298:	0800b301 	.word	0x0800b301
 800b29c:	0800b301 	.word	0x0800b301
 800b2a0:	0800b301 	.word	0x0800b301
 800b2a4:	0800b301 	.word	0x0800b301
 800b2a8:	0800b301 	.word	0x0800b301
 800b2ac:	0800b301 	.word	0x0800b301
 800b2b0:	0800b301 	.word	0x0800b301
 800b2b4:	0800b301 	.word	0x0800b301
 800b2b8:	0800b301 	.word	0x0800b301
 800b2bc:	0800b301 	.word	0x0800b301
 800b2c0:	0800b301 	.word	0x0800b301
 800b2c4:	0800b301 	.word	0x0800b301
 800b2c8:	0800b301 	.word	0x0800b301
 800b2cc:	0800b301 	.word	0x0800b301
 800b2d0:	0800b301 	.word	0x0800b301
 800b2d4:	0800b301 	.word	0x0800b301
 800b2d8:	0800b301 	.word	0x0800b301
 800b2dc:	0800b301 	.word	0x0800b301
 800b2e0:	0800b301 	.word	0x0800b301
 800b2e4:	0800b301 	.word	0x0800b301
 800b2e8:	0800b301 	.word	0x0800b301
 800b2ec:	0800b301 	.word	0x0800b301
 800b2f0:	0800b301 	.word	0x0800b301
 800b2f4:	0800b301 	.word	0x0800b301
 800b2f8:	0800b301 	.word	0x0800b301
 800b2fc:	0800b301 	.word	0x0800b301
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b300:	bf00      	nop
  }

  return (USBD_OK);
 800b302:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b31a:	6879      	ldr	r1, [r7, #4]
 800b31c:	480c      	ldr	r0, [pc, #48]	; (800b350 <CDC_Receive_FS+0x40>)
 800b31e:	f7fd f959 	bl	80085d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b322:	480b      	ldr	r0, [pc, #44]	; (800b350 <CDC_Receive_FS+0x40>)
 800b324:	f7fd f9ba 	bl	800869c <USBD_CDC_ReceivePacket>

  /* Copy into common buffer */
  memset(rxBuf, 0, APP_RX_DATA_SIZE);
 800b328:	2280      	movs	r2, #128	; 0x80
 800b32a:	2100      	movs	r1, #0
 800b32c:	4809      	ldr	r0, [pc, #36]	; (800b354 <CDC_Receive_FS+0x44>)
 800b32e:	f000 fdb0 	bl	800be92 <memset>
  strncpy(rxBuf,(char *)Buf, *Len);
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	4806      	ldr	r0, [pc, #24]	; (800b354 <CDC_Receive_FS+0x44>)
 800b33c:	f000 fdb1 	bl	800bea2 <strncpy>

  /* Set main state */
  receiveState = 1;
 800b340:	4b05      	ldr	r3, [pc, #20]	; (800b358 <CDC_Receive_FS+0x48>)
 800b342:	2201      	movs	r2, #1
 800b344:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800b346:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	200044ac 	.word	0x200044ac
 800b354:	20000678 	.word	0x20000678
 800b358:	20000030 	.word	0x20000030

0800b35c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	460b      	mov	r3, r1
 800b366:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b36c:	4b0d      	ldr	r3, [pc, #52]	; (800b3a4 <CDC_Transmit_FS+0x48>)
 800b36e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b372:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b37e:	2301      	movs	r3, #1
 800b380:	e00b      	b.n	800b39a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b382:	887b      	ldrh	r3, [r7, #2]
 800b384:	461a      	mov	r2, r3
 800b386:	6879      	ldr	r1, [r7, #4]
 800b388:	4806      	ldr	r0, [pc, #24]	; (800b3a4 <CDC_Transmit_FS+0x48>)
 800b38a:	f7fd f901 	bl	8008590 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b38e:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <CDC_Transmit_FS+0x48>)
 800b390:	f7fd f93e 	bl	8008610 <USBD_CDC_TransmitPacket>
 800b394:	4603      	mov	r3, r0
 800b396:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200044ac 	.word	0x200044ac

0800b3a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b3ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
	...

0800b3cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	6039      	str	r1, [r7, #0]
 800b3d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2212      	movs	r2, #18
 800b3dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b3de:	4b03      	ldr	r3, [pc, #12]	; (800b3ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	20000100 	.word	0x20000100

0800b3f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	6039      	str	r1, [r7, #0]
 800b3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2204      	movs	r2, #4
 800b400:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b402:	4b03      	ldr	r3, [pc, #12]	; (800b410 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b404:	4618      	mov	r0, r3
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20000114 	.word	0x20000114

0800b414 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	6039      	str	r1, [r7, #0]
 800b41e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d105      	bne.n	800b432 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	4907      	ldr	r1, [pc, #28]	; (800b448 <USBD_FS_ProductStrDescriptor+0x34>)
 800b42a:	4808      	ldr	r0, [pc, #32]	; (800b44c <USBD_FS_ProductStrDescriptor+0x38>)
 800b42c:	f7fe fb9a 	bl	8009b64 <USBD_GetString>
 800b430:	e004      	b.n	800b43c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	4904      	ldr	r1, [pc, #16]	; (800b448 <USBD_FS_ProductStrDescriptor+0x34>)
 800b436:	4805      	ldr	r0, [pc, #20]	; (800b44c <USBD_FS_ProductStrDescriptor+0x38>)
 800b438:	f7fe fb94 	bl	8009b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b43c:	4b02      	ldr	r3, [pc, #8]	; (800b448 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	20004908 	.word	0x20004908
 800b44c:	0800cfec 	.word	0x0800cfec

0800b450 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	4603      	mov	r3, r0
 800b458:	6039      	str	r1, [r7, #0]
 800b45a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	4904      	ldr	r1, [pc, #16]	; (800b470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b460:	4804      	ldr	r0, [pc, #16]	; (800b474 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b462:	f7fe fb7f 	bl	8009b64 <USBD_GetString>
  return USBD_StrDesc;
 800b466:	4b02      	ldr	r3, [pc, #8]	; (800b470 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20004908 	.word	0x20004908
 800b474:	0800d004 	.word	0x0800d004

0800b478 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	4603      	mov	r3, r0
 800b480:	6039      	str	r1, [r7, #0]
 800b482:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	221a      	movs	r2, #26
 800b488:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b48a:	f000 f843 	bl	800b514 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b48e:	4b02      	ldr	r3, [pc, #8]	; (800b498 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20000118 	.word	0x20000118

0800b49c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	6039      	str	r1, [r7, #0]
 800b4a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4a8:	79fb      	ldrb	r3, [r7, #7]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d105      	bne.n	800b4ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	4907      	ldr	r1, [pc, #28]	; (800b4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4b2:	4808      	ldr	r0, [pc, #32]	; (800b4d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4b4:	f7fe fb56 	bl	8009b64 <USBD_GetString>
 800b4b8:	e004      	b.n	800b4c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	4904      	ldr	r1, [pc, #16]	; (800b4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4be:	4805      	ldr	r0, [pc, #20]	; (800b4d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4c0:	f7fe fb50 	bl	8009b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4c4:	4b02      	ldr	r3, [pc, #8]	; (800b4d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20004908 	.word	0x20004908
 800b4d4:	0800d018 	.word	0x0800d018

0800b4d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d105      	bne.n	800b4f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	4907      	ldr	r1, [pc, #28]	; (800b50c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4ee:	4808      	ldr	r0, [pc, #32]	; (800b510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4f0:	f7fe fb38 	bl	8009b64 <USBD_GetString>
 800b4f4:	e004      	b.n	800b500 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	4904      	ldr	r1, [pc, #16]	; (800b50c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b4fa:	4805      	ldr	r0, [pc, #20]	; (800b510 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b4fc:	f7fe fb32 	bl	8009b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b500:	4b02      	ldr	r3, [pc, #8]	; (800b50c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20004908 	.word	0x20004908
 800b510:	0800d024 	.word	0x0800d024

0800b514 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b51a:	4b0f      	ldr	r3, [pc, #60]	; (800b558 <Get_SerialNum+0x44>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b520:	4b0e      	ldr	r3, [pc, #56]	; (800b55c <Get_SerialNum+0x48>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b526:	4b0e      	ldr	r3, [pc, #56]	; (800b560 <Get_SerialNum+0x4c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4413      	add	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d009      	beq.n	800b54e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b53a:	2208      	movs	r2, #8
 800b53c:	4909      	ldr	r1, [pc, #36]	; (800b564 <Get_SerialNum+0x50>)
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f000 f814 	bl	800b56c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b544:	2204      	movs	r2, #4
 800b546:	4908      	ldr	r1, [pc, #32]	; (800b568 <Get_SerialNum+0x54>)
 800b548:	68b8      	ldr	r0, [r7, #8]
 800b54a:	f000 f80f 	bl	800b56c <IntToUnicode>
  }
}
 800b54e:	bf00      	nop
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	1fff7a10 	.word	0x1fff7a10
 800b55c:	1fff7a14 	.word	0x1fff7a14
 800b560:	1fff7a18 	.word	0x1fff7a18
 800b564:	2000011a 	.word	0x2000011a
 800b568:	2000012a 	.word	0x2000012a

0800b56c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]
 800b582:	e027      	b.n	800b5d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	0f1b      	lsrs	r3, r3, #28
 800b588:	2b09      	cmp	r3, #9
 800b58a:	d80b      	bhi.n	800b5a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	0f1b      	lsrs	r3, r3, #28
 800b590:	b2da      	uxtb	r2, r3
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	4619      	mov	r1, r3
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	440b      	add	r3, r1
 800b59c:	3230      	adds	r2, #48	; 0x30
 800b59e:	b2d2      	uxtb	r2, r2
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	e00a      	b.n	800b5ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	0f1b      	lsrs	r3, r3, #28
 800b5a8:	b2da      	uxtb	r2, r3
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	005b      	lsls	r3, r3, #1
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3237      	adds	r2, #55	; 0x37
 800b5b6:	b2d2      	uxtb	r2, r2
 800b5b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5c0:	7dfb      	ldrb	r3, [r7, #23]
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	75fb      	strb	r3, [r7, #23]
 800b5d4:	7dfa      	ldrb	r2, [r7, #23]
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d3d3      	bcc.n	800b584 <IntToUnicode+0x18>
  }
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	371c      	adds	r7, #28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
	...

0800b5ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08a      	sub	sp, #40	; 0x28
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5f4:	f107 0314 	add.w	r3, r7, #20
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	605a      	str	r2, [r3, #4]
 800b5fe:	609a      	str	r2, [r3, #8]
 800b600:	60da      	str	r2, [r3, #12]
 800b602:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b60c:	d13a      	bne.n	800b684 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
 800b612:	4b1e      	ldr	r3, [pc, #120]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	4a1d      	ldr	r2, [pc, #116]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b618:	f043 0301 	orr.w	r3, r3, #1
 800b61c:	6313      	str	r3, [r2, #48]	; 0x30
 800b61e:	4b1b      	ldr	r3, [pc, #108]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b622:	f003 0301 	and.w	r3, r3, #1
 800b626:	613b      	str	r3, [r7, #16]
 800b628:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b62a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b62e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b630:	2302      	movs	r3, #2
 800b632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b634:	2300      	movs	r3, #0
 800b636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b638:	2303      	movs	r3, #3
 800b63a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b63c:	230a      	movs	r3, #10
 800b63e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b640:	f107 0314 	add.w	r3, r7, #20
 800b644:	4619      	mov	r1, r3
 800b646:	4812      	ldr	r0, [pc, #72]	; (800b690 <HAL_PCD_MspInit+0xa4>)
 800b648:	f7f7 f9f4 	bl	8002a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b64c:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b650:	4a0e      	ldr	r2, [pc, #56]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b656:	6353      	str	r3, [r2, #52]	; 0x34
 800b658:	2300      	movs	r3, #0
 800b65a:	60fb      	str	r3, [r7, #12]
 800b65c:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b65e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b660:	4a0a      	ldr	r2, [pc, #40]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b666:	6453      	str	r3, [r2, #68]	; 0x44
 800b668:	4b08      	ldr	r3, [pc, #32]	; (800b68c <HAL_PCD_MspInit+0xa0>)
 800b66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b66c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b674:	2200      	movs	r2, #0
 800b676:	2105      	movs	r1, #5
 800b678:	2043      	movs	r0, #67	; 0x43
 800b67a:	f7f7 f9b1 	bl	80029e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b67e:	2043      	movs	r0, #67	; 0x43
 800b680:	f7f7 f9ca 	bl	8002a18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b684:	bf00      	nop
 800b686:	3728      	adds	r7, #40	; 0x28
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	40023800 	.word	0x40023800
 800b690:	40020000 	.word	0x40020000

0800b694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	f7fd f8fb 	bl	80088a6 <USBD_LL_SetupStage>
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b6ca:	78fa      	ldrb	r2, [r7, #3]
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	f7fd f935 	bl	8008950 <USBD_LL_DataOutStage>
}
 800b6e6:	bf00      	nop
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b700:	78fa      	ldrb	r2, [r7, #3]
 800b702:	6879      	ldr	r1, [r7, #4]
 800b704:	4613      	mov	r3, r2
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	440b      	add	r3, r1
 800b70e:	334c      	adds	r3, #76	; 0x4c
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	78fb      	ldrb	r3, [r7, #3]
 800b714:	4619      	mov	r1, r3
 800b716:	f7fd f9ce 	bl	8008ab6 <USBD_LL_DataInStage>
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b082      	sub	sp, #8
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b730:	4618      	mov	r0, r3
 800b732:	f7fd fb02 	bl	8008d3a <USBD_LL_SOF>
}
 800b736:	bf00      	nop
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b084      	sub	sp, #16
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b746:	2301      	movs	r3, #1
 800b748:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d102      	bne.n	800b758 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b752:	2300      	movs	r3, #0
 800b754:	73fb      	strb	r3, [r7, #15]
 800b756:	e008      	b.n	800b76a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d102      	bne.n	800b766 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b760:	2301      	movs	r3, #1
 800b762:	73fb      	strb	r3, [r7, #15]
 800b764:	e001      	b.n	800b76a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b766:	f7f6 fda1 	bl	80022ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b770:	7bfa      	ldrb	r2, [r7, #15]
 800b772:	4611      	mov	r1, r2
 800b774:	4618      	mov	r0, r3
 800b776:	f7fd faa2 	bl	8008cbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b780:	4618      	mov	r0, r3
 800b782:	f7fd fa4a 	bl	8008c1a <USBD_LL_Reset>
}
 800b786:	bf00      	nop
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
	...

0800b790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fd fa9d 	bl	8008cde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	6812      	ldr	r2, [r2, #0]
 800b7b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d005      	beq.n	800b7d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7c4:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <HAL_PCD_SuspendCallback+0x48>)
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	4a03      	ldr	r2, [pc, #12]	; (800b7d8 <HAL_PCD_SuspendCallback+0x48>)
 800b7ca:	f043 0306 	orr.w	r3, r3, #6
 800b7ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7d0:	bf00      	nop
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	e000ed00 	.word	0xe000ed00

0800b7dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fd fa8d 	bl	8008d0a <USBD_LL_Resume>
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b80a:	78fa      	ldrb	r2, [r7, #3]
 800b80c:	4611      	mov	r1, r2
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fd fae5 	bl	8008dde <USBD_LL_IsoOUTIncomplete>
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b82e:	78fa      	ldrb	r2, [r7, #3]
 800b830:	4611      	mov	r1, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f7fd faa1 	bl	8008d7a <USBD_LL_IsoINIncomplete>
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fd faf7 	bl	8008e42 <USBD_LL_DevConnected>
}
 800b854:	bf00      	nop
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fd faf4 	bl	8008e58 <USBD_LL_DevDisconnected>
}
 800b870:	bf00      	nop
 800b872:	3708      	adds	r7, #8
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d13c      	bne.n	800b902 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b888:	4a20      	ldr	r2, [pc, #128]	; (800b90c <USBD_LL_Init+0x94>)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a1e      	ldr	r2, [pc, #120]	; (800b90c <USBD_LL_Init+0x94>)
 800b894:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b898:	4b1c      	ldr	r3, [pc, #112]	; (800b90c <USBD_LL_Init+0x94>)
 800b89a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b89e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8a0:	4b1a      	ldr	r3, [pc, #104]	; (800b90c <USBD_LL_Init+0x94>)
 800b8a2:	2204      	movs	r2, #4
 800b8a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8a6:	4b19      	ldr	r3, [pc, #100]	; (800b90c <USBD_LL_Init+0x94>)
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8ac:	4b17      	ldr	r3, [pc, #92]	; (800b90c <USBD_LL_Init+0x94>)
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8b2:	4b16      	ldr	r3, [pc, #88]	; (800b90c <USBD_LL_Init+0x94>)
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8b8:	4b14      	ldr	r3, [pc, #80]	; (800b90c <USBD_LL_Init+0x94>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b8be:	4b13      	ldr	r3, [pc, #76]	; (800b90c <USBD_LL_Init+0x94>)
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b8c4:	4b11      	ldr	r3, [pc, #68]	; (800b90c <USBD_LL_Init+0x94>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b8ca:	4b10      	ldr	r3, [pc, #64]	; (800b90c <USBD_LL_Init+0x94>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b8d0:	4b0e      	ldr	r3, [pc, #56]	; (800b90c <USBD_LL_Init+0x94>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b8d6:	480d      	ldr	r0, [pc, #52]	; (800b90c <USBD_LL_Init+0x94>)
 800b8d8:	f7f7 fa63 	bl	8002da2 <HAL_PCD_Init>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b8e2:	f7f6 fce3 	bl	80022ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b8e6:	2180      	movs	r1, #128	; 0x80
 800b8e8:	4808      	ldr	r0, [pc, #32]	; (800b90c <USBD_LL_Init+0x94>)
 800b8ea:	f7f8 fcba 	bl	8004262 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b8ee:	2240      	movs	r2, #64	; 0x40
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	4806      	ldr	r0, [pc, #24]	; (800b90c <USBD_LL_Init+0x94>)
 800b8f4:	f7f8 fc6e 	bl	80041d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b8f8:	2280      	movs	r2, #128	; 0x80
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	4803      	ldr	r0, [pc, #12]	; (800b90c <USBD_LL_Init+0x94>)
 800b8fe:	f7f8 fc69 	bl	80041d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	20004b08 	.word	0x20004b08

0800b910 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b926:	4618      	mov	r0, r3
 800b928:	f7f7 fb58 	bl	8002fdc <HAL_PCD_Start>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	4618      	mov	r0, r3
 800b934:	f000 f942 	bl	800bbbc <USBD_Get_USB_Status>
 800b938:	4603      	mov	r3, r0
 800b93a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	4608      	mov	r0, r1
 800b950:	4611      	mov	r1, r2
 800b952:	461a      	mov	r2, r3
 800b954:	4603      	mov	r3, r0
 800b956:	70fb      	strb	r3, [r7, #3]
 800b958:	460b      	mov	r3, r1
 800b95a:	70bb      	strb	r3, [r7, #2]
 800b95c:	4613      	mov	r3, r2
 800b95e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b960:	2300      	movs	r3, #0
 800b962:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b96e:	78bb      	ldrb	r3, [r7, #2]
 800b970:	883a      	ldrh	r2, [r7, #0]
 800b972:	78f9      	ldrb	r1, [r7, #3]
 800b974:	f7f8 f829 	bl	80039ca <HAL_PCD_EP_Open>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 f91c 	bl	800bbbc <USBD_Get_USB_Status>
 800b984:	4603      	mov	r3, r0
 800b986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b988:	7bbb      	ldrb	r3, [r7, #14]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	460b      	mov	r3, r1
 800b99c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9ac:	78fa      	ldrb	r2, [r7, #3]
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7f8 f872 	bl	8003a9a <HAL_PCD_EP_Close>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 f8fd 	bl	800bbbc <USBD_Get_USB_Status>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3710      	adds	r7, #16
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9ea:	78fa      	ldrb	r2, [r7, #3]
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7f8 f94a 	bl	8003c88 <HAL_PCD_EP_SetStall>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 f8de 	bl	800bbbc <USBD_Get_USB_Status>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	460b      	mov	r3, r1
 800ba18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba28:	78fa      	ldrb	r2, [r7, #3]
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7f8 f98f 	bl	8003d50 <HAL_PCD_EP_ClrStall>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f000 f8bf 	bl	800bbbc <USBD_Get_USB_Status>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	da0b      	bge.n	800ba80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba6e:	68f9      	ldr	r1, [r7, #12]
 800ba70:	4613      	mov	r3, r2
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	440b      	add	r3, r1
 800ba7a:	333e      	adds	r3, #62	; 0x3e
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	e00b      	b.n	800ba98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba86:	68f9      	ldr	r1, [r7, #12]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	00db      	lsls	r3, r3, #3
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	440b      	add	r3, r1
 800ba92:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ba96:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3714      	adds	r7, #20
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800babe:	78fa      	ldrb	r2, [r7, #3]
 800bac0:	4611      	mov	r1, r2
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7f7 ff5c 	bl	8003980 <HAL_PCD_SetAddress>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 f874 	bl	800bbbc <USBD_Get_USB_Status>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b086      	sub	sp, #24
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	60f8      	str	r0, [r7, #12]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	603b      	str	r3, [r7, #0]
 800baee:	460b      	mov	r3, r1
 800baf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb00:	7af9      	ldrb	r1, [r7, #11]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	f7f8 f875 	bl	8003bf4 <HAL_PCD_EP_Transmit>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb0e:	7dfb      	ldrb	r3, [r7, #23]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 f853 	bl	800bbbc <USBD_Get_USB_Status>
 800bb16:	4603      	mov	r3, r0
 800bb18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb1a:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3718      	adds	r7, #24
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	607a      	str	r2, [r7, #4]
 800bb2e:	603b      	str	r3, [r7, #0]
 800bb30:	460b      	mov	r3, r1
 800bb32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb42:	7af9      	ldrb	r1, [r7, #11]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	f7f7 fff1 	bl	8003b2e <HAL_PCD_EP_Receive>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb50:	7dfb      	ldrb	r3, [r7, #23]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 f832 	bl	800bbbc <USBD_Get_USB_Status>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb5c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b082      	sub	sp, #8
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb78:	78fa      	ldrb	r2, [r7, #3]
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f8 f821 	bl	8003bc4 <HAL_PCD_EP_GetRxCount>
 800bb82:	4603      	mov	r3, r0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3708      	adds	r7, #8
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb94:	4b03      	ldr	r3, [pc, #12]	; (800bba4 <USBD_static_malloc+0x18>)
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	370c      	adds	r7, #12
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
 800bba2:	bf00      	nop
 800bba4:	20005014 	.word	0x20005014

0800bba8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]

}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbca:	79fb      	ldrb	r3, [r7, #7]
 800bbcc:	2b03      	cmp	r3, #3
 800bbce:	d817      	bhi.n	800bc00 <USBD_Get_USB_Status+0x44>
 800bbd0:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <USBD_Get_USB_Status+0x1c>)
 800bbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd6:	bf00      	nop
 800bbd8:	0800bbe9 	.word	0x0800bbe9
 800bbdc:	0800bbef 	.word	0x0800bbef
 800bbe0:	0800bbf5 	.word	0x0800bbf5
 800bbe4:	0800bbfb 	.word	0x0800bbfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	73fb      	strb	r3, [r7, #15]
    break;
 800bbec:	e00b      	b.n	800bc06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf2:	e008      	b.n	800bc06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf8:	e005      	b.n	800bc06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	73fb      	strb	r3, [r7, #15]
    break;
 800bbfe:	e002      	b.n	800bc06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc00:	2303      	movs	r3, #3
 800bc02:	73fb      	strb	r3, [r7, #15]
    break;
 800bc04:	bf00      	nop
  }
  return usb_status;
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <std>:
 800bc14:	2300      	movs	r3, #0
 800bc16:	b510      	push	{r4, lr}
 800bc18:	4604      	mov	r4, r0
 800bc1a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc22:	6083      	str	r3, [r0, #8]
 800bc24:	8181      	strh	r1, [r0, #12]
 800bc26:	6643      	str	r3, [r0, #100]	; 0x64
 800bc28:	81c2      	strh	r2, [r0, #14]
 800bc2a:	6183      	str	r3, [r0, #24]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	2208      	movs	r2, #8
 800bc30:	305c      	adds	r0, #92	; 0x5c
 800bc32:	f000 f92e 	bl	800be92 <memset>
 800bc36:	4b0d      	ldr	r3, [pc, #52]	; (800bc6c <std+0x58>)
 800bc38:	6263      	str	r3, [r4, #36]	; 0x24
 800bc3a:	4b0d      	ldr	r3, [pc, #52]	; (800bc70 <std+0x5c>)
 800bc3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc3e:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <std+0x60>)
 800bc40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc42:	4b0d      	ldr	r3, [pc, #52]	; (800bc78 <std+0x64>)
 800bc44:	6323      	str	r3, [r4, #48]	; 0x30
 800bc46:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <std+0x68>)
 800bc48:	6224      	str	r4, [r4, #32]
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	d006      	beq.n	800bc5c <std+0x48>
 800bc4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bc52:	4294      	cmp	r4, r2
 800bc54:	d002      	beq.n	800bc5c <std+0x48>
 800bc56:	33d0      	adds	r3, #208	; 0xd0
 800bc58:	429c      	cmp	r4, r3
 800bc5a:	d105      	bne.n	800bc68 <std+0x54>
 800bc5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc64:	f000 b9a0 	b.w	800bfa8 <__retarget_lock_init_recursive>
 800bc68:	bd10      	pop	{r4, pc}
 800bc6a:	bf00      	nop
 800bc6c:	0800be0d 	.word	0x0800be0d
 800bc70:	0800be2f 	.word	0x0800be2f
 800bc74:	0800be67 	.word	0x0800be67
 800bc78:	0800be8b 	.word	0x0800be8b
 800bc7c:	20005234 	.word	0x20005234

0800bc80 <stdio_exit_handler>:
 800bc80:	4a02      	ldr	r2, [pc, #8]	; (800bc8c <stdio_exit_handler+0xc>)
 800bc82:	4903      	ldr	r1, [pc, #12]	; (800bc90 <stdio_exit_handler+0x10>)
 800bc84:	4803      	ldr	r0, [pc, #12]	; (800bc94 <stdio_exit_handler+0x14>)
 800bc86:	f000 b869 	b.w	800bd5c <_fwalk_sglue>
 800bc8a:	bf00      	nop
 800bc8c:	20000134 	.word	0x20000134
 800bc90:	0800cb21 	.word	0x0800cb21
 800bc94:	20000140 	.word	0x20000140

0800bc98 <cleanup_stdio>:
 800bc98:	6841      	ldr	r1, [r0, #4]
 800bc9a:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <cleanup_stdio+0x34>)
 800bc9c:	4299      	cmp	r1, r3
 800bc9e:	b510      	push	{r4, lr}
 800bca0:	4604      	mov	r4, r0
 800bca2:	d001      	beq.n	800bca8 <cleanup_stdio+0x10>
 800bca4:	f000 ff3c 	bl	800cb20 <_fflush_r>
 800bca8:	68a1      	ldr	r1, [r4, #8]
 800bcaa:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <cleanup_stdio+0x38>)
 800bcac:	4299      	cmp	r1, r3
 800bcae:	d002      	beq.n	800bcb6 <cleanup_stdio+0x1e>
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f000 ff35 	bl	800cb20 <_fflush_r>
 800bcb6:	68e1      	ldr	r1, [r4, #12]
 800bcb8:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <cleanup_stdio+0x3c>)
 800bcba:	4299      	cmp	r1, r3
 800bcbc:	d004      	beq.n	800bcc8 <cleanup_stdio+0x30>
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc4:	f000 bf2c 	b.w	800cb20 <_fflush_r>
 800bcc8:	bd10      	pop	{r4, pc}
 800bcca:	bf00      	nop
 800bccc:	20005234 	.word	0x20005234
 800bcd0:	2000529c 	.word	0x2000529c
 800bcd4:	20005304 	.word	0x20005304

0800bcd8 <global_stdio_init.part.0>:
 800bcd8:	b510      	push	{r4, lr}
 800bcda:	4b0b      	ldr	r3, [pc, #44]	; (800bd08 <global_stdio_init.part.0+0x30>)
 800bcdc:	4c0b      	ldr	r4, [pc, #44]	; (800bd0c <global_stdio_init.part.0+0x34>)
 800bcde:	4a0c      	ldr	r2, [pc, #48]	; (800bd10 <global_stdio_init.part.0+0x38>)
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	4620      	mov	r0, r4
 800bce4:	2200      	movs	r2, #0
 800bce6:	2104      	movs	r1, #4
 800bce8:	f7ff ff94 	bl	800bc14 <std>
 800bcec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	2109      	movs	r1, #9
 800bcf4:	f7ff ff8e 	bl	800bc14 <std>
 800bcf8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bcfc:	2202      	movs	r2, #2
 800bcfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd02:	2112      	movs	r1, #18
 800bd04:	f7ff bf86 	b.w	800bc14 <std>
 800bd08:	2000536c 	.word	0x2000536c
 800bd0c:	20005234 	.word	0x20005234
 800bd10:	0800bc81 	.word	0x0800bc81

0800bd14 <__sfp_lock_acquire>:
 800bd14:	4801      	ldr	r0, [pc, #4]	; (800bd1c <__sfp_lock_acquire+0x8>)
 800bd16:	f000 b948 	b.w	800bfaa <__retarget_lock_acquire_recursive>
 800bd1a:	bf00      	nop
 800bd1c:	20005375 	.word	0x20005375

0800bd20 <__sfp_lock_release>:
 800bd20:	4801      	ldr	r0, [pc, #4]	; (800bd28 <__sfp_lock_release+0x8>)
 800bd22:	f000 b943 	b.w	800bfac <__retarget_lock_release_recursive>
 800bd26:	bf00      	nop
 800bd28:	20005375 	.word	0x20005375

0800bd2c <__sinit>:
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	4604      	mov	r4, r0
 800bd30:	f7ff fff0 	bl	800bd14 <__sfp_lock_acquire>
 800bd34:	6a23      	ldr	r3, [r4, #32]
 800bd36:	b11b      	cbz	r3, 800bd40 <__sinit+0x14>
 800bd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd3c:	f7ff bff0 	b.w	800bd20 <__sfp_lock_release>
 800bd40:	4b04      	ldr	r3, [pc, #16]	; (800bd54 <__sinit+0x28>)
 800bd42:	6223      	str	r3, [r4, #32]
 800bd44:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <__sinit+0x2c>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1f5      	bne.n	800bd38 <__sinit+0xc>
 800bd4c:	f7ff ffc4 	bl	800bcd8 <global_stdio_init.part.0>
 800bd50:	e7f2      	b.n	800bd38 <__sinit+0xc>
 800bd52:	bf00      	nop
 800bd54:	0800bc99 	.word	0x0800bc99
 800bd58:	2000536c 	.word	0x2000536c

0800bd5c <_fwalk_sglue>:
 800bd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd60:	4607      	mov	r7, r0
 800bd62:	4688      	mov	r8, r1
 800bd64:	4614      	mov	r4, r2
 800bd66:	2600      	movs	r6, #0
 800bd68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd6c:	f1b9 0901 	subs.w	r9, r9, #1
 800bd70:	d505      	bpl.n	800bd7e <_fwalk_sglue+0x22>
 800bd72:	6824      	ldr	r4, [r4, #0]
 800bd74:	2c00      	cmp	r4, #0
 800bd76:	d1f7      	bne.n	800bd68 <_fwalk_sglue+0xc>
 800bd78:	4630      	mov	r0, r6
 800bd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd7e:	89ab      	ldrh	r3, [r5, #12]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d907      	bls.n	800bd94 <_fwalk_sglue+0x38>
 800bd84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	d003      	beq.n	800bd94 <_fwalk_sglue+0x38>
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	4638      	mov	r0, r7
 800bd90:	47c0      	blx	r8
 800bd92:	4306      	orrs	r6, r0
 800bd94:	3568      	adds	r5, #104	; 0x68
 800bd96:	e7e9      	b.n	800bd6c <_fwalk_sglue+0x10>

0800bd98 <iprintf>:
 800bd98:	b40f      	push	{r0, r1, r2, r3}
 800bd9a:	b507      	push	{r0, r1, r2, lr}
 800bd9c:	4906      	ldr	r1, [pc, #24]	; (800bdb8 <iprintf+0x20>)
 800bd9e:	ab04      	add	r3, sp, #16
 800bda0:	6808      	ldr	r0, [r1, #0]
 800bda2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bda6:	6881      	ldr	r1, [r0, #8]
 800bda8:	9301      	str	r3, [sp, #4]
 800bdaa:	f000 fb89 	bl	800c4c0 <_vfiprintf_r>
 800bdae:	b003      	add	sp, #12
 800bdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb4:	b004      	add	sp, #16
 800bdb6:	4770      	bx	lr
 800bdb8:	2000018c 	.word	0x2000018c

0800bdbc <putchar>:
 800bdbc:	4b02      	ldr	r3, [pc, #8]	; (800bdc8 <putchar+0xc>)
 800bdbe:	4601      	mov	r1, r0
 800bdc0:	6818      	ldr	r0, [r3, #0]
 800bdc2:	6882      	ldr	r2, [r0, #8]
 800bdc4:	f000 bed4 	b.w	800cb70 <_putc_r>
 800bdc8:	2000018c 	.word	0x2000018c

0800bdcc <siprintf>:
 800bdcc:	b40e      	push	{r1, r2, r3}
 800bdce:	b500      	push	{lr}
 800bdd0:	b09c      	sub	sp, #112	; 0x70
 800bdd2:	ab1d      	add	r3, sp, #116	; 0x74
 800bdd4:	9002      	str	r0, [sp, #8]
 800bdd6:	9006      	str	r0, [sp, #24]
 800bdd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bddc:	4809      	ldr	r0, [pc, #36]	; (800be04 <siprintf+0x38>)
 800bdde:	9107      	str	r1, [sp, #28]
 800bde0:	9104      	str	r1, [sp, #16]
 800bde2:	4909      	ldr	r1, [pc, #36]	; (800be08 <siprintf+0x3c>)
 800bde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde8:	9105      	str	r1, [sp, #20]
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	a902      	add	r1, sp, #8
 800bdf0:	f000 fa3e 	bl	800c270 <_svfiprintf_r>
 800bdf4:	9b02      	ldr	r3, [sp, #8]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	b01c      	add	sp, #112	; 0x70
 800bdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800be00:	b003      	add	sp, #12
 800be02:	4770      	bx	lr
 800be04:	2000018c 	.word	0x2000018c
 800be08:	ffff0208 	.word	0xffff0208

0800be0c <__sread>:
 800be0c:	b510      	push	{r4, lr}
 800be0e:	460c      	mov	r4, r1
 800be10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be14:	f000 f87a 	bl	800bf0c <_read_r>
 800be18:	2800      	cmp	r0, #0
 800be1a:	bfab      	itete	ge
 800be1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be1e:	89a3      	ldrhlt	r3, [r4, #12]
 800be20:	181b      	addge	r3, r3, r0
 800be22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be26:	bfac      	ite	ge
 800be28:	6563      	strge	r3, [r4, #84]	; 0x54
 800be2a:	81a3      	strhlt	r3, [r4, #12]
 800be2c:	bd10      	pop	{r4, pc}

0800be2e <__swrite>:
 800be2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be32:	461f      	mov	r7, r3
 800be34:	898b      	ldrh	r3, [r1, #12]
 800be36:	05db      	lsls	r3, r3, #23
 800be38:	4605      	mov	r5, r0
 800be3a:	460c      	mov	r4, r1
 800be3c:	4616      	mov	r6, r2
 800be3e:	d505      	bpl.n	800be4c <__swrite+0x1e>
 800be40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be44:	2302      	movs	r3, #2
 800be46:	2200      	movs	r2, #0
 800be48:	f000 f84e 	bl	800bee8 <_lseek_r>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	4632      	mov	r2, r6
 800be5a:	463b      	mov	r3, r7
 800be5c:	4628      	mov	r0, r5
 800be5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be62:	f000 b865 	b.w	800bf30 <_write_r>

0800be66 <__sseek>:
 800be66:	b510      	push	{r4, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be6e:	f000 f83b 	bl	800bee8 <_lseek_r>
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	bf15      	itete	ne
 800be78:	6560      	strne	r0, [r4, #84]	; 0x54
 800be7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be82:	81a3      	strheq	r3, [r4, #12]
 800be84:	bf18      	it	ne
 800be86:	81a3      	strhne	r3, [r4, #12]
 800be88:	bd10      	pop	{r4, pc}

0800be8a <__sclose>:
 800be8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be8e:	f000 b81b 	b.w	800bec8 <_close_r>

0800be92 <memset>:
 800be92:	4402      	add	r2, r0
 800be94:	4603      	mov	r3, r0
 800be96:	4293      	cmp	r3, r2
 800be98:	d100      	bne.n	800be9c <memset+0xa>
 800be9a:	4770      	bx	lr
 800be9c:	f803 1b01 	strb.w	r1, [r3], #1
 800bea0:	e7f9      	b.n	800be96 <memset+0x4>

0800bea2 <strncpy>:
 800bea2:	b510      	push	{r4, lr}
 800bea4:	3901      	subs	r1, #1
 800bea6:	4603      	mov	r3, r0
 800bea8:	b132      	cbz	r2, 800beb8 <strncpy+0x16>
 800beaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800beae:	f803 4b01 	strb.w	r4, [r3], #1
 800beb2:	3a01      	subs	r2, #1
 800beb4:	2c00      	cmp	r4, #0
 800beb6:	d1f7      	bne.n	800bea8 <strncpy+0x6>
 800beb8:	441a      	add	r2, r3
 800beba:	2100      	movs	r1, #0
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d100      	bne.n	800bec2 <strncpy+0x20>
 800bec0:	bd10      	pop	{r4, pc}
 800bec2:	f803 1b01 	strb.w	r1, [r3], #1
 800bec6:	e7f9      	b.n	800bebc <strncpy+0x1a>

0800bec8 <_close_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d06      	ldr	r5, [pc, #24]	; (800bee4 <_close_r+0x1c>)
 800becc:	2300      	movs	r3, #0
 800bece:	4604      	mov	r4, r0
 800bed0:	4608      	mov	r0, r1
 800bed2:	602b      	str	r3, [r5, #0]
 800bed4:	f7f6 fbbf 	bl	8002656 <_close>
 800bed8:	1c43      	adds	r3, r0, #1
 800beda:	d102      	bne.n	800bee2 <_close_r+0x1a>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b103      	cbz	r3, 800bee2 <_close_r+0x1a>
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	bd38      	pop	{r3, r4, r5, pc}
 800bee4:	20005370 	.word	0x20005370

0800bee8 <_lseek_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4d07      	ldr	r5, [pc, #28]	; (800bf08 <_lseek_r+0x20>)
 800beec:	4604      	mov	r4, r0
 800beee:	4608      	mov	r0, r1
 800bef0:	4611      	mov	r1, r2
 800bef2:	2200      	movs	r2, #0
 800bef4:	602a      	str	r2, [r5, #0]
 800bef6:	461a      	mov	r2, r3
 800bef8:	f7f6 fbd4 	bl	80026a4 <_lseek>
 800befc:	1c43      	adds	r3, r0, #1
 800befe:	d102      	bne.n	800bf06 <_lseek_r+0x1e>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	b103      	cbz	r3, 800bf06 <_lseek_r+0x1e>
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	bd38      	pop	{r3, r4, r5, pc}
 800bf08:	20005370 	.word	0x20005370

0800bf0c <_read_r>:
 800bf0c:	b538      	push	{r3, r4, r5, lr}
 800bf0e:	4d07      	ldr	r5, [pc, #28]	; (800bf2c <_read_r+0x20>)
 800bf10:	4604      	mov	r4, r0
 800bf12:	4608      	mov	r0, r1
 800bf14:	4611      	mov	r1, r2
 800bf16:	2200      	movs	r2, #0
 800bf18:	602a      	str	r2, [r5, #0]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	f7f6 fb62 	bl	80025e4 <_read>
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	d102      	bne.n	800bf2a <_read_r+0x1e>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	b103      	cbz	r3, 800bf2a <_read_r+0x1e>
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	20005370 	.word	0x20005370

0800bf30 <_write_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d07      	ldr	r5, [pc, #28]	; (800bf50 <_write_r+0x20>)
 800bf34:	4604      	mov	r4, r0
 800bf36:	4608      	mov	r0, r1
 800bf38:	4611      	mov	r1, r2
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	602a      	str	r2, [r5, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	f7f6 fb6d 	bl	800261e <_write>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_write_r+0x1e>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_write_r+0x1e>
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	20005370 	.word	0x20005370

0800bf54 <__errno>:
 800bf54:	4b01      	ldr	r3, [pc, #4]	; (800bf5c <__errno+0x8>)
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	2000018c 	.word	0x2000018c

0800bf60 <__libc_init_array>:
 800bf60:	b570      	push	{r4, r5, r6, lr}
 800bf62:	4d0d      	ldr	r5, [pc, #52]	; (800bf98 <__libc_init_array+0x38>)
 800bf64:	4c0d      	ldr	r4, [pc, #52]	; (800bf9c <__libc_init_array+0x3c>)
 800bf66:	1b64      	subs	r4, r4, r5
 800bf68:	10a4      	asrs	r4, r4, #2
 800bf6a:	2600      	movs	r6, #0
 800bf6c:	42a6      	cmp	r6, r4
 800bf6e:	d109      	bne.n	800bf84 <__libc_init_array+0x24>
 800bf70:	4d0b      	ldr	r5, [pc, #44]	; (800bfa0 <__libc_init_array+0x40>)
 800bf72:	4c0c      	ldr	r4, [pc, #48]	; (800bfa4 <__libc_init_array+0x44>)
 800bf74:	f000 ffac 	bl	800ced0 <_init>
 800bf78:	1b64      	subs	r4, r4, r5
 800bf7a:	10a4      	asrs	r4, r4, #2
 800bf7c:	2600      	movs	r6, #0
 800bf7e:	42a6      	cmp	r6, r4
 800bf80:	d105      	bne.n	800bf8e <__libc_init_array+0x2e>
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf88:	4798      	blx	r3
 800bf8a:	3601      	adds	r6, #1
 800bf8c:	e7ee      	b.n	800bf6c <__libc_init_array+0xc>
 800bf8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf92:	4798      	blx	r3
 800bf94:	3601      	adds	r6, #1
 800bf96:	e7f2      	b.n	800bf7e <__libc_init_array+0x1e>
 800bf98:	0800d088 	.word	0x0800d088
 800bf9c:	0800d088 	.word	0x0800d088
 800bfa0:	0800d088 	.word	0x0800d088
 800bfa4:	0800d08c 	.word	0x0800d08c

0800bfa8 <__retarget_lock_init_recursive>:
 800bfa8:	4770      	bx	lr

0800bfaa <__retarget_lock_acquire_recursive>:
 800bfaa:	4770      	bx	lr

0800bfac <__retarget_lock_release_recursive>:
 800bfac:	4770      	bx	lr

0800bfae <memcpy>:
 800bfae:	440a      	add	r2, r1
 800bfb0:	4291      	cmp	r1, r2
 800bfb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfb6:	d100      	bne.n	800bfba <memcpy+0xc>
 800bfb8:	4770      	bx	lr
 800bfba:	b510      	push	{r4, lr}
 800bfbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfc4:	4291      	cmp	r1, r2
 800bfc6:	d1f9      	bne.n	800bfbc <memcpy+0xe>
 800bfc8:	bd10      	pop	{r4, pc}
	...

0800bfcc <_free_r>:
 800bfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfce:	2900      	cmp	r1, #0
 800bfd0:	d044      	beq.n	800c05c <_free_r+0x90>
 800bfd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfd6:	9001      	str	r0, [sp, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f1a1 0404 	sub.w	r4, r1, #4
 800bfde:	bfb8      	it	lt
 800bfe0:	18e4      	addlt	r4, r4, r3
 800bfe2:	f000 f8df 	bl	800c1a4 <__malloc_lock>
 800bfe6:	4a1e      	ldr	r2, [pc, #120]	; (800c060 <_free_r+0x94>)
 800bfe8:	9801      	ldr	r0, [sp, #4]
 800bfea:	6813      	ldr	r3, [r2, #0]
 800bfec:	b933      	cbnz	r3, 800bffc <_free_r+0x30>
 800bfee:	6063      	str	r3, [r4, #4]
 800bff0:	6014      	str	r4, [r2, #0]
 800bff2:	b003      	add	sp, #12
 800bff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bff8:	f000 b8da 	b.w	800c1b0 <__malloc_unlock>
 800bffc:	42a3      	cmp	r3, r4
 800bffe:	d908      	bls.n	800c012 <_free_r+0x46>
 800c000:	6825      	ldr	r5, [r4, #0]
 800c002:	1961      	adds	r1, r4, r5
 800c004:	428b      	cmp	r3, r1
 800c006:	bf01      	itttt	eq
 800c008:	6819      	ldreq	r1, [r3, #0]
 800c00a:	685b      	ldreq	r3, [r3, #4]
 800c00c:	1949      	addeq	r1, r1, r5
 800c00e:	6021      	streq	r1, [r4, #0]
 800c010:	e7ed      	b.n	800bfee <_free_r+0x22>
 800c012:	461a      	mov	r2, r3
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	b10b      	cbz	r3, 800c01c <_free_r+0x50>
 800c018:	42a3      	cmp	r3, r4
 800c01a:	d9fa      	bls.n	800c012 <_free_r+0x46>
 800c01c:	6811      	ldr	r1, [r2, #0]
 800c01e:	1855      	adds	r5, r2, r1
 800c020:	42a5      	cmp	r5, r4
 800c022:	d10b      	bne.n	800c03c <_free_r+0x70>
 800c024:	6824      	ldr	r4, [r4, #0]
 800c026:	4421      	add	r1, r4
 800c028:	1854      	adds	r4, r2, r1
 800c02a:	42a3      	cmp	r3, r4
 800c02c:	6011      	str	r1, [r2, #0]
 800c02e:	d1e0      	bne.n	800bff2 <_free_r+0x26>
 800c030:	681c      	ldr	r4, [r3, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	6053      	str	r3, [r2, #4]
 800c036:	440c      	add	r4, r1
 800c038:	6014      	str	r4, [r2, #0]
 800c03a:	e7da      	b.n	800bff2 <_free_r+0x26>
 800c03c:	d902      	bls.n	800c044 <_free_r+0x78>
 800c03e:	230c      	movs	r3, #12
 800c040:	6003      	str	r3, [r0, #0]
 800c042:	e7d6      	b.n	800bff2 <_free_r+0x26>
 800c044:	6825      	ldr	r5, [r4, #0]
 800c046:	1961      	adds	r1, r4, r5
 800c048:	428b      	cmp	r3, r1
 800c04a:	bf04      	itt	eq
 800c04c:	6819      	ldreq	r1, [r3, #0]
 800c04e:	685b      	ldreq	r3, [r3, #4]
 800c050:	6063      	str	r3, [r4, #4]
 800c052:	bf04      	itt	eq
 800c054:	1949      	addeq	r1, r1, r5
 800c056:	6021      	streq	r1, [r4, #0]
 800c058:	6054      	str	r4, [r2, #4]
 800c05a:	e7ca      	b.n	800bff2 <_free_r+0x26>
 800c05c:	b003      	add	sp, #12
 800c05e:	bd30      	pop	{r4, r5, pc}
 800c060:	20005378 	.word	0x20005378

0800c064 <sbrk_aligned>:
 800c064:	b570      	push	{r4, r5, r6, lr}
 800c066:	4e0e      	ldr	r6, [pc, #56]	; (800c0a0 <sbrk_aligned+0x3c>)
 800c068:	460c      	mov	r4, r1
 800c06a:	6831      	ldr	r1, [r6, #0]
 800c06c:	4605      	mov	r5, r0
 800c06e:	b911      	cbnz	r1, 800c076 <sbrk_aligned+0x12>
 800c070:	f000 fe62 	bl	800cd38 <_sbrk_r>
 800c074:	6030      	str	r0, [r6, #0]
 800c076:	4621      	mov	r1, r4
 800c078:	4628      	mov	r0, r5
 800c07a:	f000 fe5d 	bl	800cd38 <_sbrk_r>
 800c07e:	1c43      	adds	r3, r0, #1
 800c080:	d00a      	beq.n	800c098 <sbrk_aligned+0x34>
 800c082:	1cc4      	adds	r4, r0, #3
 800c084:	f024 0403 	bic.w	r4, r4, #3
 800c088:	42a0      	cmp	r0, r4
 800c08a:	d007      	beq.n	800c09c <sbrk_aligned+0x38>
 800c08c:	1a21      	subs	r1, r4, r0
 800c08e:	4628      	mov	r0, r5
 800c090:	f000 fe52 	bl	800cd38 <_sbrk_r>
 800c094:	3001      	adds	r0, #1
 800c096:	d101      	bne.n	800c09c <sbrk_aligned+0x38>
 800c098:	f04f 34ff 	mov.w	r4, #4294967295
 800c09c:	4620      	mov	r0, r4
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
 800c0a0:	2000537c 	.word	0x2000537c

0800c0a4 <_malloc_r>:
 800c0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a8:	1ccd      	adds	r5, r1, #3
 800c0aa:	f025 0503 	bic.w	r5, r5, #3
 800c0ae:	3508      	adds	r5, #8
 800c0b0:	2d0c      	cmp	r5, #12
 800c0b2:	bf38      	it	cc
 800c0b4:	250c      	movcc	r5, #12
 800c0b6:	2d00      	cmp	r5, #0
 800c0b8:	4607      	mov	r7, r0
 800c0ba:	db01      	blt.n	800c0c0 <_malloc_r+0x1c>
 800c0bc:	42a9      	cmp	r1, r5
 800c0be:	d905      	bls.n	800c0cc <_malloc_r+0x28>
 800c0c0:	230c      	movs	r3, #12
 800c0c2:	603b      	str	r3, [r7, #0]
 800c0c4:	2600      	movs	r6, #0
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1a0 <_malloc_r+0xfc>
 800c0d0:	f000 f868 	bl	800c1a4 <__malloc_lock>
 800c0d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0d8:	461c      	mov	r4, r3
 800c0da:	bb5c      	cbnz	r4, 800c134 <_malloc_r+0x90>
 800c0dc:	4629      	mov	r1, r5
 800c0de:	4638      	mov	r0, r7
 800c0e0:	f7ff ffc0 	bl	800c064 <sbrk_aligned>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	d155      	bne.n	800c196 <_malloc_r+0xf2>
 800c0ea:	f8d8 4000 	ldr.w	r4, [r8]
 800c0ee:	4626      	mov	r6, r4
 800c0f0:	2e00      	cmp	r6, #0
 800c0f2:	d145      	bne.n	800c180 <_malloc_r+0xdc>
 800c0f4:	2c00      	cmp	r4, #0
 800c0f6:	d048      	beq.n	800c18a <_malloc_r+0xe6>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	4631      	mov	r1, r6
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	eb04 0903 	add.w	r9, r4, r3
 800c102:	f000 fe19 	bl	800cd38 <_sbrk_r>
 800c106:	4581      	cmp	r9, r0
 800c108:	d13f      	bne.n	800c18a <_malloc_r+0xe6>
 800c10a:	6821      	ldr	r1, [r4, #0]
 800c10c:	1a6d      	subs	r5, r5, r1
 800c10e:	4629      	mov	r1, r5
 800c110:	4638      	mov	r0, r7
 800c112:	f7ff ffa7 	bl	800c064 <sbrk_aligned>
 800c116:	3001      	adds	r0, #1
 800c118:	d037      	beq.n	800c18a <_malloc_r+0xe6>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	442b      	add	r3, r5
 800c11e:	6023      	str	r3, [r4, #0]
 800c120:	f8d8 3000 	ldr.w	r3, [r8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d038      	beq.n	800c19a <_malloc_r+0xf6>
 800c128:	685a      	ldr	r2, [r3, #4]
 800c12a:	42a2      	cmp	r2, r4
 800c12c:	d12b      	bne.n	800c186 <_malloc_r+0xe2>
 800c12e:	2200      	movs	r2, #0
 800c130:	605a      	str	r2, [r3, #4]
 800c132:	e00f      	b.n	800c154 <_malloc_r+0xb0>
 800c134:	6822      	ldr	r2, [r4, #0]
 800c136:	1b52      	subs	r2, r2, r5
 800c138:	d41f      	bmi.n	800c17a <_malloc_r+0xd6>
 800c13a:	2a0b      	cmp	r2, #11
 800c13c:	d917      	bls.n	800c16e <_malloc_r+0xca>
 800c13e:	1961      	adds	r1, r4, r5
 800c140:	42a3      	cmp	r3, r4
 800c142:	6025      	str	r5, [r4, #0]
 800c144:	bf18      	it	ne
 800c146:	6059      	strne	r1, [r3, #4]
 800c148:	6863      	ldr	r3, [r4, #4]
 800c14a:	bf08      	it	eq
 800c14c:	f8c8 1000 	streq.w	r1, [r8]
 800c150:	5162      	str	r2, [r4, r5]
 800c152:	604b      	str	r3, [r1, #4]
 800c154:	4638      	mov	r0, r7
 800c156:	f104 060b 	add.w	r6, r4, #11
 800c15a:	f000 f829 	bl	800c1b0 <__malloc_unlock>
 800c15e:	f026 0607 	bic.w	r6, r6, #7
 800c162:	1d23      	adds	r3, r4, #4
 800c164:	1af2      	subs	r2, r6, r3
 800c166:	d0ae      	beq.n	800c0c6 <_malloc_r+0x22>
 800c168:	1b9b      	subs	r3, r3, r6
 800c16a:	50a3      	str	r3, [r4, r2]
 800c16c:	e7ab      	b.n	800c0c6 <_malloc_r+0x22>
 800c16e:	42a3      	cmp	r3, r4
 800c170:	6862      	ldr	r2, [r4, #4]
 800c172:	d1dd      	bne.n	800c130 <_malloc_r+0x8c>
 800c174:	f8c8 2000 	str.w	r2, [r8]
 800c178:	e7ec      	b.n	800c154 <_malloc_r+0xb0>
 800c17a:	4623      	mov	r3, r4
 800c17c:	6864      	ldr	r4, [r4, #4]
 800c17e:	e7ac      	b.n	800c0da <_malloc_r+0x36>
 800c180:	4634      	mov	r4, r6
 800c182:	6876      	ldr	r6, [r6, #4]
 800c184:	e7b4      	b.n	800c0f0 <_malloc_r+0x4c>
 800c186:	4613      	mov	r3, r2
 800c188:	e7cc      	b.n	800c124 <_malloc_r+0x80>
 800c18a:	230c      	movs	r3, #12
 800c18c:	603b      	str	r3, [r7, #0]
 800c18e:	4638      	mov	r0, r7
 800c190:	f000 f80e 	bl	800c1b0 <__malloc_unlock>
 800c194:	e797      	b.n	800c0c6 <_malloc_r+0x22>
 800c196:	6025      	str	r5, [r4, #0]
 800c198:	e7dc      	b.n	800c154 <_malloc_r+0xb0>
 800c19a:	605b      	str	r3, [r3, #4]
 800c19c:	deff      	udf	#255	; 0xff
 800c19e:	bf00      	nop
 800c1a0:	20005378 	.word	0x20005378

0800c1a4 <__malloc_lock>:
 800c1a4:	4801      	ldr	r0, [pc, #4]	; (800c1ac <__malloc_lock+0x8>)
 800c1a6:	f7ff bf00 	b.w	800bfaa <__retarget_lock_acquire_recursive>
 800c1aa:	bf00      	nop
 800c1ac:	20005374 	.word	0x20005374

0800c1b0 <__malloc_unlock>:
 800c1b0:	4801      	ldr	r0, [pc, #4]	; (800c1b8 <__malloc_unlock+0x8>)
 800c1b2:	f7ff befb 	b.w	800bfac <__retarget_lock_release_recursive>
 800c1b6:	bf00      	nop
 800c1b8:	20005374 	.word	0x20005374

0800c1bc <__ssputs_r>:
 800c1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c0:	688e      	ldr	r6, [r1, #8]
 800c1c2:	461f      	mov	r7, r3
 800c1c4:	42be      	cmp	r6, r7
 800c1c6:	680b      	ldr	r3, [r1, #0]
 800c1c8:	4682      	mov	sl, r0
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	4690      	mov	r8, r2
 800c1ce:	d82c      	bhi.n	800c22a <__ssputs_r+0x6e>
 800c1d0:	898a      	ldrh	r2, [r1, #12]
 800c1d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1d6:	d026      	beq.n	800c226 <__ssputs_r+0x6a>
 800c1d8:	6965      	ldr	r5, [r4, #20]
 800c1da:	6909      	ldr	r1, [r1, #16]
 800c1dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1e0:	eba3 0901 	sub.w	r9, r3, r1
 800c1e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1e8:	1c7b      	adds	r3, r7, #1
 800c1ea:	444b      	add	r3, r9
 800c1ec:	106d      	asrs	r5, r5, #1
 800c1ee:	429d      	cmp	r5, r3
 800c1f0:	bf38      	it	cc
 800c1f2:	461d      	movcc	r5, r3
 800c1f4:	0553      	lsls	r3, r2, #21
 800c1f6:	d527      	bpl.n	800c248 <__ssputs_r+0x8c>
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7ff ff53 	bl	800c0a4 <_malloc_r>
 800c1fe:	4606      	mov	r6, r0
 800c200:	b360      	cbz	r0, 800c25c <__ssputs_r+0xa0>
 800c202:	6921      	ldr	r1, [r4, #16]
 800c204:	464a      	mov	r2, r9
 800c206:	f7ff fed2 	bl	800bfae <memcpy>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	6126      	str	r6, [r4, #16]
 800c218:	6165      	str	r5, [r4, #20]
 800c21a:	444e      	add	r6, r9
 800c21c:	eba5 0509 	sub.w	r5, r5, r9
 800c220:	6026      	str	r6, [r4, #0]
 800c222:	60a5      	str	r5, [r4, #8]
 800c224:	463e      	mov	r6, r7
 800c226:	42be      	cmp	r6, r7
 800c228:	d900      	bls.n	800c22c <__ssputs_r+0x70>
 800c22a:	463e      	mov	r6, r7
 800c22c:	6820      	ldr	r0, [r4, #0]
 800c22e:	4632      	mov	r2, r6
 800c230:	4641      	mov	r1, r8
 800c232:	f000 fd67 	bl	800cd04 <memmove>
 800c236:	68a3      	ldr	r3, [r4, #8]
 800c238:	1b9b      	subs	r3, r3, r6
 800c23a:	60a3      	str	r3, [r4, #8]
 800c23c:	6823      	ldr	r3, [r4, #0]
 800c23e:	4433      	add	r3, r6
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	2000      	movs	r0, #0
 800c244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c248:	462a      	mov	r2, r5
 800c24a:	f000 fd85 	bl	800cd58 <_realloc_r>
 800c24e:	4606      	mov	r6, r0
 800c250:	2800      	cmp	r0, #0
 800c252:	d1e0      	bne.n	800c216 <__ssputs_r+0x5a>
 800c254:	6921      	ldr	r1, [r4, #16]
 800c256:	4650      	mov	r0, sl
 800c258:	f7ff feb8 	bl	800bfcc <_free_r>
 800c25c:	230c      	movs	r3, #12
 800c25e:	f8ca 3000 	str.w	r3, [sl]
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	e7e9      	b.n	800c244 <__ssputs_r+0x88>

0800c270 <_svfiprintf_r>:
 800c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c274:	4698      	mov	r8, r3
 800c276:	898b      	ldrh	r3, [r1, #12]
 800c278:	061b      	lsls	r3, r3, #24
 800c27a:	b09d      	sub	sp, #116	; 0x74
 800c27c:	4607      	mov	r7, r0
 800c27e:	460d      	mov	r5, r1
 800c280:	4614      	mov	r4, r2
 800c282:	d50e      	bpl.n	800c2a2 <_svfiprintf_r+0x32>
 800c284:	690b      	ldr	r3, [r1, #16]
 800c286:	b963      	cbnz	r3, 800c2a2 <_svfiprintf_r+0x32>
 800c288:	2140      	movs	r1, #64	; 0x40
 800c28a:	f7ff ff0b 	bl	800c0a4 <_malloc_r>
 800c28e:	6028      	str	r0, [r5, #0]
 800c290:	6128      	str	r0, [r5, #16]
 800c292:	b920      	cbnz	r0, 800c29e <_svfiprintf_r+0x2e>
 800c294:	230c      	movs	r3, #12
 800c296:	603b      	str	r3, [r7, #0]
 800c298:	f04f 30ff 	mov.w	r0, #4294967295
 800c29c:	e0d0      	b.n	800c440 <_svfiprintf_r+0x1d0>
 800c29e:	2340      	movs	r3, #64	; 0x40
 800c2a0:	616b      	str	r3, [r5, #20]
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2a6:	2320      	movs	r3, #32
 800c2a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2b0:	2330      	movs	r3, #48	; 0x30
 800c2b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c458 <_svfiprintf_r+0x1e8>
 800c2b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2ba:	f04f 0901 	mov.w	r9, #1
 800c2be:	4623      	mov	r3, r4
 800c2c0:	469a      	mov	sl, r3
 800c2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2c6:	b10a      	cbz	r2, 800c2cc <_svfiprintf_r+0x5c>
 800c2c8:	2a25      	cmp	r2, #37	; 0x25
 800c2ca:	d1f9      	bne.n	800c2c0 <_svfiprintf_r+0x50>
 800c2cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c2d0:	d00b      	beq.n	800c2ea <_svfiprintf_r+0x7a>
 800c2d2:	465b      	mov	r3, fp
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	4629      	mov	r1, r5
 800c2d8:	4638      	mov	r0, r7
 800c2da:	f7ff ff6f 	bl	800c1bc <__ssputs_r>
 800c2de:	3001      	adds	r0, #1
 800c2e0:	f000 80a9 	beq.w	800c436 <_svfiprintf_r+0x1c6>
 800c2e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2e6:	445a      	add	r2, fp
 800c2e8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f000 80a1 	beq.w	800c436 <_svfiprintf_r+0x1c6>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2fe:	f10a 0a01 	add.w	sl, sl, #1
 800c302:	9304      	str	r3, [sp, #16]
 800c304:	9307      	str	r3, [sp, #28]
 800c306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c30a:	931a      	str	r3, [sp, #104]	; 0x68
 800c30c:	4654      	mov	r4, sl
 800c30e:	2205      	movs	r2, #5
 800c310:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c314:	4850      	ldr	r0, [pc, #320]	; (800c458 <_svfiprintf_r+0x1e8>)
 800c316:	f7f3 ff63 	bl	80001e0 <memchr>
 800c31a:	9a04      	ldr	r2, [sp, #16]
 800c31c:	b9d8      	cbnz	r0, 800c356 <_svfiprintf_r+0xe6>
 800c31e:	06d0      	lsls	r0, r2, #27
 800c320:	bf44      	itt	mi
 800c322:	2320      	movmi	r3, #32
 800c324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c328:	0711      	lsls	r1, r2, #28
 800c32a:	bf44      	itt	mi
 800c32c:	232b      	movmi	r3, #43	; 0x2b
 800c32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c332:	f89a 3000 	ldrb.w	r3, [sl]
 800c336:	2b2a      	cmp	r3, #42	; 0x2a
 800c338:	d015      	beq.n	800c366 <_svfiprintf_r+0xf6>
 800c33a:	9a07      	ldr	r2, [sp, #28]
 800c33c:	4654      	mov	r4, sl
 800c33e:	2000      	movs	r0, #0
 800c340:	f04f 0c0a 	mov.w	ip, #10
 800c344:	4621      	mov	r1, r4
 800c346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c34a:	3b30      	subs	r3, #48	; 0x30
 800c34c:	2b09      	cmp	r3, #9
 800c34e:	d94d      	bls.n	800c3ec <_svfiprintf_r+0x17c>
 800c350:	b1b0      	cbz	r0, 800c380 <_svfiprintf_r+0x110>
 800c352:	9207      	str	r2, [sp, #28]
 800c354:	e014      	b.n	800c380 <_svfiprintf_r+0x110>
 800c356:	eba0 0308 	sub.w	r3, r0, r8
 800c35a:	fa09 f303 	lsl.w	r3, r9, r3
 800c35e:	4313      	orrs	r3, r2
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	46a2      	mov	sl, r4
 800c364:	e7d2      	b.n	800c30c <_svfiprintf_r+0x9c>
 800c366:	9b03      	ldr	r3, [sp, #12]
 800c368:	1d19      	adds	r1, r3, #4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	9103      	str	r1, [sp, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	bfbb      	ittet	lt
 800c372:	425b      	neglt	r3, r3
 800c374:	f042 0202 	orrlt.w	r2, r2, #2
 800c378:	9307      	strge	r3, [sp, #28]
 800c37a:	9307      	strlt	r3, [sp, #28]
 800c37c:	bfb8      	it	lt
 800c37e:	9204      	strlt	r2, [sp, #16]
 800c380:	7823      	ldrb	r3, [r4, #0]
 800c382:	2b2e      	cmp	r3, #46	; 0x2e
 800c384:	d10c      	bne.n	800c3a0 <_svfiprintf_r+0x130>
 800c386:	7863      	ldrb	r3, [r4, #1]
 800c388:	2b2a      	cmp	r3, #42	; 0x2a
 800c38a:	d134      	bne.n	800c3f6 <_svfiprintf_r+0x186>
 800c38c:	9b03      	ldr	r3, [sp, #12]
 800c38e:	1d1a      	adds	r2, r3, #4
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	9203      	str	r2, [sp, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	bfb8      	it	lt
 800c398:	f04f 33ff 	movlt.w	r3, #4294967295
 800c39c:	3402      	adds	r4, #2
 800c39e:	9305      	str	r3, [sp, #20]
 800c3a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c468 <_svfiprintf_r+0x1f8>
 800c3a4:	7821      	ldrb	r1, [r4, #0]
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	4650      	mov	r0, sl
 800c3aa:	f7f3 ff19 	bl	80001e0 <memchr>
 800c3ae:	b138      	cbz	r0, 800c3c0 <_svfiprintf_r+0x150>
 800c3b0:	9b04      	ldr	r3, [sp, #16]
 800c3b2:	eba0 000a 	sub.w	r0, r0, sl
 800c3b6:	2240      	movs	r2, #64	; 0x40
 800c3b8:	4082      	lsls	r2, r0
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	3401      	adds	r4, #1
 800c3be:	9304      	str	r3, [sp, #16]
 800c3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c4:	4825      	ldr	r0, [pc, #148]	; (800c45c <_svfiprintf_r+0x1ec>)
 800c3c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ca:	2206      	movs	r2, #6
 800c3cc:	f7f3 ff08 	bl	80001e0 <memchr>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d038      	beq.n	800c446 <_svfiprintf_r+0x1d6>
 800c3d4:	4b22      	ldr	r3, [pc, #136]	; (800c460 <_svfiprintf_r+0x1f0>)
 800c3d6:	bb1b      	cbnz	r3, 800c420 <_svfiprintf_r+0x1b0>
 800c3d8:	9b03      	ldr	r3, [sp, #12]
 800c3da:	3307      	adds	r3, #7
 800c3dc:	f023 0307 	bic.w	r3, r3, #7
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	9303      	str	r3, [sp, #12]
 800c3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e6:	4433      	add	r3, r6
 800c3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ea:	e768      	b.n	800c2be <_svfiprintf_r+0x4e>
 800c3ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	e7a6      	b.n	800c344 <_svfiprintf_r+0xd4>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	3401      	adds	r4, #1
 800c3fa:	9305      	str	r3, [sp, #20]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	f04f 0c0a 	mov.w	ip, #10
 800c402:	4620      	mov	r0, r4
 800c404:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c408:	3a30      	subs	r2, #48	; 0x30
 800c40a:	2a09      	cmp	r2, #9
 800c40c:	d903      	bls.n	800c416 <_svfiprintf_r+0x1a6>
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d0c6      	beq.n	800c3a0 <_svfiprintf_r+0x130>
 800c412:	9105      	str	r1, [sp, #20]
 800c414:	e7c4      	b.n	800c3a0 <_svfiprintf_r+0x130>
 800c416:	fb0c 2101 	mla	r1, ip, r1, r2
 800c41a:	4604      	mov	r4, r0
 800c41c:	2301      	movs	r3, #1
 800c41e:	e7f0      	b.n	800c402 <_svfiprintf_r+0x192>
 800c420:	ab03      	add	r3, sp, #12
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	462a      	mov	r2, r5
 800c426:	4b0f      	ldr	r3, [pc, #60]	; (800c464 <_svfiprintf_r+0x1f4>)
 800c428:	a904      	add	r1, sp, #16
 800c42a:	4638      	mov	r0, r7
 800c42c:	f3af 8000 	nop.w
 800c430:	1c42      	adds	r2, r0, #1
 800c432:	4606      	mov	r6, r0
 800c434:	d1d6      	bne.n	800c3e4 <_svfiprintf_r+0x174>
 800c436:	89ab      	ldrh	r3, [r5, #12]
 800c438:	065b      	lsls	r3, r3, #25
 800c43a:	f53f af2d 	bmi.w	800c298 <_svfiprintf_r+0x28>
 800c43e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c440:	b01d      	add	sp, #116	; 0x74
 800c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c446:	ab03      	add	r3, sp, #12
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	462a      	mov	r2, r5
 800c44c:	4b05      	ldr	r3, [pc, #20]	; (800c464 <_svfiprintf_r+0x1f4>)
 800c44e:	a904      	add	r1, sp, #16
 800c450:	4638      	mov	r0, r7
 800c452:	f000 f9bd 	bl	800c7d0 <_printf_i>
 800c456:	e7eb      	b.n	800c430 <_svfiprintf_r+0x1c0>
 800c458:	0800d04c 	.word	0x0800d04c
 800c45c:	0800d056 	.word	0x0800d056
 800c460:	00000000 	.word	0x00000000
 800c464:	0800c1bd 	.word	0x0800c1bd
 800c468:	0800d052 	.word	0x0800d052

0800c46c <__sfputc_r>:
 800c46c:	6893      	ldr	r3, [r2, #8]
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b00      	cmp	r3, #0
 800c472:	b410      	push	{r4}
 800c474:	6093      	str	r3, [r2, #8]
 800c476:	da08      	bge.n	800c48a <__sfputc_r+0x1e>
 800c478:	6994      	ldr	r4, [r2, #24]
 800c47a:	42a3      	cmp	r3, r4
 800c47c:	db01      	blt.n	800c482 <__sfputc_r+0x16>
 800c47e:	290a      	cmp	r1, #10
 800c480:	d103      	bne.n	800c48a <__sfputc_r+0x1e>
 800c482:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c486:	f000 bba7 	b.w	800cbd8 <__swbuf_r>
 800c48a:	6813      	ldr	r3, [r2, #0]
 800c48c:	1c58      	adds	r0, r3, #1
 800c48e:	6010      	str	r0, [r2, #0]
 800c490:	7019      	strb	r1, [r3, #0]
 800c492:	4608      	mov	r0, r1
 800c494:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <__sfputs_r>:
 800c49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49c:	4606      	mov	r6, r0
 800c49e:	460f      	mov	r7, r1
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	18d5      	adds	r5, r2, r3
 800c4a4:	42ac      	cmp	r4, r5
 800c4a6:	d101      	bne.n	800c4ac <__sfputs_r+0x12>
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	e007      	b.n	800c4bc <__sfputs_r+0x22>
 800c4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b0:	463a      	mov	r2, r7
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f7ff ffda 	bl	800c46c <__sfputc_r>
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	d1f3      	bne.n	800c4a4 <__sfputs_r+0xa>
 800c4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4c0 <_vfiprintf_r>:
 800c4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c4:	460d      	mov	r5, r1
 800c4c6:	b09d      	sub	sp, #116	; 0x74
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	4698      	mov	r8, r3
 800c4cc:	4606      	mov	r6, r0
 800c4ce:	b118      	cbz	r0, 800c4d8 <_vfiprintf_r+0x18>
 800c4d0:	6a03      	ldr	r3, [r0, #32]
 800c4d2:	b90b      	cbnz	r3, 800c4d8 <_vfiprintf_r+0x18>
 800c4d4:	f7ff fc2a 	bl	800bd2c <__sinit>
 800c4d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4da:	07d9      	lsls	r1, r3, #31
 800c4dc:	d405      	bmi.n	800c4ea <_vfiprintf_r+0x2a>
 800c4de:	89ab      	ldrh	r3, [r5, #12]
 800c4e0:	059a      	lsls	r2, r3, #22
 800c4e2:	d402      	bmi.n	800c4ea <_vfiprintf_r+0x2a>
 800c4e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4e6:	f7ff fd60 	bl	800bfaa <__retarget_lock_acquire_recursive>
 800c4ea:	89ab      	ldrh	r3, [r5, #12]
 800c4ec:	071b      	lsls	r3, r3, #28
 800c4ee:	d501      	bpl.n	800c4f4 <_vfiprintf_r+0x34>
 800c4f0:	692b      	ldr	r3, [r5, #16]
 800c4f2:	b99b      	cbnz	r3, 800c51c <_vfiprintf_r+0x5c>
 800c4f4:	4629      	mov	r1, r5
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f000 fbac 	bl	800cc54 <__swsetup_r>
 800c4fc:	b170      	cbz	r0, 800c51c <_vfiprintf_r+0x5c>
 800c4fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c500:	07dc      	lsls	r4, r3, #31
 800c502:	d504      	bpl.n	800c50e <_vfiprintf_r+0x4e>
 800c504:	f04f 30ff 	mov.w	r0, #4294967295
 800c508:	b01d      	add	sp, #116	; 0x74
 800c50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50e:	89ab      	ldrh	r3, [r5, #12]
 800c510:	0598      	lsls	r0, r3, #22
 800c512:	d4f7      	bmi.n	800c504 <_vfiprintf_r+0x44>
 800c514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c516:	f7ff fd49 	bl	800bfac <__retarget_lock_release_recursive>
 800c51a:	e7f3      	b.n	800c504 <_vfiprintf_r+0x44>
 800c51c:	2300      	movs	r3, #0
 800c51e:	9309      	str	r3, [sp, #36]	; 0x24
 800c520:	2320      	movs	r3, #32
 800c522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c526:	f8cd 800c 	str.w	r8, [sp, #12]
 800c52a:	2330      	movs	r3, #48	; 0x30
 800c52c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c6e0 <_vfiprintf_r+0x220>
 800c530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c534:	f04f 0901 	mov.w	r9, #1
 800c538:	4623      	mov	r3, r4
 800c53a:	469a      	mov	sl, r3
 800c53c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c540:	b10a      	cbz	r2, 800c546 <_vfiprintf_r+0x86>
 800c542:	2a25      	cmp	r2, #37	; 0x25
 800c544:	d1f9      	bne.n	800c53a <_vfiprintf_r+0x7a>
 800c546:	ebba 0b04 	subs.w	fp, sl, r4
 800c54a:	d00b      	beq.n	800c564 <_vfiprintf_r+0xa4>
 800c54c:	465b      	mov	r3, fp
 800c54e:	4622      	mov	r2, r4
 800c550:	4629      	mov	r1, r5
 800c552:	4630      	mov	r0, r6
 800c554:	f7ff ffa1 	bl	800c49a <__sfputs_r>
 800c558:	3001      	adds	r0, #1
 800c55a:	f000 80a9 	beq.w	800c6b0 <_vfiprintf_r+0x1f0>
 800c55e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c560:	445a      	add	r2, fp
 800c562:	9209      	str	r2, [sp, #36]	; 0x24
 800c564:	f89a 3000 	ldrb.w	r3, [sl]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f000 80a1 	beq.w	800c6b0 <_vfiprintf_r+0x1f0>
 800c56e:	2300      	movs	r3, #0
 800c570:	f04f 32ff 	mov.w	r2, #4294967295
 800c574:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c578:	f10a 0a01 	add.w	sl, sl, #1
 800c57c:	9304      	str	r3, [sp, #16]
 800c57e:	9307      	str	r3, [sp, #28]
 800c580:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c584:	931a      	str	r3, [sp, #104]	; 0x68
 800c586:	4654      	mov	r4, sl
 800c588:	2205      	movs	r2, #5
 800c58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c58e:	4854      	ldr	r0, [pc, #336]	; (800c6e0 <_vfiprintf_r+0x220>)
 800c590:	f7f3 fe26 	bl	80001e0 <memchr>
 800c594:	9a04      	ldr	r2, [sp, #16]
 800c596:	b9d8      	cbnz	r0, 800c5d0 <_vfiprintf_r+0x110>
 800c598:	06d1      	lsls	r1, r2, #27
 800c59a:	bf44      	itt	mi
 800c59c:	2320      	movmi	r3, #32
 800c59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5a2:	0713      	lsls	r3, r2, #28
 800c5a4:	bf44      	itt	mi
 800c5a6:	232b      	movmi	r3, #43	; 0x2b
 800c5a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b2:	d015      	beq.n	800c5e0 <_vfiprintf_r+0x120>
 800c5b4:	9a07      	ldr	r2, [sp, #28]
 800c5b6:	4654      	mov	r4, sl
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	f04f 0c0a 	mov.w	ip, #10
 800c5be:	4621      	mov	r1, r4
 800c5c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5c4:	3b30      	subs	r3, #48	; 0x30
 800c5c6:	2b09      	cmp	r3, #9
 800c5c8:	d94d      	bls.n	800c666 <_vfiprintf_r+0x1a6>
 800c5ca:	b1b0      	cbz	r0, 800c5fa <_vfiprintf_r+0x13a>
 800c5cc:	9207      	str	r2, [sp, #28]
 800c5ce:	e014      	b.n	800c5fa <_vfiprintf_r+0x13a>
 800c5d0:	eba0 0308 	sub.w	r3, r0, r8
 800c5d4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	9304      	str	r3, [sp, #16]
 800c5dc:	46a2      	mov	sl, r4
 800c5de:	e7d2      	b.n	800c586 <_vfiprintf_r+0xc6>
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	1d19      	adds	r1, r3, #4
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	9103      	str	r1, [sp, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bfbb      	ittet	lt
 800c5ec:	425b      	neglt	r3, r3
 800c5ee:	f042 0202 	orrlt.w	r2, r2, #2
 800c5f2:	9307      	strge	r3, [sp, #28]
 800c5f4:	9307      	strlt	r3, [sp, #28]
 800c5f6:	bfb8      	it	lt
 800c5f8:	9204      	strlt	r2, [sp, #16]
 800c5fa:	7823      	ldrb	r3, [r4, #0]
 800c5fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c5fe:	d10c      	bne.n	800c61a <_vfiprintf_r+0x15a>
 800c600:	7863      	ldrb	r3, [r4, #1]
 800c602:	2b2a      	cmp	r3, #42	; 0x2a
 800c604:	d134      	bne.n	800c670 <_vfiprintf_r+0x1b0>
 800c606:	9b03      	ldr	r3, [sp, #12]
 800c608:	1d1a      	adds	r2, r3, #4
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	9203      	str	r2, [sp, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	bfb8      	it	lt
 800c612:	f04f 33ff 	movlt.w	r3, #4294967295
 800c616:	3402      	adds	r4, #2
 800c618:	9305      	str	r3, [sp, #20]
 800c61a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c6f0 <_vfiprintf_r+0x230>
 800c61e:	7821      	ldrb	r1, [r4, #0]
 800c620:	2203      	movs	r2, #3
 800c622:	4650      	mov	r0, sl
 800c624:	f7f3 fddc 	bl	80001e0 <memchr>
 800c628:	b138      	cbz	r0, 800c63a <_vfiprintf_r+0x17a>
 800c62a:	9b04      	ldr	r3, [sp, #16]
 800c62c:	eba0 000a 	sub.w	r0, r0, sl
 800c630:	2240      	movs	r2, #64	; 0x40
 800c632:	4082      	lsls	r2, r0
 800c634:	4313      	orrs	r3, r2
 800c636:	3401      	adds	r4, #1
 800c638:	9304      	str	r3, [sp, #16]
 800c63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c63e:	4829      	ldr	r0, [pc, #164]	; (800c6e4 <_vfiprintf_r+0x224>)
 800c640:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c644:	2206      	movs	r2, #6
 800c646:	f7f3 fdcb 	bl	80001e0 <memchr>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d03f      	beq.n	800c6ce <_vfiprintf_r+0x20e>
 800c64e:	4b26      	ldr	r3, [pc, #152]	; (800c6e8 <_vfiprintf_r+0x228>)
 800c650:	bb1b      	cbnz	r3, 800c69a <_vfiprintf_r+0x1da>
 800c652:	9b03      	ldr	r3, [sp, #12]
 800c654:	3307      	adds	r3, #7
 800c656:	f023 0307 	bic.w	r3, r3, #7
 800c65a:	3308      	adds	r3, #8
 800c65c:	9303      	str	r3, [sp, #12]
 800c65e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c660:	443b      	add	r3, r7
 800c662:	9309      	str	r3, [sp, #36]	; 0x24
 800c664:	e768      	b.n	800c538 <_vfiprintf_r+0x78>
 800c666:	fb0c 3202 	mla	r2, ip, r2, r3
 800c66a:	460c      	mov	r4, r1
 800c66c:	2001      	movs	r0, #1
 800c66e:	e7a6      	b.n	800c5be <_vfiprintf_r+0xfe>
 800c670:	2300      	movs	r3, #0
 800c672:	3401      	adds	r4, #1
 800c674:	9305      	str	r3, [sp, #20]
 800c676:	4619      	mov	r1, r3
 800c678:	f04f 0c0a 	mov.w	ip, #10
 800c67c:	4620      	mov	r0, r4
 800c67e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c682:	3a30      	subs	r2, #48	; 0x30
 800c684:	2a09      	cmp	r2, #9
 800c686:	d903      	bls.n	800c690 <_vfiprintf_r+0x1d0>
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d0c6      	beq.n	800c61a <_vfiprintf_r+0x15a>
 800c68c:	9105      	str	r1, [sp, #20]
 800c68e:	e7c4      	b.n	800c61a <_vfiprintf_r+0x15a>
 800c690:	fb0c 2101 	mla	r1, ip, r1, r2
 800c694:	4604      	mov	r4, r0
 800c696:	2301      	movs	r3, #1
 800c698:	e7f0      	b.n	800c67c <_vfiprintf_r+0x1bc>
 800c69a:	ab03      	add	r3, sp, #12
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	462a      	mov	r2, r5
 800c6a0:	4b12      	ldr	r3, [pc, #72]	; (800c6ec <_vfiprintf_r+0x22c>)
 800c6a2:	a904      	add	r1, sp, #16
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f3af 8000 	nop.w
 800c6aa:	4607      	mov	r7, r0
 800c6ac:	1c78      	adds	r0, r7, #1
 800c6ae:	d1d6      	bne.n	800c65e <_vfiprintf_r+0x19e>
 800c6b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6b2:	07d9      	lsls	r1, r3, #31
 800c6b4:	d405      	bmi.n	800c6c2 <_vfiprintf_r+0x202>
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	059a      	lsls	r2, r3, #22
 800c6ba:	d402      	bmi.n	800c6c2 <_vfiprintf_r+0x202>
 800c6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6be:	f7ff fc75 	bl	800bfac <__retarget_lock_release_recursive>
 800c6c2:	89ab      	ldrh	r3, [r5, #12]
 800c6c4:	065b      	lsls	r3, r3, #25
 800c6c6:	f53f af1d 	bmi.w	800c504 <_vfiprintf_r+0x44>
 800c6ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6cc:	e71c      	b.n	800c508 <_vfiprintf_r+0x48>
 800c6ce:	ab03      	add	r3, sp, #12
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	462a      	mov	r2, r5
 800c6d4:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <_vfiprintf_r+0x22c>)
 800c6d6:	a904      	add	r1, sp, #16
 800c6d8:	4630      	mov	r0, r6
 800c6da:	f000 f879 	bl	800c7d0 <_printf_i>
 800c6de:	e7e4      	b.n	800c6aa <_vfiprintf_r+0x1ea>
 800c6e0:	0800d04c 	.word	0x0800d04c
 800c6e4:	0800d056 	.word	0x0800d056
 800c6e8:	00000000 	.word	0x00000000
 800c6ec:	0800c49b 	.word	0x0800c49b
 800c6f0:	0800d052 	.word	0x0800d052

0800c6f4 <_printf_common>:
 800c6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	4699      	mov	r9, r3
 800c6fc:	688a      	ldr	r2, [r1, #8]
 800c6fe:	690b      	ldr	r3, [r1, #16]
 800c700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c704:	4293      	cmp	r3, r2
 800c706:	bfb8      	it	lt
 800c708:	4613      	movlt	r3, r2
 800c70a:	6033      	str	r3, [r6, #0]
 800c70c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c710:	4607      	mov	r7, r0
 800c712:	460c      	mov	r4, r1
 800c714:	b10a      	cbz	r2, 800c71a <_printf_common+0x26>
 800c716:	3301      	adds	r3, #1
 800c718:	6033      	str	r3, [r6, #0]
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	0699      	lsls	r1, r3, #26
 800c71e:	bf42      	ittt	mi
 800c720:	6833      	ldrmi	r3, [r6, #0]
 800c722:	3302      	addmi	r3, #2
 800c724:	6033      	strmi	r3, [r6, #0]
 800c726:	6825      	ldr	r5, [r4, #0]
 800c728:	f015 0506 	ands.w	r5, r5, #6
 800c72c:	d106      	bne.n	800c73c <_printf_common+0x48>
 800c72e:	f104 0a19 	add.w	sl, r4, #25
 800c732:	68e3      	ldr	r3, [r4, #12]
 800c734:	6832      	ldr	r2, [r6, #0]
 800c736:	1a9b      	subs	r3, r3, r2
 800c738:	42ab      	cmp	r3, r5
 800c73a:	dc26      	bgt.n	800c78a <_printf_common+0x96>
 800c73c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c740:	1e13      	subs	r3, r2, #0
 800c742:	6822      	ldr	r2, [r4, #0]
 800c744:	bf18      	it	ne
 800c746:	2301      	movne	r3, #1
 800c748:	0692      	lsls	r2, r2, #26
 800c74a:	d42b      	bmi.n	800c7a4 <_printf_common+0xb0>
 800c74c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c750:	4649      	mov	r1, r9
 800c752:	4638      	mov	r0, r7
 800c754:	47c0      	blx	r8
 800c756:	3001      	adds	r0, #1
 800c758:	d01e      	beq.n	800c798 <_printf_common+0xa4>
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	6922      	ldr	r2, [r4, #16]
 800c75e:	f003 0306 	and.w	r3, r3, #6
 800c762:	2b04      	cmp	r3, #4
 800c764:	bf02      	ittt	eq
 800c766:	68e5      	ldreq	r5, [r4, #12]
 800c768:	6833      	ldreq	r3, [r6, #0]
 800c76a:	1aed      	subeq	r5, r5, r3
 800c76c:	68a3      	ldr	r3, [r4, #8]
 800c76e:	bf0c      	ite	eq
 800c770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c774:	2500      	movne	r5, #0
 800c776:	4293      	cmp	r3, r2
 800c778:	bfc4      	itt	gt
 800c77a:	1a9b      	subgt	r3, r3, r2
 800c77c:	18ed      	addgt	r5, r5, r3
 800c77e:	2600      	movs	r6, #0
 800c780:	341a      	adds	r4, #26
 800c782:	42b5      	cmp	r5, r6
 800c784:	d11a      	bne.n	800c7bc <_printf_common+0xc8>
 800c786:	2000      	movs	r0, #0
 800c788:	e008      	b.n	800c79c <_printf_common+0xa8>
 800c78a:	2301      	movs	r3, #1
 800c78c:	4652      	mov	r2, sl
 800c78e:	4649      	mov	r1, r9
 800c790:	4638      	mov	r0, r7
 800c792:	47c0      	blx	r8
 800c794:	3001      	adds	r0, #1
 800c796:	d103      	bne.n	800c7a0 <_printf_common+0xac>
 800c798:	f04f 30ff 	mov.w	r0, #4294967295
 800c79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a0:	3501      	adds	r5, #1
 800c7a2:	e7c6      	b.n	800c732 <_printf_common+0x3e>
 800c7a4:	18e1      	adds	r1, r4, r3
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	2030      	movs	r0, #48	; 0x30
 800c7aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7ae:	4422      	add	r2, r4
 800c7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7b8:	3302      	adds	r3, #2
 800c7ba:	e7c7      	b.n	800c74c <_printf_common+0x58>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	4622      	mov	r2, r4
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	47c0      	blx	r8
 800c7c6:	3001      	adds	r0, #1
 800c7c8:	d0e6      	beq.n	800c798 <_printf_common+0xa4>
 800c7ca:	3601      	adds	r6, #1
 800c7cc:	e7d9      	b.n	800c782 <_printf_common+0x8e>
	...

0800c7d0 <_printf_i>:
 800c7d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d4:	7e0f      	ldrb	r7, [r1, #24]
 800c7d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7d8:	2f78      	cmp	r7, #120	; 0x78
 800c7da:	4691      	mov	r9, r2
 800c7dc:	4680      	mov	r8, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	469a      	mov	sl, r3
 800c7e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c7e6:	d807      	bhi.n	800c7f8 <_printf_i+0x28>
 800c7e8:	2f62      	cmp	r7, #98	; 0x62
 800c7ea:	d80a      	bhi.n	800c802 <_printf_i+0x32>
 800c7ec:	2f00      	cmp	r7, #0
 800c7ee:	f000 80d4 	beq.w	800c99a <_printf_i+0x1ca>
 800c7f2:	2f58      	cmp	r7, #88	; 0x58
 800c7f4:	f000 80c0 	beq.w	800c978 <_printf_i+0x1a8>
 800c7f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c800:	e03a      	b.n	800c878 <_printf_i+0xa8>
 800c802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c806:	2b15      	cmp	r3, #21
 800c808:	d8f6      	bhi.n	800c7f8 <_printf_i+0x28>
 800c80a:	a101      	add	r1, pc, #4	; (adr r1, 800c810 <_printf_i+0x40>)
 800c80c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c810:	0800c869 	.word	0x0800c869
 800c814:	0800c87d 	.word	0x0800c87d
 800c818:	0800c7f9 	.word	0x0800c7f9
 800c81c:	0800c7f9 	.word	0x0800c7f9
 800c820:	0800c7f9 	.word	0x0800c7f9
 800c824:	0800c7f9 	.word	0x0800c7f9
 800c828:	0800c87d 	.word	0x0800c87d
 800c82c:	0800c7f9 	.word	0x0800c7f9
 800c830:	0800c7f9 	.word	0x0800c7f9
 800c834:	0800c7f9 	.word	0x0800c7f9
 800c838:	0800c7f9 	.word	0x0800c7f9
 800c83c:	0800c981 	.word	0x0800c981
 800c840:	0800c8a9 	.word	0x0800c8a9
 800c844:	0800c93b 	.word	0x0800c93b
 800c848:	0800c7f9 	.word	0x0800c7f9
 800c84c:	0800c7f9 	.word	0x0800c7f9
 800c850:	0800c9a3 	.word	0x0800c9a3
 800c854:	0800c7f9 	.word	0x0800c7f9
 800c858:	0800c8a9 	.word	0x0800c8a9
 800c85c:	0800c7f9 	.word	0x0800c7f9
 800c860:	0800c7f9 	.word	0x0800c7f9
 800c864:	0800c943 	.word	0x0800c943
 800c868:	682b      	ldr	r3, [r5, #0]
 800c86a:	1d1a      	adds	r2, r3, #4
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	602a      	str	r2, [r5, #0]
 800c870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c878:	2301      	movs	r3, #1
 800c87a:	e09f      	b.n	800c9bc <_printf_i+0x1ec>
 800c87c:	6820      	ldr	r0, [r4, #0]
 800c87e:	682b      	ldr	r3, [r5, #0]
 800c880:	0607      	lsls	r7, r0, #24
 800c882:	f103 0104 	add.w	r1, r3, #4
 800c886:	6029      	str	r1, [r5, #0]
 800c888:	d501      	bpl.n	800c88e <_printf_i+0xbe>
 800c88a:	681e      	ldr	r6, [r3, #0]
 800c88c:	e003      	b.n	800c896 <_printf_i+0xc6>
 800c88e:	0646      	lsls	r6, r0, #25
 800c890:	d5fb      	bpl.n	800c88a <_printf_i+0xba>
 800c892:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c896:	2e00      	cmp	r6, #0
 800c898:	da03      	bge.n	800c8a2 <_printf_i+0xd2>
 800c89a:	232d      	movs	r3, #45	; 0x2d
 800c89c:	4276      	negs	r6, r6
 800c89e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8a2:	485a      	ldr	r0, [pc, #360]	; (800ca0c <_printf_i+0x23c>)
 800c8a4:	230a      	movs	r3, #10
 800c8a6:	e012      	b.n	800c8ce <_printf_i+0xfe>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	6820      	ldr	r0, [r4, #0]
 800c8ac:	1d19      	adds	r1, r3, #4
 800c8ae:	6029      	str	r1, [r5, #0]
 800c8b0:	0605      	lsls	r5, r0, #24
 800c8b2:	d501      	bpl.n	800c8b8 <_printf_i+0xe8>
 800c8b4:	681e      	ldr	r6, [r3, #0]
 800c8b6:	e002      	b.n	800c8be <_printf_i+0xee>
 800c8b8:	0641      	lsls	r1, r0, #25
 800c8ba:	d5fb      	bpl.n	800c8b4 <_printf_i+0xe4>
 800c8bc:	881e      	ldrh	r6, [r3, #0]
 800c8be:	4853      	ldr	r0, [pc, #332]	; (800ca0c <_printf_i+0x23c>)
 800c8c0:	2f6f      	cmp	r7, #111	; 0x6f
 800c8c2:	bf0c      	ite	eq
 800c8c4:	2308      	moveq	r3, #8
 800c8c6:	230a      	movne	r3, #10
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8ce:	6865      	ldr	r5, [r4, #4]
 800c8d0:	60a5      	str	r5, [r4, #8]
 800c8d2:	2d00      	cmp	r5, #0
 800c8d4:	bfa2      	ittt	ge
 800c8d6:	6821      	ldrge	r1, [r4, #0]
 800c8d8:	f021 0104 	bicge.w	r1, r1, #4
 800c8dc:	6021      	strge	r1, [r4, #0]
 800c8de:	b90e      	cbnz	r6, 800c8e4 <_printf_i+0x114>
 800c8e0:	2d00      	cmp	r5, #0
 800c8e2:	d04b      	beq.n	800c97c <_printf_i+0x1ac>
 800c8e4:	4615      	mov	r5, r2
 800c8e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c8ea:	fb03 6711 	mls	r7, r3, r1, r6
 800c8ee:	5dc7      	ldrb	r7, [r0, r7]
 800c8f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c8f4:	4637      	mov	r7, r6
 800c8f6:	42bb      	cmp	r3, r7
 800c8f8:	460e      	mov	r6, r1
 800c8fa:	d9f4      	bls.n	800c8e6 <_printf_i+0x116>
 800c8fc:	2b08      	cmp	r3, #8
 800c8fe:	d10b      	bne.n	800c918 <_printf_i+0x148>
 800c900:	6823      	ldr	r3, [r4, #0]
 800c902:	07de      	lsls	r6, r3, #31
 800c904:	d508      	bpl.n	800c918 <_printf_i+0x148>
 800c906:	6923      	ldr	r3, [r4, #16]
 800c908:	6861      	ldr	r1, [r4, #4]
 800c90a:	4299      	cmp	r1, r3
 800c90c:	bfde      	ittt	le
 800c90e:	2330      	movle	r3, #48	; 0x30
 800c910:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c914:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c918:	1b52      	subs	r2, r2, r5
 800c91a:	6122      	str	r2, [r4, #16]
 800c91c:	f8cd a000 	str.w	sl, [sp]
 800c920:	464b      	mov	r3, r9
 800c922:	aa03      	add	r2, sp, #12
 800c924:	4621      	mov	r1, r4
 800c926:	4640      	mov	r0, r8
 800c928:	f7ff fee4 	bl	800c6f4 <_printf_common>
 800c92c:	3001      	adds	r0, #1
 800c92e:	d14a      	bne.n	800c9c6 <_printf_i+0x1f6>
 800c930:	f04f 30ff 	mov.w	r0, #4294967295
 800c934:	b004      	add	sp, #16
 800c936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	f043 0320 	orr.w	r3, r3, #32
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	4833      	ldr	r0, [pc, #204]	; (800ca10 <_printf_i+0x240>)
 800c944:	2778      	movs	r7, #120	; 0x78
 800c946:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	6829      	ldr	r1, [r5, #0]
 800c94e:	061f      	lsls	r7, r3, #24
 800c950:	f851 6b04 	ldr.w	r6, [r1], #4
 800c954:	d402      	bmi.n	800c95c <_printf_i+0x18c>
 800c956:	065f      	lsls	r7, r3, #25
 800c958:	bf48      	it	mi
 800c95a:	b2b6      	uxthmi	r6, r6
 800c95c:	07df      	lsls	r7, r3, #31
 800c95e:	bf48      	it	mi
 800c960:	f043 0320 	orrmi.w	r3, r3, #32
 800c964:	6029      	str	r1, [r5, #0]
 800c966:	bf48      	it	mi
 800c968:	6023      	strmi	r3, [r4, #0]
 800c96a:	b91e      	cbnz	r6, 800c974 <_printf_i+0x1a4>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	f023 0320 	bic.w	r3, r3, #32
 800c972:	6023      	str	r3, [r4, #0]
 800c974:	2310      	movs	r3, #16
 800c976:	e7a7      	b.n	800c8c8 <_printf_i+0xf8>
 800c978:	4824      	ldr	r0, [pc, #144]	; (800ca0c <_printf_i+0x23c>)
 800c97a:	e7e4      	b.n	800c946 <_printf_i+0x176>
 800c97c:	4615      	mov	r5, r2
 800c97e:	e7bd      	b.n	800c8fc <_printf_i+0x12c>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	6826      	ldr	r6, [r4, #0]
 800c984:	6961      	ldr	r1, [r4, #20]
 800c986:	1d18      	adds	r0, r3, #4
 800c988:	6028      	str	r0, [r5, #0]
 800c98a:	0635      	lsls	r5, r6, #24
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	d501      	bpl.n	800c994 <_printf_i+0x1c4>
 800c990:	6019      	str	r1, [r3, #0]
 800c992:	e002      	b.n	800c99a <_printf_i+0x1ca>
 800c994:	0670      	lsls	r0, r6, #25
 800c996:	d5fb      	bpl.n	800c990 <_printf_i+0x1c0>
 800c998:	8019      	strh	r1, [r3, #0]
 800c99a:	2300      	movs	r3, #0
 800c99c:	6123      	str	r3, [r4, #16]
 800c99e:	4615      	mov	r5, r2
 800c9a0:	e7bc      	b.n	800c91c <_printf_i+0x14c>
 800c9a2:	682b      	ldr	r3, [r5, #0]
 800c9a4:	1d1a      	adds	r2, r3, #4
 800c9a6:	602a      	str	r2, [r5, #0]
 800c9a8:	681d      	ldr	r5, [r3, #0]
 800c9aa:	6862      	ldr	r2, [r4, #4]
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	f7f3 fc16 	bl	80001e0 <memchr>
 800c9b4:	b108      	cbz	r0, 800c9ba <_printf_i+0x1ea>
 800c9b6:	1b40      	subs	r0, r0, r5
 800c9b8:	6060      	str	r0, [r4, #4]
 800c9ba:	6863      	ldr	r3, [r4, #4]
 800c9bc:	6123      	str	r3, [r4, #16]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9c4:	e7aa      	b.n	800c91c <_printf_i+0x14c>
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	462a      	mov	r2, r5
 800c9ca:	4649      	mov	r1, r9
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	47d0      	blx	sl
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d0ad      	beq.n	800c930 <_printf_i+0x160>
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	079b      	lsls	r3, r3, #30
 800c9d8:	d413      	bmi.n	800ca02 <_printf_i+0x232>
 800c9da:	68e0      	ldr	r0, [r4, #12]
 800c9dc:	9b03      	ldr	r3, [sp, #12]
 800c9de:	4298      	cmp	r0, r3
 800c9e0:	bfb8      	it	lt
 800c9e2:	4618      	movlt	r0, r3
 800c9e4:	e7a6      	b.n	800c934 <_printf_i+0x164>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	4632      	mov	r2, r6
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	47d0      	blx	sl
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d09d      	beq.n	800c930 <_printf_i+0x160>
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	68e3      	ldr	r3, [r4, #12]
 800c9f8:	9903      	ldr	r1, [sp, #12]
 800c9fa:	1a5b      	subs	r3, r3, r1
 800c9fc:	42ab      	cmp	r3, r5
 800c9fe:	dcf2      	bgt.n	800c9e6 <_printf_i+0x216>
 800ca00:	e7eb      	b.n	800c9da <_printf_i+0x20a>
 800ca02:	2500      	movs	r5, #0
 800ca04:	f104 0619 	add.w	r6, r4, #25
 800ca08:	e7f5      	b.n	800c9f6 <_printf_i+0x226>
 800ca0a:	bf00      	nop
 800ca0c:	0800d05d 	.word	0x0800d05d
 800ca10:	0800d06e 	.word	0x0800d06e

0800ca14 <__sflush_r>:
 800ca14:	898a      	ldrh	r2, [r1, #12]
 800ca16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	0710      	lsls	r0, r2, #28
 800ca1e:	460c      	mov	r4, r1
 800ca20:	d458      	bmi.n	800cad4 <__sflush_r+0xc0>
 800ca22:	684b      	ldr	r3, [r1, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dc05      	bgt.n	800ca34 <__sflush_r+0x20>
 800ca28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	dc02      	bgt.n	800ca34 <__sflush_r+0x20>
 800ca2e:	2000      	movs	r0, #0
 800ca30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	d0f9      	beq.n	800ca2e <__sflush_r+0x1a>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca40:	682f      	ldr	r7, [r5, #0]
 800ca42:	6a21      	ldr	r1, [r4, #32]
 800ca44:	602b      	str	r3, [r5, #0]
 800ca46:	d032      	beq.n	800caae <__sflush_r+0x9a>
 800ca48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	075a      	lsls	r2, r3, #29
 800ca4e:	d505      	bpl.n	800ca5c <__sflush_r+0x48>
 800ca50:	6863      	ldr	r3, [r4, #4]
 800ca52:	1ac0      	subs	r0, r0, r3
 800ca54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca56:	b10b      	cbz	r3, 800ca5c <__sflush_r+0x48>
 800ca58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca5a:	1ac0      	subs	r0, r0, r3
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	4602      	mov	r2, r0
 800ca60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca62:	6a21      	ldr	r1, [r4, #32]
 800ca64:	4628      	mov	r0, r5
 800ca66:	47b0      	blx	r6
 800ca68:	1c43      	adds	r3, r0, #1
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	d106      	bne.n	800ca7c <__sflush_r+0x68>
 800ca6e:	6829      	ldr	r1, [r5, #0]
 800ca70:	291d      	cmp	r1, #29
 800ca72:	d82b      	bhi.n	800cacc <__sflush_r+0xb8>
 800ca74:	4a29      	ldr	r2, [pc, #164]	; (800cb1c <__sflush_r+0x108>)
 800ca76:	410a      	asrs	r2, r1
 800ca78:	07d6      	lsls	r6, r2, #31
 800ca7a:	d427      	bmi.n	800cacc <__sflush_r+0xb8>
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	6062      	str	r2, [r4, #4]
 800ca80:	04d9      	lsls	r1, r3, #19
 800ca82:	6922      	ldr	r2, [r4, #16]
 800ca84:	6022      	str	r2, [r4, #0]
 800ca86:	d504      	bpl.n	800ca92 <__sflush_r+0x7e>
 800ca88:	1c42      	adds	r2, r0, #1
 800ca8a:	d101      	bne.n	800ca90 <__sflush_r+0x7c>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	b903      	cbnz	r3, 800ca92 <__sflush_r+0x7e>
 800ca90:	6560      	str	r0, [r4, #84]	; 0x54
 800ca92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca94:	602f      	str	r7, [r5, #0]
 800ca96:	2900      	cmp	r1, #0
 800ca98:	d0c9      	beq.n	800ca2e <__sflush_r+0x1a>
 800ca9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca9e:	4299      	cmp	r1, r3
 800caa0:	d002      	beq.n	800caa8 <__sflush_r+0x94>
 800caa2:	4628      	mov	r0, r5
 800caa4:	f7ff fa92 	bl	800bfcc <_free_r>
 800caa8:	2000      	movs	r0, #0
 800caaa:	6360      	str	r0, [r4, #52]	; 0x34
 800caac:	e7c0      	b.n	800ca30 <__sflush_r+0x1c>
 800caae:	2301      	movs	r3, #1
 800cab0:	4628      	mov	r0, r5
 800cab2:	47b0      	blx	r6
 800cab4:	1c41      	adds	r1, r0, #1
 800cab6:	d1c8      	bne.n	800ca4a <__sflush_r+0x36>
 800cab8:	682b      	ldr	r3, [r5, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0c5      	beq.n	800ca4a <__sflush_r+0x36>
 800cabe:	2b1d      	cmp	r3, #29
 800cac0:	d001      	beq.n	800cac6 <__sflush_r+0xb2>
 800cac2:	2b16      	cmp	r3, #22
 800cac4:	d101      	bne.n	800caca <__sflush_r+0xb6>
 800cac6:	602f      	str	r7, [r5, #0]
 800cac8:	e7b1      	b.n	800ca2e <__sflush_r+0x1a>
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cad0:	81a3      	strh	r3, [r4, #12]
 800cad2:	e7ad      	b.n	800ca30 <__sflush_r+0x1c>
 800cad4:	690f      	ldr	r7, [r1, #16]
 800cad6:	2f00      	cmp	r7, #0
 800cad8:	d0a9      	beq.n	800ca2e <__sflush_r+0x1a>
 800cada:	0793      	lsls	r3, r2, #30
 800cadc:	680e      	ldr	r6, [r1, #0]
 800cade:	bf08      	it	eq
 800cae0:	694b      	ldreq	r3, [r1, #20]
 800cae2:	600f      	str	r7, [r1, #0]
 800cae4:	bf18      	it	ne
 800cae6:	2300      	movne	r3, #0
 800cae8:	eba6 0807 	sub.w	r8, r6, r7
 800caec:	608b      	str	r3, [r1, #8]
 800caee:	f1b8 0f00 	cmp.w	r8, #0
 800caf2:	dd9c      	ble.n	800ca2e <__sflush_r+0x1a>
 800caf4:	6a21      	ldr	r1, [r4, #32]
 800caf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800caf8:	4643      	mov	r3, r8
 800cafa:	463a      	mov	r2, r7
 800cafc:	4628      	mov	r0, r5
 800cafe:	47b0      	blx	r6
 800cb00:	2800      	cmp	r0, #0
 800cb02:	dc06      	bgt.n	800cb12 <__sflush_r+0xfe>
 800cb04:	89a3      	ldrh	r3, [r4, #12]
 800cb06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb0a:	81a3      	strh	r3, [r4, #12]
 800cb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb10:	e78e      	b.n	800ca30 <__sflush_r+0x1c>
 800cb12:	4407      	add	r7, r0
 800cb14:	eba8 0800 	sub.w	r8, r8, r0
 800cb18:	e7e9      	b.n	800caee <__sflush_r+0xda>
 800cb1a:	bf00      	nop
 800cb1c:	dfbffffe 	.word	0xdfbffffe

0800cb20 <_fflush_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	690b      	ldr	r3, [r1, #16]
 800cb24:	4605      	mov	r5, r0
 800cb26:	460c      	mov	r4, r1
 800cb28:	b913      	cbnz	r3, 800cb30 <_fflush_r+0x10>
 800cb2a:	2500      	movs	r5, #0
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}
 800cb30:	b118      	cbz	r0, 800cb3a <_fflush_r+0x1a>
 800cb32:	6a03      	ldr	r3, [r0, #32]
 800cb34:	b90b      	cbnz	r3, 800cb3a <_fflush_r+0x1a>
 800cb36:	f7ff f8f9 	bl	800bd2c <__sinit>
 800cb3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0f3      	beq.n	800cb2a <_fflush_r+0xa>
 800cb42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb44:	07d0      	lsls	r0, r2, #31
 800cb46:	d404      	bmi.n	800cb52 <_fflush_r+0x32>
 800cb48:	0599      	lsls	r1, r3, #22
 800cb4a:	d402      	bmi.n	800cb52 <_fflush_r+0x32>
 800cb4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb4e:	f7ff fa2c 	bl	800bfaa <__retarget_lock_acquire_recursive>
 800cb52:	4628      	mov	r0, r5
 800cb54:	4621      	mov	r1, r4
 800cb56:	f7ff ff5d 	bl	800ca14 <__sflush_r>
 800cb5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb5c:	07da      	lsls	r2, r3, #31
 800cb5e:	4605      	mov	r5, r0
 800cb60:	d4e4      	bmi.n	800cb2c <_fflush_r+0xc>
 800cb62:	89a3      	ldrh	r3, [r4, #12]
 800cb64:	059b      	lsls	r3, r3, #22
 800cb66:	d4e1      	bmi.n	800cb2c <_fflush_r+0xc>
 800cb68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb6a:	f7ff fa1f 	bl	800bfac <__retarget_lock_release_recursive>
 800cb6e:	e7dd      	b.n	800cb2c <_fflush_r+0xc>

0800cb70 <_putc_r>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	460d      	mov	r5, r1
 800cb74:	4614      	mov	r4, r2
 800cb76:	4606      	mov	r6, r0
 800cb78:	b118      	cbz	r0, 800cb82 <_putc_r+0x12>
 800cb7a:	6a03      	ldr	r3, [r0, #32]
 800cb7c:	b90b      	cbnz	r3, 800cb82 <_putc_r+0x12>
 800cb7e:	f7ff f8d5 	bl	800bd2c <__sinit>
 800cb82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb84:	07d8      	lsls	r0, r3, #31
 800cb86:	d405      	bmi.n	800cb94 <_putc_r+0x24>
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	0599      	lsls	r1, r3, #22
 800cb8c:	d402      	bmi.n	800cb94 <_putc_r+0x24>
 800cb8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb90:	f7ff fa0b 	bl	800bfaa <__retarget_lock_acquire_recursive>
 800cb94:	68a3      	ldr	r3, [r4, #8]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	60a3      	str	r3, [r4, #8]
 800cb9c:	da05      	bge.n	800cbaa <_putc_r+0x3a>
 800cb9e:	69a2      	ldr	r2, [r4, #24]
 800cba0:	4293      	cmp	r3, r2
 800cba2:	db12      	blt.n	800cbca <_putc_r+0x5a>
 800cba4:	b2eb      	uxtb	r3, r5
 800cba6:	2b0a      	cmp	r3, #10
 800cba8:	d00f      	beq.n	800cbca <_putc_r+0x5a>
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	1c5a      	adds	r2, r3, #1
 800cbae:	6022      	str	r2, [r4, #0]
 800cbb0:	701d      	strb	r5, [r3, #0]
 800cbb2:	b2ed      	uxtb	r5, r5
 800cbb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbb6:	07da      	lsls	r2, r3, #31
 800cbb8:	d405      	bmi.n	800cbc6 <_putc_r+0x56>
 800cbba:	89a3      	ldrh	r3, [r4, #12]
 800cbbc:	059b      	lsls	r3, r3, #22
 800cbbe:	d402      	bmi.n	800cbc6 <_putc_r+0x56>
 800cbc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbc2:	f7ff f9f3 	bl	800bfac <__retarget_lock_release_recursive>
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	bd70      	pop	{r4, r5, r6, pc}
 800cbca:	4629      	mov	r1, r5
 800cbcc:	4622      	mov	r2, r4
 800cbce:	4630      	mov	r0, r6
 800cbd0:	f000 f802 	bl	800cbd8 <__swbuf_r>
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	e7ed      	b.n	800cbb4 <_putc_r+0x44>

0800cbd8 <__swbuf_r>:
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbda:	460e      	mov	r6, r1
 800cbdc:	4614      	mov	r4, r2
 800cbde:	4605      	mov	r5, r0
 800cbe0:	b118      	cbz	r0, 800cbea <__swbuf_r+0x12>
 800cbe2:	6a03      	ldr	r3, [r0, #32]
 800cbe4:	b90b      	cbnz	r3, 800cbea <__swbuf_r+0x12>
 800cbe6:	f7ff f8a1 	bl	800bd2c <__sinit>
 800cbea:	69a3      	ldr	r3, [r4, #24]
 800cbec:	60a3      	str	r3, [r4, #8]
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	071a      	lsls	r2, r3, #28
 800cbf2:	d525      	bpl.n	800cc40 <__swbuf_r+0x68>
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	b31b      	cbz	r3, 800cc40 <__swbuf_r+0x68>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	6922      	ldr	r2, [r4, #16]
 800cbfc:	1a98      	subs	r0, r3, r2
 800cbfe:	6963      	ldr	r3, [r4, #20]
 800cc00:	b2f6      	uxtb	r6, r6
 800cc02:	4283      	cmp	r3, r0
 800cc04:	4637      	mov	r7, r6
 800cc06:	dc04      	bgt.n	800cc12 <__swbuf_r+0x3a>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f7ff ff88 	bl	800cb20 <_fflush_r>
 800cc10:	b9e0      	cbnz	r0, 800cc4c <__swbuf_r+0x74>
 800cc12:	68a3      	ldr	r3, [r4, #8]
 800cc14:	3b01      	subs	r3, #1
 800cc16:	60a3      	str	r3, [r4, #8]
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	6022      	str	r2, [r4, #0]
 800cc1e:	701e      	strb	r6, [r3, #0]
 800cc20:	6962      	ldr	r2, [r4, #20]
 800cc22:	1c43      	adds	r3, r0, #1
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d004      	beq.n	800cc32 <__swbuf_r+0x5a>
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	07db      	lsls	r3, r3, #31
 800cc2c:	d506      	bpl.n	800cc3c <__swbuf_r+0x64>
 800cc2e:	2e0a      	cmp	r6, #10
 800cc30:	d104      	bne.n	800cc3c <__swbuf_r+0x64>
 800cc32:	4621      	mov	r1, r4
 800cc34:	4628      	mov	r0, r5
 800cc36:	f7ff ff73 	bl	800cb20 <_fflush_r>
 800cc3a:	b938      	cbnz	r0, 800cc4c <__swbuf_r+0x74>
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc40:	4621      	mov	r1, r4
 800cc42:	4628      	mov	r0, r5
 800cc44:	f000 f806 	bl	800cc54 <__swsetup_r>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d0d5      	beq.n	800cbf8 <__swbuf_r+0x20>
 800cc4c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc50:	e7f4      	b.n	800cc3c <__swbuf_r+0x64>
	...

0800cc54 <__swsetup_r>:
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	4b2a      	ldr	r3, [pc, #168]	; (800cd00 <__swsetup_r+0xac>)
 800cc58:	4605      	mov	r5, r0
 800cc5a:	6818      	ldr	r0, [r3, #0]
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	b118      	cbz	r0, 800cc68 <__swsetup_r+0x14>
 800cc60:	6a03      	ldr	r3, [r0, #32]
 800cc62:	b90b      	cbnz	r3, 800cc68 <__swsetup_r+0x14>
 800cc64:	f7ff f862 	bl	800bd2c <__sinit>
 800cc68:	89a3      	ldrh	r3, [r4, #12]
 800cc6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc6e:	0718      	lsls	r0, r3, #28
 800cc70:	d422      	bmi.n	800ccb8 <__swsetup_r+0x64>
 800cc72:	06d9      	lsls	r1, r3, #27
 800cc74:	d407      	bmi.n	800cc86 <__swsetup_r+0x32>
 800cc76:	2309      	movs	r3, #9
 800cc78:	602b      	str	r3, [r5, #0]
 800cc7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	f04f 30ff 	mov.w	r0, #4294967295
 800cc84:	e034      	b.n	800ccf0 <__swsetup_r+0x9c>
 800cc86:	0758      	lsls	r0, r3, #29
 800cc88:	d512      	bpl.n	800ccb0 <__swsetup_r+0x5c>
 800cc8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc8c:	b141      	cbz	r1, 800cca0 <__swsetup_r+0x4c>
 800cc8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc92:	4299      	cmp	r1, r3
 800cc94:	d002      	beq.n	800cc9c <__swsetup_r+0x48>
 800cc96:	4628      	mov	r0, r5
 800cc98:	f7ff f998 	bl	800bfcc <_free_r>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	6363      	str	r3, [r4, #52]	; 0x34
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cca6:	81a3      	strh	r3, [r4, #12]
 800cca8:	2300      	movs	r3, #0
 800ccaa:	6063      	str	r3, [r4, #4]
 800ccac:	6923      	ldr	r3, [r4, #16]
 800ccae:	6023      	str	r3, [r4, #0]
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	f043 0308 	orr.w	r3, r3, #8
 800ccb6:	81a3      	strh	r3, [r4, #12]
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	b94b      	cbnz	r3, 800ccd0 <__swsetup_r+0x7c>
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccc6:	d003      	beq.n	800ccd0 <__swsetup_r+0x7c>
 800ccc8:	4621      	mov	r1, r4
 800ccca:	4628      	mov	r0, r5
 800cccc:	f000 f899 	bl	800ce02 <__smakebuf_r>
 800ccd0:	89a0      	ldrh	r0, [r4, #12]
 800ccd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccd6:	f010 0301 	ands.w	r3, r0, #1
 800ccda:	d00a      	beq.n	800ccf2 <__swsetup_r+0x9e>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60a3      	str	r3, [r4, #8]
 800cce0:	6963      	ldr	r3, [r4, #20]
 800cce2:	425b      	negs	r3, r3
 800cce4:	61a3      	str	r3, [r4, #24]
 800cce6:	6923      	ldr	r3, [r4, #16]
 800cce8:	b943      	cbnz	r3, 800ccfc <__swsetup_r+0xa8>
 800ccea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccee:	d1c4      	bne.n	800cc7a <__swsetup_r+0x26>
 800ccf0:	bd38      	pop	{r3, r4, r5, pc}
 800ccf2:	0781      	lsls	r1, r0, #30
 800ccf4:	bf58      	it	pl
 800ccf6:	6963      	ldrpl	r3, [r4, #20]
 800ccf8:	60a3      	str	r3, [r4, #8]
 800ccfa:	e7f4      	b.n	800cce6 <__swsetup_r+0x92>
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	e7f7      	b.n	800ccf0 <__swsetup_r+0x9c>
 800cd00:	2000018c 	.word	0x2000018c

0800cd04 <memmove>:
 800cd04:	4288      	cmp	r0, r1
 800cd06:	b510      	push	{r4, lr}
 800cd08:	eb01 0402 	add.w	r4, r1, r2
 800cd0c:	d902      	bls.n	800cd14 <memmove+0x10>
 800cd0e:	4284      	cmp	r4, r0
 800cd10:	4623      	mov	r3, r4
 800cd12:	d807      	bhi.n	800cd24 <memmove+0x20>
 800cd14:	1e43      	subs	r3, r0, #1
 800cd16:	42a1      	cmp	r1, r4
 800cd18:	d008      	beq.n	800cd2c <memmove+0x28>
 800cd1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd22:	e7f8      	b.n	800cd16 <memmove+0x12>
 800cd24:	4402      	add	r2, r0
 800cd26:	4601      	mov	r1, r0
 800cd28:	428a      	cmp	r2, r1
 800cd2a:	d100      	bne.n	800cd2e <memmove+0x2a>
 800cd2c:	bd10      	pop	{r4, pc}
 800cd2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd36:	e7f7      	b.n	800cd28 <memmove+0x24>

0800cd38 <_sbrk_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d06      	ldr	r5, [pc, #24]	; (800cd54 <_sbrk_r+0x1c>)
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4604      	mov	r4, r0
 800cd40:	4608      	mov	r0, r1
 800cd42:	602b      	str	r3, [r5, #0]
 800cd44:	f7f5 fcbc 	bl	80026c0 <_sbrk>
 800cd48:	1c43      	adds	r3, r0, #1
 800cd4a:	d102      	bne.n	800cd52 <_sbrk_r+0x1a>
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	b103      	cbz	r3, 800cd52 <_sbrk_r+0x1a>
 800cd50:	6023      	str	r3, [r4, #0]
 800cd52:	bd38      	pop	{r3, r4, r5, pc}
 800cd54:	20005370 	.word	0x20005370

0800cd58 <_realloc_r>:
 800cd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	4614      	mov	r4, r2
 800cd60:	460e      	mov	r6, r1
 800cd62:	b921      	cbnz	r1, 800cd6e <_realloc_r+0x16>
 800cd64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd68:	4611      	mov	r1, r2
 800cd6a:	f7ff b99b 	b.w	800c0a4 <_malloc_r>
 800cd6e:	b92a      	cbnz	r2, 800cd7c <_realloc_r+0x24>
 800cd70:	f7ff f92c 	bl	800bfcc <_free_r>
 800cd74:	4625      	mov	r5, r4
 800cd76:	4628      	mov	r0, r5
 800cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7c:	f000 f8a0 	bl	800cec0 <_malloc_usable_size_r>
 800cd80:	4284      	cmp	r4, r0
 800cd82:	4607      	mov	r7, r0
 800cd84:	d802      	bhi.n	800cd8c <_realloc_r+0x34>
 800cd86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd8a:	d812      	bhi.n	800cdb2 <_realloc_r+0x5a>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4640      	mov	r0, r8
 800cd90:	f7ff f988 	bl	800c0a4 <_malloc_r>
 800cd94:	4605      	mov	r5, r0
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d0ed      	beq.n	800cd76 <_realloc_r+0x1e>
 800cd9a:	42bc      	cmp	r4, r7
 800cd9c:	4622      	mov	r2, r4
 800cd9e:	4631      	mov	r1, r6
 800cda0:	bf28      	it	cs
 800cda2:	463a      	movcs	r2, r7
 800cda4:	f7ff f903 	bl	800bfae <memcpy>
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4640      	mov	r0, r8
 800cdac:	f7ff f90e 	bl	800bfcc <_free_r>
 800cdb0:	e7e1      	b.n	800cd76 <_realloc_r+0x1e>
 800cdb2:	4635      	mov	r5, r6
 800cdb4:	e7df      	b.n	800cd76 <_realloc_r+0x1e>

0800cdb6 <__swhatbuf_r>:
 800cdb6:	b570      	push	{r4, r5, r6, lr}
 800cdb8:	460c      	mov	r4, r1
 800cdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbe:	2900      	cmp	r1, #0
 800cdc0:	b096      	sub	sp, #88	; 0x58
 800cdc2:	4615      	mov	r5, r2
 800cdc4:	461e      	mov	r6, r3
 800cdc6:	da0d      	bge.n	800cde4 <__swhatbuf_r+0x2e>
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdce:	f04f 0100 	mov.w	r1, #0
 800cdd2:	bf0c      	ite	eq
 800cdd4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdd8:	2340      	movne	r3, #64	; 0x40
 800cdda:	2000      	movs	r0, #0
 800cddc:	6031      	str	r1, [r6, #0]
 800cdde:	602b      	str	r3, [r5, #0]
 800cde0:	b016      	add	sp, #88	; 0x58
 800cde2:	bd70      	pop	{r4, r5, r6, pc}
 800cde4:	466a      	mov	r2, sp
 800cde6:	f000 f849 	bl	800ce7c <_fstat_r>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	dbec      	blt.n	800cdc8 <__swhatbuf_r+0x12>
 800cdee:	9901      	ldr	r1, [sp, #4]
 800cdf0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdf4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cdf8:	4259      	negs	r1, r3
 800cdfa:	4159      	adcs	r1, r3
 800cdfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce00:	e7eb      	b.n	800cdda <__swhatbuf_r+0x24>

0800ce02 <__smakebuf_r>:
 800ce02:	898b      	ldrh	r3, [r1, #12]
 800ce04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce06:	079d      	lsls	r5, r3, #30
 800ce08:	4606      	mov	r6, r0
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	d507      	bpl.n	800ce1e <__smakebuf_r+0x1c>
 800ce0e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	6123      	str	r3, [r4, #16]
 800ce16:	2301      	movs	r3, #1
 800ce18:	6163      	str	r3, [r4, #20]
 800ce1a:	b002      	add	sp, #8
 800ce1c:	bd70      	pop	{r4, r5, r6, pc}
 800ce1e:	ab01      	add	r3, sp, #4
 800ce20:	466a      	mov	r2, sp
 800ce22:	f7ff ffc8 	bl	800cdb6 <__swhatbuf_r>
 800ce26:	9900      	ldr	r1, [sp, #0]
 800ce28:	4605      	mov	r5, r0
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f7ff f93a 	bl	800c0a4 <_malloc_r>
 800ce30:	b948      	cbnz	r0, 800ce46 <__smakebuf_r+0x44>
 800ce32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce36:	059a      	lsls	r2, r3, #22
 800ce38:	d4ef      	bmi.n	800ce1a <__smakebuf_r+0x18>
 800ce3a:	f023 0303 	bic.w	r3, r3, #3
 800ce3e:	f043 0302 	orr.w	r3, r3, #2
 800ce42:	81a3      	strh	r3, [r4, #12]
 800ce44:	e7e3      	b.n	800ce0e <__smakebuf_r+0xc>
 800ce46:	89a3      	ldrh	r3, [r4, #12]
 800ce48:	6020      	str	r0, [r4, #0]
 800ce4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	9b00      	ldr	r3, [sp, #0]
 800ce52:	6163      	str	r3, [r4, #20]
 800ce54:	9b01      	ldr	r3, [sp, #4]
 800ce56:	6120      	str	r0, [r4, #16]
 800ce58:	b15b      	cbz	r3, 800ce72 <__smakebuf_r+0x70>
 800ce5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce5e:	4630      	mov	r0, r6
 800ce60:	f000 f81e 	bl	800cea0 <_isatty_r>
 800ce64:	b128      	cbz	r0, 800ce72 <__smakebuf_r+0x70>
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	f023 0303 	bic.w	r3, r3, #3
 800ce6c:	f043 0301 	orr.w	r3, r3, #1
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	431d      	orrs	r5, r3
 800ce76:	81a5      	strh	r5, [r4, #12]
 800ce78:	e7cf      	b.n	800ce1a <__smakebuf_r+0x18>
	...

0800ce7c <_fstat_r>:
 800ce7c:	b538      	push	{r3, r4, r5, lr}
 800ce7e:	4d07      	ldr	r5, [pc, #28]	; (800ce9c <_fstat_r+0x20>)
 800ce80:	2300      	movs	r3, #0
 800ce82:	4604      	mov	r4, r0
 800ce84:	4608      	mov	r0, r1
 800ce86:	4611      	mov	r1, r2
 800ce88:	602b      	str	r3, [r5, #0]
 800ce8a:	f7f5 fbf0 	bl	800266e <_fstat>
 800ce8e:	1c43      	adds	r3, r0, #1
 800ce90:	d102      	bne.n	800ce98 <_fstat_r+0x1c>
 800ce92:	682b      	ldr	r3, [r5, #0]
 800ce94:	b103      	cbz	r3, 800ce98 <_fstat_r+0x1c>
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	bd38      	pop	{r3, r4, r5, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20005370 	.word	0x20005370

0800cea0 <_isatty_r>:
 800cea0:	b538      	push	{r3, r4, r5, lr}
 800cea2:	4d06      	ldr	r5, [pc, #24]	; (800cebc <_isatty_r+0x1c>)
 800cea4:	2300      	movs	r3, #0
 800cea6:	4604      	mov	r4, r0
 800cea8:	4608      	mov	r0, r1
 800ceaa:	602b      	str	r3, [r5, #0]
 800ceac:	f7f5 fbef 	bl	800268e <_isatty>
 800ceb0:	1c43      	adds	r3, r0, #1
 800ceb2:	d102      	bne.n	800ceba <_isatty_r+0x1a>
 800ceb4:	682b      	ldr	r3, [r5, #0]
 800ceb6:	b103      	cbz	r3, 800ceba <_isatty_r+0x1a>
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	bd38      	pop	{r3, r4, r5, pc}
 800cebc:	20005370 	.word	0x20005370

0800cec0 <_malloc_usable_size_r>:
 800cec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec4:	1f18      	subs	r0, r3, #4
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	bfbc      	itt	lt
 800ceca:	580b      	ldrlt	r3, [r1, r0]
 800cecc:	18c0      	addlt	r0, r0, r3
 800cece:	4770      	bx	lr

0800ced0 <_init>:
 800ced0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ced2:	bf00      	nop
 800ced4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ced6:	bc08      	pop	{r3}
 800ced8:	469e      	mov	lr, r3
 800ceda:	4770      	bx	lr

0800cedc <_fini>:
 800cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cede:	bf00      	nop
 800cee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cee2:	bc08      	pop	{r3}
 800cee4:	469e      	mov	lr, r3
 800cee6:	4770      	bx	lr
