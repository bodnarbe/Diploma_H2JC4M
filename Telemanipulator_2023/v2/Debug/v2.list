
v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800cf08  0800cf08  0001cf08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0a0  0800d0a0  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0a0  0800d0a0  0001d0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0a8  0800d0a8  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0ac  0800d0ac  0001d0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d0b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051f0  20000190  0800d240  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20005380  0800d240  00025380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b7aa  00000000  00000000  00020203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004848  00000000  00000000  0003b9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  000401f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000134c  00000000  00000000  00041b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bfd9  00000000  00000000  00042e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db0f  00000000  00000000  0005ee6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b971  00000000  00000000  0007c97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000074a0  00000000  00000000  001182f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000190 	.word	0x20000190
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cef0 	.word	0x0800cef0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000194 	.word	0x20000194
 80001dc:	0800cef0 	.word	0x0800cef0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b970 	b.w	8000e74 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	460d      	mov	r5, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460f      	mov	r7, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14a      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4694      	mov	ip, r2
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0xe2>
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	b143      	cbz	r3, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bcc:	f1c3 0220 	rsb	r2, r3, #32
 8000bd0:	409f      	lsls	r7, r3
 8000bd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bde:	fa1f f58c 	uxth.w	r5, ip
 8000be2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be6:	0c22      	lsrs	r2, r4, #16
 8000be8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf0:	fb01 f005 	mul.w	r0, r1, r5
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x62>
 8000bf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c00:	f080 811c 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c04:	4290      	cmp	r0, r2
 8000c06:	f240 8119 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	b2a4      	uxth	r4, r4
 8000c12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x90>
 8000c26:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2e:	f080 8107 	bcs.w	8000e40 <__udivmoddi4+0x294>
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	f240 8104 	bls.w	8000e40 <__udivmoddi4+0x294>
 8000c38:	4464      	add	r4, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c40:	1b64      	subs	r4, r4, r5
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11e      	cbz	r6, 8000c4e <__udivmoddi4+0xa2>
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0xbc>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80ed 	beq.w	8000e36 <__udivmoddi4+0x28a>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c62:	4608      	mov	r0, r1
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	fab3 f183 	clz	r1, r3
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	d149      	bne.n	8000d04 <__udivmoddi4+0x158>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d302      	bcc.n	8000c7a <__udivmoddi4+0xce>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	f200 80f8 	bhi.w	8000e6a <__udivmoddi4+0x2be>
 8000c7a:	1a84      	subs	r4, r0, r2
 8000c7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	4617      	mov	r7, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d0e2      	beq.n	8000c4e <__udivmoddi4+0xa2>
 8000c88:	e9c6 4700 	strd	r4, r7, [r6]
 8000c8c:	e7df      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xe6>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cac:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb0:	0c22      	lsrs	r2, r4, #16
 8000cb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb6:	fb0e f005 	mul.w	r0, lr, r5
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2b8>
 8000cce:	4645      	mov	r5, r8
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x14e>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x14c>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2c2>
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d02:	e79f      	b.n	8000c44 <__udivmoddi4+0x98>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa05 f401 	lsl.w	r4, r5, r1
 8000d16:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1a:	40fd      	lsrs	r5, r7
 8000d1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d34:	fb08 f50e 	mul.w	r5, r8, lr
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2b4>
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2b4>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	b29d      	uxth	r5, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2ac>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2ac>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x29c>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x298>
 8000d9c:	b156      	cbz	r6, 8000db4 <__udivmoddi4+0x208>
 8000d9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000da2:	eb64 040e 	sbc.w	r4, r4, lr
 8000da6:	fa04 f707 	lsl.w	r7, r4, r7
 8000daa:	40ca      	lsrs	r2, r1
 8000dac:	40cc      	lsrs	r4, r1
 8000dae:	4317      	orrs	r7, r2
 8000db0:	e9c6 7400 	strd	r7, r4, [r6]
 8000db4:	4618      	mov	r0, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	f1c3 0120 	rsb	r1, r3, #32
 8000dc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dcc:	409d      	lsls	r5, r3
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1510 	mls	r5, r7, r0, r1
 8000de0:	0c11      	lsrs	r1, r2, #16
 8000de2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dea:	428d      	cmp	r5, r1
 8000dec:	fa04 f403 	lsl.w	r4, r4, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x258>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000dfc:	428d      	cmp	r5, r1
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1b49      	subs	r1, r1, r5
 8000e06:	b292      	uxth	r2, r2
 8000e08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	fb05 f10e 	mul.w	r1, r5, lr
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x282>
 8000e1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000e26:	4291      	cmp	r1, r2
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000e2a:	3d02      	subs	r5, #2
 8000e2c:	4462      	add	r2, ip
 8000e2e:	1a52      	subs	r2, r2, r1
 8000e30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0xfc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e6e6      	b.n	8000c0e <__udivmoddi4+0x62>
 8000e40:	4610      	mov	r0, r2
 8000e42:	e6fb      	b.n	8000c3c <__udivmoddi4+0x90>
 8000e44:	4548      	cmp	r0, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3b01      	subs	r3, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e54:	4645      	mov	r5, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x282>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x258>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e70a      	b.n	8000c84 <__udivmoddi4+0xd8>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x14e>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <_getFirstByte>:

/**
 * Gets the first byte of a 2 byte word
 */
uint8_t _getFirstByte(uint16_t twoByteWord)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)(twoByteWord >> 8U);
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b2db      	uxtb	r3, r3
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_getSecondByte>:

/**
 * Gets the second byte of the 2 byte word
 */
uint8_t _getSecondByte(uint16_t twoByteWord)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	80fb      	strh	r3, [r7, #6]
    return (uint8_t)twoByteWord;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	b2db      	uxtb	r3, r3
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_crc8>:

/**
 * Function for calculation the CRC.
 */
uint8_t _crc8(uint8_t *data, uint8_t length)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
    uint32_t crc;
    int16_t i, bit;

    crc = CRC_SEED;
 8000ebc:	23ff      	movs	r3, #255	; 0xff
 8000ebe:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < length; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	817b      	strh	r3, [r7, #10]
 8000ec4:	e02b      	b.n	8000f1e <_crc8+0x6e>
    {
        crc ^= data[i];
 8000ec6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4053      	eors	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]

        for (bit = 0; bit < 8; bit++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	813b      	strh	r3, [r7, #8]
 8000edc:	e015      	b.n	8000f0a <_crc8+0x5a>
        {
            if ((crc & 0x80) != 0)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d007      	beq.n	8000ef8 <_crc8+0x48>
            {
                crc <<= 1;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
                crc ^= CRC_POLYNOMIAL;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f083 031d 	eor.w	r3, r3, #29
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	e002      	b.n	8000efe <_crc8+0x4e>
            }
            else
            {
                crc <<= 1;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
        for (bit = 0; bit < 8; bit++)
 8000efe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	3301      	adds	r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	813b      	strh	r3, [r7, #8]
 8000f0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f0e:	2b07      	cmp	r3, #7
 8000f10:	dde5      	ble.n	8000ede <_crc8+0x2e>
    for (i = 0; i < length; i++)
 8000f12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	3301      	adds	r3, #1
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	817b      	strh	r3, [r7, #10]
 8000f1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbce      	blt.n	8000ec6 <_crc8+0x16>
            }
        }
    }

    //    return (~crc) & CRC_SEED;
    return (~crc);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_crcCalc>:

/**
 * Function for calculation of the CRC
 */
uint8_t _crcCalc(uint8_t *crcData, uint8_t length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
    return _crc8(crcData, length);
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffaf 	bl	8000eb0 <_crc8>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <triggerUpdate>:

/**
 * Triggers an update
 */
void triggerUpdate(uint8_t csSelector)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    // SCK LOW
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <triggerUpdate+0x40>)
 8000f6e:	f001 fef5 	bl	8002d5c <HAL_GPIO_WritePin>
    // MOSI HIGH
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2108      	movs	r1, #8
 8000f76:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <triggerUpdate+0x44>)
 8000f78:	f001 fef0 	bl	8002d5c <HAL_GPIO_WritePin>
    SPI_CS_Enable(csSelector);
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f9e8 	bl	8001354 <SPI_CS_Enable>
    HAL_Delay(DELAYuS);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f001 fc5f 	bl	8002848 <HAL_Delay>
    SPI_CS_Disable(csSelector);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fa35 	bl	80013fc <SPI_CS_Disable>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <resetSafety>:

//when an error occurs in the safety word, the error bit remains 0(error), until the status register is read again.
//flushes out safety errors, that might have occured by reading the register without a safety word.
void resetSafety(uint8_t csSelector)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
    uint16_t u16RegValue = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	81fb      	strh	r3, [r7, #14]

    triggerUpdate(csSelector);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ffd1 	bl	8000f5c <triggerUpdate>

    SPI_CS_Enable(csSelector);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f9c9 	bl	8001354 <SPI_CS_Enable>

    u16RegValue = READ_STA_CMD;
 8000fc2:	f248 0301 	movw	r3, #32769	; 0x8001
 8000fc6:	81fb      	strh	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fc8:	f107 010e 	add.w	r1, r7, #14
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	2201      	movs	r2, #1
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <resetSafety+0x64>)
 8000fd2:	f003 feb2 	bl	8004d3a <HAL_SPI_Transmit>
    u16RegValue = DUMMY;
 8000fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fda:	81fb      	strh	r3, [r7, #14]
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fdc:	f107 010e 	add.w	r1, r7, #14
 8000fe0:	23ff      	movs	r3, #255	; 0xff
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <resetSafety+0x64>)
 8000fe6:	f003 fea8 	bl	8004d3a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8000fea:	f107 010e 	add.w	r1, r7, #14
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <resetSafety+0x64>)
 8000ff4:	f003 fea1 	bl	8004d3a <HAL_SPI_Transmit>

    SPI_CS_Disable(csSelector);
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f9fe 	bl	80013fc <SPI_CS_Disable>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000410 	.word	0x20000410

0800100c <checkSafety>:
 * A CRC needs to be calculated using all the data sent and received (i.e. the command and the value return from the register, which is 4 bytes),
 * and needs to be checked with the CRC sent in the safety word.
 */

errorTypes checkSafety(uint16_t safety, uint16_t command, uint16_t *readreg, uint16_t length, uint8_t csSelector)
{
 800100c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001010:	b08b      	sub	sp, #44	; 0x2c
 8001012:	af00      	add	r7, sp, #0
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	461a      	mov	r2, r3
 8001018:	4603      	mov	r3, r0
 800101a:	81fb      	strh	r3, [r7, #14]
 800101c:	460b      	mov	r3, r1
 800101e:	81bb      	strh	r3, [r7, #12]
 8001020:	4613      	mov	r3, r2
 8001022:	80fb      	strh	r3, [r7, #6]
    if (0)//!((safety)&SYSTEM_ERROR_MASK))
    {
        errorCheck = SYSTEM_ERROR;
    }

    else if (!((safety)&INTERFACE_ERROR_MASK))
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <checkSafety+0x2a>
    {
        errorCheck = INTERFACE_ACCESS_ERROR;
 800102e:	2302      	movs	r3, #2
 8001030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001034:	e08e      	b.n	8001154 <checkSafety+0x148>
    }

    else if (!((safety)&INV_ANGLE_ERROR_MASK))
 8001036:	89fb      	ldrh	r3, [r7, #14]
 8001038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d103      	bne.n	8001048 <checkSafety+0x3c>
    {
        errorCheck = INVALID_ANGLE_ERROR;
 8001040:	2303      	movs	r3, #3
 8001042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001046:	e085      	b.n	8001154 <checkSafety+0x148>
    }

    else
    {
 8001048:	466b      	mov	r3, sp
 800104a:	461e      	mov	r6, r3
        uint16_t lengthOfTemp = length * 2 + 2;
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	3301      	adds	r3, #1
 8001050:	b29b      	uxth	r3, r3
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	847b      	strh	r3, [r7, #34]	; 0x22
        uint8_t temp[lengthOfTemp];
 8001056:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001058:	460b      	mov	r3, r1
 800105a:	3b01      	subs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	b28b      	uxth	r3, r1
 8001060:	2200      	movs	r2, #0
 8001062:	4698      	mov	r8, r3
 8001064:	4691      	mov	r9, r2
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800107a:	b28b      	uxth	r3, r1
 800107c:	2200      	movs	r2, #0
 800107e:	461c      	mov	r4, r3
 8001080:	4615      	mov	r5, r2
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	00eb      	lsls	r3, r5, #3
 800108c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001090:	00e2      	lsls	r2, r4, #3
 8001092:	460b      	mov	r3, r1
 8001094:	3307      	adds	r3, #7
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	ebad 0d03 	sub.w	sp, sp, r3
 800109e:	466b      	mov	r3, sp
 80010a0:	3300      	adds	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]

        temp[0] = _getFirstByte(command);
 80010a4:	89bb      	ldrh	r3, [r7, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fee6 	bl	8000e78 <_getFirstByte>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	701a      	strb	r2, [r3, #0]
        temp[1] = _getSecondByte(command);
 80010b4:	89bb      	ldrh	r3, [r7, #12]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff feed 	bl	8000e96 <_getSecondByte>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	705a      	strb	r2, [r3, #1]

        for (uint16_t i = 0; i < length; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010c8:	e021      	b.n	800110e <checkSafety+0x102>
        {
            temp[2 + 2 * i] = _getFirstByte(readreg[i]);
 80010ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d6:	3301      	adds	r3, #1
 80010d8:	005c      	lsls	r4, r3, #1
 80010da:	4610      	mov	r0, r2
 80010dc:	f7ff fecc 	bl	8000e78 <_getFirstByte>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	551a      	strb	r2, [r3, r4]
            temp[2 + 2 * i + 1] = _getSecondByte(readreg[i]);
 80010e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	4413      	add	r3, r2
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f4:	3301      	adds	r3, #1
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1c5c      	adds	r4, r3, #1
 80010fa:	4610      	mov	r0, r2
 80010fc:	f7ff fecb 	bl	8000e96 <_getSecondByte>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	551a      	strb	r2, [r3, r4]
        for (uint16_t i = 0; i < length; i++)
 8001108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800110a:	3301      	adds	r3, #1
 800110c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800110e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3d9      	bcc.n	80010ca <checkSafety+0xbe>
        }

        uint8_t crcReceivedFinal = _getSecondByte(safety);
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff febc 	bl	8000e96 <_getSecondByte>
 800111e:	4603      	mov	r3, r0
 8001120:	75fb      	strb	r3, [r7, #23]

        uint8_t crc = _crcCalc(temp, lengthOfTemp);
 8001122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001124:	b2db      	uxtb	r3, r3
 8001126:	4619      	mov	r1, r3
 8001128:	69b8      	ldr	r0, [r7, #24]
 800112a:	f7ff ff07 	bl	8000f3c <_crcCalc>
 800112e:	4603      	mov	r3, r0
 8001130:	75bb      	strb	r3, [r7, #22]

        if (crc == crcReceivedFinal)
 8001132:	7dba      	ldrb	r2, [r7, #22]
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	429a      	cmp	r2, r3
 8001138:	d103      	bne.n	8001142 <checkSafety+0x136>
        {
            errorCheck = NO_ERROR;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001140:	e007      	b.n	8001152 <checkSafety+0x146>
        }
        else
        {
            errorCheck = CRC_ERROR;
 8001142:	23ff      	movs	r3, #255	; 0xff
 8001144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            resetSafety(csSelector);
 8001148:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff29 	bl	8000fa4 <resetSafety>
 8001152:	46b5      	mov	sp, r6
        }
    }

    return errorCheck;
 8001154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001158:	4618      	mov	r0, r3
 800115a:	372c      	adds	r7, #44	; 0x2c
 800115c:	46bd      	mov	sp, r7
 800115e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001164 <readFromSensor>:
 * 9:4 - access to 6 bit register address
 * 3:0 - 4 bit number of data words.
 */

errorTypes readFromSensor(uint16_t command, uint16_t *data, uint8_t csSelector)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af02      	add	r7, sp, #8
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	4613      	mov	r3, r2
 8001172:	717b      	strb	r3, [r7, #5]
    uint16_t safety = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	82bb      	strh	r3, [r7, #20]
    uint16_t readreg;
    uint16_t u16RegValue = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	823b      	strh	r3, [r7, #16]

    SPI_CS_Enable(csSelector);
 800117c:	797b      	ldrb	r3, [r7, #5]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f8e8 	bl	8001354 <SPI_CS_Enable>

    u16RegValue = command;
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	823b      	strh	r3, [r7, #16]
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFF);
 8001188:	f107 0110 	add.w	r1, r7, #16
 800118c:	23ff      	movs	r3, #255	; 0xff
 800118e:	2201      	movs	r2, #1
 8001190:	481d      	ldr	r0, [pc, #116]	; (8001208 <readFromSensor+0xa4>)
 8001192:	f003 fdd2 	bl	8004d3a <HAL_SPI_Transmit>
#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_HIGH_Z;
#endif

    // workaround for reading issues...
    __HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <readFromSensor+0xa4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <readFromSensor+0xa4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    HAL_SPI_Receive(&hspi2, (uint8_t *)(&readreg), 1, 0xFF);
 80011ac:	f107 0112 	add.w	r1, r7, #18
 80011b0:	23ff      	movs	r3, #255	; 0xff
 80011b2:	2201      	movs	r2, #1
 80011b4:	4814      	ldr	r0, [pc, #80]	; (8001208 <readFromSensor+0xa4>)
 80011b6:	f003 fefc 	bl	8004fb2 <HAL_SPI_Receive>
    HAL_SPI_Receive(&hspi2, (uint8_t *)(&safety), 1, 0xFF);
 80011ba:	f107 0114 	add.w	r1, r7, #20
 80011be:	23ff      	movs	r3, #255	; 0xff
 80011c0:	2201      	movs	r2, #1
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <readFromSensor+0xa4>)
 80011c4:	f003 fef5 	bl	8004fb2 <HAL_SPI_Receive>

#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_LOW_Z;
#endif
    SPI_CS_Disable(csSelector);
 80011c8:	797b      	ldrb	r3, [r7, #5]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f916 	bl	80013fc <SPI_CS_Disable>

    errorTypes checkError = checkSafety(safety, command, &readreg, 1, csSelector);
 80011d0:	8ab8      	ldrh	r0, [r7, #20]
 80011d2:	f107 0212 	add.w	r2, r7, #18
 80011d6:	88f9      	ldrh	r1, [r7, #6]
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	f7ff ff15 	bl	800100c <checkSafety>
 80011e2:	4603      	mov	r3, r0
 80011e4:	75fb      	strb	r3, [r7, #23]

    if (checkError != NO_ERROR)
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <readFromSensor+0x92>
    {
        *data = 0;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	801a      	strh	r2, [r3, #0]
        return checkError;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	e003      	b.n	80011fe <readFromSensor+0x9a>
    }
    else
    {
        *data = readreg;
 80011f6:	8a7a      	ldrh	r2, [r7, #18]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	801a      	strh	r2, [r3, #0]
        return NO_ERROR;
 80011fc:	2300      	movs	r3, #0
    }
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000410 	.word	0x20000410

0800120c <readBlockCRC>:

/**
 * Reads the block of _registers from addresses 08 - 0F in order to figure out the CRC.
 */
errorTypes readBlockCRC(uint8_t csSelector)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af02      	add	r7, sp, #8
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
    uint16_t u16RegValue = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	82bb      	strh	r3, [r7, #20]
    uint16_t safety = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	827b      	strh	r3, [r7, #18]

    SPI_CS_Enable(csSelector);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f897 	bl	8001354 <SPI_CS_Enable>

    u16RegValue = READ_BLOCK_CRC;
 8001226:	f248 0388 	movw	r3, #32904	; 0x8088
 800122a:	82bb      	strh	r3, [r7, #20]
    HAL_SPI_Transmit(&hspi2, (uint8_t *)(&u16RegValue), sizeof(u16RegValue) / sizeof(uint16_t), 0xFFFF);
 800122c:	f107 0114 	add.w	r1, r7, #20
 8001230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001234:	2201      	movs	r2, #1
 8001236:	4817      	ldr	r0, [pc, #92]	; (8001294 <readBlockCRC+0x88>)
 8001238:	f003 fd7f 	bl	8004d3a <HAL_SPI_Transmit>
#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_HIGH_Z;
#endif

    // workaround for reading issues...
    __HAL_SPI_CLEAR_OVRFLAG(&hspi2);
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <readBlockCRC+0x88>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <readBlockCRC+0x88>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

    HAL_SPI_Receive(&hspi2, (uint8_t *)(&_registers), CRC_NUM_REGISTERS, 0xFF);
 8001252:	23ff      	movs	r3, #255	; 0xff
 8001254:	2208      	movs	r2, #8
 8001256:	4910      	ldr	r1, [pc, #64]	; (8001298 <readBlockCRC+0x8c>)
 8001258:	480e      	ldr	r0, [pc, #56]	; (8001294 <readBlockCRC+0x88>)
 800125a:	f003 feaa 	bl	8004fb2 <HAL_SPI_Receive>
    HAL_SPI_Receive(&hspi2, (uint8_t *)(&safety), 1, 0xFF);
 800125e:	f107 0112 	add.w	r1, r7, #18
 8001262:	23ff      	movs	r3, #255	; 0xff
 8001264:	2201      	movs	r2, #1
 8001266:	480b      	ldr	r0, [pc, #44]	; (8001294 <readBlockCRC+0x88>)
 8001268:	f003 fea3 	bl	8004fb2 <HAL_SPI_Receive>

#ifdef USE_SOFT_HIGH_Z
    SPI_MOSI_LOW_Z;
#endif

    SPI_CS_Disable(csSelector);
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f8c4 	bl	80013fc <SPI_CS_Disable>

    errorTypes checkError = checkSafety(safety, READ_BLOCK_CRC, _registers, CRC_NUM_REGISTERS, csSelector);
 8001274:	8a78      	ldrh	r0, [r7, #18]
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2308      	movs	r3, #8
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <readBlockCRC+0x8c>)
 800127e:	f248 0188 	movw	r1, #32904	; 0x8088
 8001282:	f7ff fec3 	bl	800100c <checkSafety>
 8001286:	4603      	mov	r3, r0
 8001288:	75fb      	strb	r3, [r7, #23]


    return checkError;
 800128a:	7dfb      	ldrb	r3, [r7, #23]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000410 	.word	0x20000410
 8001298:	200001ac 	.word	0x200001ac

0800129c <readAngleValue>:

errorTypes readAngleValue(int16_t *data, uint8_t csSelector)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
    uint16_t rawData = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	81bb      	strh	r3, [r7, #12]
    errorTypes status = readFromSensor(READ_ANGLE_VAL_CMD, &rawData, csSelector);
 80012ac:	78fa      	ldrb	r2, [r7, #3]
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	f248 0021 	movw	r0, #32801	; 0x8021
 80012b8:	f7ff ff54 	bl	8001164 <readFromSensor>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]

    if (status != NO_ERROR)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <readAngleValue+0x2e>
    {
        return status;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	e013      	b.n	80012f2 <readAngleValue+0x56>
    }

    rawData = (rawData & (DELETE_BIT_15));
 80012ca:	89bb      	ldrh	r3, [r7, #12]
 80012cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	81bb      	strh	r3, [r7, #12]

    //check if the value received is positive or negative
    if (rawData & CHECK_BIT_14)
 80012d4:	89bb      	ldrh	r3, [r7, #12]
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d004      	beq.n	80012e8 <readAngleValue+0x4c>
    {
        rawData = rawData - CHANGE_UINT_TO_INT_15;
 80012de:	89bb      	ldrh	r3, [r7, #12]
 80012e0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	81bb      	strh	r3, [r7, #12]
    }

    *data = rawData;
 80012e8:	89bb      	ldrh	r3, [r7, #12]
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	801a      	strh	r2, [r3, #0]

    return NO_ERROR;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <getAngleValue>:
    *finalAngleSpeed = _calculateAngleSpeed(angleRange, rawAngleSpeed, firMDVal, intMode2Prediction);

    return NO_ERROR;
}
errorTypes getAngleValue(double *angleValue, uint8_t csSelector)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
    int16_t rawAnglevalue = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	81bb      	strh	r3, [r7, #12]
    errorTypes checkError = readAngleValue(&rawAnglevalue, csSelector);
 800130c:	78fa      	ldrb	r2, [r7, #3]
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ffc1 	bl	800129c <readAngleValue>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]

    if (checkError != NO_ERROR)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <getAngleValue+0x2c>
    {
        return checkError;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	e00f      	b.n	8001348 <getAngleValue+0x4c>
    }

    *angleValue = (ANGLE_360_VAL / POW_2_15) * ((double)rawAnglevalue);
 8001328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f8f9 	bl	8000524 <__aeabi_i2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <getAngleValue+0x54>)
 8001338:	f7ff f95e 	bl	80005f8 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	e9c1 2300 	strd	r2, r3, [r1]

    return NO_ERROR;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	3f868000 	.word	0x3f868000

08001354 <SPI_CS_Enable>:

    return NO_ERROR;
}

void SPI_CS_Enable(uint8_t csSelector)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	if (csSelector == 0){
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <SPI_CS_Enable+0x14>
		__asm("NOP");
 8001364:	bf00      	nop
		}
	else {
		__asm("NOP");
	}

}
 8001366:	e042      	b.n	80013ee <SPI_CS_Enable+0x9a>
	else if (csSelector == 1) {
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d105      	bne.n	800137a <SPI_CS_Enable+0x26>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2110      	movs	r1, #16
 8001372:	4821      	ldr	r0, [pc, #132]	; (80013f8 <SPI_CS_Enable+0xa4>)
 8001374:	f001 fcf2 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8001378:	e039      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 2) {
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d105      	bne.n	800138c <SPI_CS_Enable+0x38>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2120      	movs	r1, #32
 8001384:	481c      	ldr	r0, [pc, #112]	; (80013f8 <SPI_CS_Enable+0xa4>)
 8001386:	f001 fce9 	bl	8002d5c <HAL_GPIO_WritePin>
}
 800138a:	e030      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 3) {
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d105      	bne.n	800139e <SPI_CS_Enable+0x4a>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2140      	movs	r1, #64	; 0x40
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <SPI_CS_Enable+0xa4>)
 8001398:	f001 fce0 	bl	8002d5c <HAL_GPIO_WritePin>
}
 800139c:	e027      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 4) {
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d105      	bne.n	80013b0 <SPI_CS_Enable+0x5c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <SPI_CS_Enable+0xa4>)
 80013aa:	f001 fcd7 	bl	8002d5c <HAL_GPIO_WritePin>
}
 80013ae:	e01e      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 5) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d106      	bne.n	80013c4 <SPI_CS_Enable+0x70>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013bc:	480e      	ldr	r0, [pc, #56]	; (80013f8 <SPI_CS_Enable+0xa4>)
 80013be:	f001 fccd 	bl	8002d5c <HAL_GPIO_WritePin>
}
 80013c2:	e014      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 6) {
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d106      	bne.n	80013d8 <SPI_CS_Enable+0x84>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <SPI_CS_Enable+0xa4>)
 80013d2:	f001 fcc3 	bl	8002d5c <HAL_GPIO_WritePin>
}
 80013d6:	e00a      	b.n	80013ee <SPI_CS_Enable+0x9a>
		else if (csSelector == 7) {
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d106      	bne.n	80013ec <SPI_CS_Enable+0x98>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <SPI_CS_Enable+0xa4>)
 80013e6:	f001 fcb9 	bl	8002d5c <HAL_GPIO_WritePin>
}
 80013ea:	e000      	b.n	80013ee <SPI_CS_Enable+0x9a>
		__asm("NOP");
 80013ec:	bf00      	nop
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020400 	.word	0x40020400

080013fc <SPI_CS_Disable>:

void SPI_CS_Disable(uint8_t csSelector)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	if (csSelector == 0){
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <SPI_CS_Disable+0x14>
		__asm("NOP");
 800140c:	bf00      	nop
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
	}
	else {
		__asm("NOP");
	}
}
 800140e:	e042      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 1) {
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d105      	bne.n	8001422 <SPI_CS_Disable+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2110      	movs	r1, #16
 800141a:	4821      	ldr	r0, [pc, #132]	; (80014a0 <SPI_CS_Disable+0xa4>)
 800141c:	f001 fc9e 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8001420:	e039      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 2) {
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d105      	bne.n	8001434 <SPI_CS_Disable+0x38>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	481c      	ldr	r0, [pc, #112]	; (80014a0 <SPI_CS_Disable+0xa4>)
 800142e:	f001 fc95 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8001432:	e030      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 3) {
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d105      	bne.n	8001446 <SPI_CS_Disable+0x4a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2140      	movs	r1, #64	; 0x40
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <SPI_CS_Disable+0xa4>)
 8001440:	f001 fc8c 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8001444:	e027      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 4) {
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d105      	bne.n	8001458 <SPI_CS_Disable+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <SPI_CS_Disable+0xa4>)
 8001452:	f001 fc83 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8001456:	e01e      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 5) {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b05      	cmp	r3, #5
 800145c:	d106      	bne.n	800146c <SPI_CS_Disable+0x70>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	480e      	ldr	r0, [pc, #56]	; (80014a0 <SPI_CS_Disable+0xa4>)
 8001466:	f001 fc79 	bl	8002d5c <HAL_GPIO_WritePin>
}
 800146a:	e014      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 6) {
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b06      	cmp	r3, #6
 8001470:	d106      	bne.n	8001480 <SPI_CS_Disable+0x84>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <SPI_CS_Disable+0xa4>)
 800147a:	f001 fc6f 	bl	8002d5c <HAL_GPIO_WritePin>
}
 800147e:	e00a      	b.n	8001496 <SPI_CS_Disable+0x9a>
	else if (csSelector == 7) {
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	2b07      	cmp	r3, #7
 8001484:	d106      	bne.n	8001494 <SPI_CS_Disable+0x98>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148c:	4804      	ldr	r0, [pc, #16]	; (80014a0 <SPI_CS_Disable+0xa4>)
 800148e:	f001 fc65 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8001492:	e000      	b.n	8001496 <SPI_CS_Disable+0x9a>
		__asm("NOP");
 8001494:	bf00      	nop
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40020400 	.word	0x40020400

080014a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80014b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <vApplicationGetIdleTaskMemory+0x30>)
 80014ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200001bc 	.word	0x200001bc
 80014d4:	20000210 	.word	0x20000210

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	b096      	sub	sp, #88	; 0x58
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014de:	f001 f971 	bl	80027c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e2:	f000 f857 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e6:	f000 f97b 	bl	80017e0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80014ea:	f000 f8bd 	bl	8001668 <MX_SPI2_Init>
  MX_TIM1_Init();
 80014ee:	f000 f8f3 	bl	80016d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014f2:	2100      	movs	r1, #0
 80014f4:	481f      	ldr	r0, [pc, #124]	; (8001574 <main+0x9c>)
 80014f6:	f004 fa4b 	bl	8005990 <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 0*3600/100;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <main+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <main+0xa4>)
 8001502:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001506:	461d      	mov	r5, r3
 8001508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f008 fc31 	bl	8009d82 <osThreadCreate>
 8001520:	4603      	mov	r3, r0
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <main+0xa8>)
 8001524:	6013      	str	r3, [r2, #0]

  /* definition and creation of commTask */
  osThreadDef(commTask, StartCommTask, osPriorityNormal, 0, 256);
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <main+0xac>)
 8001528:	f107 0420 	add.w	r4, r7, #32
 800152c:	461d      	mov	r5, r3
 800152e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  commTaskHandle = osThreadCreate(osThread(commTask), NULL);
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f008 fc1e 	bl	8009d82 <osThreadCreate>
 8001546:	4603      	mov	r3, r0
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <main+0xb0>)
 800154a:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorTask */
  osThreadDef(sensorTask, StartSensorTask, osPriorityNormal, 0, 128);
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <main+0xb4>)
 800154e:	1d3c      	adds	r4, r7, #4
 8001550:	461d      	mov	r5, r3
 8001552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800155a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f008 fc0d 	bl	8009d82 <osThreadCreate>
 8001568:	4603      	mov	r3, r0
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <main+0xb8>)
 800156c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800156e:	f008 fc01 	bl	8009d74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001572:	e7fe      	b.n	8001572 <main+0x9a>
 8001574:	20000468 	.word	0x20000468
 8001578:	40010000 	.word	0x40010000
 800157c:	0800cf14 	.word	0x0800cf14
 8001580:	200004b0 	.word	0x200004b0
 8001584:	0800cf3c 	.word	0x0800cf3c
 8001588:	200004b4 	.word	0x200004b4
 800158c:	0800cf64 	.word	0x0800cf64
 8001590:	200004b8 	.word	0x200004b8

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b094      	sub	sp, #80	; 0x50
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2230      	movs	r2, #48	; 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00a fc85 	bl	800beb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	4b28      	ldr	r3, [pc, #160]	; (8001660 <SystemClock_Config+0xcc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a27      	ldr	r2, [pc, #156]	; (8001660 <SystemClock_Config+0xcc>)
 80015c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <SystemClock_Config+0xcc>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d4:	2300      	movs	r3, #0
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <SystemClock_Config+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <SystemClock_Config+0xd0>)
 80015e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <SystemClock_Config+0xd0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fe:	2302      	movs	r3, #2
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001608:	2304      	movs	r3, #4
 800160a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800160c:	23c0      	movs	r3, #192	; 0xc0
 800160e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001610:	2306      	movs	r3, #6
 8001612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001614:	2308      	movs	r3, #8
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4618      	mov	r0, r3
 800161e:	f002 fe4d 	bl	80042bc <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001628:	f000 fe50 	bl	80022cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2102      	movs	r1, #2
 8001648:	4618      	mov	r0, r3
 800164a:	f003 f8af 	bl	80047ac <HAL_RCC_ClockConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001654:	f000 fe3a 	bl	80022cc <Error_Handler>
  }
}
 8001658:	bf00      	nop
 800165a:	3750      	adds	r7, #80	; 0x50
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_SPI2_Init+0x68>)
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <MX_SPI2_Init+0x6c>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_SPI2_Init+0x68>)
 800167c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001680:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001688:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_SPI2_Init+0x68>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001692:	2201      	movs	r2, #1
 8001694:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016a0:	2210      	movs	r2, #16
 80016a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016b8:	220a      	movs	r2, #10
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_SPI2_Init+0x68>)
 80016be:	f003 fab3 	bl	8004c28 <HAL_SPI_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80016c8:	f000 fe00 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000410 	.word	0x20000410
 80016d4:	40003800 	.word	0x40003800

080016d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b092      	sub	sp, #72	; 0x48
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2220      	movs	r2, #32
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f00a fbd5 	bl	800beb2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <MX_TIM1_Init+0x100>)
 800170a:	4a34      	ldr	r2, [pc, #208]	; (80017dc <MX_TIM1_Init+0x104>)
 800170c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800171a:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <MX_TIM1_Init+0x100>)
 800171c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001720:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <MX_TIM1_Init+0x100>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001734:	4828      	ldr	r0, [pc, #160]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001736:	f004 f8db 	bl	80058f0 <HAL_TIM_PWM_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001740:	f000 fdc4 	bl	80022cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800174c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001750:	4619      	mov	r1, r3
 8001752:	4821      	ldr	r0, [pc, #132]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001754:	f004 fdf0 	bl	8006338 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800175e:	f000 fdb5 	bl	80022cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001762:	2360      	movs	r3, #96	; 0x60
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	2200      	movs	r2, #0
 8001784:	4619      	mov	r1, r3
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_TIM1_Init+0x100>)
 8001788:	f004 faba 	bl	8005d00 <HAL_TIM_PWM_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001792:	f000 fd9b 	bl	80022cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_TIM1_Init+0x100>)
 80017ba:	f004 fe2b 	bl	8006414 <HAL_TIMEx_ConfigBreakDeadTime>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80017c4:	f000 fd82 	bl	80022cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_TIM1_Init+0x100>)
 80017ca:	f000 fe3b 	bl	8002444 <HAL_TIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3748      	adds	r7, #72	; 0x48
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000468 	.word	0x20000468
 80017dc:	40010000 	.word	0x40010000

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b40      	ldr	r3, [pc, #256]	; (80018fc <MX_GPIO_Init+0x11c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a3f      	ldr	r2, [pc, #252]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b39      	ldr	r3, [pc, #228]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a38      	ldr	r2, [pc, #224]	; (80018fc <MX_GPIO_Init+0x11c>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b32      	ldr	r3, [pc, #200]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a31      	ldr	r2, [pc, #196]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b2f      	ldr	r3, [pc, #188]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <MX_GPIO_Init+0x11c>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b28      	ldr	r3, [pc, #160]	; (80018fc <MX_GPIO_Init+0x11c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2120      	movs	r1, #32
 800186a:	4825      	ldr	r0, [pc, #148]	; (8001900 <MX_GPIO_Init+0x120>)
 800186c:	f001 fa76 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS7_Pin|CS1_Pin|CS2_Pin|CS3_Pin
 8001870:	2200      	movs	r2, #0
 8001872:	f241 31f0 	movw	r1, #5104	; 0x13f0
 8001876:	4823      	ldr	r0, [pc, #140]	; (8001904 <MX_GPIO_Init+0x124>)
 8001878:	f001 fa70 	bl	8002d5c <HAL_GPIO_WritePin>
                          |CS4_Pin|CS5_Pin|CS6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001882:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	481d      	ldr	r0, [pc, #116]	; (8001908 <MX_GPIO_Init+0x128>)
 8001894:	f001 f8de 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001898:	230c      	movs	r3, #12
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a8:	2307      	movs	r3, #7
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <MX_GPIO_Init+0x120>)
 80018b4:	f001 f8ce 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018b8:	2320      	movs	r3, #32
 80018ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <MX_GPIO_Init+0x120>)
 80018d0:	f001 f8c0 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS7_Pin CS1_Pin CS2_Pin CS3_Pin
                           CS4_Pin CS5_Pin CS6_Pin */
  GPIO_InitStruct.Pin = CS7_Pin|CS1_Pin|CS2_Pin|CS3_Pin
 80018d4:	f241 33f0 	movw	r3, #5104	; 0x13f0
 80018d8:	617b      	str	r3, [r7, #20]
                          |CS4_Pin|CS5_Pin|CS6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_GPIO_Init+0x124>)
 80018ee:	f001 f8b1 	bl	8002a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800

0800190c <SizeofCharArray>:

/* USER CODE BEGIN 4 */
uint16_t SizeofCharArray(char *ptr)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Local variables */
  uint16_t len = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	81fb      	strh	r3, [r7, #14]

  /* Search until end char */
  while (ptr[len] != '\0') {
 8001918:	e002      	b.n	8001920 <SizeofCharArray+0x14>
    len++;
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	3301      	adds	r3, #1
 800191e:	81fb      	strh	r3, [r7, #14]
  while (ptr[len] != '\0') {
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f6      	bne.n	800191a <SizeofCharArray+0xe>
  }
  return len;
 800192c:	89fb      	ldrh	r3, [r7, #14]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001944:	f009 fc4a 	bl	800b1dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8001948:	20c8      	movs	r0, #200	; 0xc8
 800194a:	f008 fa66 	bl	8009e1a <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800194e:	2120      	movs	r1, #32
 8001950:	4801      	ldr	r0, [pc, #4]	; (8001958 <StartDefaultTask+0x1c>)
 8001952:	f001 fa1c 	bl	8002d8e <HAL_GPIO_TogglePin>
    osDelay(200);
 8001956:	e7f7      	b.n	8001948 <StartDefaultTask+0xc>
 8001958:	40020000 	.word	0x40020000

0800195c <StartCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommTask */
void StartCommTask(void const * argument)
{
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	b08f      	sub	sp, #60	; 0x3c
 8001960:	af08      	add	r7, sp, #32
 8001962:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartCommTask */
	uint16_t Len = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	82fb      	strh	r3, [r7, #22]
  /* Infinite loop */
  for(;;)
  {
	  if (receiveState == 1){
 8001968:	4b94      	ldr	r3, [pc, #592]	; (8001bbc <StartCommTask+0x260>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	f040 810f 	bne.w	8001b90 <StartCommTask+0x234>
		  if ((rxBuf[0] == 'K') && (rxBuf[1] == 'A') && (rxBuf[2] == '\r')){ // KA = Keep alive (response echo)
 8001972:	4b93      	ldr	r3, [pc, #588]	; (8001bc0 <StartCommTask+0x264>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b4b      	cmp	r3, #75	; 0x4b
 8001978:	d109      	bne.n	800198e <StartCommTask+0x32>
 800197a:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <StartCommTask+0x264>)
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	2b41      	cmp	r3, #65	; 0x41
 8001980:	d105      	bne.n	800198e <StartCommTask+0x32>
 8001982:	4b8f      	ldr	r3, [pc, #572]	; (8001bc0 <StartCommTask+0x264>)
 8001984:	789b      	ldrb	r3, [r3, #2]
 8001986:	2b0d      	cmp	r3, #13
 8001988:	d101      	bne.n	800198e <StartCommTask+0x32>
			  __ASM("NOP");
 800198a:	bf00      	nop
 800198c:	e0f8      	b.n	8001b80 <StartCommTask+0x224>
		  }
		  // Clear error counter
		  else if ((rxBuf[0] == 'C') && (rxBuf[1] == 'E') && (rxBuf[2] == 'C') && (rxBuf[3] == '\r')){
 800198e:	4b8c      	ldr	r3, [pc, #560]	; (8001bc0 <StartCommTask+0x264>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b43      	cmp	r3, #67	; 0x43
 8001994:	d11e      	bne.n	80019d4 <StartCommTask+0x78>
 8001996:	4b8a      	ldr	r3, [pc, #552]	; (8001bc0 <StartCommTask+0x264>)
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	2b45      	cmp	r3, #69	; 0x45
 800199c:	d11a      	bne.n	80019d4 <StartCommTask+0x78>
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <StartCommTask+0x264>)
 80019a0:	789b      	ldrb	r3, [r3, #2]
 80019a2:	2b43      	cmp	r3, #67	; 0x43
 80019a4:	d116      	bne.n	80019d4 <StartCommTask+0x78>
 80019a6:	4b86      	ldr	r3, [pc, #536]	; (8001bc0 <StartCommTask+0x264>)
 80019a8:	78db      	ldrb	r3, [r3, #3]
 80019aa:	2b0d      	cmp	r3, #13
 80019ac:	d112      	bne.n	80019d4 <StartCommTask+0x78>
			  errorCounter = 0;
 80019ae:	4b85      	ldr	r3, [pc, #532]	; (8001bc4 <StartCommTask+0x268>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	801a      	strh	r2, [r3, #0]
			  sprintf(txBuf, "OK;%s\r\n", rxBuf);
 80019b4:	4a82      	ldr	r2, [pc, #520]	; (8001bc0 <StartCommTask+0x264>)
 80019b6:	4984      	ldr	r1, [pc, #528]	; (8001bc8 <StartCommTask+0x26c>)
 80019b8:	4884      	ldr	r0, [pc, #528]	; (8001bcc <StartCommTask+0x270>)
 80019ba:	f00a fa17 	bl	800bdec <siprintf>
			  Len = SizeofCharArray((char*)txBuf);
 80019be:	4883      	ldr	r0, [pc, #524]	; (8001bcc <StartCommTask+0x270>)
 80019c0:	f7ff ffa4 	bl	800190c <SizeofCharArray>
 80019c4:	4603      	mov	r3, r0
 80019c6:	82fb      	strh	r3, [r7, #22]
			  CDC_Transmit_FS((uint8_t*)txBuf, Len);
 80019c8:	8afb      	ldrh	r3, [r7, #22]
 80019ca:	4619      	mov	r1, r3
 80019cc:	487f      	ldr	r0, [pc, #508]	; (8001bcc <StartCommTask+0x270>)
 80019ce:	f009 fcd5 	bl	800b37c <CDC_Transmit_FS>
 80019d2:	e0d5      	b.n	8001b80 <StartCommTask+0x224>
		  }
		  // Read error counter
		  else if ((rxBuf[0] == 'R') && (rxBuf[1] == 'E') && (rxBuf[2] == 'C') && (rxBuf[3] == '\r')){
 80019d4:	4b7a      	ldr	r3, [pc, #488]	; (8001bc0 <StartCommTask+0x264>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b52      	cmp	r3, #82	; 0x52
 80019da:	d11d      	bne.n	8001a18 <StartCommTask+0xbc>
 80019dc:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <StartCommTask+0x264>)
 80019de:	785b      	ldrb	r3, [r3, #1]
 80019e0:	2b45      	cmp	r3, #69	; 0x45
 80019e2:	d119      	bne.n	8001a18 <StartCommTask+0xbc>
 80019e4:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <StartCommTask+0x264>)
 80019e6:	789b      	ldrb	r3, [r3, #2]
 80019e8:	2b43      	cmp	r3, #67	; 0x43
 80019ea:	d115      	bne.n	8001a18 <StartCommTask+0xbc>
 80019ec:	4b74      	ldr	r3, [pc, #464]	; (8001bc0 <StartCommTask+0x264>)
 80019ee:	78db      	ldrb	r3, [r3, #3]
 80019f0:	2b0d      	cmp	r3, #13
 80019f2:	d111      	bne.n	8001a18 <StartCommTask+0xbc>
			  sprintf(txBuf, "OK;%s;%d\r\n", rxBuf, errorCounter);
 80019f4:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <StartCommTask+0x268>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	4a71      	ldr	r2, [pc, #452]	; (8001bc0 <StartCommTask+0x264>)
 80019fa:	4975      	ldr	r1, [pc, #468]	; (8001bd0 <StartCommTask+0x274>)
 80019fc:	4873      	ldr	r0, [pc, #460]	; (8001bcc <StartCommTask+0x270>)
 80019fe:	f00a f9f5 	bl	800bdec <siprintf>
			  Len = SizeofCharArray((char*)txBuf);
 8001a02:	4872      	ldr	r0, [pc, #456]	; (8001bcc <StartCommTask+0x270>)
 8001a04:	f7ff ff82 	bl	800190c <SizeofCharArray>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	82fb      	strh	r3, [r7, #22]
			  CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001a0c:	8afb      	ldrh	r3, [r7, #22]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	486e      	ldr	r0, [pc, #440]	; (8001bcc <StartCommTask+0x270>)
 8001a12:	f009 fcb3 	bl	800b37c <CDC_Transmit_FS>
 8001a16:	e0b3      	b.n	8001b80 <StartCommTask+0x224>
		  }
		  else if ((rxBuf[0] == 'R') && (rxBuf[1] == 'D') && (rxBuf[2] == 'S') && (rxBuf[3] == '\r')){
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <StartCommTask+0x264>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b52      	cmp	r3, #82	; 0x52
 8001a1e:	f040 80a0 	bne.w	8001b62 <StartCommTask+0x206>
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <StartCommTask+0x264>)
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	2b44      	cmp	r3, #68	; 0x44
 8001a28:	f040 809b 	bne.w	8001b62 <StartCommTask+0x206>
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <StartCommTask+0x264>)
 8001a2e:	789b      	ldrb	r3, [r3, #2]
 8001a30:	2b53      	cmp	r3, #83	; 0x53
 8001a32:	f040 8096 	bne.w	8001b62 <StartCommTask+0x206>
 8001a36:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <StartCommTask+0x264>)
 8001a38:	78db      	ldrb	r3, [r3, #3]
 8001a3a:	2b0d      	cmp	r3, #13
 8001a3c:	f040 8091 	bne.w	8001b62 <StartCommTask+0x206>
			  sprintf(txBuf, "%s;%s;%d;%d;%d;%d;%d;%d;%d;\r\n", "OK", "RDS\r",(int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100),
 8001a40:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <StartCommTask+0x278>)
 8001a42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <StartCommTask+0x27c>)
 8001a4c:	f7fe fdd4 	bl	80005f8 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f868 	bl	8000b2c <__aeabi_d2iz>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	461c      	mov	r4, r3
 8001a62:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <StartCommTask+0x280>)
 8001a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <StartCommTask+0x27c>)
 8001a6e:	f7fe fdc3 	bl	80005f8 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f857 	bl	8000b2c <__aeabi_d2iz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	461d      	mov	r5, r3
 8001a84:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <StartCommTask+0x284>)
 8001a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <StartCommTask+0x27c>)
 8001a90:	f7fe fdb2 	bl	80005f8 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4610      	mov	r0, r2
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f7ff f846 	bl	8000b2c <__aeabi_d2iz>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	461e      	mov	r6, r3
 8001aa6:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <StartCommTask+0x288>)
 8001aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <StartCommTask+0x27c>)
 8001ab2:	f7fe fda1 	bl	80005f8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f835 	bl	8000b2c <__aeabi_d2iz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	60bb      	str	r3, [r7, #8]
					  (int16_t)(angle5*100), (int16_t)(angle6*100), (int16_t)(angle7*100));
 8001ac8:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <StartCommTask+0x28c>)
 8001aca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <StartCommTask+0x27c>)
 8001ad4:	f7fe fd90 	bl	80005f8 <__aeabi_dmul>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f824 	bl	8000b2c <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	b21b      	sxth	r3, r3
			  sprintf(txBuf, "%s;%s;%d;%d;%d;%d;%d;%d;%d;\r\n", "OK", "RDS\r",(int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100),
 8001ae8:	607b      	str	r3, [r7, #4]
					  (int16_t)(angle5*100), (int16_t)(angle6*100), (int16_t)(angle7*100));
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <StartCommTask+0x290>)
 8001aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	4b38      	ldr	r3, [pc, #224]	; (8001bd8 <StartCommTask+0x27c>)
 8001af6:	f7fe fd7f 	bl	80005f8 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f813 	bl	8000b2c <__aeabi_d2iz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b21b      	sxth	r3, r3
			  sprintf(txBuf, "%s;%s;%d;%d;%d;%d;%d;%d;%d;\r\n", "OK", "RDS\r",(int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100),
 8001b0a:	603b      	str	r3, [r7, #0]
					  (int16_t)(angle5*100), (int16_t)(angle6*100), (int16_t)(angle7*100));
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <StartCommTask+0x294>)
 8001b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <StartCommTask+0x27c>)
 8001b18:	f7fe fd6e 	bl	80005f8 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f802 	bl	8000b2c <__aeabi_d2iz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b21b      	sxth	r3, r3
			  sprintf(txBuf, "%s;%s;%d;%d;%d;%d;%d;%d;%d;\r\n", "OK", "RDS\r",(int16_t)(angle1*100), (int16_t)(angle2*100), (int16_t)(angle3*100), (int16_t)(angle4*100),
 8001b2c:	9306      	str	r3, [sp, #24]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	9205      	str	r2, [sp, #20]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	9204      	str	r2, [sp, #16]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	9303      	str	r3, [sp, #12]
 8001b3a:	9602      	str	r6, [sp, #8]
 8001b3c:	9501      	str	r5, [sp, #4]
 8001b3e:	9400      	str	r4, [sp, #0]
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <StartCommTask+0x298>)
 8001b42:	4a2d      	ldr	r2, [pc, #180]	; (8001bf8 <StartCommTask+0x29c>)
 8001b44:	492d      	ldr	r1, [pc, #180]	; (8001bfc <StartCommTask+0x2a0>)
 8001b46:	4821      	ldr	r0, [pc, #132]	; (8001bcc <StartCommTask+0x270>)
 8001b48:	f00a f950 	bl	800bdec <siprintf>
			  Len = SizeofCharArray((char*)txBuf);
 8001b4c:	481f      	ldr	r0, [pc, #124]	; (8001bcc <StartCommTask+0x270>)
 8001b4e:	f7ff fedd 	bl	800190c <SizeofCharArray>
 8001b52:	4603      	mov	r3, r0
 8001b54:	82fb      	strh	r3, [r7, #22]
			  CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001b56:	8afb      	ldrh	r3, [r7, #22]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	481c      	ldr	r0, [pc, #112]	; (8001bcc <StartCommTask+0x270>)
 8001b5c:	f009 fc0e 	bl	800b37c <CDC_Transmit_FS>
 8001b60:	e00e      	b.n	8001b80 <StartCommTask+0x224>
		  }
		  else{
			  sprintf(txBuf, "ERR;%s\r\n", rxBuf);
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <StartCommTask+0x264>)
 8001b64:	4926      	ldr	r1, [pc, #152]	; (8001c00 <StartCommTask+0x2a4>)
 8001b66:	4819      	ldr	r0, [pc, #100]	; (8001bcc <StartCommTask+0x270>)
 8001b68:	f00a f940 	bl	800bdec <siprintf>
			  Len = SizeofCharArray((char*)txBuf);
 8001b6c:	4817      	ldr	r0, [pc, #92]	; (8001bcc <StartCommTask+0x270>)
 8001b6e:	f7ff fecd 	bl	800190c <SizeofCharArray>
 8001b72:	4603      	mov	r3, r0
 8001b74:	82fb      	strh	r3, [r7, #22]
			  CDC_Transmit_FS((uint8_t*)txBuf, Len);
 8001b76:	8afb      	ldrh	r3, [r7, #22]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <StartCommTask+0x270>)
 8001b7c:	f009 fbfe 	bl	800b37c <CDC_Transmit_FS>
		  }
		  timeStamp = HAL_GetTick();
 8001b80:	f000 fe56 	bl	8002830 <HAL_GetTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <StartCommTask+0x2a8>)
 8001b88:	6013      	str	r3, [r2, #0]
		  receiveState = 0;
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <StartCommTask+0x260>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
	  }

	  timeOutGuard = HAL_GetTick() - timeStamp;
 8001b90:	f000 fe4e 	bl	8002830 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <StartCommTask+0x2a8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <StartCommTask+0x2ac>)
 8001b9e:	6013      	str	r3, [r2, #0]
	  if (timeOutGuard > timeOutGuardMax){
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <StartCommTask+0x2ac>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <StartCommTask+0x2b0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d903      	bls.n	8001bb4 <StartCommTask+0x258>
		  timeOutGuardMax = timeOutGuard;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <StartCommTask+0x2ac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <StartCommTask+0x2b0>)
 8001bb2:	6013      	str	r3, [r2, #0]
	  }

	  osDelay(10);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f008 f930 	bl	8009e1a <osDelay>
	  if (receiveState == 1){
 8001bba:	e6d5      	b.n	8001968 <StartCommTask+0xc>
 8001bbc:	20000030 	.word	0x20000030
 8001bc0:	20000678 	.word	0x20000678
 8001bc4:	200004c4 	.word	0x200004c4
 8001bc8:	0800cf80 	.word	0x0800cf80
 8001bcc:	20000578 	.word	0x20000578
 8001bd0:	0800cf88 	.word	0x0800cf88
 8001bd4:	20000538 	.word	0x20000538
 8001bd8:	40590000 	.word	0x40590000
 8001bdc:	20000540 	.word	0x20000540
 8001be0:	20000548 	.word	0x20000548
 8001be4:	20000550 	.word	0x20000550
 8001be8:	20000558 	.word	0x20000558
 8001bec:	20000560 	.word	0x20000560
 8001bf0:	20000568 	.word	0x20000568
 8001bf4:	0800cf94 	.word	0x0800cf94
 8001bf8:	0800cf9c 	.word	0x0800cf9c
 8001bfc:	0800cfa0 	.word	0x0800cfa0
 8001c00:	0800cfc0 	.word	0x0800cfc0
 8001c04:	200006f8 	.word	0x200006f8
 8001c08:	200006fc 	.word	0x200006fc
 8001c0c:	20000700 	.word	0x20000700

08001c10 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b08e      	sub	sp, #56	; 0x38
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6378      	str	r0, [r7, #52]	; 0x34
  /* USER CODE BEGIN StartSensorTask */
  SPI_CS_Disable(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7ff fbee 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(2);
 8001c20:	2002      	movs	r0, #2
 8001c22:	f7ff fbeb 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(3);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f7ff fbe8 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(4);
 8001c2c:	2004      	movs	r0, #4
 8001c2e:	f7ff fbe5 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(5);
 8001c32:	2005      	movs	r0, #5
 8001c34:	f7ff fbe2 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(6);
 8001c38:	2006      	movs	r0, #6
 8001c3a:	f7ff fbdf 	bl	80013fc <SPI_CS_Disable>
  SPI_CS_Disable(7);
 8001c3e:	2007      	movs	r0, #7
 8001c40:	f7ff fbdc 	bl	80013fc <SPI_CS_Disable>

  checkError = NO_ERROR;
 8001c44:	4aa7      	ldr	r2, [pc, #668]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001c46:	2300      	movs	r3, #0
 8001c48:	7013      	strb	r3, [r2, #0]
  checkError = readBlockCRC(1);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7ff fade 	bl	800120c <readBlockCRC>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4aa4      	ldr	r2, [pc, #656]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001c54:	7013      	strb	r3, [r2, #0]
  if (checkError != NO_ERROR) errorCounter++;
 8001c56:	4ba3      	ldr	r3, [pc, #652]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <StartSensorTask+0x5a>
 8001c5e:	4ba2      	ldr	r3, [pc, #648]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4aa0      	ldr	r2, [pc, #640]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001c68:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f000 fdec 	bl	8002848 <HAL_Delay>

  checkError2 = NO_ERROR;
 8001c70:	4a9e      	ldr	r2, [pc, #632]	; (8001eec <StartSensorTask+0x2dc>)
 8001c72:	2300      	movs	r3, #0
 8001c74:	7013      	strb	r3, [r2, #0]
  checkError2 = readBlockCRC(2);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff fac8 	bl	800120c <readBlockCRC>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4a9b      	ldr	r2, [pc, #620]	; (8001eec <StartSensorTask+0x2dc>)
 8001c80:	7013      	strb	r3, [r2, #0]
  if (checkError2 != NO_ERROR) errorCounter++;
 8001c82:	4b9a      	ldr	r3, [pc, #616]	; (8001eec <StartSensorTask+0x2dc>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <StartSensorTask+0x86>
 8001c8a:	4b97      	ldr	r3, [pc, #604]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	4a95      	ldr	r2, [pc, #596]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001c94:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f000 fdd6 	bl	8002848 <HAL_Delay>

  checkError3 = NO_ERROR;
 8001c9c:	4a94      	ldr	r2, [pc, #592]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	7013      	strb	r3, [r2, #0]
  checkError3 = readBlockCRC(3);
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f7ff fab2 	bl	800120c <readBlockCRC>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a91      	ldr	r2, [pc, #580]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001cac:	7013      	strb	r3, [r2, #0]
  if (checkError3 != NO_ERROR) errorCounter++;
 8001cae:	4b90      	ldr	r3, [pc, #576]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <StartSensorTask+0xb2>
 8001cb6:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4a8a      	ldr	r2, [pc, #552]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001cc0:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 fdc0 	bl	8002848 <HAL_Delay>

  checkError4 = NO_ERROR;
 8001cc8:	4a8a      	ldr	r2, [pc, #552]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	7013      	strb	r3, [r2, #0]
  checkError4 = readBlockCRC(4);
 8001cce:	2004      	movs	r0, #4
 8001cd0:	f7ff fa9c 	bl	800120c <readBlockCRC>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a87      	ldr	r2, [pc, #540]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001cd8:	7013      	strb	r3, [r2, #0]
  if (checkError4 != NO_ERROR) errorCounter++;
 8001cda:	4b86      	ldr	r3, [pc, #536]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <StartSensorTask+0xde>
 8001ce2:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4a7f      	ldr	r2, [pc, #508]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001cec:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f000 fdaa 	bl	8002848 <HAL_Delay>

  checkError5 = NO_ERROR;
 8001cf4:	4a80      	ldr	r2, [pc, #512]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	7013      	strb	r3, [r2, #0]
  checkError5 = readBlockCRC(5);
 8001cfa:	2005      	movs	r0, #5
 8001cfc:	f7ff fa86 	bl	800120c <readBlockCRC>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a7d      	ldr	r2, [pc, #500]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001d04:	7013      	strb	r3, [r2, #0]
  if (checkError5 != NO_ERROR) errorCounter++;
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <StartSensorTask+0x10a>
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4a74      	ldr	r2, [pc, #464]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d18:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f000 fd94 	bl	8002848 <HAL_Delay>

  checkError6 = NO_ERROR;
 8001d20:	4a76      	ldr	r2, [pc, #472]	; (8001efc <StartSensorTask+0x2ec>)
 8001d22:	2300      	movs	r3, #0
 8001d24:	7013      	strb	r3, [r2, #0]
  checkError6 = readBlockCRC(6);
 8001d26:	2006      	movs	r0, #6
 8001d28:	f7ff fa70 	bl	800120c <readBlockCRC>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a73      	ldr	r2, [pc, #460]	; (8001efc <StartSensorTask+0x2ec>)
 8001d30:	7013      	strb	r3, [r2, #0]
  if (checkError6 != NO_ERROR) errorCounter++;
 8001d32:	4b72      	ldr	r3, [pc, #456]	; (8001efc <StartSensorTask+0x2ec>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <StartSensorTask+0x136>
 8001d3a:	4b6b      	ldr	r3, [pc, #428]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d44:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f000 fd7e 	bl	8002848 <HAL_Delay>

  checkError7 = NO_ERROR;
 8001d4c:	4a6c      	ldr	r2, [pc, #432]	; (8001f00 <StartSensorTask+0x2f0>)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	7013      	strb	r3, [r2, #0]
  checkError7 = readBlockCRC(7);
 8001d52:	2007      	movs	r0, #7
 8001d54:	f7ff fa5a 	bl	800120c <readBlockCRC>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <StartSensorTask+0x2f0>)
 8001d5c:	7013      	strb	r3, [r2, #0]
  if (checkError7 != NO_ERROR) errorCounter++;
 8001d5e:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <StartSensorTask+0x2f0>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <StartSensorTask+0x162>
 8001d66:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4a5e      	ldr	r2, [pc, #376]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d70:	8013      	strh	r3, [r2, #0]
  HAL_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f000 fd68 	bl	8002848 <HAL_Delay>

  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f008 f84e 	bl	8009e1a <osDelay>

    checkError = NO_ERROR;
 8001d7e:	4a59      	ldr	r2, [pc, #356]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001d80:	2300      	movs	r3, #0
 8001d82:	7013      	strb	r3, [r2, #0]
    checkError = getAngleValue(&angle1_raw,1);
 8001d84:	2101      	movs	r1, #1
 8001d86:	485f      	ldr	r0, [pc, #380]	; (8001f04 <StartSensorTask+0x2f4>)
 8001d88:	f7ff fab8 	bl	80012fc <getAngleValue>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a55      	ldr	r2, [pc, #340]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001d90:	7013      	strb	r3, [r2, #0]
    if (checkError != NO_ERROR) errorCounter++;
 8001d92:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <StartSensorTask+0x2d4>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <StartSensorTask+0x196>
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4a51      	ldr	r2, [pc, #324]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001da4:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 fd4e 	bl	8002848 <HAL_Delay>

    checkError2 = NO_ERROR;
 8001dac:	4a4f      	ldr	r2, [pc, #316]	; (8001eec <StartSensorTask+0x2dc>)
 8001dae:	2300      	movs	r3, #0
 8001db0:	7013      	strb	r3, [r2, #0]
    checkError2 = getAngleValue(&angle2_raw,2);
 8001db2:	2102      	movs	r1, #2
 8001db4:	4854      	ldr	r0, [pc, #336]	; (8001f08 <StartSensorTask+0x2f8>)
 8001db6:	f7ff faa1 	bl	80012fc <getAngleValue>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <StartSensorTask+0x2dc>)
 8001dbe:	7013      	strb	r3, [r2, #0]
    if (checkError2 != NO_ERROR) errorCounter++;
 8001dc0:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <StartSensorTask+0x2dc>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <StartSensorTask+0x1c4>
 8001dc8:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4a45      	ldr	r2, [pc, #276]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001dd2:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f000 fd37 	bl	8002848 <HAL_Delay>

    checkError3 = NO_ERROR;
 8001dda:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	7013      	strb	r3, [r2, #0]
    checkError3 = getAngleValue(&angle3_raw,3);
 8001de0:	2103      	movs	r1, #3
 8001de2:	484a      	ldr	r0, [pc, #296]	; (8001f0c <StartSensorTask+0x2fc>)
 8001de4:	f7ff fa8a 	bl	80012fc <getAngleValue>
 8001de8:	4603      	mov	r3, r0
 8001dea:	4a41      	ldr	r2, [pc, #260]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001dec:	7013      	strb	r3, [r2, #0]
    if (checkError3 != NO_ERROR) errorCounter++;
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <StartSensorTask+0x2e0>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <StartSensorTask+0x1f2>
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e00:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f000 fd20 	bl	8002848 <HAL_Delay>

    checkError4 = NO_ERROR;
 8001e08:	4a3a      	ldr	r2, [pc, #232]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	7013      	strb	r3, [r2, #0]
    checkError4 = getAngleValue(&angle4_raw,4);
 8001e0e:	2104      	movs	r1, #4
 8001e10:	483f      	ldr	r0, [pc, #252]	; (8001f10 <StartSensorTask+0x300>)
 8001e12:	f7ff fa73 	bl	80012fc <getAngleValue>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a36      	ldr	r2, [pc, #216]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001e1a:	7013      	strb	r3, [r2, #0]
    if (checkError4 != NO_ERROR) errorCounter++;
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <StartSensorTask+0x2e4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <StartSensorTask+0x220>
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e2e:	8013      	strh	r3, [r2, #0]

    checkError5 = NO_ERROR;
 8001e30:	4a31      	ldr	r2, [pc, #196]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001e32:	2300      	movs	r3, #0
 8001e34:	7013      	strb	r3, [r2, #0]
    checkError5 = getAngleValue(&angle5_raw,5);
 8001e36:	2105      	movs	r1, #5
 8001e38:	4836      	ldr	r0, [pc, #216]	; (8001f14 <StartSensorTask+0x304>)
 8001e3a:	f7ff fa5f 	bl	80012fc <getAngleValue>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a2d      	ldr	r2, [pc, #180]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001e42:	7013      	strb	r3, [r2, #0]
    if (checkError5 != NO_ERROR) errorCounter++;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <StartSensorTask+0x2e8>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <StartSensorTask+0x248>
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4a24      	ldr	r2, [pc, #144]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e56:	8013      	strh	r3, [r2, #0]
    HAL_Delay(1);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f000 fcf5 	bl	8002848 <HAL_Delay>

    checkError6 = NO_ERROR;
 8001e5e:	4a27      	ldr	r2, [pc, #156]	; (8001efc <StartSensorTask+0x2ec>)
 8001e60:	2300      	movs	r3, #0
 8001e62:	7013      	strb	r3, [r2, #0]
    checkError6 = getAngleValue(&angle6_raw,6);
 8001e64:	2106      	movs	r1, #6
 8001e66:	482c      	ldr	r0, [pc, #176]	; (8001f18 <StartSensorTask+0x308>)
 8001e68:	f7ff fa48 	bl	80012fc <getAngleValue>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a23      	ldr	r2, [pc, #140]	; (8001efc <StartSensorTask+0x2ec>)
 8001e70:	7013      	strb	r3, [r2, #0]
    if (checkError6 != NO_ERROR) errorCounter++;
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <StartSensorTask+0x2ec>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <StartSensorTask+0x276>
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001e84:	8013      	strh	r3, [r2, #0]

    checkError7 = NO_ERROR;
 8001e86:	4a1e      	ldr	r2, [pc, #120]	; (8001f00 <StartSensorTask+0x2f0>)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	7013      	strb	r3, [r2, #0]
    checkError7 = getAngleValue(&angle7_raw,7);
 8001e8c:	2107      	movs	r1, #7
 8001e8e:	4823      	ldr	r0, [pc, #140]	; (8001f1c <StartSensorTask+0x30c>)
 8001e90:	f7ff fa34 	bl	80012fc <getAngleValue>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <StartSensorTask+0x2f0>)
 8001e98:	7013      	strb	r3, [r2, #0]
    if (checkError7 != NO_ERROR) errorCounter++;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <StartSensorTask+0x2f0>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <StartSensorTask+0x29e>
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <StartSensorTask+0x2d8>)
 8001eac:	8013      	strh	r3, [r2, #0]


    // processing raw angles

    angle1_temp = angle1_raw - offset1;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <StartSensorTask+0x2f4>)
 8001eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <StartSensorTask+0x310>)
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	f7fe f9e5 	bl	8000288 <__aeabi_dsub>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <StartSensorTask+0x314>)
 8001ec8:	e9c3 0100 	strd	r0, r1, [r3]
    if (angle1_temp >= 0){
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <StartSensorTask+0x314>)
 8001ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	f7fe fe13 	bl	8000b04 <__aeabi_dcmpge>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	e021      	b.n	8001f28 <StartSensorTask+0x318>
 8001ee4:	200004bc 	.word	0x200004bc
 8001ee8:	200004c4 	.word	0x200004c4
 8001eec:	200004bd 	.word	0x200004bd
 8001ef0:	200004be 	.word	0x200004be
 8001ef4:	200004bf 	.word	0x200004bf
 8001ef8:	200004c0 	.word	0x200004c0
 8001efc:	200004c1 	.word	0x200004c1
 8001f00:	200004c2 	.word	0x200004c2
 8001f04:	200004c8 	.word	0x200004c8
 8001f08:	200004d0 	.word	0x200004d0
 8001f0c:	200004d8 	.word	0x200004d8
 8001f10:	200004e0 	.word	0x200004e0
 8001f14:	200004e8 	.word	0x200004e8
 8001f18:	200004f0 	.word	0x200004f0
 8001f1c:	200004f8 	.word	0x200004f8
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000500 	.word	0x20000500
 8001f28:	d006      	beq.n	8001f38 <StartSensorTask+0x328>
    	angle1 = angle1_temp;
 8001f2a:	4b9b      	ldr	r3, [pc, #620]	; (8002198 <StartSensorTask+0x588>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	499a      	ldr	r1, [pc, #616]	; (800219c <StartSensorTask+0x58c>)
 8001f32:	e9c1 2300 	strd	r2, r3, [r1]
 8001f36:	e016      	b.n	8001f66 <StartSensorTask+0x356>
    }
    else{
    	angle1 = -1 * (360 - (360 + angle1_temp));
 8001f38:	4b97      	ldr	r3, [pc, #604]	; (8002198 <StartSensorTask+0x588>)
 8001f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b97      	ldr	r3, [pc, #604]	; (80021a0 <StartSensorTask+0x590>)
 8001f44:	f7fe f9a2 	bl	800028c <__adddf3>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	f04f 0000 	mov.w	r0, #0
 8001f50:	4993      	ldr	r1, [pc, #588]	; (80021a0 <StartSensorTask+0x590>)
 8001f52:	f7fe f999 	bl	8000288 <__aeabi_dsub>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f60:	4b8e      	ldr	r3, [pc, #568]	; (800219c <StartSensorTask+0x58c>)
 8001f62:	e9c3 4500 	strd	r4, r5, [r3]
    }

    angle2_temp = -1 * (angle2_raw - offset2);
 8001f66:	4b8f      	ldr	r3, [pc, #572]	; (80021a4 <StartSensorTask+0x594>)
 8001f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f6c:	4b8e      	ldr	r3, [pc, #568]	; (80021a8 <StartSensorTask+0x598>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe f989 	bl	8000288 <__aeabi_dsub>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f82:	4b8a      	ldr	r3, [pc, #552]	; (80021ac <StartSensorTask+0x59c>)
 8001f84:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f88:	ed83 7b00 	vstr	d7, [r3]
    if (angle2_temp >= 0){
 8001f8c:	4b87      	ldr	r3, [pc, #540]	; (80021ac <StartSensorTask+0x59c>)
 8001f8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	f7fe fdb3 	bl	8000b04 <__aeabi_dcmpge>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <StartSensorTask+0x3a2>
    	angle2 = angle2_temp;
 8001fa4:	4b81      	ldr	r3, [pc, #516]	; (80021ac <StartSensorTask+0x59c>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	4981      	ldr	r1, [pc, #516]	; (80021b0 <StartSensorTask+0x5a0>)
 8001fac:	e9c1 2300 	strd	r2, r3, [r1]
 8001fb0:	e016      	b.n	8001fe0 <StartSensorTask+0x3d0>
    }
    else{
    	angle2 = -1 * (360 - (360 + angle2_temp));
 8001fb2:	4b7e      	ldr	r3, [pc, #504]	; (80021ac <StartSensorTask+0x59c>)
 8001fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b78      	ldr	r3, [pc, #480]	; (80021a0 <StartSensorTask+0x590>)
 8001fbe:	f7fe f965 	bl	800028c <__adddf3>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	4975      	ldr	r1, [pc, #468]	; (80021a0 <StartSensorTask+0x590>)
 8001fcc:	f7fe f95c 	bl	8000288 <__aeabi_dsub>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4690      	mov	r8, r2
 8001fd6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001fda:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <StartSensorTask+0x5a0>)
 8001fdc:	e9c3 8900 	strd	r8, r9, [r3]
    }

// PROBLÉMA

    angle3_temp = -1 * (angle3_raw - offset3);
 8001fe0:	4b74      	ldr	r3, [pc, #464]	; (80021b4 <StartSensorTask+0x5a4>)
 8001fe2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe6:	4b74      	ldr	r3, [pc, #464]	; (80021b8 <StartSensorTask+0x5a8>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe f94c 	bl	8000288 <__aeabi_dsub>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	623a      	str	r2, [r7, #32]
 8001ff6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <StartSensorTask+0x5ac>)
 8001ffe:	ed97 7b08 	vldr	d7, [r7, #32]
 8002002:	ed83 7b00 	vstr	d7, [r3]
    if (angle3_temp >= 0){
 8002006:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <StartSensorTask+0x5ac>)
 8002008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	f7fe fd76 	bl	8000b04 <__aeabi_dcmpge>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d006      	beq.n	800202c <StartSensorTask+0x41c>
    	angle3 = angle3_temp;
 800201e:	4b67      	ldr	r3, [pc, #412]	; (80021bc <StartSensorTask+0x5ac>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	4966      	ldr	r1, [pc, #408]	; (80021c0 <StartSensorTask+0x5b0>)
 8002026:	e9c1 2300 	strd	r2, r3, [r1]
 800202a:	e016      	b.n	800205a <StartSensorTask+0x44a>
    }
    else{
    	angle3 = -1 * (360 - (360 + angle3_temp));
 800202c:	4b63      	ldr	r3, [pc, #396]	; (80021bc <StartSensorTask+0x5ac>)
 800202e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b5a      	ldr	r3, [pc, #360]	; (80021a0 <StartSensorTask+0x590>)
 8002038:	f7fe f928 	bl	800028c <__adddf3>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	f04f 0000 	mov.w	r0, #0
 8002044:	4956      	ldr	r1, [pc, #344]	; (80021a0 <StartSensorTask+0x590>)
 8002046:	f7fe f91f 	bl	8000288 <__aeabi_dsub>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4692      	mov	sl, r2
 8002050:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002054:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <StartSensorTask+0x5b0>)
 8002056:	e9c3 ab00 	strd	sl, fp, [r3]
    }
// PROBLÉMA

    angle4_temp = -1 * (angle4_raw - offset4);
 800205a:	4b5a      	ldr	r3, [pc, #360]	; (80021c4 <StartSensorTask+0x5b4>)
 800205c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <StartSensorTask+0x5b8>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe f90f 	bl	8000288 <__aeabi_dsub>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	61ba      	str	r2, [r7, #24]
 8002070:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	4b55      	ldr	r3, [pc, #340]	; (80021cc <StartSensorTask+0x5bc>)
 8002078:	ed97 7b06 	vldr	d7, [r7, #24]
 800207c:	ed83 7b00 	vstr	d7, [r3]
    if (angle4_temp >= 0){
 8002080:	4b52      	ldr	r3, [pc, #328]	; (80021cc <StartSensorTask+0x5bc>)
 8002082:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	f7fe fd39 	bl	8000b04 <__aeabi_dcmpge>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <StartSensorTask+0x496>
    	angle4 = angle4_temp;
 8002098:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <StartSensorTask+0x5bc>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	494c      	ldr	r1, [pc, #304]	; (80021d0 <StartSensorTask+0x5c0>)
 80020a0:	e9c1 2300 	strd	r2, r3, [r1]
 80020a4:	e019      	b.n	80020da <StartSensorTask+0x4ca>
    }
    else{
    	angle4 = -1 * (360 - (360 + angle4_temp));
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <StartSensorTask+0x5bc>)
 80020a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <StartSensorTask+0x590>)
 80020b2:	f7fe f8eb 	bl	800028c <__adddf3>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	f04f 0000 	mov.w	r0, #0
 80020be:	4938      	ldr	r1, [pc, #224]	; (80021a0 <StartSensorTask+0x590>)
 80020c0:	f7fe f8e2 	bl	8000288 <__aeabi_dsub>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	613a      	str	r2, [r7, #16]
 80020ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <StartSensorTask+0x5c0>)
 80020d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80020d6:	ed83 7b00 	vstr	d7, [r3]
    }

    angle5_temp = (angle5_raw - offset5);
 80020da:	4b3e      	ldr	r3, [pc, #248]	; (80021d4 <StartSensorTask+0x5c4>)
 80020dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e0:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <StartSensorTask+0x5c8>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	f7fe f8cf 	bl	8000288 <__aeabi_dsub>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <StartSensorTask+0x5cc>)
 80020f4:	e9c3 0100 	strd	r0, r1, [r3]
	if (angle5_temp >= 0){
 80020f8:	4b38      	ldr	r3, [pc, #224]	; (80021dc <StartSensorTask+0x5cc>)
 80020fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	f7fe fcfd 	bl	8000b04 <__aeabi_dcmpge>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d006      	beq.n	800211e <StartSensorTask+0x50e>
		angle5 = angle5_temp;
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <StartSensorTask+0x5cc>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	4932      	ldr	r1, [pc, #200]	; (80021e0 <StartSensorTask+0x5d0>)
 8002118:	e9c1 2300 	strd	r2, r3, [r1]
 800211c:	e015      	b.n	800214a <StartSensorTask+0x53a>
	}
	else{
		angle5 = (360 - (360 + angle5_temp));
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <StartSensorTask+0x5cc>)
 8002120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <StartSensorTask+0x590>)
 800212a:	f7fe f8af 	bl	800028c <__adddf3>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	491a      	ldr	r1, [pc, #104]	; (80021a0 <StartSensorTask+0x590>)
 8002138:	f7fe f8a6 	bl	8000288 <__aeabi_dsub>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <StartSensorTask+0x5d0>)
 8002146:	e9c3 0100 	strd	r0, r1, [r3]
	}

	angle6_temp = -1 * (angle6_raw - offset6);
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <StartSensorTask+0x5d4>)
 800214c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <StartSensorTask+0x5d8>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe f897 	bl	8000288 <__aeabi_dsub>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	60ba      	str	r2, [r7, #8]
 8002160:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <StartSensorTask+0x5dc>)
 8002168:	ed97 7b02 	vldr	d7, [r7, #8]
 800216c:	ed83 7b00 	vstr	d7, [r3]
	if (angle6_temp >= 0){
 8002170:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <StartSensorTask+0x5dc>)
 8002172:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	f7fe fcc1 	bl	8000b04 <__aeabi_dcmpge>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d035      	beq.n	80021f4 <StartSensorTask+0x5e4>
		angle6 = angle6_temp;
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <StartSensorTask+0x5dc>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	4918      	ldr	r1, [pc, #96]	; (80021f0 <StartSensorTask+0x5e0>)
 8002190:	e9c1 2300 	strd	r2, r3, [r1]
 8002194:	e048      	b.n	8002228 <StartSensorTask+0x618>
 8002196:	bf00      	nop
 8002198:	20000500 	.word	0x20000500
 800219c:	20000538 	.word	0x20000538
 80021a0:	40768000 	.word	0x40768000
 80021a4:	200004d0 	.word	0x200004d0
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000508 	.word	0x20000508
 80021b0:	20000540 	.word	0x20000540
 80021b4:	200004d8 	.word	0x200004d8
 80021b8:	20000010 	.word	0x20000010
 80021bc:	20000510 	.word	0x20000510
 80021c0:	20000548 	.word	0x20000548
 80021c4:	200004e0 	.word	0x200004e0
 80021c8:	20000018 	.word	0x20000018
 80021cc:	20000518 	.word	0x20000518
 80021d0:	20000550 	.word	0x20000550
 80021d4:	200004e8 	.word	0x200004e8
 80021d8:	20000020 	.word	0x20000020
 80021dc:	20000520 	.word	0x20000520
 80021e0:	20000558 	.word	0x20000558
 80021e4:	200004f0 	.word	0x200004f0
 80021e8:	20000028 	.word	0x20000028
 80021ec:	20000528 	.word	0x20000528
 80021f0:	20000560 	.word	0x20000560
	}
	else{
		angle6 = -1 * (360 - (360 + angle6_temp));
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <StartSensorTask+0x67c>)
 80021f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <StartSensorTask+0x680>)
 8002200:	f7fe f844 	bl	800028c <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	f04f 0000 	mov.w	r0, #0
 800220c:	4920      	ldr	r1, [pc, #128]	; (8002290 <StartSensorTask+0x680>)
 800220e:	f7fe f83b 	bl	8000288 <__aeabi_dsub>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	603a      	str	r2, [r7, #0]
 8002218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <StartSensorTask+0x684>)
 8002220:	ed97 7b00 	vldr	d7, [r7]
 8002224:	ed83 7b00 	vstr	d7, [r3]
	}

	angle7_temp = (angle7_raw - offset7);
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <StartSensorTask+0x688>)
 800222a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <StartSensorTask+0x68c>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe f828 	bl	8000288 <__aeabi_dsub>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <StartSensorTask+0x690>)
 8002242:	e9c3 0100 	strd	r0, r1, [r3]
	if (angle7_temp >= 0){
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <StartSensorTask+0x690>)
 8002248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	f7fe fc56 	bl	8000b04 <__aeabi_dcmpge>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <StartSensorTask+0x65c>
		angle7 = angle7_temp;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <StartSensorTask+0x690>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	490f      	ldr	r1, [pc, #60]	; (80022a4 <StartSensorTask+0x694>)
 8002266:	e9c1 2300 	strd	r2, r3, [r1]
 800226a:	e585      	b.n	8001d78 <StartSensorTask+0x168>
	}
	else{
		angle7 = (360 + angle7_temp);
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <StartSensorTask+0x690>)
 800226e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <StartSensorTask+0x680>)
 8002278:	f7fe f808 	bl	800028c <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <StartSensorTask+0x694>)
 8002286:	e9c3 0100 	strd	r0, r1, [r3]
    osDelay(10);
 800228a:	e575      	b.n	8001d78 <StartSensorTask+0x168>
 800228c:	20000528 	.word	0x20000528
 8002290:	40768000 	.word	0x40768000
 8002294:	20000560 	.word	0x20000560
 8002298:	200004f8 	.word	0x200004f8
 800229c:	20000570 	.word	0x20000570
 80022a0:	20000530 	.word	0x20000530
 80022a4:	20000568 	.word	0x20000568

080022a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022ba:	f000 faa5 	bl	8002808 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40000800 	.word	0x40000800

080022cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d0:	b672      	cpsid	i
}
 80022d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <Error_Handler+0x8>
	...

080022d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_MspInit+0x54>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_MspInit+0x54>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_MspInit+0x54>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_MspInit+0x54>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_MspInit+0x54>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_MspInit+0x54>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	210f      	movs	r1, #15
 800231a:	f06f 0001 	mvn.w	r0, #1
 800231e:	f000 fb6f 	bl	8002a00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a28      	ldr	r2, [pc, #160]	; (80023f0 <HAL_SPI_MspInit+0xc0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d14a      	bne.n	80023e8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_SPI_MspInit+0xc4>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023a6:	2308      	movs	r3, #8
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023b6:	2305      	movs	r3, #5
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <HAL_SPI_MspInit+0xc8>)
 80023c2:	f000 fb47 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023cc:	2302      	movs	r3, #2
 80023ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023d8:	2305      	movs	r3, #5
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4619      	mov	r1, r3
 80023e2:	4806      	ldr	r0, [pc, #24]	; (80023fc <HAL_SPI_MspInit+0xcc>)
 80023e4:	f000 fb36 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	; 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40003800 	.word	0x40003800
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020400 	.word	0x40020400

08002400 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <HAL_TIM_PWM_MspInit+0x3c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d10d      	bne.n	800242e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_TIM_PWM_MspInit+0x40>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <HAL_TIM_PWM_MspInit+0x40>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6453      	str	r3, [r2, #68]	; 0x44
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <HAL_TIM_PWM_MspInit+0x40>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40010000 	.word	0x40010000
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <HAL_TIM_MspPostInit+0x68>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d11e      	bne.n	80024a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_TIM_MspPostInit+0x6c>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_TIM_MspPostInit+0x6c>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_TIM_MspPostInit+0x6c>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002486:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002494:	2301      	movs	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	4619      	mov	r1, r3
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_TIM_MspPostInit+0x70>)
 80024a0:	f000 fad8 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020000 	.word	0x40020000

080024b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08e      	sub	sp, #56	; 0x38
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <HAL_InitTick+0xe4>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	4a32      	ldr	r2, [pc, #200]	; (800259c <HAL_InitTick+0xe4>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6413      	str	r3, [r2, #64]	; 0x40
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_InitTick+0xe4>)
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024e4:	f107 0210 	add.w	r2, r7, #16
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fb68 	bl	8004bc4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80024f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80024fe:	f002 fb4d 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 8002502:	6378      	str	r0, [r7, #52]	; 0x34
 8002504:	e004      	b.n	8002510 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002506:	f002 fb49 	bl	8004b9c <HAL_RCC_GetPCLK1Freq>
 800250a:	4603      	mov	r3, r0
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	4a23      	ldr	r2, [pc, #140]	; (80025a0 <HAL_InitTick+0xe8>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	3b01      	subs	r3, #1
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_InitTick+0xec>)
 8002520:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <HAL_InitTick+0xf0>)
 8002522:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002524:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <HAL_InitTick+0xec>)
 8002526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800252a:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800252c:	4a1d      	ldr	r2, [pc, #116]	; (80025a4 <HAL_InitTick+0xec>)
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <HAL_InitTick+0xec>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <HAL_InitTick+0xec>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_InitTick+0xec>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002544:	4817      	ldr	r0, [pc, #92]	; (80025a4 <HAL_InitTick+0xec>)
 8002546:	f003 f917 	bl	8005778 <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002554:	2b00      	cmp	r3, #0
 8002556:	d11b      	bne.n	8002590 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002558:	4812      	ldr	r0, [pc, #72]	; (80025a4 <HAL_InitTick+0xec>)
 800255a:	f003 f967 	bl	800582c <HAL_TIM_Base_Start_IT>
 800255e:	4603      	mov	r3, r0
 8002560:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002568:	2b00      	cmp	r3, #0
 800256a:	d111      	bne.n	8002590 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800256c:	201e      	movs	r0, #30
 800256e:	f000 fa63 	bl	8002a38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d808      	bhi.n	800258a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002578:	2200      	movs	r2, #0
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	201e      	movs	r0, #30
 800257e:	f000 fa3f 	bl	8002a00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_InitTick+0xf4>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e002      	b.n	8002590 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002590:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002594:	4618      	mov	r0, r3
 8002596:	3738      	adds	r7, #56	; 0x38
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	431bde83 	.word	0x431bde83
 80025a4:	20000704 	.word	0x20000704
 80025a8:	40000800 	.word	0x40000800
 80025ac:	20000038 	.word	0x20000038

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <NMI_Handler+0x4>

080025b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ba:	e7fe      	b.n	80025ba <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <MemManage_Handler+0x4>

080025c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <BusFault_Handler+0x4>

080025c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <UsageFault_Handler+0x4>

080025ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <TIM4_IRQHandler+0x10>)
 80025e2:	f003 fa85 	bl	8005af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000704 	.word	0x20000704

080025f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <OTG_FS_IRQHandler+0x10>)
 80025f6:	f000 fd34 	bl	8003062 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20004b08 	.word	0x20004b08

08002604 <_read>:
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e00a      	b.n	800262c <_read+0x28>
 8002616:	f3af 8000 	nop.w
 800261a:	4601      	mov	r1, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	60ba      	str	r2, [r7, #8]
 8002622:	b2ca      	uxtb	r2, r1
 8002624:	701a      	strb	r2, [r3, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3301      	adds	r3, #1
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	dbf0      	blt.n	8002616 <_read+0x12>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <_write>:
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e009      	b.n	8002664 <_write+0x26>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	60ba      	str	r2, [r7, #8]
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f3af 8000 	nop.w
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3301      	adds	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	429a      	cmp	r2, r3
 800266a:	dbf1      	blt.n	8002650 <_write+0x12>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_close>:
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <_fstat>:
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	2300      	movs	r3, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <_isatty>:
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	2301      	movs	r3, #1
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_lseek>:
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	2300      	movs	r3, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <_sbrk>:
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	4a14      	ldr	r2, [pc, #80]	; (800273c <_sbrk+0x5c>)
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <_sbrk+0x60>)
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <_sbrk+0x64>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <_sbrk+0x22>
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <_sbrk+0x64>)
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <_sbrk+0x68>)
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <_sbrk+0x64>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4413      	add	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	429a      	cmp	r2, r3
 800270e:	d207      	bcs.n	8002720 <_sbrk+0x40>
 8002710:	f009 fc30 	bl	800bf74 <__errno>
 8002714:	4603      	mov	r3, r0
 8002716:	220c      	movs	r2, #12
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f04f 33ff 	mov.w	r3, #4294967295
 800271e:	e009      	b.n	8002734 <_sbrk+0x54>
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <_sbrk+0x64>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	4a05      	ldr	r2, [pc, #20]	; (8002744 <_sbrk+0x64>)
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20018000 	.word	0x20018000
 8002740:	00000400 	.word	0x00000400
 8002744:	2000074c 	.word	0x2000074c
 8002748:	20005380 	.word	0x20005380

0800274c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <SystemInit+0x20>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	4a05      	ldr	r2, [pc, #20]	; (800276c <SystemInit+0x20>)
 8002758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800275c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <Reset_Handler>:
 8002770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a8 <LoopFillZerobss+0x12>
 8002774:	480d      	ldr	r0, [pc, #52]	; (80027ac <LoopFillZerobss+0x16>)
 8002776:	490e      	ldr	r1, [pc, #56]	; (80027b0 <LoopFillZerobss+0x1a>)
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <LoopFillZerobss+0x1e>)
 800277a:	2300      	movs	r3, #0
 800277c:	e002      	b.n	8002784 <LoopCopyDataInit>

0800277e <CopyDataInit>:
 800277e:	58d4      	ldr	r4, [r2, r3]
 8002780:	50c4      	str	r4, [r0, r3]
 8002782:	3304      	adds	r3, #4

08002784 <LoopCopyDataInit>:
 8002784:	18c4      	adds	r4, r0, r3
 8002786:	428c      	cmp	r4, r1
 8002788:	d3f9      	bcc.n	800277e <CopyDataInit>
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <LoopFillZerobss+0x22>)
 800278c:	4c0b      	ldr	r4, [pc, #44]	; (80027bc <LoopFillZerobss+0x26>)
 800278e:	2300      	movs	r3, #0
 8002790:	e001      	b.n	8002796 <LoopFillZerobss>

08002792 <FillZerobss>:
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	3204      	adds	r2, #4

08002796 <LoopFillZerobss>:
 8002796:	42a2      	cmp	r2, r4
 8002798:	d3fb      	bcc.n	8002792 <FillZerobss>
 800279a:	f7ff ffd7 	bl	800274c <SystemInit>
 800279e:	f009 fbef 	bl	800bf80 <__libc_init_array>
 80027a2:	f7fe fe99 	bl	80014d8 <main>
 80027a6:	4770      	bx	lr
 80027a8:	20018000 	.word	0x20018000
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000190 	.word	0x20000190
 80027b4:	0800d0b0 	.word	0x0800d0b0
 80027b8:	20000190 	.word	0x20000190
 80027bc:	20005380 	.word	0x20005380

080027c0 <ADC_IRQHandler>:
 80027c0:	e7fe      	b.n	80027c0 <ADC_IRQHandler>
	...

080027c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <HAL_Init+0x40>)
 80027ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_Init+0x40>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <HAL_Init+0x40>)
 80027da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_Init+0x40>)
 80027e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ec:	2003      	movs	r0, #3
 80027ee:	f000 f8fc 	bl	80029ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f2:	200f      	movs	r0, #15
 80027f4:	f7ff fe60 	bl	80024b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f8:	f7ff fd6e 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023c00 	.word	0x40023c00

08002808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x20>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_IncTick+0x24>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4413      	add	r3, r2
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <HAL_IncTick+0x24>)
 800281a:	6013      	str	r3, [r2, #0]
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	2000003c 	.word	0x2000003c
 800282c:	20000750 	.word	0x20000750

08002830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return uwTick;
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_GetTick+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000750 	.word	0x20000750

08002848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002850:	f7ff ffee 	bl	8002830 <HAL_GetTick>
 8002854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d005      	beq.n	800286e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_Delay+0x44>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800286e:	bf00      	nop
 8002870:	f7ff ffde 	bl	8002830 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d8f7      	bhi.n	8002870 <HAL_Delay+0x28>
  {
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	2000003c 	.word	0x2000003c

08002890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x44>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <__NVIC_GetPriorityGrouping+0x18>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 0307 	and.w	r3, r3, #7
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	2b00      	cmp	r3, #0
 8002904:	db0b      	blt.n	800291e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4907      	ldr	r1, [pc, #28]	; (800292c <__NVIC_EnableIRQ+0x38>)
 800290e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2001      	movs	r0, #1
 8002916:	fa00 f202 	lsl.w	r2, r0, r2
 800291a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100

08002930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	6039      	str	r1, [r7, #0]
 800293a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	db0a      	blt.n	800295a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	b2da      	uxtb	r2, r3
 8002948:	490c      	ldr	r1, [pc, #48]	; (800297c <__NVIC_SetPriority+0x4c>)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	0112      	lsls	r2, r2, #4
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	440b      	add	r3, r1
 8002954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002958:	e00a      	b.n	8002970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4908      	ldr	r1, [pc, #32]	; (8002980 <__NVIC_SetPriority+0x50>)
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	3b04      	subs	r3, #4
 8002968:	0112      	lsls	r2, r2, #4
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	440b      	add	r3, r1
 800296e:	761a      	strb	r2, [r3, #24]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f1c3 0307 	rsb	r3, r3, #7
 800299e:	2b04      	cmp	r3, #4
 80029a0:	bf28      	it	cs
 80029a2:	2304      	movcs	r3, #4
 80029a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d902      	bls.n	80029b4 <NVIC_EncodePriority+0x30>
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3b03      	subs	r3, #3
 80029b2:	e000      	b.n	80029b6 <NVIC_EncodePriority+0x32>
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43da      	mvns	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	401a      	ands	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	4313      	orrs	r3, r2
         );
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3724      	adds	r7, #36	; 0x24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ff4c 	bl	8002890 <__NVIC_SetPriorityGrouping>
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a12:	f7ff ff61 	bl	80028d8 <__NVIC_GetPriorityGrouping>
 8002a16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	6978      	ldr	r0, [r7, #20]
 8002a1e:	f7ff ffb1 	bl	8002984 <NVIC_EncodePriority>
 8002a22:	4602      	mov	r2, r0
 8002a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ff80 	bl	8002930 <__NVIC_SetPriority>
}
 8002a30:	bf00      	nop
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff ff54 	bl	80028f4 <__NVIC_EnableIRQ>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	e159      	b.n	8002d24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	f040 8148 	bne.w	8002d1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d005      	beq.n	8002aa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d130      	bne.n	8002b08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0201 	and.w	r2, r3, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d017      	beq.n	8002b44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d123      	bne.n	8002b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	08da      	lsrs	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3208      	adds	r2, #8
 8002b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	220f      	movs	r2, #15
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	69b9      	ldr	r1, [r7, #24]
 8002b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 0203 	and.w	r2, r3, #3
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a2 	beq.w	8002d1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a56      	ldr	r2, [pc, #344]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <HAL_GPIO_Init+0x2e8>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf6:	4a52      	ldr	r2, [pc, #328]	; (8002d40 <HAL_GPIO_Init+0x2ec>)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	220f      	movs	r2, #15
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4013      	ands	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <HAL_GPIO_Init+0x2f0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d019      	beq.n	8002c56 <HAL_GPIO_Init+0x202>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_GPIO_Init+0x2f4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <HAL_GPIO_Init+0x1fe>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <HAL_GPIO_Init+0x2f8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d00d      	beq.n	8002c4e <HAL_GPIO_Init+0x1fa>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a46      	ldr	r2, [pc, #280]	; (8002d50 <HAL_GPIO_Init+0x2fc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <HAL_GPIO_Init+0x1f6>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a45      	ldr	r2, [pc, #276]	; (8002d54 <HAL_GPIO_Init+0x300>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d101      	bne.n	8002c46 <HAL_GPIO_Init+0x1f2>
 8002c42:	2304      	movs	r3, #4
 8002c44:	e008      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c46:	2307      	movs	r3, #7
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x204>
 8002c56:	2300      	movs	r3, #0
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f002 0203 	and.w	r2, r2, #3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c68:	4935      	ldr	r1, [pc, #212]	; (8002d40 <HAL_GPIO_Init+0x2ec>)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c76:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9a:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca0:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc4:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cee:	4a1a      	ldr	r2, [pc, #104]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d18:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	f67f aea2 	bls.w	8002a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020c00 	.word	0x40020c00
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40013c00 	.word	0x40013c00

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	619a      	str	r2, [r3, #24]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002da0:	887a      	ldrh	r2, [r7, #2]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4013      	ands	r3, r2
 8002da6:	041a      	lsls	r2, r3, #16
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	400b      	ands	r3, r1
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	619a      	str	r2, [r3, #24]
}
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dc4:	b08f      	sub	sp, #60	; 0x3c
 8002dc6:	af0a      	add	r7, sp, #40	; 0x28
 8002dc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e10f      	b.n	8002ff4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f008 fc0c 	bl	800b60c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f003 fc79 	bl	800670a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	687e      	ldr	r6, [r7, #4]
 8002e20:	466d      	mov	r5, sp
 8002e22:	f106 0410 	add.w	r4, r6, #16
 8002e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e36:	1d33      	adds	r3, r6, #4
 8002e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3a:	6838      	ldr	r0, [r7, #0]
 8002e3c:	f003 fb50 	bl	80064e0 <USB_CoreInit>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0d0      	b.n	8002ff4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 fc67 	bl	800672c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	e04a      	b.n	8002efa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	333d      	adds	r3, #61	; 0x3d
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	333c      	adds	r3, #60	; 0x3c
 8002e88:	7bfa      	ldrb	r2, [r7, #15]
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	b298      	uxth	r0, r3
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3344      	adds	r3, #68	; 0x44
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3340      	adds	r3, #64	; 0x40
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3348      	adds	r3, #72	; 0x48
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334c      	adds	r3, #76	; 0x4c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3354      	adds	r3, #84	; 0x54
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d3af      	bcc.n	8002e64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	e044      	b.n	8002f94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f20:	7bfa      	ldrb	r2, [r7, #15]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f4c:	7bfa      	ldrb	r2, [r7, #15]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	3301      	adds	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	7bfa      	ldrb	r2, [r7, #15]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3b5      	bcc.n	8002f0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	687e      	ldr	r6, [r7, #4]
 8002fa6:	466d      	mov	r5, sp
 8002fa8:	f106 0410 	add.w	r4, r6, #16
 8002fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fb8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fbc:	1d33      	adds	r3, r6, #4
 8002fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc0:	6838      	ldr	r0, [r7, #0]
 8002fc2:	f003 fbff 	bl	80067c4 <USB_DevInit>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e00d      	b.n	8002ff4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fd4e 	bl	8007a8e <USB_DevDisconnect>

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ffc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_PCD_Start+0x1c>
 8003014:	2302      	movs	r3, #2
 8003016:	e020      	b.n	800305a <HAL_PCD_Start+0x5e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	2b01      	cmp	r3, #1
 8003026:	d109      	bne.n	800303c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800302c:	2b01      	cmp	r3, #1
 800302e:	d005      	beq.n	800303c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fb51 	bl	80066e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f004 fcfe 	bl	8007a4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003062:	b590      	push	{r4, r7, lr}
 8003064:	b08d      	sub	sp, #52	; 0x34
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f004 fdbc 	bl	8007bf6 <USB_GetMode>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 848a 	bne.w	800399a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fd20 	bl	8007ad0 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8480 	beq.w	8003998 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 fd0d 	bl	8007ad0 <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d107      	bne.n	80030d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f002 0202 	and.w	r2, r2, #2
 80030ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 fcfb 	bl	8007ad0 <USB_ReadInterrupts>
 80030da:	4603      	mov	r3, r0
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b10      	cmp	r3, #16
 80030e2:	d161      	bne.n	80031a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0210 	bic.w	r2, r2, #16
 80030f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	3304      	adds	r3, #4
 8003112:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	0c5b      	lsrs	r3, r3, #17
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	2b02      	cmp	r3, #2
 800311e:	d124      	bne.n	800316a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d035      	beq.n	8003198 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313a:	b29b      	uxth	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	6a38      	ldr	r0, [r7, #32]
 8003140:	f004 fb32 	bl	80077a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003150:	441a      	add	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	6a1a      	ldr	r2, [r3, #32]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003162:	441a      	add	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	621a      	str	r2, [r3, #32]
 8003168:	e016      	b.n	8003198 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	0c5b      	lsrs	r3, r3, #17
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	2b06      	cmp	r3, #6
 8003174:	d110      	bne.n	8003198 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800317c:	2208      	movs	r2, #8
 800317e:	4619      	mov	r1, r3
 8003180:	6a38      	ldr	r0, [r7, #32]
 8003182:	f004 fb11 	bl	80077a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003192:	441a      	add	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0210 	orr.w	r2, r2, #16
 80031a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fc8f 	bl	8007ad0 <USB_ReadInterrupts>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031bc:	f040 80a7 	bne.w	800330e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f004 fc94 	bl	8007af6 <USB_ReadDevAllOutEpInterrupt>
 80031ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031d0:	e099      	b.n	8003306 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 808e 	beq.w	80032fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	4611      	mov	r1, r2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 fcb8 	bl	8007b5e <USB_ReadDevOutEPInterrupt>
 80031ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	461a      	mov	r2, r3
 8003208:	2301      	movs	r3, #1
 800320a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800320c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fec2 	bl	8003f98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322a:	461a      	mov	r2, r3
 800322c:	2308      	movs	r3, #8
 800322e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 ff98 	bl	8004168 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	2310      	movs	r3, #16
 8003252:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d030      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b80      	cmp	r3, #128	; 0x80
 8003268:	d109      	bne.n	800327e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800327c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	4413      	add	r3, r2
 8003290:	3304      	adds	r3, #4
 8003292:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	78db      	ldrb	r3, [r3, #3]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d108      	bne.n	80032ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2200      	movs	r2, #0
 80032a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f008 fab5 	bl	800b818 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	2302      	movs	r3, #2
 80032be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2320      	movs	r3, #32
 80032da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	461a      	mov	r2, r3
 80032f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	3301      	adds	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f af62 	bne.w	80031d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f004 fbdc 	bl	8007ad0 <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003322:	f040 80db 	bne.w	80034dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fbfd 	bl	8007b2a <USB_ReadDevAllInEpInterrupt>
 8003330:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003336:	e0cd      	b.n	80034d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80c2 	beq.w	80034c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f004 fc23 	bl	8007b9a <USB_ReadDevInEPInterrupt>
 8003354:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d057      	beq.n	8003410 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	2201      	movs	r2, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	69f9      	ldr	r1, [r7, #28]
 800337c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003380:	4013      	ands	r3, r2
 8003382:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003390:	461a      	mov	r2, r3
 8003392:	2301      	movs	r3, #1
 8003394:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d132      	bne.n	8003404 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334c      	adds	r3, #76	; 0x4c
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4403      	add	r3, r0
 80033be:	3348      	adds	r3, #72	; 0x48
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4419      	add	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4403      	add	r3, r0
 80033d2:	334c      	adds	r3, #76	; 0x4c
 80033d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d113      	bne.n	8003404 <HAL_PCD_IRQHandler+0x3a2>
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3354      	adds	r3, #84	; 0x54
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d108      	bne.n	8003404 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033fc:	461a      	mov	r2, r3
 80033fe:	2101      	movs	r1, #1
 8003400:	f004 fc2a 	bl	8007c58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	b2db      	uxtb	r3, r3
 8003408:	4619      	mov	r1, r3
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f008 f97f 	bl	800b70e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003426:	461a      	mov	r2, r3
 8003428:	2308      	movs	r3, #8
 800342a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003442:	461a      	mov	r2, r3
 8003444:	2310      	movs	r3, #16
 8003446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345e:	461a      	mov	r2, r3
 8003460:	2340      	movs	r3, #64	; 0x40
 8003462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d023      	beq.n	80034b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800346e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003470:	6a38      	ldr	r0, [r7, #32]
 8003472:	f003 fb0b 	bl	8006a8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	3338      	adds	r3, #56	; 0x38
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4413      	add	r3, r2
 8003486:	3304      	adds	r3, #4
 8003488:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	78db      	ldrb	r3, [r3, #3]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d108      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	b2db      	uxtb	r3, r3
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f008 f9cc 	bl	800b83c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b0:	461a      	mov	r2, r3
 80034b2:	2302      	movs	r3, #2
 80034b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fcdb 	bl	8003e7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	3301      	adds	r3, #1
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f47f af2e 	bne.w	8003338 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f004 faf5 	bl	8007ad0 <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f0:	d122      	bne.n	8003538 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003500:	f023 0301 	bic.w	r3, r3, #1
 8003504:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800350c:	2b01      	cmp	r3, #1
 800350e:	d108      	bne.n	8003522 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003518:	2100      	movs	r1, #0
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fec2 	bl	80042a4 <HAL_PCDEx_LPM_Callback>
 8003520:	e002      	b.n	8003528 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f008 f96a 	bl	800b7fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f004 fac7 	bl	8007ad0 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354c:	d112      	bne.n	8003574 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f008 f926 	bl	800b7b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003572:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f004 faa9 	bl	8007ad0 <USB_ReadInterrupts>
 800357e:	4603      	mov	r3, r0
 8003580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003588:	f040 80b7 	bne.w	80036fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2110      	movs	r1, #16
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 fa70 	bl	8006a8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ac:	2300      	movs	r3, #0
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035b0:	e046      	b.n	8003640 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d6:	0151      	lsls	r1, r2, #5
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	440a      	add	r2, r1
 80035dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f2:	461a      	mov	r2, r3
 80035f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360a:	0151      	lsls	r1, r2, #5
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	440a      	add	r2, r1
 8003610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003614:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003618:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362a:	0151      	lsls	r1, r2, #5
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	440a      	add	r2, r1
 8003630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003634:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003638:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	3301      	adds	r3, #1
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003646:	429a      	cmp	r2, r3
 8003648:	d3b3      	bcc.n	80035b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003658:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800365c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800366c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003676:	f043 030b 	orr.w	r3, r3, #11
 800367a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368c:	f043 030b 	orr.w	r3, r3, #11
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	e015      	b.n	80036c0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ba:	f043 030b 	orr.w	r3, r3, #11
 80036be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036e4:	461a      	mov	r2, r3
 80036e6:	f004 fab7 	bl	8007c58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f004 f9e6 	bl	8007ad0 <USB_ReadInterrupts>
 8003704:	4603      	mov	r3, r0
 8003706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800370e:	d124      	bne.n	800375a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f004 fa7c 	bl	8007c12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f003 fa31 	bl	8006b86 <USB_GetDevSpeed>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681c      	ldr	r4, [r3, #0]
 8003730:	f001 fa28 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8003734:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	4620      	mov	r0, r4
 8003740:	f002 ff30 	bl	80065a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f008 f80a 	bl	800b75e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003758:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f004 f9b6 	bl	8007ad0 <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b08      	cmp	r3, #8
 800376c:	d10a      	bne.n	8003784 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f007 ffe7 	bl	800b742 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f002 0208 	and.w	r2, r2, #8
 8003782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f004 f9a1 	bl	8007ad0 <USB_ReadInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003794:	2b80      	cmp	r3, #128	; 0x80
 8003796:	d122      	bne.n	80037de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037a4:	2301      	movs	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	e014      	b.n	80037d4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fb27 	bl	8003e1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	3301      	adds	r3, #1
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3e5      	bcc.n	80037aa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f004 f974 	bl	8007ad0 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f2:	d13b      	bne.n	800386c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f4:	2301      	movs	r3, #1
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
 80037f8:	e02b      	b.n	8003852 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380e:	4613      	mov	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3340      	adds	r3, #64	; 0x40
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d115      	bne.n	800384c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003820:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	da12      	bge.n	800384c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	333f      	adds	r3, #63	; 0x3f
 8003836:	2201      	movs	r2, #1
 8003838:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fae8 	bl	8003e1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	3301      	adds	r3, #1
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003858:	429a      	cmp	r2, r3
 800385a:	d3ce      	bcc.n	80037fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800386a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f004 f92d 	bl	8007ad0 <USB_ReadInterrupts>
 8003876:	4603      	mov	r3, r0
 8003878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003880:	d155      	bne.n	800392e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003882:	2301      	movs	r3, #1
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	e045      	b.n	8003914 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d12e      	bne.n	800390e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	da2b      	bge.n	800390e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d121      	bne.n	800390e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390a:	6053      	str	r3, [r2, #4]
            break;
 800390c:	e007      	b.n	800391e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	3301      	adds	r3, #1
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391a:	429a      	cmp	r2, r3
 800391c:	d3b4      	bcc.n	8003888 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800392c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 f8cc 	bl	8007ad0 <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800393e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003942:	d10a      	bne.n	800395a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f007 ff8b 	bl	800b860 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f004 f8b6 	bl	8007ad0 <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d115      	bne.n	800399a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f007 ff7b 	bl	800b87c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	e000      	b.n	800399a <HAL_PCD_IRQHandler+0x938>
      return;
 8003998:	bf00      	nop
    }
  }
}
 800399a:	3734      	adds	r7, #52	; 0x34
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}

080039a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_SetAddress+0x1a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e013      	b.n	80039e2 <HAL_PCD_SetAddress+0x42>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f004 f814 	bl	8007a00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	4608      	mov	r0, r1
 80039f4:	4611      	mov	r1, r2
 80039f6:	461a      	mov	r2, r3
 80039f8:	4603      	mov	r3, r0
 80039fa:	70fb      	strb	r3, [r7, #3]
 80039fc:	460b      	mov	r3, r1
 80039fe:	803b      	strh	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0f      	bge.n	8003a30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	3338      	adds	r3, #56	; 0x38
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
 8003a2e:	e00f      	b.n	8003a50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	3304      	adds	r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a5c:	883a      	ldrh	r2, [r7, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	78ba      	ldrb	r2, [r7, #2]
 8003a66:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a7a:	78bb      	ldrb	r3, [r7, #2]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d102      	bne.n	8003a86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_PCD_EP_Open+0xaa>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e00e      	b.n	8003ab2 <HAL_PCD_EP_Open+0xc8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68f9      	ldr	r1, [r7, #12]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 f894 	bl	8006bd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da0f      	bge.n	8003aee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3338      	adds	r3, #56	; 0x38
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	705a      	strb	r2, [r3, #1]
 8003aec:	e00f      	b.n	8003b0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 020f 	and.w	r2, r3, #15
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_PCD_EP_Close+0x6e>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e00e      	b.n	8003b46 <HAL_PCD_EP_Close+0x8c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68f9      	ldr	r1, [r7, #12]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 f8d2 	bl	8006ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	f003 020f 	and.w	r2, r3, #15
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	3304      	adds	r3, #4
 8003b76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b90:	7afb      	ldrb	r3, [r7, #11]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6979      	ldr	r1, [r7, #20]
 8003bc2:	f003 fbb1 	bl	8007328 <USB_EP0StartXfer>
 8003bc6:	e008      	b.n	8003bda <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6979      	ldr	r1, [r7, #20]
 8003bd6:	f003 f95f 	bl	8006e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	460b      	mov	r3, r1
 8003c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	7afb      	ldrb	r3, [r7, #11]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3338      	adds	r3, #56	; 0x38
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2201      	movs	r2, #1
 8003c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c54:	7afb      	ldrb	r3, [r7, #11]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c6e:	7afb      	ldrb	r3, [r7, #11]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	6979      	ldr	r1, [r7, #20]
 8003c86:	f003 fb4f 	bl	8007328 <USB_EP0StartXfer>
 8003c8a:	e008      	b.n	8003c9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	6979      	ldr	r1, [r7, #20]
 8003c9a:	f003 f8fd 	bl	8006e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d901      	bls.n	8003cc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e050      	b.n	8003d68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da0f      	bge.n	8003cee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	3338      	adds	r3, #56	; 0x38
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	705a      	strb	r2, [r3, #1]
 8003cec:	e00d      	b.n	8003d0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_PCD_EP_SetStall+0x82>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e01e      	b.n	8003d68 <HAL_PCD_EP_SetStall+0xc0>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f003 fd8d 	bl	8007858 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	b2d9      	uxtb	r1, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f003 ff7d 	bl	8007c58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d901      	bls.n	8003d8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e042      	b.n	8003e14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0f      	bge.n	8003db6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3338      	adds	r3, #56	; 0x38
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	705a      	strb	r2, [r3, #1]
 8003db4:	e00f      	b.n	8003dd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	f003 020f 	and.w	r2, r3, #15
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_PCD_EP_ClrStall+0x86>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e00e      	b.n	8003e14 <HAL_PCD_EP_ClrStall+0xa4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 fd95 	bl	8007934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da0c      	bge.n	8003e4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3338      	adds	r3, #56	; 0x38
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	3304      	adds	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e00c      	b.n	8003e64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 020f 	and.w	r2, r3, #15
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	3304      	adds	r3, #4
 8003e62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 fbb4 	bl	80075d8 <USB_EPStopXfer>
 8003e70:	4603      	mov	r3, r0
 8003e72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e74:	7afb      	ldrb	r3, [r7, #11]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b08a      	sub	sp, #40	; 0x28
 8003e82:	af02      	add	r7, sp, #8
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	3338      	adds	r3, #56	; 0x38
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1a      	ldr	r2, [r3, #32]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d901      	bls.n	8003eb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e06c      	b.n	8003f90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d902      	bls.n	8003ed2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3303      	adds	r3, #3
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eda:	e02b      	b.n	8003f34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d902      	bls.n	8003ef8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	3303      	adds	r3, #3
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6919      	ldr	r1, [r3, #16]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4603      	mov	r3, r0
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f003 fc08 	bl	800772c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a1a      	ldr	r2, [r3, #32]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d809      	bhi.n	8003f5e <PCD_WriteEmptyTxFifo+0xe0>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d203      	bcs.n	8003f5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1be      	bne.n	8003edc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d811      	bhi.n	8003f8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2201      	movs	r2, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	6939      	ldr	r1, [r7, #16]
 8003f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	333c      	adds	r3, #60	; 0x3c
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d17b      	bne.n	80040c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d015      	beq.n	8004004 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	4a61      	ldr	r2, [pc, #388]	; (8004160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f240 80b9 	bls.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80b3 	beq.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004000:	6093      	str	r3, [r2, #8]
 8004002:	e0a7      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	2320      	movs	r3, #32
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	e098      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 8093 	bne.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4a4b      	ldr	r2, [pc, #300]	; (8004160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d90f      	bls.n	8004056 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	461a      	mov	r2, r3
 800404e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004052:	6093      	str	r3, [r2, #8]
 8004054:	e07e      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	440b      	add	r3, r1
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d114      	bne.n	80040b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040a0:	461a      	mov	r2, r3
 80040a2:	2101      	movs	r1, #1
 80040a4:	f003 fdd8 	bl	8007c58 <USB_EP0_OutStart>
 80040a8:	e006      	b.n	80040b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f007 fb0a 	bl	800b6d8 <HAL_PCD_DataOutStageCallback>
 80040c4:	e046      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	4a26      	ldr	r2, [pc, #152]	; (8004164 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d124      	bne.n	8004118 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ea:	6093      	str	r3, [r2, #8]
 80040ec:	e032      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004104:	461a      	mov	r2, r3
 8004106:	2320      	movs	r3, #32
 8004108:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f007 fae1 	bl	800b6d8 <HAL_PCD_DataOutStageCallback>
 8004116:	e01d      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d114      	bne.n	8004148 <PCD_EP_OutXfrComplete_int+0x1b0>
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004140:	461a      	mov	r2, r3
 8004142:	2100      	movs	r1, #0
 8004144:	f003 fd88 	bl	8007c58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f007 fac2 	bl	800b6d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	4f54300a 	.word	0x4f54300a
 8004164:	4f54310a 	.word	0x4f54310a

08004168 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	333c      	adds	r3, #60	; 0x3c
 8004180:	3304      	adds	r3, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a15      	ldr	r2, [pc, #84]	; (80041f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d90e      	bls.n	80041bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	461a      	mov	r2, r3
 80041b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f007 fa79 	bl	800b6b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d90c      	bls.n	80041e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d108      	bne.n	80041e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041dc:	461a      	mov	r2, r3
 80041de:	2101      	movs	r1, #1
 80041e0:	f003 fd3a 	bl	8007c58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	4f54300a 	.word	0x4f54300a

080041f4 <HAL_PCDEx_SetTxFiFo>:
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
 8004200:	4613      	mov	r3, r2
 8004202:	803b      	strh	r3, [r7, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <HAL_PCDEx_SetTxFiFo+0x2e>
 8004212:	883b      	ldrh	r3, [r7, #0]
 8004214:	0419      	lsls	r1, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	430a      	orrs	r2, r1
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
 8004220:	e028      	b.n	8004274 <HAL_PCDEx_SetTxFiFo+0x80>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4413      	add	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	e00d      	b.n	8004252 <HAL_PCDEx_SetTxFiFo+0x5e>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	3340      	adds	r3, #64	; 0x40
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4413      	add	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	3b01      	subs	r3, #1
 8004258:	429a      	cmp	r2, r3
 800425a:	d3ec      	bcc.n	8004236 <HAL_PCDEx_SetTxFiFo+0x42>
 800425c:	883b      	ldrh	r3, [r7, #0]
 800425e:	0418      	lsls	r0, r3, #16
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	3b01      	subs	r3, #1
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	4302      	orrs	r2, r0
 800426c:	3340      	adds	r3, #64	; 0x40
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	2300      	movs	r3, #0
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_PCDEx_SetRxFiFo>:
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	807b      	strh	r3, [r7, #2]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	887a      	ldrh	r2, [r7, #2]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
 8004296:	2300      	movs	r3, #0
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_PCDEx_LPM_Callback>:
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	70fb      	strb	r3, [r7, #3]
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_RCC_OscConfig>:
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e267      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d075      	beq.n	80043c6 <HAL_RCC_OscConfig+0x10a>
 80042da:	4b88      	ldr	r3, [pc, #544]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d00c      	beq.n	8004300 <HAL_RCC_OscConfig+0x44>
 80042e6:	4b85      	ldr	r3, [pc, #532]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d112      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
 80042f2:	4b82      	ldr	r3, [pc, #520]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fe:	d10b      	bne.n	8004318 <HAL_RCC_OscConfig+0x5c>
 8004300:	4b7e      	ldr	r3, [pc, #504]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05b      	beq.n	80043c4 <HAL_RCC_OscConfig+0x108>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d157      	bne.n	80043c4 <HAL_RCC_OscConfig+0x108>
 8004314:	2301      	movs	r3, #1
 8004316:	e242      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004320:	d106      	bne.n	8004330 <HAL_RCC_OscConfig+0x74>
 8004322:	4b76      	ldr	r3, [pc, #472]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e01d      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6f      	ldr	r2, [pc, #444]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a6c      	ldr	r2, [pc, #432]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0xb0>
 8004354:	4b69      	ldr	r3, [pc, #420]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a68      	ldr	r2, [pc, #416]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	4b66      	ldr	r3, [pc, #408]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a65      	ldr	r2, [pc, #404]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCC_OscConfig+0xe0>
 8004374:	f7fe fa5c 	bl	8002830 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0xd2>
 800437c:	f7fe fa58 	bl	8002830 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xd2>
 800438a:	2303      	movs	r3, #3
 800438c:	e207      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800438e:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0xc0>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
 800439c:	f7fe fa48 	bl	8002830 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xfa>
 80043a4:	f7fe fa44 	bl	8002830 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xfa>
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1f3      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80043b6:	4b51      	ldr	r3, [pc, #324]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0xe8>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x10a>
 80043c4:	bf00      	nop
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_OscConfig+0x1de>
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_RCC_OscConfig+0x13a>
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 030c 	and.w	r3, r3, #12
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11c      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
 80043ea:	4b44      	ldr	r3, [pc, #272]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d116      	bne.n	8004424 <HAL_RCC_OscConfig+0x168>
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d001      	beq.n	800440e <HAL_RCC_OscConfig+0x152>
 800440a:	2301      	movs	r3, #1
 800440c:	e1c7      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4937      	ldr	r1, [pc, #220]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
 8004422:	e03a      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d020      	beq.n	800446e <HAL_RCC_OscConfig+0x1b2>
 800442c:	4b34      	ldr	r3, [pc, #208]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 800442e:	2201      	movs	r2, #1
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	f7fe f9fd 	bl	8002830 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x190>
 800443a:	f7fe f9f9 	bl	8002830 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x190>
 8004448:	2303      	movs	r3, #3
 800444a:	e1a8      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800444c:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x17e>
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004468:	4313      	orrs	r3, r2
 800446a:	600b      	str	r3, [r1, #0]
 800446c:	e015      	b.n	800449a <HAL_RCC_OscConfig+0x1de>
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_OscConfig+0x244>)
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f7fe f9dc 	bl	8002830 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x1d2>
 800447c:	f7fe f9d8 	bl	8002830 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x1d2>
 800448a:	2303      	movs	r3, #3
 800448c:	e187      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x1c0>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d036      	beq.n	8004514 <HAL_RCC_OscConfig+0x258>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d016      	beq.n	80044dc <HAL_RCC_OscConfig+0x220>
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f7fe f9bc 	bl	8002830 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x212>
 80044bc:	f7fe f9b8 	bl	8002830 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x212>
 80044ca:	2303      	movs	r3, #3
 80044cc:	e167      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x240>)
 80044d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x200>
 80044da:	e01b      	b.n	8004514 <HAL_RCC_OscConfig+0x258>
 80044dc:	4b09      	ldr	r3, [pc, #36]	; (8004504 <HAL_RCC_OscConfig+0x248>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	f7fe f9a5 	bl	8002830 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]
 80044e8:	e00e      	b.n	8004508 <HAL_RCC_OscConfig+0x24c>
 80044ea:	f7fe f9a1 	bl	8002830 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d907      	bls.n	8004508 <HAL_RCC_OscConfig+0x24c>
 80044f8:	2303      	movs	r3, #3
 80044fa:	e150      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80044fc:	40023800 	.word	0x40023800
 8004500:	42470000 	.word	0x42470000
 8004504:	42470e80 	.word	0x42470e80
 8004508:	4b88      	ldr	r3, [pc, #544]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800450a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ea      	bne.n	80044ea <HAL_RCC_OscConfig+0x22e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8097 	beq.w	8004650 <HAL_RCC_OscConfig+0x394>
 8004522:	2300      	movs	r3, #0
 8004524:	75fb      	strb	r3, [r7, #23]
 8004526:	4b81      	ldr	r3, [pc, #516]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10f      	bne.n	8004552 <HAL_RCC_OscConfig+0x296>
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	4b7d      	ldr	r3, [pc, #500]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	4a7c      	ldr	r2, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6413      	str	r3, [r2, #64]	; 0x40
 8004542:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2301      	movs	r3, #1
 8004550:	75fb      	strb	r3, [r7, #23]
 8004552:	4b77      	ldr	r3, [pc, #476]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d118      	bne.n	8004590 <HAL_RCC_OscConfig+0x2d4>
 800455e:	4b74      	ldr	r3, [pc, #464]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a73      	ldr	r2, [pc, #460]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	f7fe f961 	bl	8002830 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x2c8>
 8004572:	f7fe f95d 	bl	8002830 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x2c8>
 8004580:	2303      	movs	r3, #3
 8004582:	e10c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 8004584:	4b6a      	ldr	r3, [pc, #424]	; (8004730 <HAL_RCC_OscConfig+0x474>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x2b6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d106      	bne.n	80045a6 <HAL_RCC_OscConfig+0x2ea>
 8004598:	4b64      	ldr	r3, [pc, #400]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a63      	ldr	r2, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800459e:	f043 0301 	orr.w	r3, r3, #1
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	e01c      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d10c      	bne.n	80045c8 <HAL_RCC_OscConfig+0x30c>
 80045ae:	4b5f      	ldr	r3, [pc, #380]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	4a5e      	ldr	r2, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ba:	4b5c      	ldr	r3, [pc, #368]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a5b      	ldr	r2, [pc, #364]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	e00b      	b.n	80045e0 <HAL_RCC_OscConfig+0x324>
 80045c8:	4b58      	ldr	r3, [pc, #352]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	6713      	str	r3, [r2, #112]	; 0x70
 80045d4:	4b55      	ldr	r3, [pc, #340]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a54      	ldr	r2, [pc, #336]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80045da:	f023 0304 	bic.w	r3, r3, #4
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d015      	beq.n	8004614 <HAL_RCC_OscConfig+0x358>
 80045e8:	f7fe f922 	bl	8002830 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x34a>
 80045f0:	f7fe f91e 	bl	8002830 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x34a>
 8004602:	2303      	movs	r3, #3
 8004604:	e0cb      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ee      	beq.n	80045f0 <HAL_RCC_OscConfig+0x334>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x382>
 8004614:	f7fe f90c 	bl	8002830 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x376>
 800461c:	f7fe f908 	bl	8002830 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x376>
 800462e:	2303      	movs	r3, #3
 8004630:	e0b5      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 8004632:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ee      	bne.n	800461c <HAL_RCC_OscConfig+0x360>
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <HAL_RCC_OscConfig+0x394>
 8004644:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80a1 	beq.w	800479c <HAL_RCC_OscConfig+0x4e0>
 800465a:	4b34      	ldr	r3, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x470>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	2b08      	cmp	r3, #8
 8004664:	d05c      	beq.n	8004720 <HAL_RCC_OscConfig+0x464>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d141      	bne.n	80046f2 <HAL_RCC_OscConfig+0x436>
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f7fe f8dc 	bl	8002830 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x3d2>
 800467c:	f7fe f8d8 	bl	8002830 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x3d2>
 800468a:	2303      	movs	r3, #3
 800468c:	e087      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800468e:	4b27      	ldr	r3, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x3c0>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	3b01      	subs	r3, #1
 80046b4:	041b      	lsls	r3, r3, #16
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	061b      	lsls	r3, r3, #24
 80046be:	491b      	ldr	r1, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f7fe f8b1 	bl	8002830 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x428>
 80046d2:	f7fe f8ad 	bl	8002830 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x428>
 80046e0:	2303      	movs	r3, #3
 80046e2:	e05c      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_OscConfig+0x470>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x416>
 80046f0:	e054      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_OscConfig+0x478>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	f7fe f89a 	bl	8002830 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x456>
 8004700:	f7fe f896 	bl	8002830 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x456>
 800470e:	2303      	movs	r3, #3
 8004710:	e045      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x470>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
 800471e:	e03d      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x47c>
 8004728:	2301      	movs	r3, #1
 800472a:	e038      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x4ec>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d028      	beq.n	8004798 <HAL_RCC_OscConfig+0x4dc>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	429a      	cmp	r2, r3
 8004752:	d121      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	429a      	cmp	r2, r3
 8004760:	d11a      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476e:	0192      	lsls	r2, r2, #6
 8004770:	4293      	cmp	r3, r2
 8004772:	d111      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	429a      	cmp	r2, r3
 8004786:	d107      	bne.n	8004798 <HAL_RCC_OscConfig+0x4dc>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	429a      	cmp	r2, r3
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x4e0>
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x4e2>
 800479c:	2300      	movs	r3, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800

080047ac <HAL_RCC_ClockConfig>:
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x14>
 80047bc:	2301      	movs	r3, #1
 80047be:	e0cc      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
 80047c0:	4b68      	ldr	r3, [pc, #416]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d90c      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
 80047ce:	4b65      	ldr	r3, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x3c>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x8a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x60>
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800480a:	6093      	str	r3, [r2, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x78>
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004822:	6093      	str	r3, [r2, #8]
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d044      	beq.n	80048cc <HAL_RCC_ClockConfig+0x120>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xae>
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d119      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d003      	beq.n	800486a <HAL_RCC_ClockConfig+0xbe>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xce>
 800486a:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
 8004876:	2301      	movs	r3, #1
 8004878:	e06f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xde>
 8004886:	2301      	movs	r3, #1
 8004888:	e067      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4934      	ldr	r1, [pc, #208]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]
 800489c:	f7fd ffc8 	bl	8002830 <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x10e>
 80048a4:	f7fd ffc4 	bl	8002830 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x10e>
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04f      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
 80048ba:	4b2b      	ldr	r3, [pc, #172]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xf8>
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d20c      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x148>
 80048da:	4b22      	ldr	r3, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x148>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1ae>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x166>
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x186>
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	4313      	orrs	r3, r2
 8004930:	608b      	str	r3, [r1, #8]
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1c8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fdb0 	bl	80024b8 <HAL_InitTick>
 8004958:	2300      	movs	r3, #0
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00
 8004968:	40023800 	.word	0x40023800
 800496c:	0800d054 	.word	0x0800d054
 8004970:	20000034 	.word	0x20000034
 8004974:	20000038 	.word	0x20000038

08004978 <HAL_RCC_GetSysClockFreq>:
 8004978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800497c:	b094      	sub	sp, #80	; 0x50
 800497e:	af00      	add	r7, sp, #0
 8004980:	2300      	movs	r3, #0
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	2300      	movs	r3, #0
 8004986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004988:	2300      	movs	r3, #0
 800498a:	643b      	str	r3, [r7, #64]	; 0x40
 800498c:	2300      	movs	r3, #0
 800498e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004990:	4b79      	ldr	r3, [pc, #484]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f003 030c 	and.w	r3, r3, #12
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00d      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 800499c:	2b08      	cmp	r3, #8
 800499e:	f200 80e1 	bhi.w	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80049aa:	e0db      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ac:	4b73      	ldr	r3, [pc, #460]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80049ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b0:	e0db      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
 80049b2:	4b73      	ldr	r3, [pc, #460]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b6:	e0d8      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
 80049b8:	4b6f      	ldr	r3, [pc, #444]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
 80049c2:	4b6d      	ldr	r3, [pc, #436]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d063      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x11e>
 80049ce:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	2200      	movs	r2, #0
 80049d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80049d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
 80049e2:	2300      	movs	r3, #0
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
 80049e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049ea:	4622      	mov	r2, r4
 80049ec:	462b      	mov	r3, r5
 80049ee:	f04f 0000 	mov.w	r0, #0
 80049f2:	f04f 0100 	mov.w	r1, #0
 80049f6:	0159      	lsls	r1, r3, #5
 80049f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049fc:	0150      	lsls	r0, r2, #5
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4621      	mov	r1, r4
 8004a04:	1a51      	subs	r1, r2, r1
 8004a06:	6139      	str	r1, [r7, #16]
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	018b      	lsls	r3, r1, #6
 8004a20:	4651      	mov	r1, sl
 8004a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a26:	4651      	mov	r1, sl
 8004a28:	018a      	lsls	r2, r1, #6
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a30:	4659      	mov	r1, fp
 8004a32:	eb63 0901 	sbc.w	r9, r3, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4a:	4690      	mov	r8, r2
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	eb18 0303 	adds.w	r3, r8, r3
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	462b      	mov	r3, r5
 8004a58:	eb49 0303 	adc.w	r3, r9, r3
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	024b      	lsls	r3, r1, #9
 8004a6e:	4621      	mov	r1, r4
 8004a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a74:	4621      	mov	r1, r4
 8004a76:	024a      	lsls	r2, r1, #9
 8004a78:	4610      	mov	r0, r2
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7e:	2200      	movs	r2, #0
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a88:	f7fc f878 	bl	8000b7c <__aeabi_uldivmod>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4613      	mov	r3, r2
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	e058      	b.n	8004b48 <HAL_RCC_GetSysClockFreq+0x1d0>
 8004a96:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	0159      	lsls	r1, r3, #5
 8004abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac2:	0150      	lsls	r0, r2, #5
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8004aec:	eb63 050b 	sbc.w	r5, r3, fp
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	00eb      	lsls	r3, r5, #3
 8004afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afe:	00e2      	lsls	r2, r4, #3
 8004b00:	4614      	mov	r4, r2
 8004b02:	461d      	mov	r5, r3
 8004b04:	4643      	mov	r3, r8
 8004b06:	18e3      	adds	r3, r4, r3
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	eb45 0303 	adc.w	r3, r5, r3
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b1e:	4629      	mov	r1, r5
 8004b20:	028b      	lsls	r3, r1, #10
 8004b22:	4621      	mov	r1, r4
 8004b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b28:	4621      	mov	r1, r4
 8004b2a:	028a      	lsls	r2, r1, #10
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	2200      	movs	r2, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	61fa      	str	r2, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	f7fc f81e 	bl	8000b7c <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4613      	mov	r3, r2
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	3301      	adds	r3, #1
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	643b      	str	r3, [r7, #64]	; 0x40
 8004b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b62:	e002      	b.n	8004b6a <HAL_RCC_GetSysClockFreq+0x1f2>
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b68:	bf00      	nop
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3750      	adds	r7, #80	; 0x50
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	00f42400 	.word	0x00f42400
 8004b80:	007a1200 	.word	0x007a1200

08004b84 <HAL_RCC_GetHCLKFreq>:
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	4b03      	ldr	r3, [pc, #12]	; (8004b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	20000034 	.word	0x20000034

08004b9c <HAL_RCC_GetPCLK1Freq>:
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	f7ff fff0 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	0a9b      	lsrs	r3, r3, #10
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	4903      	ldr	r1, [pc, #12]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb2:	5ccb      	ldrb	r3, [r1, r3]
 8004bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb8:	4618      	mov	r0, r3
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	0800d064 	.word	0x0800d064

08004bc4 <HAL_RCC_GetClockConfig>:
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0203 	and.w	r2, r3, #3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
 8004bf8:	4b09      	ldr	r3, [pc, #36]	; (8004c20 <HAL_RCC_GetClockConfig+0x5c>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	08db      	lsrs	r3, r3, #3
 8004bfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	611a      	str	r2, [r3, #16]
 8004c06:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <HAL_RCC_GetClockConfig+0x60>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0207 	and.w	r2, r3, #7
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
 8004c24:	40023c00 	.word	0x40023c00

08004c28 <HAL_SPI_Init>:
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_SPI_Init+0x12>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e07b      	b.n	8004d32 <HAL_SPI_Init+0x10a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d108      	bne.n	8004c54 <HAL_SPI_Init+0x2c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4a:	d009      	beq.n	8004c60 <HAL_SPI_Init+0x38>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	61da      	str	r2, [r3, #28]
 8004c52:	e005      	b.n	8004c60 <HAL_SPI_Init+0x38>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	615a      	str	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	629a      	str	r2, [r3, #40]	; 0x28
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_SPI_Init+0x58>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fd fb58 	bl	8002330 <HAL_SPI_MspInit>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	ea42 0103 	orr.w	r1, r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	f003 0104 	and.w	r1, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	f003 0210 	and.w	r2, r3, #16
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d20:	61da      	str	r2, [r3, #28]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	655a      	str	r2, [r3, #84]	; 0x54
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004d30:	2300      	movs	r3, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <HAL_SPI_Transmit>:
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b088      	sub	sp, #32
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	603b      	str	r3, [r7, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_SPI_Transmit+0x22>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e126      	b.n	8004faa <HAL_SPI_Transmit+0x270>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d64:	f7fd fd64 	bl	8002830 <HAL_GetTick>
 8004d68:	61b8      	str	r0, [r7, #24]
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	82fb      	strh	r3, [r7, #22]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Transmit+0x46>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e10b      	b.n	8004f98 <HAL_SPI_Transmit+0x25e>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <HAL_SPI_Transmit+0x52>
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d102      	bne.n	8004d92 <HAL_SPI_Transmit+0x58>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e102      	b.n	8004f98 <HAL_SPI_Transmit+0x25e>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2203      	movs	r2, #3
 8004d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	655a      	str	r2, [r3, #84]	; 0x54
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	88fa      	ldrh	r2, [r7, #6]
 8004daa:	869a      	strh	r2, [r3, #52]	; 0x34
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	88fa      	ldrh	r2, [r7, #6]
 8004db0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	639a      	str	r2, [r3, #56]	; 0x38
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd8:	d10f      	bne.n	8004dfa <HAL_SPI_Transmit+0xc0>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d007      	beq.n	8004e18 <HAL_SPI_Transmit+0xde>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e20:	d14b      	bne.n	8004eba <HAL_SPI_Transmit+0x180>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <HAL_SPI_Transmit+0xf6>
 8004e2a:	8afb      	ldrh	r3, [r7, #22]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d13e      	bne.n	8004eae <HAL_SPI_Transmit+0x174>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	881a      	ldrh	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	1c9a      	adds	r2, r3, #2
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	631a      	str	r2, [r3, #48]	; 0x30
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e54:	e02b      	b.n	8004eae <HAL_SPI_Transmit+0x174>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d112      	bne.n	8004e8a <HAL_SPI_Transmit+0x150>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	881a      	ldrh	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60da      	str	r2, [r3, #12]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	1c9a      	adds	r2, r3, #2
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e88:	e011      	b.n	8004eae <HAL_SPI_Transmit+0x174>
 8004e8a:	f7fd fcd1 	bl	8002830 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d803      	bhi.n	8004ea2 <HAL_SPI_Transmit+0x168>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d102      	bne.n	8004ea8 <HAL_SPI_Transmit+0x16e>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d102      	bne.n	8004eae <HAL_SPI_Transmit+0x174>
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e074      	b.n	8004f98 <HAL_SPI_Transmit+0x25e>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ce      	bne.n	8004e56 <HAL_SPI_Transmit+0x11c>
 8004eb8:	e04c      	b.n	8004f54 <HAL_SPI_Transmit+0x21a>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_SPI_Transmit+0x18e>
 8004ec2:	8afb      	ldrh	r3, [r7, #22]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d140      	bne.n	8004f4a <HAL_SPI_Transmit+0x210>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	86da      	strh	r2, [r3, #54]	; 0x36
 8004eee:	e02c      	b.n	8004f4a <HAL_SPI_Transmit+0x210>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d113      	bne.n	8004f26 <HAL_SPI_Transmit+0x1ec>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	7812      	ldrb	r2, [r2, #0]
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f24:	e011      	b.n	8004f4a <HAL_SPI_Transmit+0x210>
 8004f26:	f7fd fc83 	bl	8002830 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d803      	bhi.n	8004f3e <HAL_SPI_Transmit+0x204>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d102      	bne.n	8004f44 <HAL_SPI_Transmit+0x20a>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d102      	bne.n	8004f4a <HAL_SPI_Transmit+0x210>
 8004f44:	2303      	movs	r3, #3
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e026      	b.n	8004f98 <HAL_SPI_Transmit+0x25e>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1cd      	bne.n	8004ef0 <HAL_SPI_Transmit+0x1b6>
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fbcb 	bl	80056f4 <SPI_EndRxTxTransaction>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_SPI_Transmit+0x230>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_SPI_Transmit+0x24e>
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_SPI_Transmit+0x25c>
 8004f90:	2301      	movs	r3, #1
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e000      	b.n	8004f98 <HAL_SPI_Transmit+0x25e>
 8004f96:	bf00      	nop
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004fa8:	7ffb      	ldrb	r3, [r7, #31]
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_SPI_Receive>:
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b088      	sub	sp, #32
 8004fb6:	af02      	add	r7, sp, #8
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	80fb      	strh	r3, [r7, #6]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fce:	d112      	bne.n	8004ff6 <HAL_SPI_Receive+0x44>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10e      	bne.n	8004ff6 <HAL_SPI_Receive+0x44>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2204      	movs	r2, #4
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004fe0:	88fa      	ldrh	r2, [r7, #6]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f8f1 	bl	80051d4 <HAL_SPI_TransmitReceive>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	e0ea      	b.n	80051cc <HAL_SPI_Receive+0x21a>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_SPI_Receive+0x52>
 8005000:	2302      	movs	r3, #2
 8005002:	e0e3      	b.n	80051cc <HAL_SPI_Receive+0x21a>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800500c:	f7fd fc10 	bl	8002830 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d002      	beq.n	8005024 <HAL_SPI_Receive+0x72>
 800501e:	2302      	movs	r3, #2
 8005020:	75fb      	strb	r3, [r7, #23]
 8005022:	e0ca      	b.n	80051ba <HAL_SPI_Receive+0x208>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_SPI_Receive+0x7e>
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <HAL_SPI_Receive+0x84>
 8005030:	2301      	movs	r3, #1
 8005032:	75fb      	strb	r3, [r7, #23]
 8005034:	e0c1      	b.n	80051ba <HAL_SPI_Receive+0x208>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2204      	movs	r2, #4
 800503a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	655a      	str	r2, [r3, #84]	; 0x54
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	869a      	strh	r2, [r3, #52]	; 0x34
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	86da      	strh	r2, [r3, #54]	; 0x36
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	645a      	str	r2, [r3, #68]	; 0x44
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507c:	d10f      	bne.n	800509e <HAL_SPI_Receive+0xec>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d007      	beq.n	80050bc <HAL_SPI_Receive+0x10a>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d162      	bne.n	800518a <HAL_SPI_Receive+0x1d8>
 80050c4:	e02e      	b.n	8005124 <HAL_SPI_Receive+0x172>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d115      	bne.n	8005100 <HAL_SPI_Receive+0x14e>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f103 020c 	add.w	r2, r3, #12
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	7812      	ldrb	r2, [r2, #0]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050fe:	e011      	b.n	8005124 <HAL_SPI_Receive+0x172>
 8005100:	f7fd fb96 	bl	8002830 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d803      	bhi.n	8005118 <HAL_SPI_Receive+0x166>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	d102      	bne.n	800511e <HAL_SPI_Receive+0x16c>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <HAL_SPI_Receive+0x172>
 800511e:	2303      	movs	r3, #3
 8005120:	75fb      	strb	r3, [r7, #23]
 8005122:	e04a      	b.n	80051ba <HAL_SPI_Receive+0x208>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1cb      	bne.n	80050c6 <HAL_SPI_Receive+0x114>
 800512e:	e031      	b.n	8005194 <HAL_SPI_Receive+0x1e2>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d113      	bne.n	8005166 <HAL_SPI_Receive+0x1b4>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005148:	b292      	uxth	r2, r2
 800514a:	801a      	strh	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005164:	e011      	b.n	800518a <HAL_SPI_Receive+0x1d8>
 8005166:	f7fd fb63 	bl	8002830 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d803      	bhi.n	800517e <HAL_SPI_Receive+0x1cc>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d102      	bne.n	8005184 <HAL_SPI_Receive+0x1d2>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d102      	bne.n	800518a <HAL_SPI_Receive+0x1d8>
 8005184:	2303      	movs	r3, #3
 8005186:	75fb      	strb	r3, [r7, #23]
 8005188:	e017      	b.n	80051ba <HAL_SPI_Receive+0x208>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1cd      	bne.n	8005130 <HAL_SPI_Receive+0x17e>
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fa45 	bl	8005628 <SPI_EndRxTransaction>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_SPI_Receive+0x1f8>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_Receive+0x206>
 80051b2:	2301      	movs	r3, #1
 80051b4:	75fb      	strb	r3, [r7, #23]
 80051b6:	e000      	b.n	80051ba <HAL_SPI_Receive+0x208>
 80051b8:	bf00      	nop
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_SPI_TransmitReceive>:
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08c      	sub	sp, #48	; 0x30
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	807b      	strh	r3, [r7, #2]
 80051e2:	2301      	movs	r3, #1
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x26>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e18a      	b.n	8005510 <HAL_SPI_TransmitReceive+0x33c>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8005202:	f7fd fb15 	bl	8002830 <HAL_GetTick>
 8005206:	6278      	str	r0, [r7, #36]	; 0x24
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	887b      	ldrh	r3, [r7, #2]
 800521a:	837b      	strh	r3, [r7, #26]
 800521c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005220:	2b01      	cmp	r3, #1
 8005222:	d00f      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x70>
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800522a:	d107      	bne.n	800523c <HAL_SPI_TransmitReceive+0x68>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d103      	bne.n	800523c <HAL_SPI_TransmitReceive+0x68>
 8005234:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005238:	2b04      	cmp	r3, #4
 800523a:	d003      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x70>
 800523c:	2302      	movs	r3, #2
 800523e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005242:	e15b      	b.n	80054fc <HAL_SPI_TransmitReceive+0x328>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x82>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <HAL_SPI_TransmitReceive+0x82>
 8005250:	887b      	ldrh	r3, [r7, #2]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_SPI_TransmitReceive+0x8a>
 8005256:	2301      	movs	r3, #1
 8005258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800525c:	e14e      	b.n	80054fc <HAL_SPI_TransmitReceive+0x328>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b04      	cmp	r3, #4
 8005268:	d003      	beq.n	8005272 <HAL_SPI_TransmitReceive+0x9e>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2205      	movs	r2, #5
 800526e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	655a      	str	r2, [r3, #84]	; 0x54
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	887a      	ldrh	r2, [r7, #2]
 8005282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	887a      	ldrh	r2, [r7, #2]
 8005288:	879a      	strh	r2, [r3, #60]	; 0x3c
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	887a      	ldrh	r2, [r7, #2]
 8005294:	86da      	strh	r2, [r3, #54]	; 0x36
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	887a      	ldrh	r2, [r7, #2]
 800529a:	869a      	strh	r2, [r3, #52]	; 0x34
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d007      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0xf2>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ce:	d178      	bne.n	80053c2 <HAL_SPI_TransmitReceive+0x1ee>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_SPI_TransmitReceive+0x10a>
 80052d8:	8b7b      	ldrh	r3, [r7, #26]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d166      	bne.n	80053ac <HAL_SPI_TransmitReceive+0x1d8>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60da      	str	r2, [r3, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	86da      	strh	r2, [r3, #54]	; 0x36
 8005302:	e053      	b.n	80053ac <HAL_SPI_TransmitReceive+0x1d8>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d11b      	bne.n	800534a <HAL_SPI_TransmitReceive+0x176>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d016      	beq.n	800534a <HAL_SPI_TransmitReceive+0x176>
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d113      	bne.n	800534a <HAL_SPI_TransmitReceive+0x176>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	86da      	strh	r2, [r3, #54]	; 0x36
 8005346:	2300      	movs	r3, #0
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b01      	cmp	r3, #1
 8005356:	d119      	bne.n	800538c <HAL_SPI_TransmitReceive+0x1b8>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d014      	beq.n	800538c <HAL_SPI_TransmitReceive+0x1b8>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	b292      	uxth	r2, r2
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	1c9a      	adds	r2, r3, #2
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005388:	2301      	movs	r3, #1
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800538c:	f7fd fa50 	bl	8002830 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005398:	429a      	cmp	r2, r3
 800539a:	d807      	bhi.n	80053ac <HAL_SPI_TransmitReceive+0x1d8>
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a2:	d003      	beq.n	80053ac <HAL_SPI_TransmitReceive+0x1d8>
 80053a4:	2303      	movs	r3, #3
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053aa:	e0a7      	b.n	80054fc <HAL_SPI_TransmitReceive+0x328>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1a6      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x130>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1a1      	bne.n	8005304 <HAL_SPI_TransmitReceive+0x130>
 80053c0:	e07c      	b.n	80054bc <HAL_SPI_TransmitReceive+0x2e8>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x1fc>
 80053ca:	8b7b      	ldrh	r3, [r7, #26]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d16b      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x2d4>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80053f6:	e057      	b.n	80054a8 <HAL_SPI_TransmitReceive+0x2d4>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b02      	cmp	r3, #2
 8005404:	d11c      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x26c>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d017      	beq.n	8005440 <HAL_SPI_TransmitReceive+0x26c>
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d114      	bne.n	8005440 <HAL_SPI_TransmitReceive+0x26c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	330c      	adds	r3, #12
 8005420:	7812      	ldrb	r2, [r2, #0]
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	86da      	strh	r2, [r3, #54]	; 0x36
 800543c:	2300      	movs	r3, #0
 800543e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d119      	bne.n	8005482 <HAL_SPI_TransmitReceive+0x2ae>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005452:	b29b      	uxth	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d014      	beq.n	8005482 <HAL_SPI_TransmitReceive+0x2ae>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800547e:	2301      	movs	r3, #1
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005482:	f7fd f9d5 	bl	8002830 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800548e:	429a      	cmp	r2, r3
 8005490:	d803      	bhi.n	800549a <HAL_SPI_TransmitReceive+0x2c6>
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d102      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x2cc>
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <HAL_SPI_TransmitReceive+0x2d4>
 80054a0:	2303      	movs	r3, #3
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a6:	e029      	b.n	80054fc <HAL_SPI_TransmitReceive+0x328>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1a2      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x224>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d19d      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x224>
 80054bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f917 	bl	80056f4 <SPI_EndRxTxTransaction>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d006      	beq.n	80054da <HAL_SPI_TransmitReceive+0x306>
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
 80054d8:	e010      	b.n	80054fc <HAL_SPI_TransmitReceive+0x328>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_SPI_TransmitReceive+0x326>
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	e000      	b.n	80054fc <HAL_SPI_TransmitReceive+0x328>
 80054fa:	bf00      	nop
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800550c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005510:	4618      	mov	r0, r3
 8005512:	3730      	adds	r7, #48	; 0x30
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <SPI_WaitFlagStateUntilTimeout>:
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	71fb      	strb	r3, [r7, #7]
 8005528:	f7fd f982 	bl	8002830 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	4413      	add	r3, r2
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	f7fd f97a 	bl	8002830 <HAL_GetTick>
 800553c:	61b8      	str	r0, [r7, #24]
 800553e:	4b39      	ldr	r3, [pc, #228]	; (8005624 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	015b      	lsls	r3, r3, #5
 8005544:	0d1b      	lsrs	r3, r3, #20
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	fb02 f303 	mul.w	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e054      	b.n	80055fa <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d050      	beq.n	80055fa <SPI_WaitFlagStateUntilTimeout+0xe2>
 8005558:	f7fd f96a 	bl	8002830 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	429a      	cmp	r2, r3
 8005566:	d902      	bls.n	800556e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d13d      	bne.n	80055ea <SPI_WaitFlagStateUntilTimeout+0xd2>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005586:	d111      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005590:	d004      	beq.n	800559c <SPI_WaitFlagStateUntilTimeout+0x84>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559a:	d107      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0x94>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b4:	d10f      	bne.n	80055d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80055e6:	2303      	movs	r3, #3
 80055e8:	e017      	b.n	800561a <SPI_WaitFlagStateUntilTimeout+0x102>
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	429a      	cmp	r2, r3
 8005616:	d19b      	bne.n	8005550 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005618:	2300      	movs	r3, #0
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000034 	.word	0x20000034

08005628 <SPI_EndRxTransaction>:
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800563c:	d111      	bne.n	8005662 <SPI_EndRxTransaction+0x3a>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005646:	d004      	beq.n	8005652 <SPI_EndRxTransaction+0x2a>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005650:	d107      	bne.n	8005662 <SPI_EndRxTransaction+0x3a>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800566a:	d12a      	bne.n	80056c2 <SPI_EndRxTransaction+0x9a>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005674:	d012      	beq.n	800569c <SPI_EndRxTransaction+0x74>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2200      	movs	r2, #0
 800567e:	2180      	movs	r1, #128	; 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f7ff ff49 	bl	8005518 <SPI_WaitFlagStateUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02d      	beq.n	80056e8 <SPI_EndRxTransaction+0xc0>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005690:	f043 0220 	orr.w	r2, r3, #32
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
 8005698:	2303      	movs	r3, #3
 800569a:	e026      	b.n	80056ea <SPI_EndRxTransaction+0xc2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2200      	movs	r2, #0
 80056a4:	2101      	movs	r1, #1
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f7ff ff36 	bl	8005518 <SPI_WaitFlagStateUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01a      	beq.n	80056e8 <SPI_EndRxTransaction+0xc0>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54
 80056be:	2303      	movs	r3, #3
 80056c0:	e013      	b.n	80056ea <SPI_EndRxTransaction+0xc2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2200      	movs	r2, #0
 80056ca:	2101      	movs	r1, #1
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff ff23 	bl	8005518 <SPI_WaitFlagStateUntilTimeout>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <SPI_EndRxTransaction+0xc0>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	655a      	str	r2, [r3, #84]	; 0x54
 80056e4:	2303      	movs	r3, #3
 80056e6:	e000      	b.n	80056ea <SPI_EndRxTransaction+0xc2>
 80056e8:	2300      	movs	r3, #0
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <SPI_EndRxTxTransaction>:
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <SPI_EndRxTxTransaction+0x7c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <SPI_EndRxTxTransaction+0x80>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	0d5b      	lsrs	r3, r3, #21
 800570c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571e:	d112      	bne.n	8005746 <SPI_EndRxTxTransaction+0x52>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2200      	movs	r2, #0
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff fef4 	bl	8005518 <SPI_WaitFlagStateUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <SPI_EndRxTxTransaction+0x70>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	655a      	str	r2, [r3, #84]	; 0x54
 8005742:	2303      	movs	r3, #3
 8005744:	e00f      	b.n	8005766 <SPI_EndRxTxTransaction+0x72>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <SPI_EndRxTxTransaction+0x6e>
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3b01      	subs	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b80      	cmp	r3, #128	; 0x80
 800575e:	d0f2      	beq.n	8005746 <SPI_EndRxTxTransaction+0x52>
 8005760:	e000      	b.n	8005764 <SPI_EndRxTxTransaction+0x70>
 8005762:	bf00      	nop
 8005764:	2300      	movs	r3, #0
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000034 	.word	0x20000034
 8005774:	165e9f81 	.word	0x165e9f81

08005778 <HAL_TIM_Base_Init>:
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_TIM_Base_Init+0x12>
 8005786:	2301      	movs	r3, #1
 8005788:	e041      	b.n	800580e <HAL_TIM_Base_Init+0x96>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_TIM_Base_Init+0x2c>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f839 	bl	8005816 <HAL_TIM_Base_MspInit>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f000 fb8c 	bl	8005ed4 <TIM_Base_SetConfig>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800580c:	2300      	movs	r3, #0
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_TIM_Base_MspInit>:
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
	...

0800582c <HAL_TIM_Base_Start_IT>:
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x18>
 8005840:	2301      	movs	r3, #1
 8005842:	e044      	b.n	80058ce <HAL_TIM_Base_Start_IT+0xa2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1e      	ldr	r2, [pc, #120]	; (80058dc <HAL_TIM_Base_Start_IT+0xb0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d018      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x6c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d013      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x6c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1a      	ldr	r2, [pc, #104]	; (80058e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x6c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d009      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x6c>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_TIM_Base_Start_IT+0x6c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a16      	ldr	r2, [pc, #88]	; (80058ec <HAL_TIM_Base_Start_IT+0xc0>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d111      	bne.n	80058bc <HAL_TIM_Base_Start_IT+0x90>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b06      	cmp	r3, #6
 80058a8:	d010      	beq.n	80058cc <HAL_TIM_Base_Start_IT+0xa0>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e007      	b.n	80058cc <HAL_TIM_Base_Start_IT+0xa0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40014000 	.word	0x40014000

080058f0 <HAL_TIM_PWM_Init>:
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PWM_Init+0x12>
 80058fe:	2301      	movs	r3, #1
 8005900:	e041      	b.n	8005986 <HAL_TIM_PWM_Init+0x96>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_TIM_PWM_Init+0x2c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fc fd72 	bl	8002400 <HAL_TIM_PWM_MspInit>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f000 fad0 	bl	8005ed4 <TIM_Base_SetConfig>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005984:	2300      	movs	r3, #0
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_TIM_PWM_Start>:
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <HAL_TIM_PWM_Start+0x24>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e022      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d109      	bne.n	80059ce <HAL_TIM_PWM_Start+0x3e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	e015      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d109      	bne.n	80059e8 <HAL_TIM_PWM_Start+0x58>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e008      	b.n	80059fa <HAL_TIM_PWM_Start+0x6a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_TIM_PWM_Start+0x72>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e068      	b.n	8005ad4 <HAL_TIM_PWM_Start+0x144>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0x82>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a10:	e013      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x92>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a20:	e00b      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Start+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a30:	e003      	b.n	8005a3a <HAL_TIM_PWM_Start+0xaa>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fc52 	bl	80062ec <TIM_CCxChannelCmd>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a23      	ldr	r2, [pc, #140]	; (8005adc <HAL_TIM_PWM_Start+0x14c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d107      	bne.n	8005a62 <HAL_TIM_PWM_Start+0xd2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a60:	645a      	str	r2, [r3, #68]	; 0x44
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_TIM_PWM_Start+0x14c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x10e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a74:	d013      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x10e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a19      	ldr	r2, [pc, #100]	; (8005ae0 <HAL_TIM_PWM_Start+0x150>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x10e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <HAL_TIM_PWM_Start+0x154>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x10e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a16      	ldr	r2, [pc, #88]	; (8005ae8 <HAL_TIM_PWM_Start+0x158>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x10e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a14      	ldr	r2, [pc, #80]	; (8005aec <HAL_TIM_PWM_Start+0x15c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d111      	bne.n	8005ac2 <HAL_TIM_PWM_Start+0x132>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b06      	cmp	r3, #6
 8005aae:	d010      	beq.n	8005ad2 <HAL_TIM_PWM_Start+0x142>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e007      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x142>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40000400 	.word	0x40000400
 8005ae4:	40000800 	.word	0x40000800
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40014000 	.word	0x40014000

08005af0 <HAL_TIM_IRQHandler>:
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d122      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x5c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d11b      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x5c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0202 	mvn.w	r2, #2
 8005b1c:	611a      	str	r2, [r3, #16]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	771a      	strb	r2, [r3, #28]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x4a>
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f9b0 	bl	8005e98 <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0x56>
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9a2 	bl	8005e84 <HAL_TIM_OC_DelayElapsedCallback>
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f9b3 	bl	8005eac <HAL_TIM_PWM_PulseFinishedCallback>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d122      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0xb0>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d11b      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0xb0>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0204 	mvn.w	r2, #4
 8005b70:	611a      	str	r2, [r3, #16]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	771a      	strb	r2, [r3, #28]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x9e>
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f986 	bl	8005e98 <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0xaa>
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f978 	bl	8005e84 <HAL_TIM_OC_DelayElapsedCallback>
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f989 	bl	8005eac <HAL_TIM_PWM_PulseFinishedCallback>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b08      	cmp	r3, #8
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x104>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x104>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0208 	mvn.w	r2, #8
 8005bc4:	611a      	str	r2, [r3, #16]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	771a      	strb	r2, [r3, #28]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0xf2>
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f95c 	bl	8005e98 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xfe>
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f94e 	bl	8005e84 <HAL_TIM_OC_DelayElapsedCallback>
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f95f 	bl	8005eac <HAL_TIM_PWM_PulseFinishedCallback>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x158>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x158>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0210 	mvn.w	r2, #16
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2208      	movs	r2, #8
 8005c1e:	771a      	strb	r2, [r3, #28]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x146>
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f932 	bl	8005e98 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0x152>
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f924 	bl	8005e84 <HAL_TIM_OC_DelayElapsedCallback>
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f935 	bl	8005eac <HAL_TIM_PWM_PulseFinishedCallback>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d10e      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x184>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d107      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x184>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0201 	mvn.w	r2, #1
 8005c6c:	611a      	str	r2, [r3, #16]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fc fb1a 	bl	80022a8 <HAL_TIM_PeriodElapsedCallback>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	d10e      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x1b0>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d107      	bne.n	8005ca0 <HAL_TIM_IRQHandler+0x1b0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c98:	611a      	str	r2, [r3, #16]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fc16 	bl	80064cc <HAL_TIMEx_BreakCallback>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d10e      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x1dc>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	d107      	bne.n	8005ccc <HAL_TIM_IRQHandler+0x1dc>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cc4:	611a      	str	r2, [r3, #16]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8fa 	bl	8005ec0 <HAL_TIM_TriggerCallback>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d10e      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x208>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d107      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x208>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f06f 0220 	mvn.w	r2, #32
 8005cf0:	611a      	str	r2, [r3, #16]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fbe0 	bl	80064b8 <HAL_TIMEx_CommutCallback>
 8005cf8:	bf00      	nop
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_TIM_PWM_ConfigChannel>:
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	75fb      	strb	r3, [r7, #23]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e0ae      	b.n	8005e7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b0c      	cmp	r3, #12
 8005d2a:	f200 809f 	bhi.w	8005e6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d69 	.word	0x08005d69
 8005d38:	08005e6d 	.word	0x08005e6d
 8005d3c:	08005e6d 	.word	0x08005e6d
 8005d40:	08005e6d 	.word	0x08005e6d
 8005d44:	08005da9 	.word	0x08005da9
 8005d48:	08005e6d 	.word	0x08005e6d
 8005d4c:	08005e6d 	.word	0x08005e6d
 8005d50:	08005e6d 	.word	0x08005e6d
 8005d54:	08005deb 	.word	0x08005deb
 8005d58:	08005e6d 	.word	0x08005e6d
 8005d5c:	08005e6d 	.word	0x08005e6d
 8005d60:	08005e6d 	.word	0x08005e6d
 8005d64:	08005e2b 	.word	0x08005e2b
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f930 	bl	8005fd4 <TIM_OC1_SetConfig>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0208 	orr.w	r2, r2, #8
 8005d82:	619a      	str	r2, [r3, #24]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0204 	bic.w	r2, r2, #4
 8005d92:	619a      	str	r2, [r3, #24]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6999      	ldr	r1, [r3, #24]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	619a      	str	r2, [r3, #24]
 8005da6:	e064      	b.n	8005e72 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f976 	bl	80060a0 <TIM_OC2_SetConfig>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc2:	619a      	str	r2, [r3, #24]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd2:	619a      	str	r2, [r3, #24]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6999      	ldr	r1, [r3, #24]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	021a      	lsls	r2, r3, #8
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	619a      	str	r2, [r3, #24]
 8005de8:	e043      	b.n	8005e72 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f9c1 	bl	8006178 <TIM_OC3_SetConfig>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0208 	orr.w	r2, r2, #8
 8005e04:	61da      	str	r2, [r3, #28]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0204 	bic.w	r2, r2, #4
 8005e14:	61da      	str	r2, [r3, #28]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69d9      	ldr	r1, [r3, #28]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	691a      	ldr	r2, [r3, #16]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	61da      	str	r2, [r3, #28]
 8005e28:	e023      	b.n	8005e72 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68b9      	ldr	r1, [r7, #8]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fa0b 	bl	800624c <TIM_OC4_SetConfig>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e44:	61da      	str	r2, [r3, #28]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e54:	61da      	str	r2, [r3, #28]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69d9      	ldr	r1, [r3, #28]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	021a      	lsls	r2, r3, #8
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	61da      	str	r2, [r3, #28]
 8005e6a:	e002      	b.n	8005e72 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	75fb      	strb	r3, [r7, #23]
 8005e70:	bf00      	nop
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_TIM_OC_DelayElapsedCallback>:
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_TIM_IC_CaptureCallback>:
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_TIM_PWM_PulseFinishedCallback>:
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_TriggerCallback>:
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_Base_SetConfig>:
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a34      	ldr	r2, [pc, #208]	; (8005fb8 <TIM_Base_SetConfig+0xe4>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00f      	beq.n	8005f0c <TIM_Base_SetConfig+0x38>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef2:	d00b      	beq.n	8005f0c <TIM_Base_SetConfig+0x38>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a31      	ldr	r2, [pc, #196]	; (8005fbc <TIM_Base_SetConfig+0xe8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_Base_SetConfig+0x38>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a30      	ldr	r2, [pc, #192]	; (8005fc0 <TIM_Base_SetConfig+0xec>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_Base_SetConfig+0x38>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a2f      	ldr	r2, [pc, #188]	; (8005fc4 <TIM_Base_SetConfig+0xf0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d108      	bne.n	8005f1e <TIM_Base_SetConfig+0x4a>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a25      	ldr	r2, [pc, #148]	; (8005fb8 <TIM_Base_SetConfig+0xe4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01b      	beq.n	8005f5e <TIM_Base_SetConfig+0x8a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2c:	d017      	beq.n	8005f5e <TIM_Base_SetConfig+0x8a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <TIM_Base_SetConfig+0xe8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <TIM_Base_SetConfig+0x8a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <TIM_Base_SetConfig+0xec>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00f      	beq.n	8005f5e <TIM_Base_SetConfig+0x8a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a20      	ldr	r2, [pc, #128]	; (8005fc4 <TIM_Base_SetConfig+0xf0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <TIM_Base_SetConfig+0x8a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a1f      	ldr	r2, [pc, #124]	; (8005fc8 <TIM_Base_SetConfig+0xf4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <TIM_Base_SetConfig+0x8a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1e      	ldr	r2, [pc, #120]	; (8005fcc <TIM_Base_SetConfig+0xf8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_Base_SetConfig+0x8a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1d      	ldr	r2, [pc, #116]	; (8005fd0 <TIM_Base_SetConfig+0xfc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d108      	bne.n	8005f70 <TIM_Base_SetConfig+0x9c>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <TIM_Base_SetConfig+0xe4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d103      	bne.n	8005fa4 <TIM_Base_SetConfig+0xd0>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	615a      	str	r2, [r3, #20]
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	40014000 	.word	0x40014000
 8005fcc:	40014400 	.word	0x40014400
 8005fd0:	40014800 	.word	0x40014800

08005fd4 <TIM_OC1_SetConfig>:
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	f023 0201 	bic.w	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	621a      	str	r2, [r3, #32]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0303 	bic.w	r3, r3, #3
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0302 	bic.w	r3, r3, #2
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a1c      	ldr	r2, [pc, #112]	; (800609c <TIM_OC1_SetConfig+0xc8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10c      	bne.n	800604a <TIM_OC1_SetConfig+0x76>
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0308 	bic.w	r3, r3, #8
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 0304 	bic.w	r3, r3, #4
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a13      	ldr	r2, [pc, #76]	; (800609c <TIM_OC1_SetConfig+0xc8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d111      	bne.n	8006076 <TIM_OC1_SetConfig+0xa2>
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	605a      	str	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	619a      	str	r2, [r3, #24]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	635a      	str	r2, [r3, #52]	; 0x34
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40010000 	.word	0x40010000

080060a0 <TIM_OC2_SetConfig>:
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	f023 0210 	bic.w	r2, r3, #16
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	621a      	str	r2, [r3, #32]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0320 	bic.w	r3, r3, #32
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <TIM_OC2_SetConfig+0xd4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d10d      	bne.n	800611c <TIM_OC2_SetConfig+0x7c>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a15      	ldr	r2, [pc, #84]	; (8006174 <TIM_OC2_SetConfig+0xd4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d113      	bne.n	800614c <TIM_OC2_SetConfig+0xac>
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800612a:	613b      	str	r3, [r7, #16]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006132:	613b      	str	r3, [r7, #16]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	4313      	orrs	r3, r2
 800614a:	613b      	str	r3, [r7, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	605a      	str	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	619a      	str	r2, [r3, #24]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	; 0x38
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	621a      	str	r2, [r3, #32]
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40010000 	.word	0x40010000

08006178 <TIM_OC3_SetConfig>:
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	621a      	str	r2, [r3, #32]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	617b      	str	r3, [r7, #20]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a1d      	ldr	r2, [pc, #116]	; (8006248 <TIM_OC3_SetConfig+0xd0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10d      	bne.n	80061f2 <TIM_OC3_SetConfig+0x7a>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a14      	ldr	r2, [pc, #80]	; (8006248 <TIM_OC3_SetConfig+0xd0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d113      	bne.n	8006222 <TIM_OC3_SetConfig+0xaa>
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	605a      	str	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	61da      	str	r2, [r3, #28]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	63da      	str	r2, [r3, #60]	; 0x3c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	621a      	str	r2, [r3, #32]
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40010000 	.word	0x40010000

0800624c <TIM_OC4_SetConfig>:
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	621a      	str	r2, [r3, #32]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	031b      	lsls	r3, r3, #12
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a10      	ldr	r2, [pc, #64]	; (80062e8 <TIM_OC4_SetConfig+0x9c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d109      	bne.n	80062c0 <TIM_OC4_SetConfig+0x74>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	019b      	lsls	r3, r3, #6
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	61da      	str	r2, [r3, #28]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	621a      	str	r2, [r3, #32]
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40010000 	.word	0x40010000

080062ec <TIM_CCxChannelCmd>:
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2201      	movs	r2, #1
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a1a      	ldr	r2, [r3, #32]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	43db      	mvns	r3, r3
 800630e:	401a      	ands	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	621a      	str	r2, [r3, #32]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	fa01 f303 	lsl.w	r3, r1, r3
 8006324:	431a      	orrs	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	621a      	str	r2, [r3, #32]
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <HAL_TIMEx_MasterConfigSynchronization>:
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800634c:	2302      	movs	r3, #2
 800634e:	e050      	b.n	80063f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d018      	beq.n	80063c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800639c:	d013      	beq.n	80063c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a18      	ldr	r2, [pc, #96]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00e      	beq.n	80063c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a13      	ldr	r2, [pc, #76]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d10c      	bne.n	80063e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063cc:	60bb      	str	r3, [r7, #8]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60bb      	str	r3, [r7, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	609a      	str	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80063f0:	2300      	movs	r3, #0
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	40010000 	.word	0x40010000
 8006404:	40000400 	.word	0x40000400
 8006408:	40000800 	.word	0x40000800
 800640c:	40000c00 	.word	0x40000c00
 8006410:	40014000 	.word	0x40014000

08006414 <HAL_TIMEx_ConfigBreakDeadTime>:
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800642c:	2302      	movs	r3, #2
 800642e:	e03d      	b.n	80064ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	645a      	str	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064aa:	2300      	movs	r3, #0
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIMEx_CommutCallback>:
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_TIMEx_BreakCallback>:
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USB_CoreInit>:
 80064e0:	b084      	sub	sp, #16
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	f107 001c 	add.w	r0, r7, #28
 80064ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d122      	bne.n	800653e <USB_CoreInit+0x5e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	; 0x38
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800650c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	60d3      	str	r3, [r2, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60da      	str	r2, [r3, #12]
 8006520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006522:	2b01      	cmp	r3, #1
 8006524:	d105      	bne.n	8006532 <USB_CoreInit+0x52>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	60da      	str	r2, [r3, #12]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 fbee 	bl	8007d14 <USB_CoreReset>
 8006538:	4603      	mov	r3, r0
 800653a:	73fb      	strb	r3, [r7, #15]
 800653c:	e01a      	b.n	8006574 <USB_CoreInit+0x94>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fbe2 	bl	8007d14 <USB_CoreReset>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
 8006554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <USB_CoreInit+0x88>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
 8006566:	e005      	b.n	8006574 <USB_CoreInit+0x94>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
 8006574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006576:	2b01      	cmp	r3, #1
 8006578:	d10b      	bne.n	8006592 <USB_CoreInit+0xb2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f043 0206 	orr.w	r2, r3, #6
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	609a      	str	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f043 0220 	orr.w	r2, r3, #32
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	609a      	str	r2, [r3, #8]
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800659e:	b004      	add	sp, #16
 80065a0:	4770      	bx	lr
	...

080065a4 <USB_SetTurnaroundTime>:
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	4613      	mov	r3, r2
 80065b0:	71fb      	strb	r3, [r7, #7]
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d165      	bne.n	8006684 <USB_SetTurnaroundTime+0xe0>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4a41      	ldr	r2, [pc, #260]	; (80066c0 <USB_SetTurnaroundTime+0x11c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d906      	bls.n	80065ce <USB_SetTurnaroundTime+0x2a>
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4a40      	ldr	r2, [pc, #256]	; (80066c4 <USB_SetTurnaroundTime+0x120>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d202      	bcs.n	80065ce <USB_SetTurnaroundTime+0x2a>
 80065c8:	230f      	movs	r3, #15
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	e062      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4a3c      	ldr	r2, [pc, #240]	; (80066c4 <USB_SetTurnaroundTime+0x120>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d306      	bcc.n	80065e4 <USB_SetTurnaroundTime+0x40>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	4a3b      	ldr	r2, [pc, #236]	; (80066c8 <USB_SetTurnaroundTime+0x124>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d202      	bcs.n	80065e4 <USB_SetTurnaroundTime+0x40>
 80065de:	230e      	movs	r3, #14
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	e057      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4a38      	ldr	r2, [pc, #224]	; (80066c8 <USB_SetTurnaroundTime+0x124>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d306      	bcc.n	80065fa <USB_SetTurnaroundTime+0x56>
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4a37      	ldr	r2, [pc, #220]	; (80066cc <USB_SetTurnaroundTime+0x128>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d202      	bcs.n	80065fa <USB_SetTurnaroundTime+0x56>
 80065f4:	230d      	movs	r3, #13
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	e04c      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4a33      	ldr	r2, [pc, #204]	; (80066cc <USB_SetTurnaroundTime+0x128>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d306      	bcc.n	8006610 <USB_SetTurnaroundTime+0x6c>
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4a32      	ldr	r2, [pc, #200]	; (80066d0 <USB_SetTurnaroundTime+0x12c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d802      	bhi.n	8006610 <USB_SetTurnaroundTime+0x6c>
 800660a:	230c      	movs	r3, #12
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	e041      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4a2f      	ldr	r2, [pc, #188]	; (80066d0 <USB_SetTurnaroundTime+0x12c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d906      	bls.n	8006626 <USB_SetTurnaroundTime+0x82>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	4a2e      	ldr	r2, [pc, #184]	; (80066d4 <USB_SetTurnaroundTime+0x130>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d802      	bhi.n	8006626 <USB_SetTurnaroundTime+0x82>
 8006620:	230b      	movs	r3, #11
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	e036      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	4a2a      	ldr	r2, [pc, #168]	; (80066d4 <USB_SetTurnaroundTime+0x130>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d906      	bls.n	800663c <USB_SetTurnaroundTime+0x98>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <USB_SetTurnaroundTime+0x134>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d802      	bhi.n	800663c <USB_SetTurnaroundTime+0x98>
 8006636:	230a      	movs	r3, #10
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e02b      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4a26      	ldr	r2, [pc, #152]	; (80066d8 <USB_SetTurnaroundTime+0x134>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d906      	bls.n	8006652 <USB_SetTurnaroundTime+0xae>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a25      	ldr	r2, [pc, #148]	; (80066dc <USB_SetTurnaroundTime+0x138>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d202      	bcs.n	8006652 <USB_SetTurnaroundTime+0xae>
 800664c:	2309      	movs	r3, #9
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	e020      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	4a21      	ldr	r2, [pc, #132]	; (80066dc <USB_SetTurnaroundTime+0x138>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d306      	bcc.n	8006668 <USB_SetTurnaroundTime+0xc4>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <USB_SetTurnaroundTime+0x13c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d802      	bhi.n	8006668 <USB_SetTurnaroundTime+0xc4>
 8006662:	2308      	movs	r3, #8
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	e015      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	4a1d      	ldr	r2, [pc, #116]	; (80066e0 <USB_SetTurnaroundTime+0x13c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d906      	bls.n	800667e <USB_SetTurnaroundTime+0xda>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4a1c      	ldr	r2, [pc, #112]	; (80066e4 <USB_SetTurnaroundTime+0x140>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d202      	bcs.n	800667e <USB_SetTurnaroundTime+0xda>
 8006678:	2307      	movs	r3, #7
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e00a      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 800667e:	2306      	movs	r3, #6
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	e007      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 8006684:	79fb      	ldrb	r3, [r7, #7]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d102      	bne.n	8006690 <USB_SetTurnaroundTime+0xec>
 800668a:	2309      	movs	r3, #9
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	e001      	b.n	8006694 <USB_SetTurnaroundTime+0xf0>
 8006690:	2309      	movs	r3, #9
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	60da      	str	r2, [r3, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	2300      	movs	r3, #0
 80066b4:	4618      	mov	r0, r3
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	00d8acbf 	.word	0x00d8acbf
 80066c4:	00e4e1c0 	.word	0x00e4e1c0
 80066c8:	00f42400 	.word	0x00f42400
 80066cc:	01067380 	.word	0x01067380
 80066d0:	011a499f 	.word	0x011a499f
 80066d4:	01312cff 	.word	0x01312cff
 80066d8:	014ca43f 	.word	0x014ca43f
 80066dc:	016e3600 	.word	0x016e3600
 80066e0:	01a6ab1f 	.word	0x01a6ab1f
 80066e4:	01e84800 	.word	0x01e84800

080066e8 <USB_EnableGlobalInt>:
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f043 0201 	orr.w	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	2300      	movs	r3, #0
 80066fe:	4618      	mov	r0, r3
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <USB_DisableGlobalInt>:
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f023 0201 	bic.w	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	609a      	str	r2, [r3, #8]
 800671e:	2300      	movs	r3, #0
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USB_SetCurrentMode>:
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60da      	str	r2, [r3, #12]
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d115      	bne.n	800677a <USB_SetCurrentMode+0x4e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60da      	str	r2, [r3, #12]
 800675a:	2001      	movs	r0, #1
 800675c:	f7fc f874 	bl	8002848 <HAL_Delay>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3301      	adds	r3, #1
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fa45 	bl	8007bf6 <USB_GetMode>
 800676c:	4603      	mov	r3, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	d01e      	beq.n	80067b0 <USB_SetCurrentMode+0x84>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b31      	cmp	r3, #49	; 0x31
 8006776:	d9f0      	bls.n	800675a <USB_SetCurrentMode+0x2e>
 8006778:	e01a      	b.n	80067b0 <USB_SetCurrentMode+0x84>
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d115      	bne.n	80067ac <USB_SetCurrentMode+0x80>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	60da      	str	r2, [r3, #12]
 800678c:	2001      	movs	r0, #1
 800678e:	f7fc f85b 	bl	8002848 <HAL_Delay>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3301      	adds	r3, #1
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f001 fa2c 	bl	8007bf6 <USB_GetMode>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d005      	beq.n	80067b0 <USB_SetCurrentMode+0x84>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b31      	cmp	r3, #49	; 0x31
 80067a8:	d9f0      	bls.n	800678c <USB_SetCurrentMode+0x60>
 80067aa:	e001      	b.n	80067b0 <USB_SetCurrentMode+0x84>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e005      	b.n	80067bc <USB_SetCurrentMode+0x90>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b32      	cmp	r3, #50	; 0x32
 80067b4:	d101      	bne.n	80067ba <USB_SetCurrentMode+0x8e>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <USB_SetCurrentMode+0x90>
 80067ba:	2300      	movs	r3, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USB_DevInit>:
 80067c4:	b084      	sub	sp, #16
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b086      	sub	sp, #24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80067d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80067d6:	2300      	movs	r3, #0
 80067d8:	75fb      	strb	r3, [r7, #23]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	2300      	movs	r3, #0
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	e009      	b.n	80067f8 <USB_DevInit+0x34>
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3340      	adds	r3, #64	; 0x40
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	2200      	movs	r2, #0
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3301      	adds	r3, #1
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	2b0e      	cmp	r3, #14
 80067fc:	d9f2      	bls.n	80067e4 <USB_DevInit+0x20>
 80067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d11c      	bne.n	800683e <USB_DevInit+0x7a>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006812:	f043 0302 	orr.w	r3, r3, #2
 8006816:	6053      	str	r3, [r2, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006834:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	639a      	str	r2, [r3, #56]	; 0x38
 800683c:	e00b      	b.n	8006856 <USB_DevInit+0x92>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	639a      	str	r2, [r3, #56]	; 0x38
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800685c:	461a      	mov	r2, r3
 800685e:	2300      	movs	r3, #0
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006868:	4619      	mov	r1, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006870:	461a      	mov	r2, r3
 8006872:	680b      	ldr	r3, [r1, #0]
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	2b01      	cmp	r3, #1
 800687a:	d10c      	bne.n	8006896 <USB_DevInit+0xd2>
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <USB_DevInit+0xc8>
 8006882:	2100      	movs	r1, #0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 f965 	bl	8006b54 <USB_SetDevSpeed>
 800688a:	e008      	b.n	800689e <USB_DevInit+0xda>
 800688c:	2101      	movs	r1, #1
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f960 	bl	8006b54 <USB_SetDevSpeed>
 8006894:	e003      	b.n	800689e <USB_DevInit+0xda>
 8006896:	2103      	movs	r1, #3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f95b 	bl	8006b54 <USB_SetDevSpeed>
 800689e:	2110      	movs	r1, #16
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f8f3 	bl	8006a8c <USB_FlushTxFifo>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <USB_DevInit+0xec>
 80068ac:	2301      	movs	r3, #1
 80068ae:	75fb      	strb	r3, [r7, #23]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f91f 	bl	8006af4 <USB_FlushRxFifo>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <USB_DevInit+0xfc>
 80068bc:	2301      	movs	r3, #1
 80068be:	75fb      	strb	r3, [r7, #23]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	461a      	mov	r2, r3
 80068c8:	2300      	movs	r3, #0
 80068ca:	6113      	str	r3, [r2, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	461a      	mov	r2, r3
 80068d4:	2300      	movs	r3, #0
 80068d6:	6153      	str	r3, [r2, #20]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068de:	461a      	mov	r2, r3
 80068e0:	2300      	movs	r3, #0
 80068e2:	61d3      	str	r3, [r2, #28]
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	e043      	b.n	8006972 <USB_DevInit+0x1ae>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006900:	d118      	bne.n	8006934 <USB_DevInit+0x170>
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <USB_DevInit+0x15a>
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006914:	461a      	mov	r2, r3
 8006916:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	e013      	b.n	8006946 <USB_DevInit+0x182>
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692a:	461a      	mov	r2, r3
 800692c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e008      	b.n	8006946 <USB_DevInit+0x182>
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	4413      	add	r3, r2
 800693c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006940:	461a      	mov	r2, r3
 8006942:	2300      	movs	r3, #0
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006952:	461a      	mov	r2, r3
 8006954:	2300      	movs	r3, #0
 8006956:	6113      	str	r3, [r2, #16]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006964:	461a      	mov	r2, r3
 8006966:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800696a:	6093      	str	r3, [r2, #8]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	3301      	adds	r3, #1
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	429a      	cmp	r2, r3
 8006978:	d3b7      	bcc.n	80068ea <USB_DevInit+0x126>
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e043      	b.n	8006a08 <USB_DevInit+0x244>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006996:	d118      	bne.n	80069ca <USB_DevInit+0x206>
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <USB_DevInit+0x1f0>
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	461a      	mov	r2, r3
 80069ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e013      	b.n	80069dc <USB_DevInit+0x218>
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c0:	461a      	mov	r2, r3
 80069c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e008      	b.n	80069dc <USB_DevInit+0x218>
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	461a      	mov	r2, r3
 80069d8:	2300      	movs	r3, #0
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e8:	461a      	mov	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	6113      	str	r3, [r2, #16]
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	461a      	mov	r2, r3
 80069fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a00:	6093      	str	r3, [r2, #8]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3301      	adds	r3, #1
 8006a06:	613b      	str	r3, [r7, #16]
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d3b7      	bcc.n	8006980 <USB_DevInit+0x1bc>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a22:	6113      	str	r3, [r2, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	619a      	str	r2, [r3, #24]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006a30:	615a      	str	r2, [r3, #20]
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <USB_DevInit+0x280>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	f043 0210 	orr.w	r2, r3, #16
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	619a      	str	r2, [r3, #24]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	699a      	ldr	r2, [r3, #24]
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <USB_DevInit+0x2c4>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6193      	str	r3, [r2, #24]
 8006a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <USB_DevInit+0x29e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	f043 0208 	orr.w	r2, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	619a      	str	r2, [r3, #24]
 8006a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <USB_DevInit+0x2b4>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	f043 0304 	orr.w	r3, r3, #4
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6193      	str	r3, [r2, #24]
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a84:	b004      	add	sp, #16
 8006a86:	4770      	bx	lr
 8006a88:	803c3800 	.word	0x803c3800

08006a8c <USB_FlushTxFifo>:
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4a13      	ldr	r2, [pc, #76]	; (8006af0 <USB_FlushTxFifo+0x64>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d901      	bls.n	8006aac <USB_FlushTxFifo+0x20>
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e01b      	b.n	8006ae4 <USB_FlushTxFifo+0x58>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	daf2      	bge.n	8006a9a <USB_FlushTxFifo+0xe>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	019b      	lsls	r3, r3, #6
 8006abc:	f043 0220 	orr.w	r2, r3, #32
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	611a      	str	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <USB_FlushTxFifo+0x64>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d901      	bls.n	8006ad6 <USB_FlushTxFifo+0x4a>
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e006      	b.n	8006ae4 <USB_FlushTxFifo+0x58>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0320 	and.w	r3, r3, #32
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d0f0      	beq.n	8006ac4 <USB_FlushTxFifo+0x38>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	00030d40 	.word	0x00030d40

08006af4 <USB_FlushRxFifo>:
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3301      	adds	r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4a11      	ldr	r2, [pc, #68]	; (8006b50 <USB_FlushRxFifo+0x5c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d901      	bls.n	8006b12 <USB_FlushRxFifo+0x1e>
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e018      	b.n	8006b44 <USB_FlushRxFifo+0x50>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	daf2      	bge.n	8006b00 <USB_FlushRxFifo+0xc>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2210      	movs	r2, #16
 8006b22:	611a      	str	r2, [r3, #16]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a08      	ldr	r2, [pc, #32]	; (8006b50 <USB_FlushRxFifo+0x5c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <USB_FlushRxFifo+0x42>
 8006b32:	2303      	movs	r3, #3
 8006b34:	e006      	b.n	8006b44 <USB_FlushRxFifo+0x50>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	2b10      	cmp	r3, #16
 8006b40:	d0f0      	beq.n	8006b24 <USB_FlushRxFifo+0x30>
 8006b42:	2300      	movs	r3, #0
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	00030d40 	.word	0x00030d40

08006b54 <USB_SetDevSpeed>:
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b74:	4313      	orrs	r3, r2
 8006b76:	600b      	str	r3, [r1, #0]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USB_GetDevSpeed>:
 8006b86:	b480      	push	{r7}
 8006b88:	b087      	sub	sp, #28
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 0306 	and.w	r3, r3, #6
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d102      	bne.n	8006bac <USB_GetDevSpeed+0x26>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	75fb      	strb	r3, [r7, #23]
 8006baa:	e00a      	b.n	8006bc2 <USB_GetDevSpeed+0x3c>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d002      	beq.n	8006bb8 <USB_GetDevSpeed+0x32>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b06      	cmp	r3, #6
 8006bb6:	d102      	bne.n	8006bbe <USB_GetDevSpeed+0x38>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	75fb      	strb	r3, [r7, #23]
 8006bbc:	e001      	b.n	8006bc2 <USB_GetDevSpeed+0x3c>
 8006bbe:	230f      	movs	r3, #15
 8006bc0:	75fb      	strb	r3, [r7, #23]
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_ActivateEndpoint>:
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d13a      	bne.n	8006c62 <USB_ActivateEndpoint+0x92>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	2101      	movs	r1, #1
 8006bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	68f9      	ldr	r1, [r7, #12]
 8006c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61cb      	str	r3, [r1, #28]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d155      	bne.n	8006cd0 <USB_ActivateEndpoint+0x100>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	791b      	ldrb	r3, [r3, #4]
 8006c3e:	049b      	lsls	r3, r3, #18
 8006c40:	4319      	orrs	r1, r3
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	059b      	lsls	r3, r3, #22
 8006c46:	430b      	orrs	r3, r1
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e036      	b.n	8006cd0 <USB_ActivateEndpoint+0x100>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	2101      	movs	r1, #1
 8006c74:	fa01 f303 	lsl.w	r3, r1, r3
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61cb      	str	r3, [r1, #28]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11a      	bne.n	8006cd0 <USB_ActivateEndpoint+0x100>
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f3c3 010a 	ubfx	r1, r3, #0, #11
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	791b      	ldrb	r3, [r3, #4]
 8006cb4:	049b      	lsls	r3, r3, #18
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
	...

08006ce0 <USB_DeactivateEndpoint>:
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	60bb      	str	r3, [r7, #8]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d161      	bne.n	8006dc0 <USB_DeactivateEndpoint+0xe0>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d12:	d11f      	bne.n	8006d54 <USB_DeactivateEndpoint+0x74>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	2101      	movs	r1, #1
 8006d66:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d74:	4013      	ands	r3, r2
 8006d76:	63cb      	str	r3, [r1, #60]	; 0x3c
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	2101      	movs	r1, #1
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	43db      	mvns	r3, r3
 8006d92:	68f9      	ldr	r1, [r7, #12]
 8006d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d98:	4013      	ands	r3, r2
 8006d9a:	61cb      	str	r3, [r1, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	0159      	lsls	r1, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	440b      	add	r3, r1
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	4619      	mov	r1, r3
 8006db8:	4b35      	ldr	r3, [pc, #212]	; (8006e90 <USB_DeactivateEndpoint+0x1b0>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]
 8006dbe:	e060      	b.n	8006e82 <USB_DeactivateEndpoint+0x1a2>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd6:	d11f      	bne.n	8006e18 <USB_DeactivateEndpoint+0x138>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	2101      	movs	r1, #1
 8006e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2e:	041b      	lsls	r3, r3, #16
 8006e30:	43db      	mvns	r3, r3
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e38:	4013      	ands	r3, r2
 8006e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e42:	69da      	ldr	r2, [r3, #28]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 030f 	and.w	r3, r3, #15
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e52:	041b      	lsls	r3, r3, #16
 8006e54:	43db      	mvns	r3, r3
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	61cb      	str	r3, [r1, #28]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	0159      	lsls	r1, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	440b      	add	r3, r1
 8006e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <USB_DeactivateEndpoint+0x1b4>)
 8006e7e:	4013      	ands	r3, r2
 8006e80:	600b      	str	r3, [r1, #0]
 8006e82:	2300      	movs	r3, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	ec337800 	.word	0xec337800
 8006e94:	eff37800 	.word	0xeff37800

08006e98 <USB_EPStartXfer>:
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08a      	sub	sp, #40	; 0x28
 8006e9c:	af02      	add	r7, sp, #8
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	71fb      	strb	r3, [r7, #7]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	785b      	ldrb	r3, [r3, #1]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	f040 815c 	bne.w	8007172 <USB_EPStartXfer+0x2da>
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d132      	bne.n	8006f28 <USB_EPStartXfer+0x90>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006edc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ee4:	6113      	str	r3, [r2, #16]
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f04:	6113      	str	r3, [r2, #16]
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	0151      	lsls	r1, r2, #5
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	440a      	add	r2, r1
 8006f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f20:	0cdb      	lsrs	r3, r3, #19
 8006f22:	04db      	lsls	r3, r3, #19
 8006f24:	6113      	str	r3, [r2, #16]
 8006f26:	e074      	b.n	8007012 <USB_EPStartXfer+0x17a>
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f42:	0cdb      	lsrs	r3, r3, #19
 8006f44:	04db      	lsls	r3, r3, #19
 8006f46:	6113      	str	r3, [r2, #16]
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	015a      	lsls	r2, r3, #5
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	0151      	lsls	r1, r2, #5
 8006f5a:	69fa      	ldr	r2, [r7, #28]
 8006f5c:	440a      	add	r2, r1
 8006f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006f66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006f6a:	6113      	str	r3, [r2, #16]
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6999      	ldr	r1, [r3, #24]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	440b      	add	r3, r1
 8006f84:	1e59      	subs	r1, r3, #1
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006f8e:	04d9      	lsls	r1, r3, #19
 8006f90:	4b9d      	ldr	r3, [pc, #628]	; (8007208 <USB_EPStartXfer+0x370>)
 8006f92:	400b      	ands	r3, r1
 8006f94:	69b9      	ldr	r1, [r7, #24]
 8006f96:	0148      	lsls	r0, r1, #5
 8006f98:	69f9      	ldr	r1, [r7, #28]
 8006f9a:	4401      	add	r1, r0
 8006f9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	610b      	str	r3, [r1, #16]
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	691a      	ldr	r2, [r3, #16]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fba:	69b9      	ldr	r1, [r7, #24]
 8006fbc:	0148      	lsls	r0, r1, #5
 8006fbe:	69f9      	ldr	r1, [r7, #28]
 8006fc0:	4401      	add	r1, r0
 8006fc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	610b      	str	r3, [r1, #16]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	791b      	ldrb	r3, [r3, #4]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d11f      	bne.n	8007012 <USB_EPStartXfer+0x17a>
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ff0:	6113      	str	r3, [r2, #16]
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007010:	6113      	str	r3, [r2, #16]
 8007012:	79fb      	ldrb	r3, [r7, #7]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d14b      	bne.n	80070b0 <USB_EPStartXfer+0x218>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <USB_EPStartXfer+0x19c>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	461a      	mov	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	6153      	str	r3, [r2, #20]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	791b      	ldrb	r3, [r3, #4]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d128      	bne.n	800708e <USB_EPStartXfer+0x1f6>
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d110      	bne.n	800706e <USB_EPStartXfer+0x1d6>
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e00f      	b.n	800708e <USB_EPStartXfer+0x1f6>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	0151      	lsls	r1, r2, #5
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	440a      	add	r2, r1
 8007084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	e133      	b.n	8007318 <USB_EPStartXfer+0x480>
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	791b      	ldrb	r3, [r3, #4]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d015      	beq.n	8007104 <USB_EPStartXfer+0x26c>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 811b 	beq.w	8007318 <USB_EPStartXfer+0x480>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	2101      	movs	r1, #1
 80070f4:	fa01 f303 	lsl.w	r3, r1, r3
 80070f8:	69f9      	ldr	r1, [r7, #28]
 80070fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fe:	4313      	orrs	r3, r2
 8007100:	634b      	str	r3, [r1, #52]	; 0x34
 8007102:	e109      	b.n	8007318 <USB_EPStartXfer+0x480>
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007110:	2b00      	cmp	r3, #0
 8007112:	d110      	bne.n	8007136 <USB_EPStartXfer+0x29e>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	0151      	lsls	r1, r2, #5
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	440a      	add	r2, r1
 800712a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800712e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007132:	6013      	str	r3, [r2, #0]
 8007134:	e00f      	b.n	8007156 <USB_EPStartXfer+0x2be>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6919      	ldr	r1, [r3, #16]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	b298      	uxth	r0, r3
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4603      	mov	r3, r0
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fade 	bl	800772c <USB_WritePacket>
 8007170:	e0d2      	b.n	8007318 <USB_EPStartXfer+0x480>
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800718c:	0cdb      	lsrs	r3, r3, #19
 800718e:	04db      	lsls	r3, r3, #19
 8007190:	6113      	str	r3, [r2, #16]
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071b4:	6113      	str	r3, [r2, #16]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d126      	bne.n	800720c <USB_EPStartXfer+0x374>
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071d4:	69b9      	ldr	r1, [r7, #24]
 80071d6:	0148      	lsls	r0, r1, #5
 80071d8:	69f9      	ldr	r1, [r7, #28]
 80071da:	4401      	add	r1, r0
 80071dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80071e0:	4313      	orrs	r3, r2
 80071e2:	610b      	str	r3, [r1, #16]
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	015a      	lsls	r2, r3, #5
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	0151      	lsls	r1, r2, #5
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	440a      	add	r2, r1
 80071fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007202:	6113      	str	r3, [r2, #16]
 8007204:	e03a      	b.n	800727c <USB_EPStartXfer+0x3e4>
 8007206:	bf00      	nop
 8007208:	1ff80000 	.word	0x1ff80000
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	4413      	add	r3, r2
 8007216:	1e5a      	subs	r2, r3, #1
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007220:	82fb      	strh	r3, [r7, #22]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	8afa      	ldrh	r2, [r7, #22]
 8007228:	fb03 f202 	mul.w	r2, r3, r2
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	61da      	str	r2, [r3, #28]
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723c:	691a      	ldr	r2, [r3, #16]
 800723e:	8afb      	ldrh	r3, [r7, #22]
 8007240:	04d9      	lsls	r1, r3, #19
 8007242:	4b38      	ldr	r3, [pc, #224]	; (8007324 <USB_EPStartXfer+0x48c>)
 8007244:	400b      	ands	r3, r1
 8007246:	69b9      	ldr	r1, [r7, #24]
 8007248:	0148      	lsls	r0, r1, #5
 800724a:	69f9      	ldr	r1, [r7, #28]
 800724c:	4401      	add	r1, r0
 800724e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007252:	4313      	orrs	r3, r2
 8007254:	610b      	str	r3, [r1, #16]
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007262:	691a      	ldr	r2, [r3, #16]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800726c:	69b9      	ldr	r1, [r7, #24]
 800726e:	0148      	lsls	r0, r1, #5
 8007270:	69f9      	ldr	r1, [r7, #28]
 8007272:	4401      	add	r1, r0
 8007274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007278:	4313      	orrs	r3, r2
 800727a:	610b      	str	r3, [r1, #16]
 800727c:	79fb      	ldrb	r3, [r7, #7]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d10d      	bne.n	800729e <USB_EPStartXfer+0x406>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <USB_EPStartXfer+0x406>
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6919      	ldr	r1, [r3, #16]
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	460a      	mov	r2, r1
 800729c:	615a      	str	r2, [r3, #20]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	791b      	ldrb	r3, [r3, #4]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d128      	bne.n	80072f8 <USB_EPStartXfer+0x460>
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d110      	bne.n	80072d8 <USB_EPStartXfer+0x440>
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e00f      	b.n	80072f8 <USB_EPStartXfer+0x460>
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	440a      	add	r2, r1
 800730e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	2300      	movs	r3, #0
 800731a:	4618      	mov	r0, r3
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	1ff80000 	.word	0x1ff80000

08007328 <USB_EP0StartXfer>:
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	71fb      	strb	r3, [r7, #7]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	617b      	str	r3, [r7, #20]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	2b01      	cmp	r3, #1
 8007346:	f040 80ce 	bne.w	80074e6 <USB_EP0StartXfer+0x1be>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d132      	bne.n	80073b8 <USB_EP0StartXfer+0x90>
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007370:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007374:	6113      	str	r3, [r2, #16]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	440a      	add	r2, r1
 800738c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007394:	6113      	str	r3, [r2, #16]
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b0:	0cdb      	lsrs	r3, r3, #19
 80073b2:	04db      	lsls	r3, r3, #19
 80073b4:	6113      	str	r3, [r2, #16]
 80073b6:	e04e      	b.n	8007456 <USB_EP0StartXfer+0x12e>
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d2:	0cdb      	lsrs	r3, r3, #19
 80073d4:	04db      	lsls	r3, r3, #19
 80073d6:	6113      	str	r3, [r2, #16]
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073fa:	6113      	str	r3, [r2, #16]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	699a      	ldr	r2, [r3, #24]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	429a      	cmp	r2, r3
 8007406:	d903      	bls.n	8007410 <USB_EP0StartXfer+0xe8>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	619a      	str	r2, [r3, #24]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800742a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800742e:	6113      	str	r3, [r2, #16]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007446:	6939      	ldr	r1, [r7, #16]
 8007448:	0148      	lsls	r0, r1, #5
 800744a:	6979      	ldr	r1, [r7, #20]
 800744c:	4401      	add	r1, r0
 800744e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007452:	4313      	orrs	r3, r2
 8007454:	610b      	str	r3, [r1, #16]
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d11e      	bne.n	800749a <USB_EP0StartXfer+0x172>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d009      	beq.n	8007478 <USB_EP0StartXfer+0x150>
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007470:	461a      	mov	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	6153      	str	r3, [r2, #20]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	440a      	add	r2, r1
 800748e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007492:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e097      	b.n	80075ca <USB_EP0StartXfer+0x2a2>
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	0151      	lsls	r1, r2, #5
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	440a      	add	r2, r1
 80074b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8083 	beq.w	80075ca <USB_EP0StartXfer+0x2a2>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	2101      	movs	r1, #1
 80074d6:	fa01 f303 	lsl.w	r3, r1, r3
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e0:	4313      	orrs	r3, r2
 80074e2:	634b      	str	r3, [r1, #52]	; 0x34
 80074e4:	e071      	b.n	80075ca <USB_EP0StartXfer+0x2a2>
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007500:	0cdb      	lsrs	r3, r3, #19
 8007502:	04db      	lsls	r3, r3, #19
 8007504:	6113      	str	r3, [r2, #16]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007520:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007524:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007528:	6113      	str	r3, [r2, #16]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <USB_EP0StartXfer+0x212>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	68da      	ldr	r2, [r3, #12]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	619a      	str	r2, [r3, #24]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	61da      	str	r2, [r3, #28]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800755c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007560:	6113      	str	r3, [r2, #16]
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007578:	6939      	ldr	r1, [r7, #16]
 800757a:	0148      	lsls	r0, r1, #5
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	4401      	add	r1, r0
 8007580:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007584:	4313      	orrs	r3, r2
 8007586:	610b      	str	r3, [r1, #16]
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d10d      	bne.n	80075aa <USB_EP0StartXfer+0x282>
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <USB_EP0StartXfer+0x282>
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	6919      	ldr	r1, [r3, #16]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a6:	460a      	mov	r2, r1
 80075a8:	615a      	str	r2, [r3, #20]
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	2300      	movs	r3, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USB_EPStopXfer>:
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	2300      	movs	r3, #0
 80075e8:	75fb      	strb	r3, [r7, #23]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	613b      	str	r3, [r7, #16]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	785b      	ldrb	r3, [r3, #1]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d14a      	bne.n	800768c <USB_EPStopXfer+0xb4>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800760a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800760e:	f040 8086 	bne.w	800771e <USB_EPStopXfer+0x146>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	7812      	ldrb	r2, [r2, #0]
 8007626:	0151      	lsls	r1, r2, #5
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	440a      	add	r2, r1
 800762c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	7812      	ldrb	r2, [r2, #0]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f242 7210 	movw	r2, #10000	; 0x2710
 8007666:	4293      	cmp	r3, r2
 8007668:	d902      	bls.n	8007670 <USB_EPStopXfer+0x98>
 800766a:	2301      	movs	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
 800766e:	e056      	b.n	800771e <USB_EPStopXfer+0x146>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007688:	d0e7      	beq.n	800765a <USB_EPStopXfer+0x82>
 800768a:	e048      	b.n	800771e <USB_EPStopXfer+0x146>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076a4:	d13b      	bne.n	800771e <USB_EPStopXfer+0x146>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	7812      	ldrb	r2, [r2, #0]
 80076ba:	0151      	lsls	r1, r2, #5
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	440a      	add	r2, r1
 80076c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	0151      	lsls	r1, r2, #5
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	440a      	add	r2, r1
 80076e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	3301      	adds	r3, #1
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d902      	bls.n	8007704 <USB_EPStopXfer+0x12c>
 80076fe:	2301      	movs	r3, #1
 8007700:	75fb      	strb	r3, [r7, #23]
 8007702:	e00c      	b.n	800771e <USB_EPStopXfer+0x146>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800771c:	d0e7      	beq.n	80076ee <USB_EPStopXfer+0x116>
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	4618      	mov	r0, r3
 8007722:	371c      	adds	r7, #28
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USB_WritePacket>:
 800772c:	b480      	push	{r7}
 800772e:	b089      	sub	sp, #36	; 0x24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	4611      	mov	r1, r2
 8007738:	461a      	mov	r2, r3
 800773a:	460b      	mov	r3, r1
 800773c:	71fb      	strb	r3, [r7, #7]
 800773e:	4613      	mov	r3, r2
 8007740:	80bb      	strh	r3, [r7, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	61fb      	str	r3, [r7, #28]
 800774a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	d123      	bne.n	800779a <USB_WritePacket+0x6e>
 8007752:	88bb      	ldrh	r3, [r7, #4]
 8007754:	3303      	adds	r3, #3
 8007756:	089b      	lsrs	r3, r3, #2
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	2300      	movs	r3, #0
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	e018      	b.n	8007792 <USB_WritePacket+0x66>
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	031a      	lsls	r2, r3, #12
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	4413      	add	r3, r2
 8007768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776c:	461a      	mov	r2, r3
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	3301      	adds	r3, #1
 8007778:	61fb      	str	r3, [r7, #28]
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	3301      	adds	r3, #1
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	3301      	adds	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	3301      	adds	r3, #1
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	3301      	adds	r3, #1
 8007790:	61bb      	str	r3, [r7, #24]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	429a      	cmp	r2, r3
 8007798:	d3e2      	bcc.n	8007760 <USB_WritePacket+0x34>
 800779a:	2300      	movs	r3, #0
 800779c:	4618      	mov	r0, r3
 800779e:	3724      	adds	r7, #36	; 0x24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USB_ReadPacket>:
 80077a8:	b480      	push	{r7}
 80077aa:	b08b      	sub	sp, #44	; 0x2c
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	80fb      	strh	r3, [r7, #6]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	089b      	lsrs	r3, r3, #2
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	83fb      	strh	r3, [r7, #30]
 80077ce:	2300      	movs	r3, #0
 80077d0:	623b      	str	r3, [r7, #32]
 80077d2:	e014      	b.n	80077fe <USB_ReadPacket+0x56>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	3301      	adds	r3, #1
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	3301      	adds	r3, #1
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	3301      	adds	r3, #1
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	3301      	adds	r3, #1
 80077f6:	627b      	str	r3, [r7, #36]	; 0x24
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	3301      	adds	r3, #1
 80077fc:	623b      	str	r3, [r7, #32]
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	429a      	cmp	r2, r3
 8007804:	d3e6      	bcc.n	80077d4 <USB_ReadPacket+0x2c>
 8007806:	8bfb      	ldrh	r3, [r7, #30]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01e      	beq.n	800784a <USB_ReadPacket+0xa2>
 800780c:	2300      	movs	r3, #0
 800780e:	623b      	str	r3, [r7, #32]
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007816:	461a      	mov	r2, r3
 8007818:	f107 0310 	add.w	r3, r7, #16
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	fa22 f303 	lsr.w	r3, r2, r3
 800782c:	b2da      	uxtb	r2, r3
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	6a3b      	ldr	r3, [r7, #32]
 8007834:	3301      	adds	r3, #1
 8007836:	623b      	str	r3, [r7, #32]
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	3301      	adds	r3, #1
 800783c:	627b      	str	r3, [r7, #36]	; 0x24
 800783e:	8bfb      	ldrh	r3, [r7, #30]
 8007840:	3b01      	subs	r3, #1
 8007842:	83fb      	strh	r3, [r7, #30]
 8007844:	8bfb      	ldrh	r3, [r7, #30]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1ea      	bne.n	8007820 <USB_ReadPacket+0x78>
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	4618      	mov	r0, r3
 800784e:	372c      	adds	r7, #44	; 0x2c
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USB_EPSetStall>:
 8007858:	b480      	push	{r7}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	60bb      	str	r3, [r7, #8]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d12c      	bne.n	80078ce <USB_EPSetStall+0x76>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	db12      	blt.n	80078ac <USB_EPSetStall+0x54>
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00f      	beq.n	80078ac <USB_EPSetStall+0x54>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	0151      	lsls	r1, r2, #5
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	440a      	add	r2, r1
 80078c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	e02b      	b.n	8007926 <USB_EPSetStall+0xce>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	db12      	blt.n	8007906 <USB_EPSetStall+0xae>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00f      	beq.n	8007906 <USB_EPSetStall+0xae>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	0151      	lsls	r1, r2, #5
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	440a      	add	r2, r1
 80078fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	2300      	movs	r3, #0
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USB_EPClearStall>:
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	785b      	ldrb	r3, [r3, #1]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d128      	bne.n	80079a2 <USB_EPClearStall+0x6e>
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	440a      	add	r2, r1
 8007966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800796a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	791b      	ldrb	r3, [r3, #4]
 8007974:	2b03      	cmp	r3, #3
 8007976:	d003      	beq.n	8007980 <USB_EPClearStall+0x4c>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	791b      	ldrb	r3, [r3, #4]
 800797c:	2b02      	cmp	r3, #2
 800797e:	d138      	bne.n	80079f2 <USB_EPClearStall+0xbe>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	e027      	b.n	80079f2 <USB_EPClearStall+0xbe>
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	791b      	ldrb	r3, [r3, #4]
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d003      	beq.n	80079d2 <USB_EPClearStall+0x9e>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d10f      	bne.n	80079f2 <USB_EPClearStall+0xbe>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	2300      	movs	r3, #0
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <USB_SetDevAddress>:
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007a34:	68f9      	ldr	r1, [r7, #12]
 8007a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	600b      	str	r3, [r1, #0]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_DevConnect>:
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a7a:	f023 0302 	bic.w	r3, r3, #2
 8007a7e:	6053      	str	r3, [r2, #4]
 8007a80:	2300      	movs	r3, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <USB_DevDisconnect>:
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007aa8:	f023 0303 	bic.w	r3, r3, #3
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007abc:	f043 0302 	orr.w	r3, r3, #2
 8007ac0:	6053      	str	r3, [r2, #4]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_ReadInterrupts>:
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <USB_ReadDevAllOutEpInterrupt>:
 8007af6:	b480      	push	{r7}
 8007af8:	b085      	sub	sp, #20
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	60bb      	str	r3, [r7, #8]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	4013      	ands	r3, r2
 8007b18:	60bb      	str	r3, [r7, #8]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	0c1b      	lsrs	r3, r3, #16
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3714      	adds	r7, #20
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USB_ReadDevAllInEpInterrupt>:
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	60bb      	str	r3, [r7, #8]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	60bb      	str	r3, [r7, #8]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <USB_ReadDevOutEPInterrupt>:
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	70fb      	strb	r3, [r7, #3]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	78fb      	ldrb	r3, [r7, #3]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <USB_ReadDevInEPInterrupt>:
 8007b9a:	b480      	push	{r7}
 8007b9c:	b087      	sub	sp, #28
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	613b      	str	r3, [r7, #16]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	f003 030f 	and.w	r3, r3, #15
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bca:	01db      	lsls	r3, r3, #7
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4013      	ands	r3, r2
 8007be6:	60bb      	str	r3, [r7, #8]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4618      	mov	r0, r3
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <USB_GetMode>:
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	4618      	mov	r0, r3
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USB_ActivateSetup>:
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c48:	6053      	str	r3, [r2, #4]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3714      	adds	r7, #20
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USB_EP0_OutStart>:
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	460b      	mov	r3, r1
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	72fb      	strb	r3, [r7, #11]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	333c      	adds	r3, #60	; 0x3c
 8007c6e:	3304      	adds	r3, #4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	613b      	str	r3, [r7, #16]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	4a26      	ldr	r2, [pc, #152]	; (8007d10 <USB_EP0_OutStart+0xb8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d90a      	bls.n	8007c92 <USB_EP0_OutStart+0x3a>
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c8c:	d101      	bne.n	8007c92 <USB_EP0_OutStart+0x3a>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e037      	b.n	8007d02 <USB_EP0_OutStart+0xaa>
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c98:	461a      	mov	r2, r3
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6113      	str	r3, [r2, #16]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cb0:	6113      	str	r3, [r2, #16]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc0:	f043 0318 	orr.w	r3, r3, #24
 8007cc4:	6113      	str	r3, [r2, #16]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007cd8:	6113      	str	r3, [r2, #16]
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d10f      	bne.n	8007d00 <USB_EP0_OutStart+0xa8>
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6153      	str	r3, [r2, #20]
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cfa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	2300      	movs	r3, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	371c      	adds	r7, #28
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	4f54300a 	.word	0x4f54300a

08007d14 <USB_CoreReset>:
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3301      	adds	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4a13      	ldr	r2, [pc, #76]	; (8007d78 <USB_CoreReset+0x64>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d901      	bls.n	8007d32 <USB_CoreReset+0x1e>
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e01b      	b.n	8007d6a <USB_CoreReset+0x56>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	daf2      	bge.n	8007d20 <USB_CoreReset+0xc>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f043 0201 	orr.w	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	611a      	str	r2, [r3, #16]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4a09      	ldr	r2, [pc, #36]	; (8007d78 <USB_CoreReset+0x64>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d901      	bls.n	8007d5c <USB_CoreReset+0x48>
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e006      	b.n	8007d6a <USB_CoreReset+0x56>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d0f0      	beq.n	8007d4a <USB_CoreReset+0x36>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	00030d40 	.word	0x00030d40

08007d7c <USBD_CDC_Init>:
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
 8007d88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d8c:	f003 ff0e 	bl	800bbac <USBD_static_malloc>
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <USBD_CDC_Init+0x30>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32b0      	adds	r2, #176	; 0xb0
 8007da2:	2100      	movs	r1, #0
 8007da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007da8:	2302      	movs	r3, #2
 8007daa:	e0d4      	b.n	8007f56 <USBD_CDC_Init+0x1da>
 8007dac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007db0:	2100      	movs	r1, #0
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f004 f87d 	bl	800beb2 <memset>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	32b0      	adds	r2, #176	; 0xb0
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	32b0      	adds	r2, #176	; 0xb0
 8007dd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	7c1b      	ldrb	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d138      	bne.n	8007e56 <USBD_CDC_Init+0xda>
 8007de4:	4b5e      	ldr	r3, [pc, #376]	; (8007f60 <USBD_CDC_Init+0x1e4>)
 8007de6:	7819      	ldrb	r1, [r3, #0]
 8007de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dec:	2202      	movs	r2, #2
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f003 fdb9 	bl	800b966 <USBD_LL_OpenEP>
 8007df4:	4b5a      	ldr	r3, [pc, #360]	; (8007f60 <USBD_CDC_Init+0x1e4>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 020f 	and.w	r2, r3, #15
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	3324      	adds	r3, #36	; 0x24
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	801a      	strh	r2, [r3, #0]
 8007e0e:	4b55      	ldr	r3, [pc, #340]	; (8007f64 <USBD_CDC_Init+0x1e8>)
 8007e10:	7819      	ldrb	r1, [r3, #0]
 8007e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e16:	2202      	movs	r2, #2
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f003 fda4 	bl	800b966 <USBD_LL_OpenEP>
 8007e1e:	4b51      	ldr	r3, [pc, #324]	; (8007f64 <USBD_CDC_Init+0x1e8>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f003 020f 	and.w	r2, r3, #15
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	440b      	add	r3, r1
 8007e32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007e36:	2201      	movs	r2, #1
 8007e38:	801a      	strh	r2, [r3, #0]
 8007e3a:	4b4b      	ldr	r3, [pc, #300]	; (8007f68 <USBD_CDC_Init+0x1ec>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	f003 020f 	and.w	r2, r3, #15
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	3326      	adds	r3, #38	; 0x26
 8007e50:	2210      	movs	r2, #16
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	e035      	b.n	8007ec2 <USBD_CDC_Init+0x146>
 8007e56:	4b42      	ldr	r3, [pc, #264]	; (8007f60 <USBD_CDC_Init+0x1e4>)
 8007e58:	7819      	ldrb	r1, [r3, #0]
 8007e5a:	2340      	movs	r3, #64	; 0x40
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f003 fd81 	bl	800b966 <USBD_LL_OpenEP>
 8007e64:	4b3e      	ldr	r3, [pc, #248]	; (8007f60 <USBD_CDC_Init+0x1e4>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 020f 	and.w	r2, r3, #15
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	4613      	mov	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	440b      	add	r3, r1
 8007e78:	3324      	adds	r3, #36	; 0x24
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	801a      	strh	r2, [r3, #0]
 8007e7e:	4b39      	ldr	r3, [pc, #228]	; (8007f64 <USBD_CDC_Init+0x1e8>)
 8007e80:	7819      	ldrb	r1, [r3, #0]
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	2202      	movs	r2, #2
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f003 fd6d 	bl	800b966 <USBD_LL_OpenEP>
 8007e8c:	4b35      	ldr	r3, [pc, #212]	; (8007f64 <USBD_CDC_Init+0x1e8>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	f003 020f 	and.w	r2, r3, #15
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	4b2f      	ldr	r3, [pc, #188]	; (8007f68 <USBD_CDC_Init+0x1ec>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	f003 020f 	and.w	r2, r3, #15
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	3326      	adds	r3, #38	; 0x26
 8007ebe:	2210      	movs	r2, #16
 8007ec0:	801a      	strh	r2, [r3, #0]
 8007ec2:	4b29      	ldr	r3, [pc, #164]	; (8007f68 <USBD_CDC_Init+0x1ec>)
 8007ec4:	7819      	ldrb	r1, [r3, #0]
 8007ec6:	2308      	movs	r3, #8
 8007ec8:	2203      	movs	r2, #3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f003 fd4b 	bl	800b966 <USBD_LL_OpenEP>
 8007ed0:	4b25      	ldr	r3, [pc, #148]	; (8007f68 <USBD_CDC_Init+0x1ec>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 020f 	and.w	r2, r3, #15
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	440b      	add	r3, r1
 8007ee4:	3324      	adds	r3, #36	; 0x24
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	801a      	strh	r2, [r3, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	33b0      	adds	r3, #176	; 0xb0
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4798      	blx	r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <USBD_CDC_Init+0x1a8>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e018      	b.n	8007f56 <USBD_CDC_Init+0x1da>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7c1b      	ldrb	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <USBD_CDC_Init+0x1c6>
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <USBD_CDC_Init+0x1e8>)
 8007f2e:	7819      	ldrb	r1, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f003 fe02 	bl	800bb44 <USBD_LL_PrepareReceive>
 8007f40:	e008      	b.n	8007f54 <USBD_CDC_Init+0x1d8>
 8007f42:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <USBD_CDC_Init+0x1e8>)
 8007f44:	7819      	ldrb	r1, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f4c:	2340      	movs	r3, #64	; 0x40
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f003 fdf8 	bl	800bb44 <USBD_LL_PrepareReceive>
 8007f54:	2300      	movs	r3, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	200000c7 	.word	0x200000c7
 8007f64:	200000c8 	.word	0x200000c8
 8007f68:	200000c9 	.word	0x200000c9

08007f6c <USBD_CDC_DeInit>:
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
 8007f78:	4b3a      	ldr	r3, [pc, #232]	; (8008064 <USBD_CDC_DeInit+0xf8>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f003 fd17 	bl	800b9b2 <USBD_LL_CloseEP>
 8007f84:	4b37      	ldr	r3, [pc, #220]	; (8008064 <USBD_CDC_DeInit+0xf8>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	f003 020f 	and.w	r2, r3, #15
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4413      	add	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	440b      	add	r3, r1
 8007f98:	3324      	adds	r3, #36	; 0x24
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	801a      	strh	r2, [r3, #0]
 8007f9e:	4b32      	ldr	r3, [pc, #200]	; (8008068 <USBD_CDC_DeInit+0xfc>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f003 fd04 	bl	800b9b2 <USBD_LL_CloseEP>
 8007faa:	4b2f      	ldr	r3, [pc, #188]	; (8008068 <USBD_CDC_DeInit+0xfc>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	f003 020f 	and.w	r2, r3, #15
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	4b29      	ldr	r3, [pc, #164]	; (800806c <USBD_CDC_DeInit+0x100>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f003 fcf0 	bl	800b9b2 <USBD_LL_CloseEP>
 8007fd2:	4b26      	ldr	r3, [pc, #152]	; (800806c <USBD_CDC_DeInit+0x100>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	f003 020f 	and.w	r2, r3, #15
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3324      	adds	r3, #36	; 0x24
 8007fe8:	2200      	movs	r2, #0
 8007fea:	801a      	strh	r2, [r3, #0]
 8007fec:	4b1f      	ldr	r3, [pc, #124]	; (800806c <USBD_CDC_DeInit+0x100>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 020f 	and.w	r2, r3, #15
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	3326      	adds	r3, #38	; 0x26
 8008002:	2200      	movs	r2, #0
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	32b0      	adds	r2, #176	; 0xb0
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01f      	beq.n	8008058 <USBD_CDC_DeInit+0xec>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	33b0      	adds	r3, #176	; 0xb0
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	4798      	blx	r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	32b0      	adds	r2, #176	; 0xb0
 8008036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803a:	4618      	mov	r0, r3
 800803c:	f003 fdc4 	bl	800bbc8 <USBD_static_free>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	32b0      	adds	r2, #176	; 0xb0
 800804a:	2100      	movs	r1, #0
 800804c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8008058:	2300      	movs	r3, #0
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	200000c7 	.word	0x200000c7
 8008068:	200000c8 	.word	0x200000c8
 800806c:	200000c9 	.word	0x200000c9

08008070 <USBD_CDC_Setup>:
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	32b0      	adds	r2, #176	; 0xb0
 8008084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	2300      	movs	r3, #0
 800808c:	737b      	strb	r3, [r7, #13]
 800808e:	2300      	movs	r3, #0
 8008090:	817b      	strh	r3, [r7, #10]
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <USBD_CDC_Setup+0x30>
 800809c:	2303      	movs	r3, #3
 800809e:	e0bf      	b.n	8008220 <USBD_CDC_Setup+0x1b0>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d050      	beq.n	800814e <USBD_CDC_Setup+0xde>
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	f040 80af 	bne.w	8008210 <USBD_CDC_Setup+0x1a0>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	88db      	ldrh	r3, [r3, #6]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d03a      	beq.n	8008130 <USBD_CDC_Setup+0xc0>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b25b      	sxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da1b      	bge.n	80080fc <USBD_CDC_Setup+0x8c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	33b0      	adds	r3, #176	; 0xb0
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	7850      	ldrb	r0, [r2, #1]
 80080da:	6939      	ldr	r1, [r7, #16]
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	88d2      	ldrh	r2, [r2, #6]
 80080e0:	4798      	blx	r3
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	88db      	ldrh	r3, [r3, #6]
 80080e6:	2b07      	cmp	r3, #7
 80080e8:	bf28      	it	cs
 80080ea:	2307      	movcs	r3, #7
 80080ec:	81fb      	strh	r3, [r7, #14]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	89fa      	ldrh	r2, [r7, #14]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 fda5 	bl	8009c44 <USBD_CtlSendData>
 80080fa:	e090      	b.n	800821e <USBD_CDC_Setup+0x1ae>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	785a      	ldrb	r2, [r3, #1]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	88db      	ldrh	r3, [r3, #6]
 800810a:	2b3f      	cmp	r3, #63	; 0x3f
 800810c:	d803      	bhi.n	8008116 <USBD_CDC_Setup+0xa6>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	e000      	b.n	8008118 <USBD_CDC_Setup+0xa8>
 8008116:	2240      	movs	r2, #64	; 0x40
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 800811e:	6939      	ldr	r1, [r7, #16]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008126:	461a      	mov	r2, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 fdb7 	bl	8009c9c <USBD_CtlPrepareRx>
 800812e:	e076      	b.n	800821e <USBD_CDC_Setup+0x1ae>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	33b0      	adds	r3, #176	; 0xb0
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	7850      	ldrb	r0, [r2, #1]
 8008146:	2200      	movs	r2, #0
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	4798      	blx	r3
 800814c:	e067      	b.n	800821e <USBD_CDC_Setup+0x1ae>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	2b0b      	cmp	r3, #11
 8008154:	d851      	bhi.n	80081fa <USBD_CDC_Setup+0x18a>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <USBD_CDC_Setup+0xec>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	0800818d 	.word	0x0800818d
 8008160:	08008209 	.word	0x08008209
 8008164:	080081fb 	.word	0x080081fb
 8008168:	080081fb 	.word	0x080081fb
 800816c:	080081fb 	.word	0x080081fb
 8008170:	080081fb 	.word	0x080081fb
 8008174:	080081fb 	.word	0x080081fb
 8008178:	080081fb 	.word	0x080081fb
 800817c:	080081fb 	.word	0x080081fb
 8008180:	080081fb 	.word	0x080081fb
 8008184:	080081b7 	.word	0x080081b7
 8008188:	080081e1 	.word	0x080081e1
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b03      	cmp	r3, #3
 8008196:	d107      	bne.n	80081a8 <USBD_CDC_Setup+0x138>
 8008198:	f107 030a 	add.w	r3, r7, #10
 800819c:	2202      	movs	r2, #2
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 fd4f 	bl	8009c44 <USBD_CtlSendData>
 80081a6:	e032      	b.n	800820e <USBD_CDC_Setup+0x19e>
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 fcd9 	bl	8009b62 <USBD_CtlError>
 80081b0:	2303      	movs	r3, #3
 80081b2:	75fb      	strb	r3, [r7, #23]
 80081b4:	e02b      	b.n	800820e <USBD_CDC_Setup+0x19e>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d107      	bne.n	80081d2 <USBD_CDC_Setup+0x162>
 80081c2:	f107 030d 	add.w	r3, r7, #13
 80081c6:	2201      	movs	r2, #1
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fd3a 	bl	8009c44 <USBD_CtlSendData>
 80081d0:	e01d      	b.n	800820e <USBD_CDC_Setup+0x19e>
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 fcc4 	bl	8009b62 <USBD_CtlError>
 80081da:	2303      	movs	r3, #3
 80081dc:	75fb      	strb	r3, [r7, #23]
 80081de:	e016      	b.n	800820e <USBD_CDC_Setup+0x19e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d00f      	beq.n	800820c <USBD_CDC_Setup+0x19c>
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f001 fcb7 	bl	8009b62 <USBD_CtlError>
 80081f4:	2303      	movs	r3, #3
 80081f6:	75fb      	strb	r3, [r7, #23]
 80081f8:	e008      	b.n	800820c <USBD_CDC_Setup+0x19c>
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 fcb0 	bl	8009b62 <USBD_CtlError>
 8008202:	2303      	movs	r3, #3
 8008204:	75fb      	strb	r3, [r7, #23]
 8008206:	e002      	b.n	800820e <USBD_CDC_Setup+0x19e>
 8008208:	bf00      	nop
 800820a:	e008      	b.n	800821e <USBD_CDC_Setup+0x1ae>
 800820c:	bf00      	nop
 800820e:	e006      	b.n	800821e <USBD_CDC_Setup+0x1ae>
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 fca5 	bl	8009b62 <USBD_CtlError>
 8008218:	2303      	movs	r3, #3
 800821a:	75fb      	strb	r3, [r7, #23]
 800821c:	bf00      	nop
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CDC_DataIn>:
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	32b0      	adds	r2, #176	; 0xb0
 8008246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <USBD_CDC_DataIn+0x2a>
 800824e:	2303      	movs	r3, #3
 8008250:	e065      	b.n	800831e <USBD_CDC_DataIn+0xf6>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	32b0      	adds	r2, #176	; 0xb0
 800825c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008260:	60bb      	str	r3, [r7, #8]
 8008262:	78fb      	ldrb	r3, [r7, #3]
 8008264:	f003 020f 	and.w	r2, r3, #15
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	440b      	add	r3, r1
 8008274:	3318      	adds	r3, #24
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d02f      	beq.n	80082dc <USBD_CDC_DataIn+0xb4>
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	f003 020f 	and.w	r2, r3, #15
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	3318      	adds	r3, #24
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	78fb      	ldrb	r3, [r7, #3]
 8008294:	f003 010f 	and.w	r1, r3, #15
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	460b      	mov	r3, r1
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	440b      	add	r3, r1
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4403      	add	r3, r0
 80082a4:	3348      	adds	r3, #72	; 0x48
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80082ac:	fb01 f303 	mul.w	r3, r1, r3
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d112      	bne.n	80082dc <USBD_CDC_DataIn+0xb4>
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	f003 020f 	and.w	r2, r3, #15
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	3318      	adds	r3, #24
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	78f9      	ldrb	r1, [r7, #3]
 80082d0:	2300      	movs	r3, #0
 80082d2:	2200      	movs	r2, #0
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f003 fc14 	bl	800bb02 <USBD_LL_Transmit>
 80082da:	e01f      	b.n	800831c <USBD_CDC_DataIn+0xf4>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	33b0      	adds	r3, #176	; 0xb0
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d010      	beq.n	800831c <USBD_CDC_DataIn+0xf4>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	33b0      	adds	r3, #176	; 0xb0
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	4798      	blx	r3
 800831c:	2300      	movs	r3, #0
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_CDC_DataOut>:
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	32b0      	adds	r2, #176	; 0xb0
 800833c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	32b0      	adds	r2, #176	; 0xb0
 800834c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <USBD_CDC_DataOut+0x32>
 8008354:	2303      	movs	r3, #3
 8008356:	e01a      	b.n	800838e <USBD_CDC_DataOut+0x68>
 8008358:	78fb      	ldrb	r3, [r7, #3]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f003 fc12 	bl	800bb86 <USBD_LL_GetRxDataSize>
 8008362:	4602      	mov	r2, r0
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	33b0      	adds	r3, #176	; 0xb0
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008388:	4611      	mov	r1, r2
 800838a:	4798      	blx	r3
 800838c:	2300      	movs	r3, #0
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_CDC_EP0_RxReady>:
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32b0      	adds	r2, #176	; 0xb0
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <USBD_CDC_EP0_RxReady+0x22>
 80083b4:	2303      	movs	r3, #3
 80083b6:	e025      	b.n	8008404 <USBD_CDC_EP0_RxReady+0x6e>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	33b0      	adds	r3, #176	; 0xb0
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01a      	beq.n	8008402 <USBD_CDC_EP0_RxReady+0x6c>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083d2:	2bff      	cmp	r3, #255	; 0xff
 80083d4:	d015      	beq.n	8008402 <USBD_CDC_EP0_RxReady+0x6c>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	33b0      	adds	r3, #176	; 0xb0
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
 80083f6:	b292      	uxth	r2, r2
 80083f8:	4798      	blx	r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	22ff      	movs	r2, #255	; 0xff
 80083fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8008402:	2300      	movs	r3, #0
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_CDC_GetFSCfgDesc>:
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	2182      	movs	r1, #130	; 0x82
 8008416:	4818      	ldr	r0, [pc, #96]	; (8008478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008418:	f000 fd6b 	bl	8008ef2 <USBD_GetEpDesc>
 800841c:	6178      	str	r0, [r7, #20]
 800841e:	2101      	movs	r1, #1
 8008420:	4815      	ldr	r0, [pc, #84]	; (8008478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008422:	f000 fd66 	bl	8008ef2 <USBD_GetEpDesc>
 8008426:	6138      	str	r0, [r7, #16]
 8008428:	2181      	movs	r1, #129	; 0x81
 800842a:	4813      	ldr	r0, [pc, #76]	; (8008478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800842c:	f000 fd61 	bl	8008ef2 <USBD_GetEpDesc>
 8008430:	60f8      	str	r0, [r7, #12]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <USBD_CDC_GetFSCfgDesc+0x32>
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2210      	movs	r2, #16
 800843c:	719a      	strb	r2, [r3, #6]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d006      	beq.n	8008452 <USBD_CDC_GetFSCfgDesc+0x46>
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	2200      	movs	r2, #0
 8008448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800844c:	711a      	strb	r2, [r3, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	715a      	strb	r2, [r3, #5]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d006      	beq.n	8008466 <USBD_CDC_GetFSCfgDesc+0x5a>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008460:	711a      	strb	r2, [r3, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	715a      	strb	r2, [r3, #5]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2243      	movs	r2, #67	; 0x43
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	4b02      	ldr	r3, [pc, #8]	; (8008478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000084 	.word	0x20000084

0800847c <USBD_CDC_GetHSCfgDesc>:
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	2182      	movs	r1, #130	; 0x82
 8008486:	4818      	ldr	r0, [pc, #96]	; (80084e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008488:	f000 fd33 	bl	8008ef2 <USBD_GetEpDesc>
 800848c:	6178      	str	r0, [r7, #20]
 800848e:	2101      	movs	r1, #1
 8008490:	4815      	ldr	r0, [pc, #84]	; (80084e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008492:	f000 fd2e 	bl	8008ef2 <USBD_GetEpDesc>
 8008496:	6138      	str	r0, [r7, #16]
 8008498:	2181      	movs	r1, #129	; 0x81
 800849a:	4813      	ldr	r0, [pc, #76]	; (80084e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800849c:	f000 fd29 	bl	8008ef2 <USBD_GetEpDesc>
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <USBD_CDC_GetHSCfgDesc+0x32>
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2210      	movs	r2, #16
 80084ac:	719a      	strb	r2, [r3, #6]
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d006      	beq.n	80084c2 <USBD_CDC_GetHSCfgDesc+0x46>
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	2200      	movs	r2, #0
 80084b8:	711a      	strb	r2, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f042 0202 	orr.w	r2, r2, #2
 80084c0:	715a      	strb	r2, [r3, #5]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d006      	beq.n	80084d6 <USBD_CDC_GetHSCfgDesc+0x5a>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	711a      	strb	r2, [r3, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f042 0202 	orr.w	r2, r2, #2
 80084d4:	715a      	strb	r2, [r3, #5]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2243      	movs	r2, #67	; 0x43
 80084da:	801a      	strh	r2, [r3, #0]
 80084dc:	4b02      	ldr	r3, [pc, #8]	; (80084e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000084 	.word	0x20000084

080084ec <USBD_CDC_GetOtherSpeedCfgDesc>:
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	2182      	movs	r1, #130	; 0x82
 80084f6:	4818      	ldr	r0, [pc, #96]	; (8008558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80084f8:	f000 fcfb 	bl	8008ef2 <USBD_GetEpDesc>
 80084fc:	6178      	str	r0, [r7, #20]
 80084fe:	2101      	movs	r1, #1
 8008500:	4815      	ldr	r0, [pc, #84]	; (8008558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008502:	f000 fcf6 	bl	8008ef2 <USBD_GetEpDesc>
 8008506:	6138      	str	r0, [r7, #16]
 8008508:	2181      	movs	r1, #129	; 0x81
 800850a:	4813      	ldr	r0, [pc, #76]	; (8008558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800850c:	f000 fcf1 	bl	8008ef2 <USBD_GetEpDesc>
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2210      	movs	r2, #16
 800851c:	719a      	strb	r2, [r3, #6]
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d006      	beq.n	8008532 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2200      	movs	r2, #0
 8008528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800852c:	711a      	strb	r2, [r3, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	715a      	strb	r2, [r3, #5]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008540:	711a      	strb	r2, [r3, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	715a      	strb	r2, [r3, #5]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2243      	movs	r2, #67	; 0x43
 800854a:	801a      	strh	r2, [r3, #0]
 800854c:	4b02      	ldr	r3, [pc, #8]	; (8008558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20000084 	.word	0x20000084

0800855c <USBD_CDC_GetDeviceQualifierDescriptor>:
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	220a      	movs	r2, #10
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	4b03      	ldr	r3, [pc, #12]	; (8008578 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	20000040 	.word	0x20000040

0800857c <USBD_CDC_RegisterInterface>:
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <USBD_CDC_RegisterInterface+0x14>
 800858c:	2303      	movs	r3, #3
 800858e:	e009      	b.n	80085a4 <USBD_CDC_RegisterInterface+0x28>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	33b0      	adds	r3, #176	; 0xb0
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	605a      	str	r2, [r3, #4]
 80085a2:	2300      	movs	r3, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USBD_CDC_SetTxBuffer>:
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	32b0      	adds	r2, #176	; 0xb0
 80085c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <USBD_CDC_SetTxBuffer+0x26>
 80085d2:	2303      	movs	r3, #3
 80085d4:	e008      	b.n	80085e8 <USBD_CDC_SetTxBuffer+0x38>
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80085e6:	2300      	movs	r3, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <USBD_CDC_SetRxBuffer>:
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	32b0      	adds	r2, #176	; 0xb0
 8008608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <USBD_CDC_SetRxBuffer+0x24>
 8008614:	2303      	movs	r3, #3
 8008616:	e004      	b.n	8008622 <USBD_CDC_SetRxBuffer+0x2e>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008620:	2300      	movs	r3, #0
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
	...

08008630 <USBD_CDC_TransmitPacket>:
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	32b0      	adds	r2, #176	; 0xb0
 8008642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008646:	60bb      	str	r3, [r7, #8]
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32b0      	adds	r2, #176	; 0xb0
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <USBD_CDC_TransmitPacket+0x32>
 800865e:	2303      	movs	r3, #3
 8008660:	e025      	b.n	80086ae <USBD_CDC_TransmitPacket+0x7e>
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008668:	2b00      	cmp	r3, #0
 800866a:	d11f      	bne.n	80086ac <USBD_CDC_TransmitPacket+0x7c>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2201      	movs	r2, #1
 8008670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008674:	4b10      	ldr	r3, [pc, #64]	; (80086b8 <USBD_CDC_TransmitPacket+0x88>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	f003 020f 	and.w	r2, r3, #15
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4403      	add	r3, r0
 800868e:	3318      	adds	r3, #24
 8008690:	6019      	str	r1, [r3, #0]
 8008692:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <USBD_CDC_TransmitPacket+0x88>)
 8008694:	7819      	ldrb	r1, [r3, #0]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f003 fa2d 	bl	800bb02 <USBD_LL_Transmit>
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200000c7 	.word	0x200000c7

080086bc <USBD_CDC_ReceivePacket>:
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	32b0      	adds	r2, #176	; 0xb0
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	60fb      	str	r3, [r7, #12]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	32b0      	adds	r2, #176	; 0xb0
 80086de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <USBD_CDC_ReceivePacket+0x2e>
 80086e6:	2303      	movs	r3, #3
 80086e8:	e018      	b.n	800871c <USBD_CDC_ReceivePacket+0x60>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7c1b      	ldrb	r3, [r3, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <USBD_CDC_ReceivePacket+0x4c>
 80086f2:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <USBD_CDC_ReceivePacket+0x68>)
 80086f4:	7819      	ldrb	r1, [r3, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f003 fa1f 	bl	800bb44 <USBD_LL_PrepareReceive>
 8008706:	e008      	b.n	800871a <USBD_CDC_ReceivePacket+0x5e>
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <USBD_CDC_ReceivePacket+0x68>)
 800870a:	7819      	ldrb	r1, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008712:	2340      	movs	r3, #64	; 0x40
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f003 fa15 	bl	800bb44 <USBD_LL_PrepareReceive>
 800871a:	2300      	movs	r3, #0
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	200000c8 	.word	0x200000c8

08008728 <USBD_Init>:
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	4613      	mov	r3, r2
 8008734:	71fb      	strb	r3, [r7, #7]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10a      	bne.n	8008752 <USBD_Init+0x2a>
 800873c:	4817      	ldr	r0, [pc, #92]	; (800879c <USBD_Init+0x74>)
 800873e:	f003 fb3b 	bl	800bdb8 <iprintf>
 8008742:	4817      	ldr	r0, [pc, #92]	; (80087a0 <USBD_Init+0x78>)
 8008744:	f003 fb38 	bl	800bdb8 <iprintf>
 8008748:	200a      	movs	r0, #10
 800874a:	f003 fb47 	bl	800bddc <putchar>
 800874e:	2303      	movs	r3, #3
 8008750:	e01f      	b.n	8008792 <USBD_Init+0x6a>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <USBD_Init+0x50>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	79fa      	ldrb	r2, [r7, #7]
 8008784:	701a      	strb	r2, [r3, #0]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f003 f886 	bl	800b898 <USBD_LL_Init>
 800878c:	4603      	mov	r3, r0
 800878e:	75fb      	strb	r3, [r7, #23]
 8008790:	7dfb      	ldrb	r3, [r7, #23]
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	0800cfcc 	.word	0x0800cfcc
 80087a0:	0800cfd4 	.word	0x0800cfd4

080087a4 <USBD_RegisterClass>:
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	2300      	movs	r3, #0
 80087b0:	81fb      	strh	r3, [r7, #14]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <USBD_RegisterClass+0x2a>
 80087b8:	481a      	ldr	r0, [pc, #104]	; (8008824 <USBD_RegisterClass+0x80>)
 80087ba:	f003 fafd 	bl	800bdb8 <iprintf>
 80087be:	481a      	ldr	r0, [pc, #104]	; (8008828 <USBD_RegisterClass+0x84>)
 80087c0:	f003 fafa 	bl	800bdb8 <iprintf>
 80087c4:	200a      	movs	r0, #10
 80087c6:	f003 fb09 	bl	800bddc <putchar>
 80087ca:	2303      	movs	r3, #3
 80087cc:	e025      	b.n	800881a <USBD_RegisterClass+0x76>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	32ae      	adds	r2, #174	; 0xae
 80087e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00f      	beq.n	800880a <USBD_RegisterClass+0x66>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	32ae      	adds	r2, #174	; 0xae
 80087f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	f107 020e 	add.w	r2, r7, #14
 80087fe:	4610      	mov	r0, r2
 8008800:	4798      	blx	r3
 8008802:	4602      	mov	r2, r0
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008810:	1c5a      	adds	r2, r3, #1
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
 8008818:	2300      	movs	r3, #0
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	0800cfcc 	.word	0x0800cfcc
 8008828:	0800cfec 	.word	0x0800cfec

0800882c <USBD_Start>:
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f003 f87b 	bl	800b930 <USBD_LL_Start>
 800883a:	4603      	mov	r3, r0
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_RunTestMode>:
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	2300      	movs	r3, #0
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <USBD_SetClassConfig>:
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d009      	beq.n	8008888 <USBD_SetClassConfig+0x2e>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	4611      	mov	r1, r2
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
 8008884:	4603      	mov	r3, r0
 8008886:	73fb      	strb	r3, [r7, #15]
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_ClrClassConfig>:
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	4611      	mov	r1, r2
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <USBD_ClrClassConfig+0x2a>
 80088b8:	2303      	movs	r3, #3
 80088ba:	73fb      	strb	r3, [r7, #15]
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_SetupStage>:
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	4618      	mov	r0, r3
 80088da:	f001 f908 	bl	8009aee <USBD_ParseSetupRequest>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80088ec:	461a      	mov	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088fa:	f003 031f 	and.w	r3, r3, #31
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d01a      	beq.n	8008938 <USBD_LL_SetupStage+0x72>
 8008902:	2b02      	cmp	r3, #2
 8008904:	d822      	bhi.n	800894c <USBD_LL_SetupStage+0x86>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <USBD_LL_SetupStage+0x4a>
 800890a:	2b01      	cmp	r3, #1
 800890c:	d00a      	beq.n	8008924 <USBD_LL_SetupStage+0x5e>
 800890e:	e01d      	b.n	800894c <USBD_LL_SetupStage+0x86>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fb5f 	bl	8008fdc <USBD_StdDevReq>
 800891e:	4603      	mov	r3, r0
 8008920:	73fb      	strb	r3, [r7, #15]
 8008922:	e020      	b.n	8008966 <USBD_LL_SetupStage+0xa0>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fbc7 	bl	80090c0 <USBD_StdItfReq>
 8008932:	4603      	mov	r3, r0
 8008934:	73fb      	strb	r3, [r7, #15]
 8008936:	e016      	b.n	8008966 <USBD_LL_SetupStage+0xa0>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fc29 	bl	8009198 <USBD_StdEPReq>
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	e00c      	b.n	8008966 <USBD_LL_SetupStage+0xa0>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008952:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008956:	b2db      	uxtb	r3, r3
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f003 f848 	bl	800b9f0 <USBD_LL_StallEP>
 8008960:	4603      	mov	r3, r0
 8008962:	73fb      	strb	r3, [r7, #15]
 8008964:	bf00      	nop
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_LL_DataOutStage>:
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	460b      	mov	r3, r1
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	72fb      	strb	r3, [r7, #11]
 800897e:	2300      	movs	r3, #0
 8008980:	75fb      	strb	r3, [r7, #23]
 8008982:	7afb      	ldrb	r3, [r7, #11]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d16e      	bne.n	8008a66 <USBD_LL_DataOutStage+0xf6>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800898e:	613b      	str	r3, [r7, #16]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008996:	2b03      	cmp	r3, #3
 8008998:	f040 8098 	bne.w	8008acc <USBD_LL_DataOutStage+0x15c>
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d913      	bls.n	80089d0 <USBD_LL_DataOutStage+0x60>
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	1ad2      	subs	r2, r2, r3
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	609a      	str	r2, [r3, #8]
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	4293      	cmp	r3, r2
 80089c0:	bf28      	it	cs
 80089c2:	4613      	movcs	r3, r2
 80089c4:	461a      	mov	r2, r3
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f001 f984 	bl	8009cd6 <USBD_CtlContinueRx>
 80089ce:	e07d      	b.n	8008acc <USBD_LL_DataOutStage+0x15c>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089d6:	f003 031f 	and.w	r3, r3, #31
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d014      	beq.n	8008a08 <USBD_LL_DataOutStage+0x98>
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d81d      	bhi.n	8008a1e <USBD_LL_DataOutStage+0xae>
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d002      	beq.n	80089ec <USBD_LL_DataOutStage+0x7c>
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d003      	beq.n	80089f2 <USBD_LL_DataOutStage+0x82>
 80089ea:	e018      	b.n	8008a1e <USBD_LL_DataOutStage+0xae>
 80089ec:	2300      	movs	r3, #0
 80089ee:	75bb      	strb	r3, [r7, #22]
 80089f0:	e018      	b.n	8008a24 <USBD_LL_DataOutStage+0xb4>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	4619      	mov	r1, r3
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 fa5e 	bl	8008ebe <USBD_CoreFindIF>
 8008a02:	4603      	mov	r3, r0
 8008a04:	75bb      	strb	r3, [r7, #22]
 8008a06:	e00d      	b.n	8008a24 <USBD_LL_DataOutStage+0xb4>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	4619      	mov	r1, r3
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fa60 	bl	8008ed8 <USBD_CoreFindEP>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	75bb      	strb	r3, [r7, #22]
 8008a1c:	e002      	b.n	8008a24 <USBD_LL_DataOutStage+0xb4>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75bb      	strb	r3, [r7, #22]
 8008a22:	bf00      	nop
 8008a24:	7dbb      	ldrb	r3, [r7, #22]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d119      	bne.n	8008a5e <USBD_LL_DataOutStage+0xee>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d113      	bne.n	8008a5e <USBD_LL_DataOutStage+0xee>
 8008a36:	7dba      	ldrb	r2, [r7, #22]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	32ae      	adds	r2, #174	; 0xae
 8008a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <USBD_LL_DataOutStage+0xee>
 8008a46:	7dba      	ldrb	r2, [r7, #22]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8008a4e:	7dba      	ldrb	r2, [r7, #22]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	32ae      	adds	r2, #174	; 0xae
 8008a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	4798      	blx	r3
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f001 f94a 	bl	8009cf8 <USBD_CtlSendStatus>
 8008a64:	e032      	b.n	8008acc <USBD_LL_DataOutStage+0x15c>
 8008a66:	7afb      	ldrb	r3, [r7, #11]
 8008a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	4619      	mov	r1, r3
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fa31 	bl	8008ed8 <USBD_CoreFindEP>
 8008a76:	4603      	mov	r3, r0
 8008a78:	75bb      	strb	r3, [r7, #22]
 8008a7a:	7dbb      	ldrb	r3, [r7, #22]
 8008a7c:	2bff      	cmp	r3, #255	; 0xff
 8008a7e:	d025      	beq.n	8008acc <USBD_LL_DataOutStage+0x15c>
 8008a80:	7dbb      	ldrb	r3, [r7, #22]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d122      	bne.n	8008acc <USBD_LL_DataOutStage+0x15c>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d117      	bne.n	8008ac2 <USBD_LL_DataOutStage+0x152>
 8008a92:	7dba      	ldrb	r2, [r7, #22]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	32ae      	adds	r2, #174	; 0xae
 8008a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00f      	beq.n	8008ac2 <USBD_LL_DataOutStage+0x152>
 8008aa2:	7dba      	ldrb	r2, [r7, #22]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8008aaa:	7dba      	ldrb	r2, [r7, #22]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	32ae      	adds	r2, #174	; 0xae
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	7afa      	ldrb	r2, [r7, #11]
 8008ab8:	4611      	mov	r1, r2
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	4798      	blx	r3
 8008abe:	4603      	mov	r3, r0
 8008ac0:	75fb      	strb	r3, [r7, #23]
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <USBD_LL_DataOutStage+0x15c>
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	e000      	b.n	8008ace <USBD_LL_DataOutStage+0x15e>
 8008acc:	2300      	movs	r3, #0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_LL_DataInStage>:
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b086      	sub	sp, #24
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	607a      	str	r2, [r7, #4]
 8008ae2:	72fb      	strb	r3, [r7, #11]
 8008ae4:	7afb      	ldrb	r3, [r7, #11]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d16f      	bne.n	8008bca <USBD_LL_DataInStage+0xf4>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3314      	adds	r3, #20
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d15a      	bne.n	8008bb0 <USBD_LL_DataInStage+0xda>
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	689a      	ldr	r2, [r3, #8]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d914      	bls.n	8008b30 <USBD_LL_DataInStage+0x5a>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	609a      	str	r2, [r3, #8]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f001 f8ac 	bl	8009c7a <USBD_CtlContinueSendData>
 8008b22:	2300      	movs	r3, #0
 8008b24:	2200      	movs	r2, #0
 8008b26:	2100      	movs	r1, #0
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f003 f80b 	bl	800bb44 <USBD_LL_PrepareReceive>
 8008b2e:	e03f      	b.n	8008bb0 <USBD_LL_DataInStage+0xda>
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d11c      	bne.n	8008b76 <USBD_LL_DataInStage+0xa0>
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d316      	bcc.n	8008b76 <USBD_LL_DataInStage+0xa0>
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d20f      	bcs.n	8008b76 <USBD_LL_DataInStage+0xa0>
 8008b56:	2200      	movs	r2, #0
 8008b58:	2100      	movs	r1, #0
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f001 f88d 	bl	8009c7a <USBD_CtlContinueSendData>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f002 ffe8 	bl	800bb44 <USBD_LL_PrepareReceive>
 8008b74:	e01c      	b.n	8008bb0 <USBD_LL_DataInStage+0xda>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d10f      	bne.n	8008ba2 <USBD_LL_DataInStage+0xcc>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <USBD_LL_DataInStage+0xcc>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	4798      	blx	r3
 8008ba2:	2180      	movs	r1, #128	; 0x80
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f002 ff23 	bl	800b9f0 <USBD_LL_StallEP>
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f001 f8b7 	bl	8009d1e <USBD_CtlReceiveStatus>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d03a      	beq.n	8008c30 <USBD_LL_DataInStage+0x15a>
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f7ff fe42 	bl	8008844 <USBD_RunTestMode>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008bc8:	e032      	b.n	8008c30 <USBD_LL_DataInStage+0x15a>
 8008bca:	7afb      	ldrb	r3, [r7, #11]
 8008bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f000 f97f 	bl	8008ed8 <USBD_CoreFindEP>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	2bff      	cmp	r3, #255	; 0xff
 8008be2:	d025      	beq.n	8008c30 <USBD_LL_DataInStage+0x15a>
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d122      	bne.n	8008c30 <USBD_LL_DataInStage+0x15a>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b03      	cmp	r3, #3
 8008bf4:	d11c      	bne.n	8008c30 <USBD_LL_DataInStage+0x15a>
 8008bf6:	7dfa      	ldrb	r2, [r7, #23]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	32ae      	adds	r2, #174	; 0xae
 8008bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d014      	beq.n	8008c30 <USBD_LL_DataInStage+0x15a>
 8008c06:	7dfa      	ldrb	r2, [r7, #23]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8008c0e:	7dfa      	ldrb	r2, [r7, #23]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	32ae      	adds	r2, #174	; 0xae
 8008c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	7afa      	ldrb	r2, [r7, #11]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	4798      	blx	r3
 8008c22:	4603      	mov	r3, r0
 8008c24:	75bb      	strb	r3, [r7, #22]
 8008c26:	7dbb      	ldrb	r3, [r7, #22]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <USBD_LL_DataInStage+0x15a>
 8008c2c:	7dbb      	ldrb	r3, [r7, #22]
 8008c2e:	e000      	b.n	8008c32 <USBD_LL_DataInStage+0x15c>
 8008c30:	2300      	movs	r3, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <USBD_LL_Reset>:
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	605a      	str	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d014      	beq.n	8008ca0 <USBD_LL_Reset+0x66>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00e      	beq.n	8008ca0 <USBD_LL_Reset+0x66>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6852      	ldr	r2, [r2, #4]
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	4611      	mov	r1, r2
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <USBD_LL_Reset+0x66>
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	73fb      	strb	r3, [r7, #15]
 8008ca0:	2340      	movs	r3, #64	; 0x40
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f002 fe5d 	bl	800b966 <USBD_LL_OpenEP>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2240      	movs	r2, #64	; 0x40
 8008cb8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8008cbc:	2340      	movs	r3, #64	; 0x40
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2180      	movs	r1, #128	; 0x80
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f002 fe4f 	bl	800b966 <USBD_LL_OpenEP>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	849a      	strh	r2, [r3, #36]	; 0x24
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2240      	movs	r2, #64	; 0x40
 8008cd2:	621a      	str	r2, [r3, #32]
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <USBD_LL_SetSpeed>:
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	741a      	strb	r2, [r3, #16]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <USBD_LL_Suspend>:
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2204      	movs	r2, #4
 8008d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <USBD_LL_Resume>:
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d106      	bne.n	8008d4c <USBD_LL_Resume+0x22>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USBD_LL_SOF>:
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d110      	bne.n	8008d90 <USBD_LL_SOF+0x36>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <USBD_LL_SOF+0x36>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <USBD_LL_SOF+0x36>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
 8008d90:	2300      	movs	r3, #0
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_LL_IsoINIncomplete>:
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	70fb      	strb	r3, [r7, #3]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	32ae      	adds	r2, #174	; 0xae
 8008db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <USBD_LL_IsoINIncomplete+0x22>
 8008db8:	2303      	movs	r3, #3
 8008dba:	e01c      	b.n	8008df6 <USBD_LL_IsoINIncomplete+0x5c>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d115      	bne.n	8008df4 <USBD_LL_IsoINIncomplete+0x5a>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	32ae      	adds	r2, #174	; 0xae
 8008dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_LL_IsoINIncomplete+0x5a>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	32ae      	adds	r2, #174	; 0xae
 8008de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dea:	6a1b      	ldr	r3, [r3, #32]
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	4611      	mov	r1, r2
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
 8008df4:	2300      	movs	r3, #0
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_LL_IsoOUTIncomplete>:
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	32ae      	adds	r2, #174	; 0xae
 8008e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <USBD_LL_IsoOUTIncomplete+0x22>
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e01c      	b.n	8008e5a <USBD_LL_IsoOUTIncomplete+0x5c>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d115      	bne.n	8008e58 <USBD_LL_IsoOUTIncomplete+0x5a>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	32ae      	adds	r2, #174	; 0xae
 8008e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <USBD_LL_IsoOUTIncomplete+0x5a>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	32ae      	adds	r2, #174	; 0xae
 8008e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	78fa      	ldrb	r2, [r7, #3]
 8008e52:	4611      	mov	r1, r2
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	4798      	blx	r3
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_LL_DevConnected>:
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <USBD_LL_DevDisconnected>:
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00e      	beq.n	8008eb4 <USBD_LL_DevDisconnected+0x3c>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6852      	ldr	r2, [r2, #4]
 8008ea2:	b2d2      	uxtb	r2, r2
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	4798      	blx	r3
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <USBD_LL_DevDisconnected+0x3c>
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	73fb      	strb	r3, [r7, #15]
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_CoreFindIF>:
 8008ebe:	b480      	push	{r7}
 8008ec0:	b083      	sub	sp, #12
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	70fb      	strb	r3, [r7, #3]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USBD_CoreFindEP>:
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr

08008ef2 <USBD_GetEpDesc>:
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b086      	sub	sp, #24
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	2300      	movs	r3, #0
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	885b      	ldrh	r3, [r3, #2]
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d920      	bls.n	8008f5c <USBD_GetEpDesc+0x6a>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	817b      	strh	r3, [r7, #10]
 8008f22:	e013      	b.n	8008f4c <USBD_GetEpDesc+0x5a>
 8008f24:	f107 030a 	add.w	r3, r7, #10
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6978      	ldr	r0, [r7, #20]
 8008f2c:	f000 f81b 	bl	8008f66 <USBD_GetNextDesc>
 8008f30:	6178      	str	r0, [r7, #20]
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	785b      	ldrb	r3, [r3, #1]
 8008f36:	2b05      	cmp	r3, #5
 8008f38:	d108      	bne.n	8008f4c <USBD_GetEpDesc+0x5a>
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	789b      	ldrb	r3, [r3, #2]
 8008f42:	78fa      	ldrb	r2, [r7, #3]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d008      	beq.n	8008f5a <USBD_GetEpDesc+0x68>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	885b      	ldrh	r3, [r3, #2]
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	897b      	ldrh	r3, [r7, #10]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d8e5      	bhi.n	8008f24 <USBD_GetEpDesc+0x32>
 8008f58:	e000      	b.n	8008f5c <USBD_GetEpDesc+0x6a>
 8008f5a:	bf00      	nop
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_GetNextDesc>:
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	881a      	ldrh	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4413      	add	r3, r2
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4413      	add	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <SWAPBYTE>:
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	827b      	strh	r3, [r7, #18]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	823b      	strh	r3, [r7, #16]
 8008fbe:	8a3b      	ldrh	r3, [r7, #16]
 8008fc0:	021b      	lsls	r3, r3, #8
 8008fc2:	b21a      	sxth	r2, r3
 8008fc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	b21b      	sxth	r3, r3
 8008fcc:	81fb      	strh	r3, [r7, #14]
 8008fce:	89fb      	ldrh	r3, [r7, #14]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	371c      	adds	r7, #28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USBD_StdDevReq>:
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	73fb      	strb	r3, [r7, #15]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ff2:	2b40      	cmp	r3, #64	; 0x40
 8008ff4:	d005      	beq.n	8009002 <USBD_StdDevReq+0x26>
 8008ff6:	2b40      	cmp	r3, #64	; 0x40
 8008ff8:	d857      	bhi.n	80090aa <USBD_StdDevReq+0xce>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00f      	beq.n	800901e <USBD_StdDevReq+0x42>
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	d153      	bne.n	80090aa <USBD_StdDevReq+0xce>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	32ae      	adds	r2, #174	; 0xae
 800900c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	6839      	ldr	r1, [r7, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
 8009018:	4603      	mov	r3, r0
 800901a:	73fb      	strb	r3, [r7, #15]
 800901c:	e04a      	b.n	80090b4 <USBD_StdDevReq+0xd8>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	785b      	ldrb	r3, [r3, #1]
 8009022:	2b09      	cmp	r3, #9
 8009024:	d83b      	bhi.n	800909e <USBD_StdDevReq+0xc2>
 8009026:	a201      	add	r2, pc, #4	; (adr r2, 800902c <USBD_StdDevReq+0x50>)
 8009028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902c:	08009081 	.word	0x08009081
 8009030:	08009095 	.word	0x08009095
 8009034:	0800909f 	.word	0x0800909f
 8009038:	0800908b 	.word	0x0800908b
 800903c:	0800909f 	.word	0x0800909f
 8009040:	0800905f 	.word	0x0800905f
 8009044:	08009055 	.word	0x08009055
 8009048:	0800909f 	.word	0x0800909f
 800904c:	08009077 	.word	0x08009077
 8009050:	08009069 	.word	0x08009069
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa3c 	bl	80094d4 <USBD_GetDescriptor>
 800905c:	e024      	b.n	80090a8 <USBD_StdDevReq+0xcc>
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 fba1 	bl	80097a8 <USBD_SetAddress>
 8009066:	e01f      	b.n	80090a8 <USBD_StdDevReq+0xcc>
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fbe0 	bl	8009830 <USBD_SetConfig>
 8009070:	4603      	mov	r3, r0
 8009072:	73fb      	strb	r3, [r7, #15]
 8009074:	e018      	b.n	80090a8 <USBD_StdDevReq+0xcc>
 8009076:	6839      	ldr	r1, [r7, #0]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fc83 	bl	8009984 <USBD_GetConfig>
 800907e:	e013      	b.n	80090a8 <USBD_StdDevReq+0xcc>
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fcb4 	bl	80099f0 <USBD_GetStatus>
 8009088:	e00e      	b.n	80090a8 <USBD_StdDevReq+0xcc>
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fce3 	bl	8009a58 <USBD_SetFeature>
 8009092:	e009      	b.n	80090a8 <USBD_StdDevReq+0xcc>
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fd07 	bl	8009aaa <USBD_ClrFeature>
 800909c:	e004      	b.n	80090a8 <USBD_StdDevReq+0xcc>
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fd5e 	bl	8009b62 <USBD_CtlError>
 80090a6:	bf00      	nop
 80090a8:	e004      	b.n	80090b4 <USBD_StdDevReq+0xd8>
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fd58 	bl	8009b62 <USBD_CtlError>
 80090b2:	bf00      	nop
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop

080090c0 <USBD_StdItfReq>:
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
 80090ca:	2300      	movs	r3, #0
 80090cc:	73fb      	strb	r3, [r7, #15]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090d6:	2b40      	cmp	r3, #64	; 0x40
 80090d8:	d005      	beq.n	80090e6 <USBD_StdItfReq+0x26>
 80090da:	2b40      	cmp	r3, #64	; 0x40
 80090dc:	d852      	bhi.n	8009184 <USBD_StdItfReq+0xc4>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <USBD_StdItfReq+0x26>
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	d14e      	bne.n	8009184 <USBD_StdItfReq+0xc4>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d840      	bhi.n	8009176 <USBD_StdItfReq+0xb6>
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	889b      	ldrh	r3, [r3, #4]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d836      	bhi.n	800916c <USBD_StdItfReq+0xac>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	889b      	ldrh	r3, [r3, #4]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff fed9 	bl	8008ebe <USBD_CoreFindIF>
 800910c:	4603      	mov	r3, r0
 800910e:	73bb      	strb	r3, [r7, #14]
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2bff      	cmp	r3, #255	; 0xff
 8009114:	d01d      	beq.n	8009152 <USBD_StdItfReq+0x92>
 8009116:	7bbb      	ldrb	r3, [r7, #14]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11a      	bne.n	8009152 <USBD_StdItfReq+0x92>
 800911c:	7bba      	ldrb	r2, [r7, #14]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32ae      	adds	r2, #174	; 0xae
 8009122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00f      	beq.n	800914c <USBD_StdItfReq+0x8c>
 800912c:	7bba      	ldrb	r2, [r7, #14]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8009134:	7bba      	ldrb	r2, [r7, #14]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	32ae      	adds	r2, #174	; 0xae
 800913a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	4798      	blx	r3
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]
 800914a:	e004      	b.n	8009156 <USBD_StdItfReq+0x96>
 800914c:	2303      	movs	r3, #3
 800914e:	73fb      	strb	r3, [r7, #15]
 8009150:	e001      	b.n	8009156 <USBD_StdItfReq+0x96>
 8009152:	2303      	movs	r3, #3
 8009154:	73fb      	strb	r3, [r7, #15]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	88db      	ldrh	r3, [r3, #6]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d110      	bne.n	8009180 <USBD_StdItfReq+0xc0>
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10d      	bne.n	8009180 <USBD_StdItfReq+0xc0>
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 fdc7 	bl	8009cf8 <USBD_CtlSendStatus>
 800916a:	e009      	b.n	8009180 <USBD_StdItfReq+0xc0>
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fcf7 	bl	8009b62 <USBD_CtlError>
 8009174:	e004      	b.n	8009180 <USBD_StdItfReq+0xc0>
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fcf2 	bl	8009b62 <USBD_CtlError>
 800917e:	e000      	b.n	8009182 <USBD_StdItfReq+0xc2>
 8009180:	bf00      	nop
 8009182:	e004      	b.n	800918e <USBD_StdItfReq+0xce>
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fceb 	bl	8009b62 <USBD_CtlError>
 800918c:	bf00      	nop
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_StdEPReq>:
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	889b      	ldrh	r3, [r3, #4]
 80091aa:	73bb      	strb	r3, [r7, #14]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091b4:	2b40      	cmp	r3, #64	; 0x40
 80091b6:	d007      	beq.n	80091c8 <USBD_StdEPReq+0x30>
 80091b8:	2b40      	cmp	r3, #64	; 0x40
 80091ba:	f200 817f 	bhi.w	80094bc <USBD_StdEPReq+0x324>
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d02a      	beq.n	8009218 <USBD_StdEPReq+0x80>
 80091c2:	2b20      	cmp	r3, #32
 80091c4:	f040 817a 	bne.w	80094bc <USBD_StdEPReq+0x324>
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff fe83 	bl	8008ed8 <USBD_CoreFindEP>
 80091d2:	4603      	mov	r3, r0
 80091d4:	737b      	strb	r3, [r7, #13]
 80091d6:	7b7b      	ldrb	r3, [r7, #13]
 80091d8:	2bff      	cmp	r3, #255	; 0xff
 80091da:	f000 8174 	beq.w	80094c6 <USBD_StdEPReq+0x32e>
 80091de:	7b7b      	ldrb	r3, [r7, #13]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f040 8170 	bne.w	80094c6 <USBD_StdEPReq+0x32e>
 80091e6:	7b7a      	ldrb	r2, [r7, #13]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 80091ee:	7b7a      	ldrb	r2, [r7, #13]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	32ae      	adds	r2, #174	; 0xae
 80091f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8163 	beq.w	80094c6 <USBD_StdEPReq+0x32e>
 8009200:	7b7a      	ldrb	r2, [r7, #13]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	; 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	4798      	blx	r3
 8009212:	4603      	mov	r3, r0
 8009214:	73fb      	strb	r3, [r7, #15]
 8009216:	e156      	b.n	80094c6 <USBD_StdEPReq+0x32e>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	785b      	ldrb	r3, [r3, #1]
 800921c:	2b03      	cmp	r3, #3
 800921e:	d008      	beq.n	8009232 <USBD_StdEPReq+0x9a>
 8009220:	2b03      	cmp	r3, #3
 8009222:	f300 8145 	bgt.w	80094b0 <USBD_StdEPReq+0x318>
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 809b 	beq.w	8009362 <USBD_StdEPReq+0x1ca>
 800922c:	2b01      	cmp	r3, #1
 800922e:	d03c      	beq.n	80092aa <USBD_StdEPReq+0x112>
 8009230:	e13e      	b.n	80094b0 <USBD_StdEPReq+0x318>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b02      	cmp	r3, #2
 800923c:	d002      	beq.n	8009244 <USBD_StdEPReq+0xac>
 800923e:	2b03      	cmp	r3, #3
 8009240:	d016      	beq.n	8009270 <USBD_StdEPReq+0xd8>
 8009242:	e02c      	b.n	800929e <USBD_StdEPReq+0x106>
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00d      	beq.n	8009266 <USBD_StdEPReq+0xce>
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	2b80      	cmp	r3, #128	; 0x80
 800924e:	d00a      	beq.n	8009266 <USBD_StdEPReq+0xce>
 8009250:	7bbb      	ldrb	r3, [r7, #14]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f002 fbcb 	bl	800b9f0 <USBD_LL_StallEP>
 800925a:	2180      	movs	r1, #128	; 0x80
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f002 fbc7 	bl	800b9f0 <USBD_LL_StallEP>
 8009262:	bf00      	nop
 8009264:	e020      	b.n	80092a8 <USBD_StdEPReq+0x110>
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fc7a 	bl	8009b62 <USBD_CtlError>
 800926e:	e01b      	b.n	80092a8 <USBD_StdEPReq+0x110>
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	885b      	ldrh	r3, [r3, #2]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10e      	bne.n	8009296 <USBD_StdEPReq+0xfe>
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <USBD_StdEPReq+0xfe>
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	2b80      	cmp	r3, #128	; 0x80
 8009282:	d008      	beq.n	8009296 <USBD_StdEPReq+0xfe>
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	88db      	ldrh	r3, [r3, #6]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d104      	bne.n	8009296 <USBD_StdEPReq+0xfe>
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f002 fbad 	bl	800b9f0 <USBD_LL_StallEP>
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fd2e 	bl	8009cf8 <USBD_CtlSendStatus>
 800929c:	e004      	b.n	80092a8 <USBD_StdEPReq+0x110>
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fc5e 	bl	8009b62 <USBD_CtlError>
 80092a6:	bf00      	nop
 80092a8:	e107      	b.n	80094ba <USBD_StdEPReq+0x322>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d002      	beq.n	80092bc <USBD_StdEPReq+0x124>
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d016      	beq.n	80092e8 <USBD_StdEPReq+0x150>
 80092ba:	e04b      	b.n	8009354 <USBD_StdEPReq+0x1bc>
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00d      	beq.n	80092de <USBD_StdEPReq+0x146>
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b80      	cmp	r3, #128	; 0x80
 80092c6:	d00a      	beq.n	80092de <USBD_StdEPReq+0x146>
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f002 fb8f 	bl	800b9f0 <USBD_LL_StallEP>
 80092d2:	2180      	movs	r1, #128	; 0x80
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f002 fb8b 	bl	800b9f0 <USBD_LL_StallEP>
 80092da:	bf00      	nop
 80092dc:	e040      	b.n	8009360 <USBD_StdEPReq+0x1c8>
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fc3e 	bl	8009b62 <USBD_CtlError>
 80092e6:	e03b      	b.n	8009360 <USBD_StdEPReq+0x1c8>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	885b      	ldrh	r3, [r3, #2]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d136      	bne.n	800935e <USBD_StdEPReq+0x1c6>
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
 80092f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d004      	beq.n	8009304 <USBD_StdEPReq+0x16c>
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f002 fb95 	bl	800ba2e <USBD_LL_ClearStallEP>
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fcf7 	bl	8009cf8 <USBD_CtlSendStatus>
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff fde2 	bl	8008ed8 <USBD_CoreFindEP>
 8009314:	4603      	mov	r3, r0
 8009316:	737b      	strb	r3, [r7, #13]
 8009318:	7b7b      	ldrb	r3, [r7, #13]
 800931a:	2bff      	cmp	r3, #255	; 0xff
 800931c:	d01f      	beq.n	800935e <USBD_StdEPReq+0x1c6>
 800931e:	7b7b      	ldrb	r3, [r7, #13]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d11c      	bne.n	800935e <USBD_StdEPReq+0x1c6>
 8009324:	7b7a      	ldrb	r2, [r7, #13]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 800932c:	7b7a      	ldrb	r2, [r7, #13]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	32ae      	adds	r2, #174	; 0xae
 8009332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d010      	beq.n	800935e <USBD_StdEPReq+0x1c6>
 800933c:	7b7a      	ldrb	r2, [r7, #13]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	32ae      	adds	r2, #174	; 0xae
 8009342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
 8009352:	e004      	b.n	800935e <USBD_StdEPReq+0x1c6>
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fc03 	bl	8009b62 <USBD_CtlError>
 800935c:	e000      	b.n	8009360 <USBD_StdEPReq+0x1c8>
 800935e:	bf00      	nop
 8009360:	e0ab      	b.n	80094ba <USBD_StdEPReq+0x322>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d002      	beq.n	8009374 <USBD_StdEPReq+0x1dc>
 800936e:	2b03      	cmp	r3, #3
 8009370:	d032      	beq.n	80093d8 <USBD_StdEPReq+0x240>
 8009372:	e097      	b.n	80094a4 <USBD_StdEPReq+0x30c>
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d007      	beq.n	800938a <USBD_StdEPReq+0x1f2>
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b80      	cmp	r3, #128	; 0x80
 800937e:	d004      	beq.n	800938a <USBD_StdEPReq+0x1f2>
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fbed 	bl	8009b62 <USBD_CtlError>
 8009388:	e091      	b.n	80094ae <USBD_StdEPReq+0x316>
 800938a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800938e:	2b00      	cmp	r3, #0
 8009390:	da0b      	bge.n	80093aa <USBD_StdEPReq+0x212>
 8009392:	7bbb      	ldrb	r3, [r7, #14]
 8009394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	3310      	adds	r3, #16
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	4413      	add	r3, r2
 80093a6:	3304      	adds	r3, #4
 80093a8:	e00b      	b.n	80093c2 <USBD_StdEPReq+0x22a>
 80093aa:	7bbb      	ldrb	r3, [r7, #14]
 80093ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093b0:	4613      	mov	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	4413      	add	r3, r2
 80093c0:	3304      	adds	r3, #4
 80093c2:	60bb      	str	r3, [r7, #8]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2202      	movs	r2, #2
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fc37 	bl	8009c44 <USBD_CtlSendData>
 80093d6:	e06a      	b.n	80094ae <USBD_StdEPReq+0x316>
 80093d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da11      	bge.n	8009404 <USBD_StdEPReq+0x26c>
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	f003 020f 	and.w	r2, r3, #15
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	4613      	mov	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	440b      	add	r3, r1
 80093f2:	3324      	adds	r3, #36	; 0x24
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d117      	bne.n	800942a <USBD_StdEPReq+0x292>
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fbb0 	bl	8009b62 <USBD_CtlError>
 8009402:	e054      	b.n	80094ae <USBD_StdEPReq+0x316>
 8009404:	7bbb      	ldrb	r3, [r7, #14]
 8009406:	f003 020f 	and.w	r2, r3, #15
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d104      	bne.n	800942a <USBD_StdEPReq+0x292>
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fb9d 	bl	8009b62 <USBD_CtlError>
 8009428:	e041      	b.n	80094ae <USBD_StdEPReq+0x316>
 800942a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800942e:	2b00      	cmp	r3, #0
 8009430:	da0b      	bge.n	800944a <USBD_StdEPReq+0x2b2>
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	3310      	adds	r3, #16
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	e00b      	b.n	8009462 <USBD_StdEPReq+0x2ca>
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	4413      	add	r3, r2
 8009460:	3304      	adds	r3, #4
 8009462:	60bb      	str	r3, [r7, #8]
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <USBD_StdEPReq+0x2d8>
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	2b80      	cmp	r3, #128	; 0x80
 800946e:	d103      	bne.n	8009478 <USBD_StdEPReq+0x2e0>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	e00e      	b.n	8009496 <USBD_StdEPReq+0x2fe>
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f002 faf5 	bl	800ba6c <USBD_LL_IsStallEP>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <USBD_StdEPReq+0x2f8>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2201      	movs	r2, #1
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e002      	b.n	8009496 <USBD_StdEPReq+0x2fe>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2202      	movs	r2, #2
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fbd1 	bl	8009c44 <USBD_CtlSendData>
 80094a2:	e004      	b.n	80094ae <USBD_StdEPReq+0x316>
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fb5b 	bl	8009b62 <USBD_CtlError>
 80094ac:	bf00      	nop
 80094ae:	e004      	b.n	80094ba <USBD_StdEPReq+0x322>
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fb55 	bl	8009b62 <USBD_CtlError>
 80094b8:	bf00      	nop
 80094ba:	e005      	b.n	80094c8 <USBD_StdEPReq+0x330>
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fb4f 	bl	8009b62 <USBD_CtlError>
 80094c4:	e000      	b.n	80094c8 <USBD_StdEPReq+0x330>
 80094c6:	bf00      	nop
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <USBD_GetDescriptor>:
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
 80094de:	2300      	movs	r3, #0
 80094e0:	813b      	strh	r3, [r7, #8]
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
 80094e6:	2300      	movs	r3, #0
 80094e8:	72fb      	strb	r3, [r7, #11]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	885b      	ldrh	r3, [r3, #2]
 80094ee:	0a1b      	lsrs	r3, r3, #8
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	3b01      	subs	r3, #1
 80094f4:	2b06      	cmp	r3, #6
 80094f6:	f200 8128 	bhi.w	800974a <USBD_GetDescriptor+0x276>
 80094fa:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <USBD_GetDescriptor+0x2c>)
 80094fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009500:	0800951d 	.word	0x0800951d
 8009504:	08009535 	.word	0x08009535
 8009508:	08009575 	.word	0x08009575
 800950c:	0800974b 	.word	0x0800974b
 8009510:	0800974b 	.word	0x0800974b
 8009514:	080096eb 	.word	0x080096eb
 8009518:	08009717 	.word	0x08009717
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	7c12      	ldrb	r2, [r2, #16]
 8009528:	f107 0108 	add.w	r1, r7, #8
 800952c:	4610      	mov	r0, r2
 800952e:	4798      	blx	r3
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	e112      	b.n	800975a <USBD_GetDescriptor+0x286>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	7c1b      	ldrb	r3, [r3, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10d      	bne.n	8009558 <USBD_GetDescriptor+0x84>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	f107 0208 	add.w	r2, r7, #8
 8009548:	4610      	mov	r0, r2
 800954a:	4798      	blx	r3
 800954c:	60f8      	str	r0, [r7, #12]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3301      	adds	r3, #1
 8009552:	2202      	movs	r2, #2
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	e100      	b.n	800975a <USBD_GetDescriptor+0x286>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	f107 0208 	add.w	r2, r7, #8
 8009564:	4610      	mov	r0, r2
 8009566:	4798      	blx	r3
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	2202      	movs	r2, #2
 8009570:	701a      	strb	r2, [r3, #0]
 8009572:	e0f2      	b.n	800975a <USBD_GetDescriptor+0x286>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	885b      	ldrh	r3, [r3, #2]
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b05      	cmp	r3, #5
 800957c:	f200 80ac 	bhi.w	80096d8 <USBD_GetDescriptor+0x204>
 8009580:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <USBD_GetDescriptor+0xb4>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	080095a1 	.word	0x080095a1
 800958c:	080095d5 	.word	0x080095d5
 8009590:	08009609 	.word	0x08009609
 8009594:	0800963d 	.word	0x0800963d
 8009598:	08009671 	.word	0x08009671
 800959c:	080096a5 	.word	0x080096a5
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00b      	beq.n	80095c4 <USBD_GetDescriptor+0xf0>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	7c12      	ldrb	r2, [r2, #16]
 80095b8:	f107 0108 	add.w	r1, r7, #8
 80095bc:	4610      	mov	r0, r2
 80095be:	4798      	blx	r3
 80095c0:	60f8      	str	r0, [r7, #12]
 80095c2:	e091      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 facb 	bl	8009b62 <USBD_CtlError>
 80095cc:	7afb      	ldrb	r3, [r7, #11]
 80095ce:	3301      	adds	r3, #1
 80095d0:	72fb      	strb	r3, [r7, #11]
 80095d2:	e089      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00b      	beq.n	80095f8 <USBD_GetDescriptor+0x124>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	7c12      	ldrb	r2, [r2, #16]
 80095ec:	f107 0108 	add.w	r1, r7, #8
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	e077      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fab1 	bl	8009b62 <USBD_CtlError>
 8009600:	7afb      	ldrb	r3, [r7, #11]
 8009602:	3301      	adds	r3, #1
 8009604:	72fb      	strb	r3, [r7, #11]
 8009606:	e06f      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00b      	beq.n	800962c <USBD_GetDescriptor+0x158>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	7c12      	ldrb	r2, [r2, #16]
 8009620:	f107 0108 	add.w	r1, r7, #8
 8009624:	4610      	mov	r0, r2
 8009626:	4798      	blx	r3
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	e05d      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fa97 	bl	8009b62 <USBD_CtlError>
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	3301      	adds	r3, #1
 8009638:	72fb      	strb	r3, [r7, #11]
 800963a:	e055      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <USBD_GetDescriptor+0x18c>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	7c12      	ldrb	r2, [r2, #16]
 8009654:	f107 0108 	add.w	r1, r7, #8
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	e043      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa7d 	bl	8009b62 <USBD_CtlError>
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	3301      	adds	r3, #1
 800966c:	72fb      	strb	r3, [r7, #11]
 800966e:	e03b      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <USBD_GetDescriptor+0x1c0>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	7c12      	ldrb	r2, [r2, #16]
 8009688:	f107 0108 	add.w	r1, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	e029      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fa63 	bl	8009b62 <USBD_CtlError>
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	3301      	adds	r3, #1
 80096a0:	72fb      	strb	r3, [r7, #11]
 80096a2:	e021      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	699b      	ldr	r3, [r3, #24]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_GetDescriptor+0x1f4>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	e00f      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa49 	bl	8009b62 <USBD_CtlError>
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
 80096d6:	e007      	b.n	80096e8 <USBD_GetDescriptor+0x214>
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 fa41 	bl	8009b62 <USBD_CtlError>
 80096e0:	7afb      	ldrb	r3, [r7, #11]
 80096e2:	3301      	adds	r3, #1
 80096e4:	72fb      	strb	r3, [r7, #11]
 80096e6:	bf00      	nop
 80096e8:	e037      	b.n	800975a <USBD_GetDescriptor+0x286>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	7c1b      	ldrb	r3, [r3, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <USBD_GetDescriptor+0x232>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fa:	f107 0208 	add.w	r2, r7, #8
 80096fe:	4610      	mov	r0, r2
 8009700:	4798      	blx	r3
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	e029      	b.n	800975a <USBD_GetDescriptor+0x286>
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fa2a 	bl	8009b62 <USBD_CtlError>
 800970e:	7afb      	ldrb	r3, [r7, #11]
 8009710:	3301      	adds	r3, #1
 8009712:	72fb      	strb	r3, [r7, #11]
 8009714:	e021      	b.n	800975a <USBD_GetDescriptor+0x286>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	7c1b      	ldrb	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d10d      	bne.n	800973a <USBD_GetDescriptor+0x266>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	f107 0208 	add.w	r2, r7, #8
 800972a:	4610      	mov	r0, r2
 800972c:	4798      	blx	r3
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	3301      	adds	r3, #1
 8009734:	2207      	movs	r2, #7
 8009736:	701a      	strb	r2, [r3, #0]
 8009738:	e00f      	b.n	800975a <USBD_GetDescriptor+0x286>
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fa10 	bl	8009b62 <USBD_CtlError>
 8009742:	7afb      	ldrb	r3, [r7, #11]
 8009744:	3301      	adds	r3, #1
 8009746:	72fb      	strb	r3, [r7, #11]
 8009748:	e007      	b.n	800975a <USBD_GetDescriptor+0x286>
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fa08 	bl	8009b62 <USBD_CtlError>
 8009752:	7afb      	ldrb	r3, [r7, #11]
 8009754:	3301      	adds	r3, #1
 8009756:	72fb      	strb	r3, [r7, #11]
 8009758:	bf00      	nop
 800975a:	7afb      	ldrb	r3, [r7, #11]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d11e      	bne.n	800979e <USBD_GetDescriptor+0x2ca>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	88db      	ldrh	r3, [r3, #6]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d016      	beq.n	8009796 <USBD_GetDescriptor+0x2c2>
 8009768:	893b      	ldrh	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00e      	beq.n	800978c <USBD_GetDescriptor+0x2b8>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	88da      	ldrh	r2, [r3, #6]
 8009772:	893b      	ldrh	r3, [r7, #8]
 8009774:	4293      	cmp	r3, r2
 8009776:	bf28      	it	cs
 8009778:	4613      	movcs	r3, r2
 800977a:	b29b      	uxth	r3, r3
 800977c:	813b      	strh	r3, [r7, #8]
 800977e:	893b      	ldrh	r3, [r7, #8]
 8009780:	461a      	mov	r2, r3
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa5d 	bl	8009c44 <USBD_CtlSendData>
 800978a:	e009      	b.n	80097a0 <USBD_GetDescriptor+0x2cc>
 800978c:	6839      	ldr	r1, [r7, #0]
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f9e7 	bl	8009b62 <USBD_CtlError>
 8009794:	e004      	b.n	80097a0 <USBD_GetDescriptor+0x2cc>
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 faae 	bl	8009cf8 <USBD_CtlSendStatus>
 800979c:	e000      	b.n	80097a0 <USBD_GetDescriptor+0x2cc>
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop

080097a8 <USBD_SetAddress>:
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	889b      	ldrh	r3, [r3, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d131      	bne.n	800981e <USBD_SetAddress+0x76>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	88db      	ldrh	r3, [r3, #6]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d12d      	bne.n	800981e <USBD_SetAddress+0x76>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	885b      	ldrh	r3, [r3, #2]
 80097c6:	2b7f      	cmp	r3, #127	; 0x7f
 80097c8:	d829      	bhi.n	800981e <USBD_SetAddress+0x76>
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	885b      	ldrh	r3, [r3, #2]
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097d4:	73fb      	strb	r3, [r7, #15]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d104      	bne.n	80097ec <USBD_SetAddress+0x44>
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 f9bc 	bl	8009b62 <USBD_CtlError>
 80097ea:	e01d      	b.n	8009828 <USBD_SetAddress+0x80>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7bfa      	ldrb	r2, [r7, #15]
 80097f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f002 f963 	bl	800bac4 <USBD_LL_SetUSBAddress>
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fa7a 	bl	8009cf8 <USBD_CtlSendStatus>
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d004      	beq.n	8009814 <USBD_SetAddress+0x6c>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2202      	movs	r2, #2
 800980e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8009812:	e009      	b.n	8009828 <USBD_SetAddress+0x80>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 800981c:	e004      	b.n	8009828 <USBD_SetAddress+0x80>
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f99e 	bl	8009b62 <USBD_CtlError>
 8009826:	bf00      	nop
 8009828:	bf00      	nop
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_SetConfig>:
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	885b      	ldrh	r3, [r3, #2]
 8009842:	b2da      	uxtb	r2, r3
 8009844:	4b4e      	ldr	r3, [pc, #312]	; (8009980 <USBD_SetConfig+0x150>)
 8009846:	701a      	strb	r2, [r3, #0]
 8009848:	4b4d      	ldr	r3, [pc, #308]	; (8009980 <USBD_SetConfig+0x150>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d905      	bls.n	800985c <USBD_SetConfig+0x2c>
 8009850:	6839      	ldr	r1, [r7, #0]
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f985 	bl	8009b62 <USBD_CtlError>
 8009858:	2303      	movs	r3, #3
 800985a:	e08c      	b.n	8009976 <USBD_SetConfig+0x146>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b02      	cmp	r3, #2
 8009866:	d002      	beq.n	800986e <USBD_SetConfig+0x3e>
 8009868:	2b03      	cmp	r3, #3
 800986a:	d029      	beq.n	80098c0 <USBD_SetConfig+0x90>
 800986c:	e075      	b.n	800995a <USBD_SetConfig+0x12a>
 800986e:	4b44      	ldr	r3, [pc, #272]	; (8009980 <USBD_SetConfig+0x150>)
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d020      	beq.n	80098b8 <USBD_SetConfig+0x88>
 8009876:	4b42      	ldr	r3, [pc, #264]	; (8009980 <USBD_SetConfig+0x150>)
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	605a      	str	r2, [r3, #4]
 8009880:	4b3f      	ldr	r3, [pc, #252]	; (8009980 <USBD_SetConfig+0x150>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7fe ffe7 	bl	800885a <USBD_SetClassConfig>
 800988c:	4603      	mov	r3, r0
 800988e:	73fb      	strb	r3, [r7, #15]
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d008      	beq.n	80098a8 <USBD_SetConfig+0x78>
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 f962 	bl	8009b62 <USBD_CtlError>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2202      	movs	r2, #2
 80098a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80098a6:	e065      	b.n	8009974 <USBD_SetConfig+0x144>
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fa25 	bl	8009cf8 <USBD_CtlSendStatus>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2203      	movs	r2, #3
 80098b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80098b6:	e05d      	b.n	8009974 <USBD_SetConfig+0x144>
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 fa1d 	bl	8009cf8 <USBD_CtlSendStatus>
 80098be:	e059      	b.n	8009974 <USBD_SetConfig+0x144>
 80098c0:	4b2f      	ldr	r3, [pc, #188]	; (8009980 <USBD_SetConfig+0x150>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d112      	bne.n	80098ee <USBD_SetConfig+0xbe>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2202      	movs	r2, #2
 80098cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 80098d0:	4b2b      	ldr	r3, [pc, #172]	; (8009980 <USBD_SetConfig+0x150>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	605a      	str	r2, [r3, #4]
 80098da:	4b29      	ldr	r3, [pc, #164]	; (8009980 <USBD_SetConfig+0x150>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fe ffd6 	bl	8008892 <USBD_ClrClassConfig>
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fa06 	bl	8009cf8 <USBD_CtlSendStatus>
 80098ec:	e042      	b.n	8009974 <USBD_SetConfig+0x144>
 80098ee:	4b24      	ldr	r3, [pc, #144]	; (8009980 <USBD_SetConfig+0x150>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d02a      	beq.n	8009952 <USBD_SetConfig+0x122>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7fe ffc4 	bl	8008892 <USBD_ClrClassConfig>
 800990a:	4b1d      	ldr	r3, [pc, #116]	; (8009980 <USBD_SetConfig+0x150>)
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	461a      	mov	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	605a      	str	r2, [r3, #4]
 8009914:	4b1a      	ldr	r3, [pc, #104]	; (8009980 <USBD_SetConfig+0x150>)
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7fe ff9d 	bl	800885a <USBD_SetClassConfig>
 8009920:	4603      	mov	r3, r0
 8009922:	73fb      	strb	r3, [r7, #15]
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00f      	beq.n	800994a <USBD_SetConfig+0x11a>
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f918 	bl	8009b62 <USBD_CtlError>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fe ffa9 	bl	8008892 <USBD_ClrClassConfig>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2202      	movs	r2, #2
 8009944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
 8009948:	e014      	b.n	8009974 <USBD_SetConfig+0x144>
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f9d4 	bl	8009cf8 <USBD_CtlSendStatus>
 8009950:	e010      	b.n	8009974 <USBD_SetConfig+0x144>
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9d0 	bl	8009cf8 <USBD_CtlSendStatus>
 8009958:	e00c      	b.n	8009974 <USBD_SetConfig+0x144>
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f900 	bl	8009b62 <USBD_CtlError>
 8009962:	4b07      	ldr	r3, [pc, #28]	; (8009980 <USBD_SetConfig+0x150>)
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fe ff92 	bl	8008892 <USBD_ClrClassConfig>
 800996e:	2303      	movs	r3, #3
 8009970:	73fb      	strb	r3, [r7, #15]
 8009972:	bf00      	nop
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20000754 	.word	0x20000754

08009984 <USBD_GetConfig>:
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	88db      	ldrh	r3, [r3, #6]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d004      	beq.n	80099a0 <USBD_GetConfig+0x1c>
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f8e2 	bl	8009b62 <USBD_CtlError>
 800999e:	e023      	b.n	80099e8 <USBD_GetConfig+0x64>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	dc02      	bgt.n	80099b2 <USBD_GetConfig+0x2e>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dc03      	bgt.n	80099b8 <USBD_GetConfig+0x34>
 80099b0:	e015      	b.n	80099de <USBD_GetConfig+0x5a>
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	d00b      	beq.n	80099ce <USBD_GetConfig+0x4a>
 80099b6:	e012      	b.n	80099de <USBD_GetConfig+0x5a>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	609a      	str	r2, [r3, #8]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3308      	adds	r3, #8
 80099c2:	2201      	movs	r2, #1
 80099c4:	4619      	mov	r1, r3
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f93c 	bl	8009c44 <USBD_CtlSendData>
 80099cc:	e00c      	b.n	80099e8 <USBD_GetConfig+0x64>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3304      	adds	r3, #4
 80099d2:	2201      	movs	r2, #1
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f934 	bl	8009c44 <USBD_CtlSendData>
 80099dc:	e004      	b.n	80099e8 <USBD_GetConfig+0x64>
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f8be 	bl	8009b62 <USBD_CtlError>
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <USBD_GetStatus>:
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d81e      	bhi.n	8009a46 <USBD_GetStatus+0x56>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	88db      	ldrh	r3, [r3, #6]
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d004      	beq.n	8009a1a <USBD_GetStatus+0x2a>
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f8a5 	bl	8009b62 <USBD_CtlError>
 8009a18:	e01a      	b.n	8009a50 <USBD_GetStatus+0x60>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	60da      	str	r2, [r3, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d005      	beq.n	8009a36 <USBD_GetStatus+0x46>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f043 0202 	orr.w	r2, r3, #2
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	60da      	str	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	330c      	adds	r3, #12
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f900 	bl	8009c44 <USBD_CtlSendData>
 8009a44:	e004      	b.n	8009a50 <USBD_GetStatus+0x60>
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f88a 	bl	8009b62 <USBD_CtlError>
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	3708      	adds	r7, #8
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_SetFeature>:
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	885b      	ldrh	r3, [r3, #2]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d107      	bne.n	8009a7a <USBD_SetFeature+0x22>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f940 	bl	8009cf8 <USBD_CtlSendStatus>
 8009a78:	e013      	b.n	8009aa2 <USBD_SetFeature+0x4a>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	2b02      	cmp	r3, #2
 8009a80:	d10b      	bne.n	8009a9a <USBD_SetFeature+0x42>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	889b      	ldrh	r3, [r3, #4]
 8009a86:	0a1b      	lsrs	r3, r3, #8
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f930 	bl	8009cf8 <USBD_CtlSendStatus>
 8009a98:	e003      	b.n	8009aa2 <USBD_SetFeature+0x4a>
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f860 	bl	8009b62 <USBD_CtlError>
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_ClrFeature>:
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	6039      	str	r1, [r7, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	3b01      	subs	r3, #1
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d80b      	bhi.n	8009ada <USBD_ClrFeature+0x30>
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	885b      	ldrh	r3, [r3, #2]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d10c      	bne.n	8009ae4 <USBD_ClrFeature+0x3a>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f910 	bl	8009cf8 <USBD_CtlSendStatus>
 8009ad8:	e004      	b.n	8009ae4 <USBD_ClrFeature+0x3a>
 8009ada:	6839      	ldr	r1, [r7, #0]
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f840 	bl	8009b62 <USBD_CtlError>
 8009ae2:	e000      	b.n	8009ae6 <USBD_ClrFeature+0x3c>
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USBD_ParseSetupRequest>:
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	781a      	ldrb	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	701a      	strb	r2, [r3, #0]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	3301      	adds	r3, #1
 8009b08:	60fb      	str	r3, [r7, #12]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	781a      	ldrb	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	705a      	strb	r2, [r3, #1]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3301      	adds	r3, #1
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f7ff fa41 	bl	8008fa0 <SWAPBYTE>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	461a      	mov	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	805a      	strh	r2, [r3, #2]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7ff fa34 	bl	8008fa0 <SWAPBYTE>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	809a      	strh	r2, [r3, #4]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3301      	adds	r3, #1
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7ff fa27 	bl	8008fa0 <SWAPBYTE>
 8009b52:	4603      	mov	r3, r0
 8009b54:	461a      	mov	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	80da      	strh	r2, [r3, #6]
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBD_CtlError>:
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b082      	sub	sp, #8
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
 8009b6c:	2180      	movs	r1, #128	; 0x80
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f001 ff3e 	bl	800b9f0 <USBD_LL_StallEP>
 8009b74:	2100      	movs	r1, #0
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 ff3a 	bl	800b9f0 <USBD_LL_StallEP>
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <USBD_GetString>:
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	2300      	movs	r3, #0
 8009b92:	75fb      	strb	r3, [r7, #23]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d036      	beq.n	8009c08 <USBD_GetString+0x84>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	613b      	str	r3, [r7, #16]
 8009b9e:	6938      	ldr	r0, [r7, #16]
 8009ba0:	f000 f836 	bl	8009c10 <USBD_GetLen>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	801a      	strh	r2, [r3, #0]
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7812      	ldrb	r2, [r2, #0]
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	75fb      	strb	r3, [r7, #23]
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	4413      	add	r3, r2
 8009bca:	2203      	movs	r2, #3
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	75fb      	strb	r3, [r7, #23]
 8009bd4:	e013      	b.n	8009bfe <USBD_GetString+0x7a>
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	4413      	add	r3, r2
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	7812      	ldrb	r2, [r2, #0]
 8009be0:	701a      	strb	r2, [r3, #0]
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	3301      	adds	r3, #1
 8009be6:	613b      	str	r3, [r7, #16]
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
 8009bea:	3301      	adds	r3, #1
 8009bec:	75fb      	strb	r3, [r7, #23]
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	701a      	strb	r2, [r3, #0]
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	75fb      	strb	r3, [r7, #23]
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e7      	bne.n	8009bd6 <USBD_GetString+0x52>
 8009c06:	e000      	b.n	8009c0a <USBD_GetString+0x86>
 8009c08:	bf00      	nop
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_GetLen>:
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	2300      	movs	r3, #0
 8009c1a:	73fb      	strb	r3, [r7, #15]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	60bb      	str	r3, [r7, #8]
 8009c20:	e005      	b.n	8009c2e <USBD_GetLen+0x1e>
 8009c22:	7bfb      	ldrb	r3, [r7, #15]
 8009c24:	3301      	adds	r3, #1
 8009c26:	73fb      	strb	r3, [r7, #15]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	60bb      	str	r3, [r7, #8]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1f5      	bne.n	8009c22 <USBD_GetLen+0x12>
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USBD_CtlSendData>:
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	619a      	str	r2, [r3, #24]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	61da      	str	r2, [r3, #28]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	2100      	movs	r1, #0
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f001 ff49 	bl	800bb02 <USBD_LL_Transmit>
 8009c70:	2300      	movs	r3, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBD_CtlContinueSendData>:
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	60b9      	str	r1, [r7, #8]
 8009c84:	607a      	str	r2, [r7, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f001 ff38 	bl	800bb02 <USBD_LL_Transmit>
 8009c92:	2300      	movs	r3, #0
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <USBD_CtlPrepareRx>:
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2203      	movs	r2, #3
 8009cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f001 ff3c 	bl	800bb44 <USBD_LL_PrepareReceive>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBD_CtlContinueRx>:
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	607a      	str	r2, [r7, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f001 ff2b 	bl	800bb44 <USBD_LL_PrepareReceive>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBD_CtlSendStatus>:
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2204      	movs	r2, #4
 8009d04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	2100      	movs	r1, #0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f001 fef7 	bl	800bb02 <USBD_LL_Transmit>
 8009d14:	2300      	movs	r3, #0
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBD_CtlReceiveStatus>:
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2205      	movs	r2, #5
 8009d2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8009d2e:	2300      	movs	r3, #0
 8009d30:	2200      	movs	r2, #0
 8009d32:	2100      	movs	r1, #0
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 ff05 	bl	800bb44 <USBD_LL_PrepareReceive>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <makeFreeRtosPriority>:
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	80fb      	strh	r3, [r7, #6]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d56:	2b84      	cmp	r3, #132	; 0x84
 8009d58:	d005      	beq.n	8009d66 <makeFreeRtosPriority+0x22>
 8009d5a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	4413      	add	r3, r2
 8009d62:	3303      	adds	r3, #3
 8009d64:	60fb      	str	r3, [r7, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <osKernelStart>:
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	f000 fade 	bl	800a338 <vTaskStartScheduler>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <osThreadCreate>:
 8009d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d84:	b089      	sub	sp, #36	; 0x24
 8009d86:	af04      	add	r7, sp, #16
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	695b      	ldr	r3, [r3, #20]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d020      	beq.n	8009dd6 <osThreadCreate+0x54>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01c      	beq.n	8009dd6 <osThreadCreate+0x54>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685c      	ldr	r4, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681d      	ldr	r5, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691e      	ldr	r6, [r3, #16]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff ffc8 	bl	8009d44 <makeFreeRtosPriority>
 8009db4:	4601      	mov	r1, r0
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	6992      	ldr	r2, [r2, #24]
 8009dbe:	9202      	str	r2, [sp, #8]
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	9100      	str	r1, [sp, #0]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	4629      	mov	r1, r5
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f000 f8ed 	bl	8009faa <xTaskCreateStatic>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	60fb      	str	r3, [r7, #12]
 8009dd4:	e01c      	b.n	8009e10 <osThreadCreate+0x8e>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685c      	ldr	r4, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681d      	ldr	r5, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	b29e      	uxth	r6, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7ff ffaa 	bl	8009d44 <makeFreeRtosPriority>
 8009df0:	4602      	mov	r2, r0
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	9200      	str	r2, [sp, #0]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4620      	mov	r0, r4
 8009e02:	f000 f92f 	bl	800a064 <xTaskCreate>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d001      	beq.n	8009e10 <osThreadCreate+0x8e>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e000      	b.n	8009e12 <osThreadCreate+0x90>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e1a <osDelay>:
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	60fb      	str	r3, [r7, #12]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <osDelay+0x16>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	e000      	b.n	8009e32 <osDelay+0x18>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fa4c 	bl	800a2d0 <vTaskDelay>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <vListInitialise>:
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f103 0208 	add.w	r2, r3, #8
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	605a      	str	r2, [r3, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f04f 32ff 	mov.w	r2, #4294967295
 8009e5a:	609a      	str	r2, [r3, #8]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f103 0208 	add.w	r2, r3, #8
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60da      	str	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f103 0208 	add.w	r2, r3, #8
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	611a      	str	r2, [r3, #16]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <vListInitialiseItem>:
 8009e82:	b480      	push	{r7}
 8009e84:	b083      	sub	sp, #12
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	611a      	str	r2, [r3, #16]
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <vListInsertEnd>:
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	605a      	str	r2, [r3, #4]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	689a      	ldr	r2, [r3, #8]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	609a      	str	r2, [r3, #8]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	605a      	str	r2, [r3, #4]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	609a      	str	r2, [r3, #8]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	611a      	str	r2, [r3, #16]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	bf00      	nop
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <vListInsert>:
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	60bb      	str	r3, [r7, #8]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efa:	d103      	bne.n	8009f04 <vListInsert+0x20>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	e00c      	b.n	8009f1e <vListInsert+0x3a>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3308      	adds	r3, #8
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	e002      	b.n	8009f12 <vListInsert+0x2e>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d2f6      	bcs.n	8009f0c <vListInsert+0x28>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	685a      	ldr	r2, [r3, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	605a      	str	r2, [r3, #4]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	609a      	str	r2, [r3, #8]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	609a      	str	r2, [r3, #8]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	683a      	ldr	r2, [r7, #0]
 8009f38:	605a      	str	r2, [r3, #4]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	611a      	str	r2, [r3, #16]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	bf00      	nop
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <uxListRemove>:
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6892      	ldr	r2, [r2, #8]
 8009f6c:	609a      	str	r2, [r3, #8]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	6852      	ldr	r2, [r2, #4]
 8009f76:	605a      	str	r2, [r3, #4]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d103      	bne.n	8009f8a <uxListRemove+0x34>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	605a      	str	r2, [r3, #4]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	611a      	str	r2, [r3, #16]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <xTaskCreateStatic>:
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b08e      	sub	sp, #56	; 0x38
 8009fae:	af04      	add	r7, sp, #16
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
 8009fb6:	603b      	str	r3, [r7, #0]
 8009fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10a      	bne.n	8009fd4 <xTaskCreateStatic+0x2a>
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	623b      	str	r3, [r7, #32]
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <xTaskCreateStatic+0x28>
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <xTaskCreateStatic+0x46>
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <xTaskCreateStatic+0x44>
 8009ff0:	2354      	movs	r3, #84	; 0x54
 8009ff2:	613b      	str	r3, [r7, #16]
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	2b54      	cmp	r3, #84	; 0x54
 8009ff8:	d00a      	beq.n	800a010 <xTaskCreateStatic+0x66>
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	61bb      	str	r3, [r7, #24]
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <xTaskCreateStatic+0x64>
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01e      	beq.n	800a056 <xTaskCreateStatic+0xac>
 800a018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d01b      	beq.n	800a056 <xTaskCreateStatic+0xac>
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a026:	631a      	str	r2, [r3, #48]	; 0x30
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a030:	2300      	movs	r3, #0
 800a032:	9303      	str	r3, [sp, #12]
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	9302      	str	r3, [sp, #8]
 800a038:	f107 0314 	add.w	r3, r7, #20
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	68b9      	ldr	r1, [r7, #8]
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f000 f850 	bl	800a0ee <prvInitialiseNewTask>
 800a04e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a050:	f000 f8d4 	bl	800a1fc <prvAddNewTaskToReadyList>
 800a054:	e001      	b.n	800a05a <xTaskCreateStatic+0xb0>
 800a056:	2300      	movs	r3, #0
 800a058:	617b      	str	r3, [r7, #20]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	4618      	mov	r0, r3
 800a05e:	3728      	adds	r7, #40	; 0x28
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <xTaskCreate>:
 800a064:	b580      	push	{r7, lr}
 800a066:	b08c      	sub	sp, #48	; 0x30
 800a068:	af04      	add	r7, sp, #16
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	4613      	mov	r3, r2
 800a072:	80fb      	strh	r3, [r7, #6]
 800a074:	88fb      	ldrh	r3, [r7, #6]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 fec5 	bl	800ae08 <pvPortMalloc>
 800a07e:	6178      	str	r0, [r7, #20]
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00e      	beq.n	800a0a4 <xTaskCreate+0x40>
 800a086:	2054      	movs	r0, #84	; 0x54
 800a088:	f000 febe 	bl	800ae08 <pvPortMalloc>
 800a08c:	61f8      	str	r0, [r7, #28]
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <xTaskCreate+0x38>
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	631a      	str	r2, [r3, #48]	; 0x30
 800a09a:	e005      	b.n	800a0a8 <xTaskCreate+0x44>
 800a09c:	6978      	ldr	r0, [r7, #20]
 800a09e:	f000 ff7f 	bl	800afa0 <vPortFree>
 800a0a2:	e001      	b.n	800a0a8 <xTaskCreate+0x44>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	61fb      	str	r3, [r7, #28]
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d017      	beq.n	800a0de <xTaskCreate+0x7a>
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800a0b6:	88fa      	ldrh	r2, [r7, #6]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9303      	str	r3, [sp, #12]
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	9302      	str	r3, [sp, #8]
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	9301      	str	r3, [sp, #4]
 800a0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	68b9      	ldr	r1, [r7, #8]
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 f80e 	bl	800a0ee <prvInitialiseNewTask>
 800a0d2:	69f8      	ldr	r0, [r7, #28]
 800a0d4:	f000 f892 	bl	800a1fc <prvAddNewTaskToReadyList>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	61bb      	str	r3, [r7, #24]
 800a0dc:	e002      	b.n	800a0e4 <xTaskCreate+0x80>
 800a0de:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e2:	61bb      	str	r3, [r7, #24]
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3720      	adds	r7, #32
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <prvInitialiseNewTask>:
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b088      	sub	sp, #32
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	60f8      	str	r0, [r7, #12]
 800a0f6:	60b9      	str	r1, [r7, #8]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a106:	3b01      	subs	r3, #1
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	61bb      	str	r3, [r7, #24]
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	f023 0307 	bic.w	r3, r3, #7
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00a      	beq.n	800a136 <prvInitialiseNewTask+0x48>
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	617b      	str	r3, [r7, #20]
 800a132:	bf00      	nop
 800a134:	e7fe      	b.n	800a134 <prvInitialiseNewTask+0x46>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d01f      	beq.n	800a17c <prvInitialiseNewTask+0x8e>
 800a13c:	2300      	movs	r3, #0
 800a13e:	61fb      	str	r3, [r7, #28]
 800a140:	e012      	b.n	800a168 <prvInitialiseNewTask+0x7a>
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	4413      	add	r3, r2
 800a148:	7819      	ldrb	r1, [r3, #0]
 800a14a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	4413      	add	r3, r2
 800a150:	3334      	adds	r3, #52	; 0x34
 800a152:	460a      	mov	r2, r1
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	4413      	add	r3, r2
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d006      	beq.n	800a170 <prvInitialiseNewTask+0x82>
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	3301      	adds	r3, #1
 800a166:	61fb      	str	r3, [r7, #28]
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	2b0f      	cmp	r3, #15
 800a16c:	d9e9      	bls.n	800a142 <prvInitialiseNewTask+0x54>
 800a16e:	e000      	b.n	800a172 <prvInitialiseNewTask+0x84>
 800a170:	bf00      	nop
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a17a:	e003      	b.n	800a184 <prvInitialiseNewTask+0x96>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	2b06      	cmp	r3, #6
 800a188:	d901      	bls.n	800a18e <prvInitialiseNewTask+0xa0>
 800a18a:	2306      	movs	r3, #6
 800a18c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a192:	62da      	str	r2, [r3, #44]	; 0x2c
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a198:	645a      	str	r2, [r3, #68]	; 0x44
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	2200      	movs	r2, #0
 800a19e:	649a      	str	r2, [r3, #72]	; 0x48
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff fe6c 	bl	8009e82 <vListInitialiseItem>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	3318      	adds	r3, #24
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff fe67 	bl	8009e82 <vListInitialiseItem>
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b8:	611a      	str	r2, [r3, #16]
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	f1c3 0207 	rsb	r2, r3, #7
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	619a      	str	r2, [r3, #24]
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c8:	625a      	str	r2, [r3, #36]	; 0x24
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	64da      	str	r2, [r3, #76]	; 0x4c
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	69b8      	ldr	r0, [r7, #24]
 800a1de:	f000 fc05 	bl	800a9ec <pxPortInitialiseStack>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e6:	601a      	str	r2, [r3, #0]
 800a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <prvInitialiseNewTask+0x106>
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	bf00      	nop
 800a1f6:	3720      	adds	r7, #32
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <prvAddNewTaskToReadyList>:
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	f000 fd1e 	bl	800ac44 <vPortEnterCritical>
 800a208:	4b2a      	ldr	r3, [pc, #168]	; (800a2b4 <prvAddNewTaskToReadyList+0xb8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3301      	adds	r3, #1
 800a20e:	4a29      	ldr	r2, [pc, #164]	; (800a2b4 <prvAddNewTaskToReadyList+0xb8>)
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	4b29      	ldr	r3, [pc, #164]	; (800a2b8 <prvAddNewTaskToReadyList+0xbc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d109      	bne.n	800a22e <prvAddNewTaskToReadyList+0x32>
 800a21a:	4a27      	ldr	r2, [pc, #156]	; (800a2b8 <prvAddNewTaskToReadyList+0xbc>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6013      	str	r3, [r2, #0]
 800a220:	4b24      	ldr	r3, [pc, #144]	; (800a2b4 <prvAddNewTaskToReadyList+0xb8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d110      	bne.n	800a24a <prvAddNewTaskToReadyList+0x4e>
 800a228:	f000 fabc 	bl	800a7a4 <prvInitialiseTaskLists>
 800a22c:	e00d      	b.n	800a24a <prvAddNewTaskToReadyList+0x4e>
 800a22e:	4b23      	ldr	r3, [pc, #140]	; (800a2bc <prvAddNewTaskToReadyList+0xc0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d109      	bne.n	800a24a <prvAddNewTaskToReadyList+0x4e>
 800a236:	4b20      	ldr	r3, [pc, #128]	; (800a2b8 <prvAddNewTaskToReadyList+0xbc>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a240:	429a      	cmp	r2, r3
 800a242:	d802      	bhi.n	800a24a <prvAddNewTaskToReadyList+0x4e>
 800a244:	4a1c      	ldr	r2, [pc, #112]	; (800a2b8 <prvAddNewTaskToReadyList+0xbc>)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <prvAddNewTaskToReadyList+0xc4>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	3301      	adds	r3, #1
 800a250:	4a1b      	ldr	r2, [pc, #108]	; (800a2c0 <prvAddNewTaskToReadyList+0xc4>)
 800a252:	6013      	str	r3, [r2, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	2201      	movs	r2, #1
 800a25a:	409a      	lsls	r2, r3
 800a25c:	4b19      	ldr	r3, [pc, #100]	; (800a2c4 <prvAddNewTaskToReadyList+0xc8>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4313      	orrs	r3, r2
 800a262:	4a18      	ldr	r2, [pc, #96]	; (800a2c4 <prvAddNewTaskToReadyList+0xc8>)
 800a264:	6013      	str	r3, [r2, #0]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4a15      	ldr	r2, [pc, #84]	; (800a2c8 <prvAddNewTaskToReadyList+0xcc>)
 800a274:	441a      	add	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3304      	adds	r3, #4
 800a27a:	4619      	mov	r1, r3
 800a27c:	4610      	mov	r0, r2
 800a27e:	f7ff fe0d 	bl	8009e9c <vListInsertEnd>
 800a282:	f000 fd0f 	bl	800aca4 <vPortExitCritical>
 800a286:	4b0d      	ldr	r3, [pc, #52]	; (800a2bc <prvAddNewTaskToReadyList+0xc0>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00e      	beq.n	800a2ac <prvAddNewTaskToReadyList+0xb0>
 800a28e:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <prvAddNewTaskToReadyList+0xbc>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	429a      	cmp	r2, r3
 800a29a:	d207      	bcs.n	800a2ac <prvAddNewTaskToReadyList+0xb0>
 800a29c:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <prvAddNewTaskToReadyList+0xd0>)
 800a29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	20000858 	.word	0x20000858
 800a2b8:	20000758 	.word	0x20000758
 800a2bc:	20000864 	.word	0x20000864
 800a2c0:	20000874 	.word	0x20000874
 800a2c4:	20000860 	.word	0x20000860
 800a2c8:	2000075c 	.word	0x2000075c
 800a2cc:	e000ed04 	.word	0xe000ed04

0800a2d0 <vTaskDelay>:
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d017      	beq.n	800a312 <vTaskDelay+0x42>
 800a2e2:	4b13      	ldr	r3, [pc, #76]	; (800a330 <vTaskDelay+0x60>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00a      	beq.n	800a300 <vTaskDelay+0x30>
 800a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	60bb      	str	r3, [r7, #8]
 800a2fc:	bf00      	nop
 800a2fe:	e7fe      	b.n	800a2fe <vTaskDelay+0x2e>
 800a300:	f000 f87a 	bl	800a3f8 <vTaskSuspendAll>
 800a304:	2100      	movs	r1, #0
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fb0a 	bl	800a920 <prvAddCurrentTaskToDelayedList>
 800a30c:	f000 f882 	bl	800a414 <xTaskResumeAll>
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d107      	bne.n	800a328 <vTaskDelay+0x58>
 800a318:	4b06      	ldr	r3, [pc, #24]	; (800a334 <vTaskDelay+0x64>)
 800a31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	bf00      	nop
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	20000880 	.word	0x20000880
 800a334:	e000ed04 	.word	0xe000ed04

0800a338 <vTaskStartScheduler>:
 800a338:	b580      	push	{r7, lr}
 800a33a:	b08a      	sub	sp, #40	; 0x28
 800a33c:	af04      	add	r7, sp, #16
 800a33e:	2300      	movs	r3, #0
 800a340:	60bb      	str	r3, [r7, #8]
 800a342:	2300      	movs	r3, #0
 800a344:	607b      	str	r3, [r7, #4]
 800a346:	463a      	mov	r2, r7
 800a348:	1d39      	adds	r1, r7, #4
 800a34a:	f107 0308 	add.w	r3, r7, #8
 800a34e:	4618      	mov	r0, r3
 800a350:	f7f7 f8a8 	bl	80014a4 <vApplicationGetIdleTaskMemory>
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	9202      	str	r2, [sp, #8]
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	2300      	movs	r3, #0
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	2300      	movs	r3, #0
 800a364:	460a      	mov	r2, r1
 800a366:	491e      	ldr	r1, [pc, #120]	; (800a3e0 <vTaskStartScheduler+0xa8>)
 800a368:	481e      	ldr	r0, [pc, #120]	; (800a3e4 <vTaskStartScheduler+0xac>)
 800a36a:	f7ff fe1e 	bl	8009faa <xTaskCreateStatic>
 800a36e:	4603      	mov	r3, r0
 800a370:	4a1d      	ldr	r2, [pc, #116]	; (800a3e8 <vTaskStartScheduler+0xb0>)
 800a372:	6013      	str	r3, [r2, #0]
 800a374:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <vTaskStartScheduler+0xb0>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <vTaskStartScheduler+0x4a>
 800a37c:	2301      	movs	r3, #1
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	e001      	b.n	800a386 <vTaskStartScheduler+0x4e>
 800a382:	2300      	movs	r3, #0
 800a384:	617b      	str	r3, [r7, #20]
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d116      	bne.n	800a3ba <vTaskStartScheduler+0x82>
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	613b      	str	r3, [r7, #16]
 800a39e:	bf00      	nop
 800a3a0:	4b12      	ldr	r3, [pc, #72]	; (800a3ec <vTaskStartScheduler+0xb4>)
 800a3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	4b11      	ldr	r3, [pc, #68]	; (800a3f0 <vTaskStartScheduler+0xb8>)
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	4b11      	ldr	r3, [pc, #68]	; (800a3f4 <vTaskStartScheduler+0xbc>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	f000 fba4 	bl	800ab00 <xPortStartScheduler>
 800a3b8:	e00e      	b.n	800a3d8 <vTaskStartScheduler+0xa0>
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c0:	d10a      	bne.n	800a3d8 <vTaskStartScheduler+0xa0>
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <vTaskStartScheduler+0x9e>
 800a3d8:	bf00      	nop
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	0800d004 	.word	0x0800d004
 800a3e4:	0800a775 	.word	0x0800a775
 800a3e8:	2000087c 	.word	0x2000087c
 800a3ec:	20000878 	.word	0x20000878
 800a3f0:	20000864 	.word	0x20000864
 800a3f4:	2000085c 	.word	0x2000085c

0800a3f8 <vTaskSuspendAll>:
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	4b04      	ldr	r3, [pc, #16]	; (800a410 <vTaskSuspendAll+0x18>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	3301      	adds	r3, #1
 800a402:	4a03      	ldr	r2, [pc, #12]	; (800a410 <vTaskSuspendAll+0x18>)
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	bf00      	nop
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	20000880 	.word	0x20000880

0800a414 <xTaskResumeAll>:
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
 800a41e:	2300      	movs	r3, #0
 800a420:	60bb      	str	r3, [r7, #8]
 800a422:	4b41      	ldr	r3, [pc, #260]	; (800a528 <xTaskResumeAll+0x114>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10a      	bne.n	800a440 <xTaskResumeAll+0x2c>
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	bf00      	nop
 800a43e:	e7fe      	b.n	800a43e <xTaskResumeAll+0x2a>
 800a440:	f000 fc00 	bl	800ac44 <vPortEnterCritical>
 800a444:	4b38      	ldr	r3, [pc, #224]	; (800a528 <xTaskResumeAll+0x114>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3b01      	subs	r3, #1
 800a44a:	4a37      	ldr	r2, [pc, #220]	; (800a528 <xTaskResumeAll+0x114>)
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	4b36      	ldr	r3, [pc, #216]	; (800a528 <xTaskResumeAll+0x114>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d161      	bne.n	800a51a <xTaskResumeAll+0x106>
 800a456:	4b35      	ldr	r3, [pc, #212]	; (800a52c <xTaskResumeAll+0x118>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d05d      	beq.n	800a51a <xTaskResumeAll+0x106>
 800a45e:	e02e      	b.n	800a4be <xTaskResumeAll+0xaa>
 800a460:	4b33      	ldr	r3, [pc, #204]	; (800a530 <xTaskResumeAll+0x11c>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	3318      	adds	r3, #24
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff fd72 	bl	8009f56 <uxListRemove>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3304      	adds	r3, #4
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff fd6d 	bl	8009f56 <uxListRemove>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a480:	2201      	movs	r2, #1
 800a482:	409a      	lsls	r2, r3
 800a484:	4b2b      	ldr	r3, [pc, #172]	; (800a534 <xTaskResumeAll+0x120>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4313      	orrs	r3, r2
 800a48a:	4a2a      	ldr	r2, [pc, #168]	; (800a534 <xTaskResumeAll+0x120>)
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a492:	4613      	mov	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4a27      	ldr	r2, [pc, #156]	; (800a538 <xTaskResumeAll+0x124>)
 800a49c:	441a      	add	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7ff fcf9 	bl	8009e9c <vListInsertEnd>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	4b23      	ldr	r3, [pc, #140]	; (800a53c <xTaskResumeAll+0x128>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d302      	bcc.n	800a4be <xTaskResumeAll+0xaa>
 800a4b8:	4b21      	ldr	r3, [pc, #132]	; (800a540 <xTaskResumeAll+0x12c>)
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	4b1c      	ldr	r3, [pc, #112]	; (800a530 <xTaskResumeAll+0x11c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1cc      	bne.n	800a460 <xTaskResumeAll+0x4c>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d001      	beq.n	800a4d0 <xTaskResumeAll+0xbc>
 800a4cc:	f000 fa08 	bl	800a8e0 <prvResetNextTaskUnblockTime>
 800a4d0:	4b1c      	ldr	r3, [pc, #112]	; (800a544 <xTaskResumeAll+0x130>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	607b      	str	r3, [r7, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d010      	beq.n	800a4fe <xTaskResumeAll+0xea>
 800a4dc:	f000 f836 	bl	800a54c <xTaskIncrementTick>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <xTaskResumeAll+0xd8>
 800a4e6:	4b16      	ldr	r3, [pc, #88]	; (800a540 <xTaskResumeAll+0x12c>)
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	607b      	str	r3, [r7, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1f1      	bne.n	800a4dc <xTaskResumeAll+0xc8>
 800a4f8:	4b12      	ldr	r3, [pc, #72]	; (800a544 <xTaskResumeAll+0x130>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	601a      	str	r2, [r3, #0]
 800a4fe:	4b10      	ldr	r3, [pc, #64]	; (800a540 <xTaskResumeAll+0x12c>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d009      	beq.n	800a51a <xTaskResumeAll+0x106>
 800a506:	2301      	movs	r3, #1
 800a508:	60bb      	str	r3, [r7, #8]
 800a50a:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <xTaskResumeAll+0x134>)
 800a50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f000 fbc3 	bl	800aca4 <vPortExitCritical>
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20000880 	.word	0x20000880
 800a52c:	20000858 	.word	0x20000858
 800a530:	20000818 	.word	0x20000818
 800a534:	20000860 	.word	0x20000860
 800a538:	2000075c 	.word	0x2000075c
 800a53c:	20000758 	.word	0x20000758
 800a540:	2000086c 	.word	0x2000086c
 800a544:	20000868 	.word	0x20000868
 800a548:	e000ed04 	.word	0xe000ed04

0800a54c <xTaskIncrementTick>:
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	2300      	movs	r3, #0
 800a554:	617b      	str	r3, [r7, #20]
 800a556:	4b4e      	ldr	r3, [pc, #312]	; (800a690 <xTaskIncrementTick+0x144>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	f040 808e 	bne.w	800a67c <xTaskIncrementTick+0x130>
 800a560:	4b4c      	ldr	r3, [pc, #304]	; (800a694 <xTaskIncrementTick+0x148>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3301      	adds	r3, #1
 800a566:	613b      	str	r3, [r7, #16]
 800a568:	4a4a      	ldr	r2, [pc, #296]	; (800a694 <xTaskIncrementTick+0x148>)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	6013      	str	r3, [r2, #0]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d120      	bne.n	800a5b6 <xTaskIncrementTick+0x6a>
 800a574:	4b48      	ldr	r3, [pc, #288]	; (800a698 <xTaskIncrementTick+0x14c>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <xTaskIncrementTick+0x48>
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	603b      	str	r3, [r7, #0]
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <xTaskIncrementTick+0x46>
 800a594:	4b40      	ldr	r3, [pc, #256]	; (800a698 <xTaskIncrementTick+0x14c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	4b40      	ldr	r3, [pc, #256]	; (800a69c <xTaskIncrementTick+0x150>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a3e      	ldr	r2, [pc, #248]	; (800a698 <xTaskIncrementTick+0x14c>)
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	4a3e      	ldr	r2, [pc, #248]	; (800a69c <xTaskIncrementTick+0x150>)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	4b3d      	ldr	r3, [pc, #244]	; (800a6a0 <xTaskIncrementTick+0x154>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	4a3c      	ldr	r2, [pc, #240]	; (800a6a0 <xTaskIncrementTick+0x154>)
 800a5b0:	6013      	str	r3, [r2, #0]
 800a5b2:	f000 f995 	bl	800a8e0 <prvResetNextTaskUnblockTime>
 800a5b6:	4b3b      	ldr	r3, [pc, #236]	; (800a6a4 <xTaskIncrementTick+0x158>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d348      	bcc.n	800a652 <xTaskIncrementTick+0x106>
 800a5c0:	4b35      	ldr	r3, [pc, #212]	; (800a698 <xTaskIncrementTick+0x14c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d104      	bne.n	800a5d4 <xTaskIncrementTick+0x88>
 800a5ca:	4b36      	ldr	r3, [pc, #216]	; (800a6a4 <xTaskIncrementTick+0x158>)
 800a5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	e03e      	b.n	800a652 <xTaskIncrementTick+0x106>
 800a5d4:	4b30      	ldr	r3, [pc, #192]	; (800a698 <xTaskIncrementTick+0x14c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	68db      	ldr	r3, [r3, #12]
 800a5dc:	60bb      	str	r3, [r7, #8]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d203      	bcs.n	800a5f4 <xTaskIncrementTick+0xa8>
 800a5ec:	4a2d      	ldr	r2, [pc, #180]	; (800a6a4 <xTaskIncrementTick+0x158>)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6013      	str	r3, [r2, #0]
 800a5f2:	e02e      	b.n	800a652 <xTaskIncrementTick+0x106>
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff fcac 	bl	8009f56 <uxListRemove>
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a602:	2b00      	cmp	r3, #0
 800a604:	d004      	beq.n	800a610 <xTaskIncrementTick+0xc4>
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	3318      	adds	r3, #24
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff fca3 	bl	8009f56 <uxListRemove>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	2201      	movs	r2, #1
 800a616:	409a      	lsls	r2, r3
 800a618:	4b23      	ldr	r3, [pc, #140]	; (800a6a8 <xTaskIncrementTick+0x15c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	4a22      	ldr	r2, [pc, #136]	; (800a6a8 <xTaskIncrementTick+0x15c>)
 800a620:	6013      	str	r3, [r2, #0]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	4a1f      	ldr	r2, [pc, #124]	; (800a6ac <xTaskIncrementTick+0x160>)
 800a630:	441a      	add	r2, r3
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	3304      	adds	r3, #4
 800a636:	4619      	mov	r1, r3
 800a638:	4610      	mov	r0, r2
 800a63a:	f7ff fc2f 	bl	8009e9c <vListInsertEnd>
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a642:	4b1b      	ldr	r3, [pc, #108]	; (800a6b0 <xTaskIncrementTick+0x164>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a648:	429a      	cmp	r2, r3
 800a64a:	d3b9      	bcc.n	800a5c0 <xTaskIncrementTick+0x74>
 800a64c:	2301      	movs	r3, #1
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	e7b6      	b.n	800a5c0 <xTaskIncrementTick+0x74>
 800a652:	4b17      	ldr	r3, [pc, #92]	; (800a6b0 <xTaskIncrementTick+0x164>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a658:	4914      	ldr	r1, [pc, #80]	; (800a6ac <xTaskIncrementTick+0x160>)
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	440b      	add	r3, r1
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d901      	bls.n	800a66e <xTaskIncrementTick+0x122>
 800a66a:	2301      	movs	r3, #1
 800a66c:	617b      	str	r3, [r7, #20]
 800a66e:	4b11      	ldr	r3, [pc, #68]	; (800a6b4 <xTaskIncrementTick+0x168>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d007      	beq.n	800a686 <xTaskIncrementTick+0x13a>
 800a676:	2301      	movs	r3, #1
 800a678:	617b      	str	r3, [r7, #20]
 800a67a:	e004      	b.n	800a686 <xTaskIncrementTick+0x13a>
 800a67c:	4b0e      	ldr	r3, [pc, #56]	; (800a6b8 <xTaskIncrementTick+0x16c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3301      	adds	r3, #1
 800a682:	4a0d      	ldr	r2, [pc, #52]	; (800a6b8 <xTaskIncrementTick+0x16c>)
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	4618      	mov	r0, r3
 800a68a:	3718      	adds	r7, #24
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	20000880 	.word	0x20000880
 800a694:	2000085c 	.word	0x2000085c
 800a698:	20000810 	.word	0x20000810
 800a69c:	20000814 	.word	0x20000814
 800a6a0:	20000870 	.word	0x20000870
 800a6a4:	20000878 	.word	0x20000878
 800a6a8:	20000860 	.word	0x20000860
 800a6ac:	2000075c 	.word	0x2000075c
 800a6b0:	20000758 	.word	0x20000758
 800a6b4:	2000086c 	.word	0x2000086c
 800a6b8:	20000868 	.word	0x20000868

0800a6bc <vTaskSwitchContext>:
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	4b27      	ldr	r3, [pc, #156]	; (800a760 <vTaskSwitchContext+0xa4>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <vTaskSwitchContext+0x16>
 800a6ca:	4b26      	ldr	r3, [pc, #152]	; (800a764 <vTaskSwitchContext+0xa8>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	e03f      	b.n	800a752 <vTaskSwitchContext+0x96>
 800a6d2:	4b24      	ldr	r3, [pc, #144]	; (800a764 <vTaskSwitchContext+0xa8>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	4b23      	ldr	r3, [pc, #140]	; (800a768 <vTaskSwitchContext+0xac>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	fab3 f383 	clz	r3, r3
 800a6e4:	72fb      	strb	r3, [r7, #11]
 800a6e6:	7afb      	ldrb	r3, [r7, #11]
 800a6e8:	f1c3 031f 	rsb	r3, r3, #31
 800a6ec:	617b      	str	r3, [r7, #20]
 800a6ee:	491f      	ldr	r1, [pc, #124]	; (800a76c <vTaskSwitchContext+0xb0>)
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10a      	bne.n	800a718 <vTaskSwitchContext+0x5c>
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <vTaskSwitchContext+0x5a>
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4a12      	ldr	r2, [pc, #72]	; (800a76c <vTaskSwitchContext+0xb0>)
 800a724:	4413      	add	r3, r2
 800a726:	613b      	str	r3, [r7, #16]
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	605a      	str	r2, [r3, #4]
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	3308      	adds	r3, #8
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d104      	bne.n	800a748 <vTaskSwitchContext+0x8c>
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	605a      	str	r2, [r3, #4]
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	4a08      	ldr	r2, [pc, #32]	; (800a770 <vTaskSwitchContext+0xb4>)
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	bf00      	nop
 800a754:	371c      	adds	r7, #28
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	20000880 	.word	0x20000880
 800a764:	2000086c 	.word	0x2000086c
 800a768:	20000860 	.word	0x20000860
 800a76c:	2000075c 	.word	0x2000075c
 800a770:	20000758 	.word	0x20000758

0800a774 <prvIdleTask>:
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	f000 f852 	bl	800a824 <prvCheckTasksWaitingTermination>
 800a780:	4b06      	ldr	r3, [pc, #24]	; (800a79c <prvIdleTask+0x28>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d9f9      	bls.n	800a77c <prvIdleTask+0x8>
 800a788:	4b05      	ldr	r3, [pc, #20]	; (800a7a0 <prvIdleTask+0x2c>)
 800a78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a78e:	601a      	str	r2, [r3, #0]
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	e7f0      	b.n	800a77c <prvIdleTask+0x8>
 800a79a:	bf00      	nop
 800a79c:	2000075c 	.word	0x2000075c
 800a7a0:	e000ed04 	.word	0xe000ed04

0800a7a4 <prvInitialiseTaskLists>:
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	607b      	str	r3, [r7, #4]
 800a7ae:	e00c      	b.n	800a7ca <prvInitialiseTaskLists+0x26>
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4413      	add	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4a12      	ldr	r2, [pc, #72]	; (800a804 <prvInitialiseTaskLists+0x60>)
 800a7bc:	4413      	add	r3, r2
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7ff fb3f 	bl	8009e42 <vListInitialise>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	607b      	str	r3, [r7, #4]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2b06      	cmp	r3, #6
 800a7ce:	d9ef      	bls.n	800a7b0 <prvInitialiseTaskLists+0xc>
 800a7d0:	480d      	ldr	r0, [pc, #52]	; (800a808 <prvInitialiseTaskLists+0x64>)
 800a7d2:	f7ff fb36 	bl	8009e42 <vListInitialise>
 800a7d6:	480d      	ldr	r0, [pc, #52]	; (800a80c <prvInitialiseTaskLists+0x68>)
 800a7d8:	f7ff fb33 	bl	8009e42 <vListInitialise>
 800a7dc:	480c      	ldr	r0, [pc, #48]	; (800a810 <prvInitialiseTaskLists+0x6c>)
 800a7de:	f7ff fb30 	bl	8009e42 <vListInitialise>
 800a7e2:	480c      	ldr	r0, [pc, #48]	; (800a814 <prvInitialiseTaskLists+0x70>)
 800a7e4:	f7ff fb2d 	bl	8009e42 <vListInitialise>
 800a7e8:	480b      	ldr	r0, [pc, #44]	; (800a818 <prvInitialiseTaskLists+0x74>)
 800a7ea:	f7ff fb2a 	bl	8009e42 <vListInitialise>
 800a7ee:	4b0b      	ldr	r3, [pc, #44]	; (800a81c <prvInitialiseTaskLists+0x78>)
 800a7f0:	4a05      	ldr	r2, [pc, #20]	; (800a808 <prvInitialiseTaskLists+0x64>)
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <prvInitialiseTaskLists+0x7c>)
 800a7f6:	4a05      	ldr	r2, [pc, #20]	; (800a80c <prvInitialiseTaskLists+0x68>)
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	bf00      	nop
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	2000075c 	.word	0x2000075c
 800a808:	200007e8 	.word	0x200007e8
 800a80c:	200007fc 	.word	0x200007fc
 800a810:	20000818 	.word	0x20000818
 800a814:	2000082c 	.word	0x2000082c
 800a818:	20000844 	.word	0x20000844
 800a81c:	20000810 	.word	0x20000810
 800a820:	20000814 	.word	0x20000814

0800a824 <prvCheckTasksWaitingTermination>:
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	e019      	b.n	800a860 <prvCheckTasksWaitingTermination+0x3c>
 800a82c:	f000 fa0a 	bl	800ac44 <vPortEnterCritical>
 800a830:	4b10      	ldr	r3, [pc, #64]	; (800a874 <prvCheckTasksWaitingTermination+0x50>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	607b      	str	r3, [r7, #4]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3304      	adds	r3, #4
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff fb8a 	bl	8009f56 <uxListRemove>
 800a842:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <prvCheckTasksWaitingTermination+0x54>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3b01      	subs	r3, #1
 800a848:	4a0b      	ldr	r2, [pc, #44]	; (800a878 <prvCheckTasksWaitingTermination+0x54>)
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	4b0b      	ldr	r3, [pc, #44]	; (800a87c <prvCheckTasksWaitingTermination+0x58>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3b01      	subs	r3, #1
 800a852:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <prvCheckTasksWaitingTermination+0x58>)
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	f000 fa25 	bl	800aca4 <vPortExitCritical>
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f810 	bl	800a880 <prvDeleteTCB>
 800a860:	4b06      	ldr	r3, [pc, #24]	; (800a87c <prvCheckTasksWaitingTermination+0x58>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e1      	bne.n	800a82c <prvCheckTasksWaitingTermination+0x8>
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	2000082c 	.word	0x2000082c
 800a878:	20000858 	.word	0x20000858
 800a87c:	20000840 	.word	0x20000840

0800a880 <prvDeleteTCB>:
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d108      	bne.n	800a8a4 <prvDeleteTCB+0x24>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fb82 	bl	800afa0 <vPortFree>
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fb7f 	bl	800afa0 <vPortFree>
 800a8a2:	e018      	b.n	800a8d6 <prvDeleteTCB+0x56>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d103      	bne.n	800a8b6 <prvDeleteTCB+0x36>
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f000 fb76 	bl	800afa0 <vPortFree>
 800a8b4:	e00f      	b.n	800a8d6 <prvDeleteTCB+0x56>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d00a      	beq.n	800a8d6 <prvDeleteTCB+0x56>
 800a8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c4:	f383 8811 	msr	BASEPRI, r3
 800a8c8:	f3bf 8f6f 	isb	sy
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	60fb      	str	r3, [r7, #12]
 800a8d2:	bf00      	nop
 800a8d4:	e7fe      	b.n	800a8d4 <prvDeleteTCB+0x54>
 800a8d6:	bf00      	nop
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <prvResetNextTaskUnblockTime>:
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4b0c      	ldr	r3, [pc, #48]	; (800a918 <prvResetNextTaskUnblockTime+0x38>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d104      	bne.n	800a8fa <prvResetNextTaskUnblockTime+0x1a>
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <prvResetNextTaskUnblockTime+0x3c>)
 800a8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	e008      	b.n	800a90c <prvResetNextTaskUnblockTime+0x2c>
 800a8fa:	4b07      	ldr	r3, [pc, #28]	; (800a918 <prvResetNextTaskUnblockTime+0x38>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	607b      	str	r3, [r7, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	4a04      	ldr	r2, [pc, #16]	; (800a91c <prvResetNextTaskUnblockTime+0x3c>)
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	20000810 	.word	0x20000810
 800a91c:	20000878 	.word	0x20000878

0800a920 <prvAddCurrentTaskToDelayedList>:
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
 800a92a:	4b29      	ldr	r3, [pc, #164]	; (800a9d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	4b28      	ldr	r3, [pc, #160]	; (800a9d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3304      	adds	r3, #4
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fb0d 	bl	8009f56 <uxListRemove>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10b      	bne.n	800a95a <prvAddCurrentTaskToDelayedList+0x3a>
 800a942:	4b24      	ldr	r3, [pc, #144]	; (800a9d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	2201      	movs	r2, #1
 800a94a:	fa02 f303 	lsl.w	r3, r2, r3
 800a94e:	43da      	mvns	r2, r3
 800a950:	4b21      	ldr	r3, [pc, #132]	; (800a9d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4013      	ands	r3, r2
 800a956:	4a20      	ldr	r2, [pc, #128]	; (800a9d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a960:	d10a      	bne.n	800a978 <prvAddCurrentTaskToDelayedList+0x58>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <prvAddCurrentTaskToDelayedList+0x58>
 800a968:	4b1a      	ldr	r3, [pc, #104]	; (800a9d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3304      	adds	r3, #4
 800a96e:	4619      	mov	r1, r3
 800a970:	481a      	ldr	r0, [pc, #104]	; (800a9dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a972:	f7ff fa93 	bl	8009e9c <vListInsertEnd>
 800a976:	e026      	b.n	800a9c6 <prvAddCurrentTaskToDelayedList+0xa6>
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4413      	add	r3, r2
 800a97e:	60bb      	str	r3, [r7, #8]
 800a980:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	605a      	str	r2, [r3, #4]
 800a988:	68ba      	ldr	r2, [r7, #8]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d209      	bcs.n	800a9a4 <prvAddCurrentTaskToDelayedList+0x84>
 800a990:	4b13      	ldr	r3, [pc, #76]	; (800a9e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	4b0f      	ldr	r3, [pc, #60]	; (800a9d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3304      	adds	r3, #4
 800a99a:	4619      	mov	r1, r3
 800a99c:	4610      	mov	r0, r2
 800a99e:	f7ff faa1 	bl	8009ee4 <vListInsert>
 800a9a2:	e010      	b.n	800a9c6 <prvAddCurrentTaskToDelayedList+0xa6>
 800a9a4:	4b0f      	ldr	r3, [pc, #60]	; (800a9e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f7ff fa97 	bl	8009ee4 <vListInsert>
 800a9b6:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d202      	bcs.n	800a9c6 <prvAddCurrentTaskToDelayedList+0xa6>
 800a9c0:	4a09      	ldr	r2, [pc, #36]	; (800a9e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	bf00      	nop
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2000085c 	.word	0x2000085c
 800a9d4:	20000758 	.word	0x20000758
 800a9d8:	20000860 	.word	0x20000860
 800a9dc:	20000844 	.word	0x20000844
 800a9e0:	20000814 	.word	0x20000814
 800a9e4:	20000810 	.word	0x20000810
 800a9e8:	20000878 	.word	0x20000878

0800a9ec <pxPortInitialiseStack>:
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	3b04      	subs	r3, #4
 800a9fc:	60fb      	str	r3, [r7, #12]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	3b04      	subs	r3, #4
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f023 0201 	bic.w	r2, r3, #1
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	601a      	str	r2, [r3, #0]
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3b04      	subs	r3, #4
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	4a0c      	ldr	r2, [pc, #48]	; (800aa50 <pxPortInitialiseStack+0x64>)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3b14      	subs	r3, #20
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3b04      	subs	r3, #4
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f06f 0202 	mvn.w	r2, #2
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	3b20      	subs	r3, #32
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	0800aa55 	.word	0x0800aa55

0800aa54 <prvTaskExitError>:
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	607b      	str	r3, [r7, #4]
 800aa5e:	4b12      	ldr	r3, [pc, #72]	; (800aaa8 <prvTaskExitError+0x54>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d00a      	beq.n	800aa7e <prvTaskExitError+0x2a>
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	bf00      	nop
 800aa7c:	e7fe      	b.n	800aa7c <prvTaskExitError+0x28>
 800aa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa82:	f383 8811 	msr	BASEPRI, r3
 800aa86:	f3bf 8f6f 	isb	sy
 800aa8a:	f3bf 8f4f 	dsb	sy
 800aa8e:	60bb      	str	r3, [r7, #8]
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d0fc      	beq.n	800aa94 <prvTaskExitError+0x40>
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	200000cc 	.word	0x200000cc
 800aaac:	00000000 	.word	0x00000000

0800aab0 <SVC_Handler>:
 800aab0:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <pxCurrentTCBConst2>)
 800aab2:	6819      	ldr	r1, [r3, #0]
 800aab4:	6808      	ldr	r0, [r1, #0]
 800aab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaba:	f380 8809 	msr	PSP, r0
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f04f 0000 	mov.w	r0, #0
 800aac6:	f380 8811 	msr	BASEPRI, r0
 800aaca:	4770      	bx	lr
 800aacc:	f3af 8000 	nop.w

0800aad0 <pxCurrentTCBConst2>:
 800aad0:	20000758 	.word	0x20000758
 800aad4:	bf00      	nop
 800aad6:	bf00      	nop

0800aad8 <prvPortStartFirstTask>:
 800aad8:	4808      	ldr	r0, [pc, #32]	; (800aafc <prvPortStartFirstTask+0x24>)
 800aada:	6800      	ldr	r0, [r0, #0]
 800aadc:	6800      	ldr	r0, [r0, #0]
 800aade:	f380 8808 	msr	MSP, r0
 800aae2:	f04f 0000 	mov.w	r0, #0
 800aae6:	f380 8814 	msr	CONTROL, r0
 800aaea:	b662      	cpsie	i
 800aaec:	b661      	cpsie	f
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	df00      	svc	0
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e000ed08 	.word	0xe000ed08

0800ab00 <xPortStartScheduler>:
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4b46      	ldr	r3, [pc, #280]	; (800ac20 <xPortStartScheduler+0x120>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a46      	ldr	r2, [pc, #280]	; (800ac24 <xPortStartScheduler+0x124>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d10a      	bne.n	800ab26 <xPortStartScheduler+0x26>
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	613b      	str	r3, [r7, #16]
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xPortStartScheduler+0x24>
 800ab26:	4b3e      	ldr	r3, [pc, #248]	; (800ac20 <xPortStartScheduler+0x120>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a3f      	ldr	r2, [pc, #252]	; (800ac28 <xPortStartScheduler+0x128>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d10a      	bne.n	800ab46 <xPortStartScheduler+0x46>
 800ab30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab34:	f383 8811 	msr	BASEPRI, r3
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	f3bf 8f4f 	dsb	sy
 800ab40:	60fb      	str	r3, [r7, #12]
 800ab42:	bf00      	nop
 800ab44:	e7fe      	b.n	800ab44 <xPortStartScheduler+0x44>
 800ab46:	4b39      	ldr	r3, [pc, #228]	; (800ac2c <xPortStartScheduler+0x12c>)
 800ab48:	617b      	str	r3, [r7, #20]
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	607b      	str	r3, [r7, #4]
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	22ff      	movs	r2, #255	; 0xff
 800ab56:	701a      	strb	r2, [r3, #0]
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	70fb      	strb	r3, [r7, #3]
 800ab60:	78fb      	ldrb	r3, [r7, #3]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	4b31      	ldr	r3, [pc, #196]	; (800ac30 <xPortStartScheduler+0x130>)
 800ab6c:	701a      	strb	r2, [r3, #0]
 800ab6e:	4b31      	ldr	r3, [pc, #196]	; (800ac34 <xPortStartScheduler+0x134>)
 800ab70:	2207      	movs	r2, #7
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e009      	b.n	800ab8a <xPortStartScheduler+0x8a>
 800ab76:	4b2f      	ldr	r3, [pc, #188]	; (800ac34 <xPortStartScheduler+0x134>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	4a2d      	ldr	r2, [pc, #180]	; (800ac34 <xPortStartScheduler+0x134>)
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	70fb      	strb	r3, [r7, #3]
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab92:	2b80      	cmp	r3, #128	; 0x80
 800ab94:	d0ef      	beq.n	800ab76 <xPortStartScheduler+0x76>
 800ab96:	4b27      	ldr	r3, [pc, #156]	; (800ac34 <xPortStartScheduler+0x134>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f1c3 0307 	rsb	r3, r3, #7
 800ab9e:	2b04      	cmp	r3, #4
 800aba0:	d00a      	beq.n	800abb8 <xPortStartScheduler+0xb8>
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	60bb      	str	r3, [r7, #8]
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <xPortStartScheduler+0xb6>
 800abb8:	4b1e      	ldr	r3, [pc, #120]	; (800ac34 <xPortStartScheduler+0x134>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	4a1d      	ldr	r2, [pc, #116]	; (800ac34 <xPortStartScheduler+0x134>)
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	4b1c      	ldr	r3, [pc, #112]	; (800ac34 <xPortStartScheduler+0x134>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abca:	4a1a      	ldr	r2, [pc, #104]	; (800ac34 <xPortStartScheduler+0x134>)
 800abcc:	6013      	str	r3, [r2, #0]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	701a      	strb	r2, [r3, #0]
 800abd6:	4b18      	ldr	r3, [pc, #96]	; (800ac38 <xPortStartScheduler+0x138>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <xPortStartScheduler+0x138>)
 800abdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <xPortStartScheduler+0x138>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a14      	ldr	r2, [pc, #80]	; (800ac38 <xPortStartScheduler+0x138>)
 800abe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800abec:	6013      	str	r3, [r2, #0]
 800abee:	f000 f8dd 	bl	800adac <vPortSetupTimerInterrupt>
 800abf2:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <xPortStartScheduler+0x13c>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	f000 f8fc 	bl	800adf4 <vPortEnableVFP>
 800abfc:	4b10      	ldr	r3, [pc, #64]	; (800ac40 <xPortStartScheduler+0x140>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a0f      	ldr	r2, [pc, #60]	; (800ac40 <xPortStartScheduler+0x140>)
 800ac02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	f7ff ff66 	bl	800aad8 <prvPortStartFirstTask>
 800ac0c:	f7ff fd56 	bl	800a6bc <vTaskSwitchContext>
 800ac10:	f7ff ff20 	bl	800aa54 <prvTaskExitError>
 800ac14:	2300      	movs	r3, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	e000ed00 	.word	0xe000ed00
 800ac24:	410fc271 	.word	0x410fc271
 800ac28:	410fc270 	.word	0x410fc270
 800ac2c:	e000e400 	.word	0xe000e400
 800ac30:	20000884 	.word	0x20000884
 800ac34:	20000888 	.word	0x20000888
 800ac38:	e000ed20 	.word	0xe000ed20
 800ac3c:	200000cc 	.word	0x200000cc
 800ac40:	e000ef34 	.word	0xe000ef34

0800ac44 <vPortEnterCritical>:
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	607b      	str	r3, [r7, #4]
 800ac5c:	bf00      	nop
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <vPortEnterCritical+0x58>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	3301      	adds	r3, #1
 800ac64:	4a0d      	ldr	r2, [pc, #52]	; (800ac9c <vPortEnterCritical+0x58>)
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <vPortEnterCritical+0x58>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d10f      	bne.n	800ac90 <vPortEnterCritical+0x4c>
 800ac70:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <vPortEnterCritical+0x5c>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <vPortEnterCritical+0x4c>
 800ac7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7e:	f383 8811 	msr	BASEPRI, r3
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	f3bf 8f4f 	dsb	sy
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <vPortEnterCritical+0x4a>
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	200000cc 	.word	0x200000cc
 800aca0:	e000ed04 	.word	0xe000ed04

0800aca4 <vPortExitCritical>:
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4b12      	ldr	r3, [pc, #72]	; (800acf4 <vPortExitCritical+0x50>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10a      	bne.n	800acc8 <vPortExitCritical+0x24>
 800acb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	607b      	str	r3, [r7, #4]
 800acc4:	bf00      	nop
 800acc6:	e7fe      	b.n	800acc6 <vPortExitCritical+0x22>
 800acc8:	4b0a      	ldr	r3, [pc, #40]	; (800acf4 <vPortExitCritical+0x50>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	3b01      	subs	r3, #1
 800acce:	4a09      	ldr	r2, [pc, #36]	; (800acf4 <vPortExitCritical+0x50>)
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	4b08      	ldr	r3, [pc, #32]	; (800acf4 <vPortExitCritical+0x50>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d105      	bne.n	800ace6 <vPortExitCritical+0x42>
 800acda:	2300      	movs	r3, #0
 800acdc:	603b      	str	r3, [r7, #0]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	f383 8811 	msr	BASEPRI, r3
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	200000cc 	.word	0x200000cc
	...

0800ad00 <PendSV_Handler>:
 800ad00:	f3ef 8009 	mrs	r0, PSP
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	4b15      	ldr	r3, [pc, #84]	; (800ad60 <pxCurrentTCBConst>)
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	f01e 0f10 	tst.w	lr, #16
 800ad10:	bf08      	it	eq
 800ad12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1a:	6010      	str	r0, [r2, #0]
 800ad1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad24:	f380 8811 	msr	BASEPRI, r0
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f7ff fcc4 	bl	800a6bc <vTaskSwitchContext>
 800ad34:	f04f 0000 	mov.w	r0, #0
 800ad38:	f380 8811 	msr	BASEPRI, r0
 800ad3c:	bc09      	pop	{r0, r3}
 800ad3e:	6819      	ldr	r1, [r3, #0]
 800ad40:	6808      	ldr	r0, [r1, #0]
 800ad42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad46:	f01e 0f10 	tst.w	lr, #16
 800ad4a:	bf08      	it	eq
 800ad4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ad50:	f380 8809 	msr	PSP, r0
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	f3af 8000 	nop.w

0800ad60 <pxCurrentTCBConst>:
 800ad60:	20000758 	.word	0x20000758
 800ad64:	bf00      	nop
 800ad66:	bf00      	nop

0800ad68 <SysTick_Handler>:
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	bf00      	nop
 800ad82:	f7ff fbe3 	bl	800a54c <xTaskIncrementTick>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <SysTick_Handler+0x2c>
 800ad8c:	4b06      	ldr	r3, [pc, #24]	; (800ada8 <SysTick_Handler+0x40>)
 800ad8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	2300      	movs	r3, #0
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	bf00      	nop
 800ada0:	bf00      	nop
 800ada2:	3708      	adds	r7, #8
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <vPortSetupTimerInterrupt>:
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
 800adb0:	4b0b      	ldr	r3, [pc, #44]	; (800ade0 <vPortSetupTimerInterrupt+0x34>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	4b0b      	ldr	r3, [pc, #44]	; (800ade4 <vPortSetupTimerInterrupt+0x38>)
 800adb8:	2200      	movs	r2, #0
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	4b0a      	ldr	r3, [pc, #40]	; (800ade8 <vPortSetupTimerInterrupt+0x3c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a0a      	ldr	r2, [pc, #40]	; (800adec <vPortSetupTimerInterrupt+0x40>)
 800adc2:	fba2 2303 	umull	r2, r3, r2, r3
 800adc6:	099b      	lsrs	r3, r3, #6
 800adc8:	4a09      	ldr	r2, [pc, #36]	; (800adf0 <vPortSetupTimerInterrupt+0x44>)
 800adca:	3b01      	subs	r3, #1
 800adcc:	6013      	str	r3, [r2, #0]
 800adce:	4b04      	ldr	r3, [pc, #16]	; (800ade0 <vPortSetupTimerInterrupt+0x34>)
 800add0:	2207      	movs	r2, #7
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	bf00      	nop
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	e000e010 	.word	0xe000e010
 800ade4:	e000e018 	.word	0xe000e018
 800ade8:	20000034 	.word	0x20000034
 800adec:	10624dd3 	.word	0x10624dd3
 800adf0:	e000e014 	.word	0xe000e014

0800adf4 <vPortEnableVFP>:
 800adf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae04 <vPortEnableVFP+0x10>
 800adf8:	6801      	ldr	r1, [r0, #0]
 800adfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800adfe:	6001      	str	r1, [r0, #0]
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	e000ed88 	.word	0xe000ed88

0800ae08 <pvPortMalloc>:
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08a      	sub	sp, #40	; 0x28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	2300      	movs	r3, #0
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	f7ff faf0 	bl	800a3f8 <vTaskSuspendAll>
 800ae18:	4b5b      	ldr	r3, [pc, #364]	; (800af88 <pvPortMalloc+0x180>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <pvPortMalloc+0x1c>
 800ae20:	f000 f920 	bl	800b064 <prvHeapInit>
 800ae24:	4b59      	ldr	r3, [pc, #356]	; (800af8c <pvPortMalloc+0x184>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 8093 	bne.w	800af58 <pvPortMalloc+0x150>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d01d      	beq.n	800ae74 <pvPortMalloc+0x6c>
 800ae38:	2208      	movs	r2, #8
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4413      	add	r3, r2
 800ae3e:	607b      	str	r3, [r7, #4]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f003 0307 	and.w	r3, r3, #7
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d014      	beq.n	800ae74 <pvPortMalloc+0x6c>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f023 0307 	bic.w	r3, r3, #7
 800ae50:	3308      	adds	r3, #8
 800ae52:	607b      	str	r3, [r7, #4]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00a      	beq.n	800ae74 <pvPortMalloc+0x6c>
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	bf00      	nop
 800ae72:	e7fe      	b.n	800ae72 <pvPortMalloc+0x6a>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d06e      	beq.n	800af58 <pvPortMalloc+0x150>
 800ae7a:	4b45      	ldr	r3, [pc, #276]	; (800af90 <pvPortMalloc+0x188>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d869      	bhi.n	800af58 <pvPortMalloc+0x150>
 800ae84:	4b43      	ldr	r3, [pc, #268]	; (800af94 <pvPortMalloc+0x18c>)
 800ae86:	623b      	str	r3, [r7, #32]
 800ae88:	4b42      	ldr	r3, [pc, #264]	; (800af94 <pvPortMalloc+0x18c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae8e:	e004      	b.n	800ae9a <pvPortMalloc+0x92>
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	623b      	str	r3, [r7, #32]
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	627b      	str	r3, [r7, #36]	; 0x24
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d903      	bls.n	800aeac <pvPortMalloc+0xa4>
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f1      	bne.n	800ae90 <pvPortMalloc+0x88>
 800aeac:	4b36      	ldr	r3, [pc, #216]	; (800af88 <pvPortMalloc+0x180>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d050      	beq.n	800af58 <pvPortMalloc+0x150>
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2208      	movs	r2, #8
 800aebc:	4413      	add	r3, r2
 800aebe:	61fb      	str	r3, [r7, #28]
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	601a      	str	r2, [r3, #0]
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	685a      	ldr	r2, [r3, #4]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	1ad2      	subs	r2, r2, r3
 800aed0:	2308      	movs	r3, #8
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d91f      	bls.n	800af18 <pvPortMalloc+0x110>
 800aed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4413      	add	r3, r2
 800aede:	61bb      	str	r3, [r7, #24]
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f003 0307 	and.w	r3, r3, #7
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <pvPortMalloc+0xf8>
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	613b      	str	r3, [r7, #16]
 800aefc:	bf00      	nop
 800aefe:	e7fe      	b.n	800aefe <pvPortMalloc+0xf6>
 800af00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	1ad2      	subs	r2, r2, r3
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	605a      	str	r2, [r3, #4]
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	605a      	str	r2, [r3, #4]
 800af12:	69b8      	ldr	r0, [r7, #24]
 800af14:	f000 f908 	bl	800b128 <prvInsertBlockIntoFreeList>
 800af18:	4b1d      	ldr	r3, [pc, #116]	; (800af90 <pvPortMalloc+0x188>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	4a1b      	ldr	r2, [pc, #108]	; (800af90 <pvPortMalloc+0x188>)
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	4b1a      	ldr	r3, [pc, #104]	; (800af90 <pvPortMalloc+0x188>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	4b1b      	ldr	r3, [pc, #108]	; (800af98 <pvPortMalloc+0x190>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d203      	bcs.n	800af3a <pvPortMalloc+0x132>
 800af32:	4b17      	ldr	r3, [pc, #92]	; (800af90 <pvPortMalloc+0x188>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a18      	ldr	r2, [pc, #96]	; (800af98 <pvPortMalloc+0x190>)
 800af38:	6013      	str	r3, [r2, #0]
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <pvPortMalloc+0x184>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	431a      	orrs	r2, r3
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	605a      	str	r2, [r3, #4]
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <pvPortMalloc+0x194>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3301      	adds	r3, #1
 800af54:	4a11      	ldr	r2, [pc, #68]	; (800af9c <pvPortMalloc+0x194>)
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	f7ff fa5c 	bl	800a414 <xTaskResumeAll>
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00a      	beq.n	800af7c <pvPortMalloc+0x174>
 800af66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	60fb      	str	r3, [r7, #12]
 800af78:	bf00      	nop
 800af7a:	e7fe      	b.n	800af7a <pvPortMalloc+0x172>
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	4618      	mov	r0, r3
 800af80:	3728      	adds	r7, #40	; 0x28
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20004494 	.word	0x20004494
 800af8c:	200044a8 	.word	0x200044a8
 800af90:	20004498 	.word	0x20004498
 800af94:	2000448c 	.word	0x2000448c
 800af98:	2000449c 	.word	0x2000449c
 800af9c:	200044a0 	.word	0x200044a0

0800afa0 <vPortFree>:
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	617b      	str	r3, [r7, #20]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d04d      	beq.n	800b04e <vPortFree+0xae>
 800afb2:	2308      	movs	r3, #8
 800afb4:	425b      	negs	r3, r3
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	4413      	add	r3, r2
 800afba:	617b      	str	r3, [r7, #20]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	613b      	str	r3, [r7, #16]
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	4b24      	ldr	r3, [pc, #144]	; (800b058 <vPortFree+0xb8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4013      	ands	r3, r2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10a      	bne.n	800afe4 <vPortFree+0x44>
 800afce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	bf00      	nop
 800afe2:	e7fe      	b.n	800afe2 <vPortFree+0x42>
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00a      	beq.n	800b002 <vPortFree+0x62>
 800afec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	60bb      	str	r3, [r7, #8]
 800affe:	bf00      	nop
 800b000:	e7fe      	b.n	800b000 <vPortFree+0x60>
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	4b14      	ldr	r3, [pc, #80]	; (800b058 <vPortFree+0xb8>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d01e      	beq.n	800b04e <vPortFree+0xae>
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d11a      	bne.n	800b04e <vPortFree+0xae>
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	4b0e      	ldr	r3, [pc, #56]	; (800b058 <vPortFree+0xb8>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	43db      	mvns	r3, r3
 800b022:	401a      	ands	r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	605a      	str	r2, [r3, #4]
 800b028:	f7ff f9e6 	bl	800a3f8 <vTaskSuspendAll>
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <vPortFree+0xbc>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4413      	add	r3, r2
 800b036:	4a09      	ldr	r2, [pc, #36]	; (800b05c <vPortFree+0xbc>)
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f000 f874 	bl	800b128 <prvInsertBlockIntoFreeList>
 800b040:	4b07      	ldr	r3, [pc, #28]	; (800b060 <vPortFree+0xc0>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	4a06      	ldr	r2, [pc, #24]	; (800b060 <vPortFree+0xc0>)
 800b048:	6013      	str	r3, [r2, #0]
 800b04a:	f7ff f9e3 	bl	800a414 <xTaskResumeAll>
 800b04e:	bf00      	nop
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	200044a8 	.word	0x200044a8
 800b05c:	20004498 	.word	0x20004498
 800b060:	200044a4 	.word	0x200044a4

0800b064 <prvHeapInit>:
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b06e:	60bb      	str	r3, [r7, #8]
 800b070:	4b27      	ldr	r3, [pc, #156]	; (800b110 <prvHeapInit+0xac>)
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f003 0307 	and.w	r3, r3, #7
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00c      	beq.n	800b098 <prvHeapInit+0x34>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3307      	adds	r3, #7
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f023 0307 	bic.w	r3, r3, #7
 800b08a:	60fb      	str	r3, [r7, #12]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	4a1f      	ldr	r2, [pc, #124]	; (800b110 <prvHeapInit+0xac>)
 800b094:	4413      	add	r3, r2
 800b096:	60bb      	str	r3, [r7, #8]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	607b      	str	r3, [r7, #4]
 800b09c:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <prvHeapInit+0xb0>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6013      	str	r3, [r2, #0]
 800b0a2:	4b1c      	ldr	r3, [pc, #112]	; (800b114 <prvHeapInit+0xb0>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	605a      	str	r2, [r3, #4]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	2208      	movs	r2, #8
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1a9b      	subs	r3, r3, r2
 800b0b6:	60fb      	str	r3, [r7, #12]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0307 	bic.w	r3, r3, #7
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4a15      	ldr	r2, [pc, #84]	; (800b118 <prvHeapInit+0xb4>)
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	4b14      	ldr	r3, [pc, #80]	; (800b118 <prvHeapInit+0xb4>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	605a      	str	r2, [r3, #4]
 800b0ce:	4b12      	ldr	r3, [pc, #72]	; (800b118 <prvHeapInit+0xb4>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	603b      	str	r3, [r7, #0]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	605a      	str	r2, [r3, #4]
 800b0e4:	4b0c      	ldr	r3, [pc, #48]	; (800b118 <prvHeapInit+0xb4>)
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <prvHeapInit+0xb8>)
 800b0f2:	6013      	str	r3, [r2, #0]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	4a09      	ldr	r2, [pc, #36]	; (800b120 <prvHeapInit+0xbc>)
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	4b09      	ldr	r3, [pc, #36]	; (800b124 <prvHeapInit+0xc0>)
 800b0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	bf00      	nop
 800b106:	3714      	adds	r7, #20
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr
 800b110:	2000088c 	.word	0x2000088c
 800b114:	2000448c 	.word	0x2000448c
 800b118:	20004494 	.word	0x20004494
 800b11c:	2000449c 	.word	0x2000449c
 800b120:	20004498 	.word	0x20004498
 800b124:	200044a8 	.word	0x200044a8

0800b128 <prvInsertBlockIntoFreeList>:
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	4b28      	ldr	r3, [pc, #160]	; (800b1d4 <prvInsertBlockIntoFreeList+0xac>)
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	e002      	b.n	800b13c <prvInsertBlockIntoFreeList+0x14>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	429a      	cmp	r2, r3
 800b144:	d8f7      	bhi.n	800b136 <prvInsertBlockIntoFreeList+0xe>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	60bb      	str	r3, [r7, #8]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	4413      	add	r3, r2
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	429a      	cmp	r2, r3
 800b156:	d108      	bne.n	800b16a <prvInsertBlockIntoFreeList+0x42>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	441a      	add	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	605a      	str	r2, [r3, #4]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	607b      	str	r3, [r7, #4]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	60bb      	str	r3, [r7, #8]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	441a      	add	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d118      	bne.n	800b1b0 <prvInsertBlockIntoFreeList+0x88>
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	4b15      	ldr	r3, [pc, #84]	; (800b1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d00d      	beq.n	800b1a6 <prvInsertBlockIntoFreeList+0x7e>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	441a      	add	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	605a      	str	r2, [r3, #4]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	601a      	str	r2, [r3, #0]
 800b1a4:	e008      	b.n	800b1b8 <prvInsertBlockIntoFreeList+0x90>
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	e003      	b.n	800b1b8 <prvInsertBlockIntoFreeList+0x90>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d002      	beq.n	800b1c6 <prvInsertBlockIntoFreeList+0x9e>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	bf00      	nop
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	2000448c 	.word	0x2000448c
 800b1d8:	20004494 	.word	0x20004494

0800b1dc <MX_USB_DEVICE_Init>:
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	4912      	ldr	r1, [pc, #72]	; (800b22c <MX_USB_DEVICE_Init+0x50>)
 800b1e4:	4812      	ldr	r0, [pc, #72]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b1e6:	f7fd fa9f 	bl	8008728 <USBD_Init>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <MX_USB_DEVICE_Init+0x18>
 800b1f0:	f7f7 f86c 	bl	80022cc <Error_Handler>
 800b1f4:	490f      	ldr	r1, [pc, #60]	; (800b234 <MX_USB_DEVICE_Init+0x58>)
 800b1f6:	480e      	ldr	r0, [pc, #56]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b1f8:	f7fd fad4 	bl	80087a4 <USBD_RegisterClass>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <MX_USB_DEVICE_Init+0x2a>
 800b202:	f7f7 f863 	bl	80022cc <Error_Handler>
 800b206:	490c      	ldr	r1, [pc, #48]	; (800b238 <MX_USB_DEVICE_Init+0x5c>)
 800b208:	4809      	ldr	r0, [pc, #36]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b20a:	f7fd f9b7 	bl	800857c <USBD_CDC_RegisterInterface>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <MX_USB_DEVICE_Init+0x3c>
 800b214:	f7f7 f85a 	bl	80022cc <Error_Handler>
 800b218:	4805      	ldr	r0, [pc, #20]	; (800b230 <MX_USB_DEVICE_Init+0x54>)
 800b21a:	f7fd fb07 	bl	800882c <USBD_Start>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d001      	beq.n	800b228 <MX_USB_DEVICE_Init+0x4c>
 800b224:	f7f7 f852 	bl	80022cc <Error_Handler>
 800b228:	bf00      	nop
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	200000e4 	.word	0x200000e4
 800b230:	200044ac 	.word	0x200044ac
 800b234:	2000004c 	.word	0x2000004c
 800b238:	200000d0 	.word	0x200000d0

0800b23c <CDC_Init_FS>:
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
 800b240:	2200      	movs	r2, #0
 800b242:	4905      	ldr	r1, [pc, #20]	; (800b258 <CDC_Init_FS+0x1c>)
 800b244:	4805      	ldr	r0, [pc, #20]	; (800b25c <CDC_Init_FS+0x20>)
 800b246:	f7fd f9b3 	bl	80085b0 <USBD_CDC_SetTxBuffer>
 800b24a:	4905      	ldr	r1, [pc, #20]	; (800b260 <CDC_Init_FS+0x24>)
 800b24c:	4803      	ldr	r0, [pc, #12]	; (800b25c <CDC_Init_FS+0x20>)
 800b24e:	f7fd f9d1 	bl	80085f4 <USBD_CDC_SetRxBuffer>
 800b252:	2300      	movs	r3, #0
 800b254:	4618      	mov	r0, r3
 800b256:	bd80      	pop	{r7, pc}
 800b258:	20004808 	.word	0x20004808
 800b25c:	200044ac 	.word	0x200044ac
 800b260:	20004788 	.word	0x20004788

0800b264 <CDC_DeInit_FS>:
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
 800b268:	2300      	movs	r3, #0
 800b26a:	4618      	mov	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <CDC_Control_FS>:
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	71fb      	strb	r3, [r7, #7]
 800b280:	4613      	mov	r3, r2
 800b282:	80bb      	strh	r3, [r7, #4]
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	2b23      	cmp	r3, #35	; 0x23
 800b288:	d84a      	bhi.n	800b320 <CDC_Control_FS+0xac>
 800b28a:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <CDC_Control_FS+0x1c>)
 800b28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b290:	0800b321 	.word	0x0800b321
 800b294:	0800b321 	.word	0x0800b321
 800b298:	0800b321 	.word	0x0800b321
 800b29c:	0800b321 	.word	0x0800b321
 800b2a0:	0800b321 	.word	0x0800b321
 800b2a4:	0800b321 	.word	0x0800b321
 800b2a8:	0800b321 	.word	0x0800b321
 800b2ac:	0800b321 	.word	0x0800b321
 800b2b0:	0800b321 	.word	0x0800b321
 800b2b4:	0800b321 	.word	0x0800b321
 800b2b8:	0800b321 	.word	0x0800b321
 800b2bc:	0800b321 	.word	0x0800b321
 800b2c0:	0800b321 	.word	0x0800b321
 800b2c4:	0800b321 	.word	0x0800b321
 800b2c8:	0800b321 	.word	0x0800b321
 800b2cc:	0800b321 	.word	0x0800b321
 800b2d0:	0800b321 	.word	0x0800b321
 800b2d4:	0800b321 	.word	0x0800b321
 800b2d8:	0800b321 	.word	0x0800b321
 800b2dc:	0800b321 	.word	0x0800b321
 800b2e0:	0800b321 	.word	0x0800b321
 800b2e4:	0800b321 	.word	0x0800b321
 800b2e8:	0800b321 	.word	0x0800b321
 800b2ec:	0800b321 	.word	0x0800b321
 800b2f0:	0800b321 	.word	0x0800b321
 800b2f4:	0800b321 	.word	0x0800b321
 800b2f8:	0800b321 	.word	0x0800b321
 800b2fc:	0800b321 	.word	0x0800b321
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b321 	.word	0x0800b321
 800b308:	0800b321 	.word	0x0800b321
 800b30c:	0800b321 	.word	0x0800b321
 800b310:	0800b321 	.word	0x0800b321
 800b314:	0800b321 	.word	0x0800b321
 800b318:	0800b321 	.word	0x0800b321
 800b31c:	0800b321 	.word	0x0800b321
 800b320:	bf00      	nop
 800b322:	2300      	movs	r3, #0
 800b324:	4618      	mov	r0, r3
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <CDC_Receive_FS>:
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	480c      	ldr	r0, [pc, #48]	; (800b370 <CDC_Receive_FS+0x40>)
 800b33e:	f7fd f959 	bl	80085f4 <USBD_CDC_SetRxBuffer>
 800b342:	480b      	ldr	r0, [pc, #44]	; (800b370 <CDC_Receive_FS+0x40>)
 800b344:	f7fd f9ba 	bl	80086bc <USBD_CDC_ReceivePacket>
 800b348:	2280      	movs	r2, #128	; 0x80
 800b34a:	2100      	movs	r1, #0
 800b34c:	4809      	ldr	r0, [pc, #36]	; (800b374 <CDC_Receive_FS+0x44>)
 800b34e:	f000 fdb0 	bl	800beb2 <memset>
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	6879      	ldr	r1, [r7, #4]
 800b35a:	4806      	ldr	r0, [pc, #24]	; (800b374 <CDC_Receive_FS+0x44>)
 800b35c:	f000 fdb1 	bl	800bec2 <strncpy>
 800b360:	4b05      	ldr	r3, [pc, #20]	; (800b378 <CDC_Receive_FS+0x48>)
 800b362:	2201      	movs	r2, #1
 800b364:	701a      	strb	r2, [r3, #0]
 800b366:	2300      	movs	r3, #0
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	200044ac 	.word	0x200044ac
 800b374:	20000678 	.word	0x20000678
 800b378:	20000030 	.word	0x20000030

0800b37c <CDC_Transmit_FS>:
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	807b      	strh	r3, [r7, #2]
 800b388:	2300      	movs	r3, #0
 800b38a:	73fb      	strb	r3, [r7, #15]
 800b38c:	4b0d      	ldr	r3, [pc, #52]	; (800b3c4 <CDC_Transmit_FS+0x48>)
 800b38e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b392:	60bb      	str	r3, [r7, #8]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <CDC_Transmit_FS+0x26>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e00b      	b.n	800b3ba <CDC_Transmit_FS+0x3e>
 800b3a2:	887b      	ldrh	r3, [r7, #2]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	4806      	ldr	r0, [pc, #24]	; (800b3c4 <CDC_Transmit_FS+0x48>)
 800b3aa:	f7fd f901 	bl	80085b0 <USBD_CDC_SetTxBuffer>
 800b3ae:	4805      	ldr	r0, [pc, #20]	; (800b3c4 <CDC_Transmit_FS+0x48>)
 800b3b0:	f7fd f93e 	bl	8008630 <USBD_CDC_TransmitPacket>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	73fb      	strb	r3, [r7, #15]
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	200044ac 	.word	0x200044ac

0800b3c8 <CDC_TransmitCplt_FS>:
 800b3c8:	b480      	push	{r7}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	71fb      	strb	r3, [r7, #7]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	75fb      	strb	r3, [r7, #23]
 800b3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	371c      	adds	r7, #28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
	...

0800b3ec <USBD_FS_DeviceDescriptor>:
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	6039      	str	r1, [r7, #0]
 800b3f6:	71fb      	strb	r3, [r7, #7]
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	2212      	movs	r2, #18
 800b3fc:	801a      	strh	r2, [r3, #0]
 800b3fe:	4b03      	ldr	r3, [pc, #12]	; (800b40c <USBD_FS_DeviceDescriptor+0x20>)
 800b400:	4618      	mov	r0, r3
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr
 800b40c:	20000100 	.word	0x20000100

0800b410 <USBD_FS_LangIDStrDescriptor>:
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	4603      	mov	r3, r0
 800b418:	6039      	str	r1, [r7, #0]
 800b41a:	71fb      	strb	r3, [r7, #7]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	2204      	movs	r2, #4
 800b420:	801a      	strh	r2, [r3, #0]
 800b422:	4b03      	ldr	r3, [pc, #12]	; (800b430 <USBD_FS_LangIDStrDescriptor+0x20>)
 800b424:	4618      	mov	r0, r3
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	20000114 	.word	0x20000114

0800b434 <USBD_FS_ProductStrDescriptor>:
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	6039      	str	r1, [r7, #0]
 800b43e:	71fb      	strb	r3, [r7, #7]
 800b440:	79fb      	ldrb	r3, [r7, #7]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d105      	bne.n	800b452 <USBD_FS_ProductStrDescriptor+0x1e>
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	4907      	ldr	r1, [pc, #28]	; (800b468 <USBD_FS_ProductStrDescriptor+0x34>)
 800b44a:	4808      	ldr	r0, [pc, #32]	; (800b46c <USBD_FS_ProductStrDescriptor+0x38>)
 800b44c:	f7fe fb9a 	bl	8009b84 <USBD_GetString>
 800b450:	e004      	b.n	800b45c <USBD_FS_ProductStrDescriptor+0x28>
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	4904      	ldr	r1, [pc, #16]	; (800b468 <USBD_FS_ProductStrDescriptor+0x34>)
 800b456:	4805      	ldr	r0, [pc, #20]	; (800b46c <USBD_FS_ProductStrDescriptor+0x38>)
 800b458:	f7fe fb94 	bl	8009b84 <USBD_GetString>
 800b45c:	4b02      	ldr	r3, [pc, #8]	; (800b468 <USBD_FS_ProductStrDescriptor+0x34>)
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20004908 	.word	0x20004908
 800b46c:	0800d00c 	.word	0x0800d00c

0800b470 <USBD_FS_ManufacturerStrDescriptor>:
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	4603      	mov	r3, r0
 800b478:	6039      	str	r1, [r7, #0]
 800b47a:	71fb      	strb	r3, [r7, #7]
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	4904      	ldr	r1, [pc, #16]	; (800b490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b480:	4804      	ldr	r0, [pc, #16]	; (800b494 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b482:	f7fe fb7f 	bl	8009b84 <USBD_GetString>
 800b486:	4b02      	ldr	r3, [pc, #8]	; (800b490 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	20004908 	.word	0x20004908
 800b494:	0800d024 	.word	0x0800d024

0800b498 <USBD_FS_SerialStrDescriptor>:
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	6039      	str	r1, [r7, #0]
 800b4a2:	71fb      	strb	r3, [r7, #7]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	221a      	movs	r2, #26
 800b4a8:	801a      	strh	r2, [r3, #0]
 800b4aa:	f000 f843 	bl	800b534 <Get_SerialNum>
 800b4ae:	4b02      	ldr	r3, [pc, #8]	; (800b4b8 <USBD_FS_SerialStrDescriptor+0x20>)
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20000118 	.word	0x20000118

0800b4bc <USBD_FS_ConfigStrDescriptor>:
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	6039      	str	r1, [r7, #0]
 800b4c6:	71fb      	strb	r3, [r7, #7]
 800b4c8:	79fb      	ldrb	r3, [r7, #7]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d105      	bne.n	800b4da <USBD_FS_ConfigStrDescriptor+0x1e>
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	4907      	ldr	r1, [pc, #28]	; (800b4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4d2:	4808      	ldr	r0, [pc, #32]	; (800b4f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4d4:	f7fe fb56 	bl	8009b84 <USBD_GetString>
 800b4d8:	e004      	b.n	800b4e4 <USBD_FS_ConfigStrDescriptor+0x28>
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	4904      	ldr	r1, [pc, #16]	; (800b4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4de:	4805      	ldr	r0, [pc, #20]	; (800b4f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4e0:	f7fe fb50 	bl	8009b84 <USBD_GetString>
 800b4e4:	4b02      	ldr	r3, [pc, #8]	; (800b4f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20004908 	.word	0x20004908
 800b4f4:	0800d038 	.word	0x0800d038

0800b4f8 <USBD_FS_InterfaceStrDescriptor>:
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	6039      	str	r1, [r7, #0]
 800b502:	71fb      	strb	r3, [r7, #7]
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d105      	bne.n	800b516 <USBD_FS_InterfaceStrDescriptor+0x1e>
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	4907      	ldr	r1, [pc, #28]	; (800b52c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b50e:	4808      	ldr	r0, [pc, #32]	; (800b530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b510:	f7fe fb38 	bl	8009b84 <USBD_GetString>
 800b514:	e004      	b.n	800b520 <USBD_FS_InterfaceStrDescriptor+0x28>
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	4904      	ldr	r1, [pc, #16]	; (800b52c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b51a:	4805      	ldr	r0, [pc, #20]	; (800b530 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b51c:	f7fe fb32 	bl	8009b84 <USBD_GetString>
 800b520:	4b02      	ldr	r3, [pc, #8]	; (800b52c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20004908 	.word	0x20004908
 800b530:	0800d044 	.word	0x0800d044

0800b534 <Get_SerialNum>:
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	4b0f      	ldr	r3, [pc, #60]	; (800b578 <Get_SerialNum+0x44>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	60fb      	str	r3, [r7, #12]
 800b540:	4b0e      	ldr	r3, [pc, #56]	; (800b57c <Get_SerialNum+0x48>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	60bb      	str	r3, [r7, #8]
 800b546:	4b0e      	ldr	r3, [pc, #56]	; (800b580 <Get_SerialNum+0x4c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	607b      	str	r3, [r7, #4]
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4413      	add	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d009      	beq.n	800b56e <Get_SerialNum+0x3a>
 800b55a:	2208      	movs	r2, #8
 800b55c:	4909      	ldr	r1, [pc, #36]	; (800b584 <Get_SerialNum+0x50>)
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 f814 	bl	800b58c <IntToUnicode>
 800b564:	2204      	movs	r2, #4
 800b566:	4908      	ldr	r1, [pc, #32]	; (800b588 <Get_SerialNum+0x54>)
 800b568:	68b8      	ldr	r0, [r7, #8]
 800b56a:	f000 f80f 	bl	800b58c <IntToUnicode>
 800b56e:	bf00      	nop
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	1fff7a10 	.word	0x1fff7a10
 800b57c:	1fff7a14 	.word	0x1fff7a14
 800b580:	1fff7a18 	.word	0x1fff7a18
 800b584:	2000011a 	.word	0x2000011a
 800b588:	2000012a 	.word	0x2000012a

0800b58c <IntToUnicode>:
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	4613      	mov	r3, r2
 800b598:	71fb      	strb	r3, [r7, #7]
 800b59a:	2300      	movs	r3, #0
 800b59c:	75fb      	strb	r3, [r7, #23]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	75fb      	strb	r3, [r7, #23]
 800b5a2:	e027      	b.n	800b5f4 <IntToUnicode+0x68>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	0f1b      	lsrs	r3, r3, #28
 800b5a8:	2b09      	cmp	r3, #9
 800b5aa:	d80b      	bhi.n	800b5c4 <IntToUnicode+0x38>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	0f1b      	lsrs	r3, r3, #28
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	7dfb      	ldrb	r3, [r7, #23]
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	440b      	add	r3, r1
 800b5bc:	3230      	adds	r2, #48	; 0x30
 800b5be:	b2d2      	uxtb	r2, r2
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	e00a      	b.n	800b5da <IntToUnicode+0x4e>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	0f1b      	lsrs	r3, r3, #28
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	440b      	add	r3, r1
 800b5d4:	3237      	adds	r2, #55	; 0x37
 800b5d6:	b2d2      	uxtb	r2, r2
 800b5d8:	701a      	strb	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	7dfb      	ldrb	r3, [r7, #23]
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	701a      	strb	r2, [r3, #0]
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	75fb      	strb	r3, [r7, #23]
 800b5f4:	7dfa      	ldrb	r2, [r7, #23]
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d3d3      	bcc.n	800b5a4 <IntToUnicode+0x18>
 800b5fc:	bf00      	nop
 800b5fe:	bf00      	nop
 800b600:	371c      	adds	r7, #28
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr
	...

0800b60c <HAL_PCD_MspInit>:
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b08a      	sub	sp, #40	; 0x28
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	f107 0314 	add.w	r3, r7, #20
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
 800b61c:	605a      	str	r2, [r3, #4]
 800b61e:	609a      	str	r2, [r3, #8]
 800b620:	60da      	str	r2, [r3, #12]
 800b622:	611a      	str	r2, [r3, #16]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b62c:	d13a      	bne.n	800b6a4 <HAL_PCD_MspInit+0x98>
 800b62e:	2300      	movs	r3, #0
 800b630:	613b      	str	r3, [r7, #16]
 800b632:	4b1e      	ldr	r3, [pc, #120]	; (800b6ac <HAL_PCD_MspInit+0xa0>)
 800b634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b636:	4a1d      	ldr	r2, [pc, #116]	; (800b6ac <HAL_PCD_MspInit+0xa0>)
 800b638:	f043 0301 	orr.w	r3, r3, #1
 800b63c:	6313      	str	r3, [r2, #48]	; 0x30
 800b63e:	4b1b      	ldr	r3, [pc, #108]	; (800b6ac <HAL_PCD_MspInit+0xa0>)
 800b640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	613b      	str	r3, [r7, #16]
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b64e:	617b      	str	r3, [r7, #20]
 800b650:	2302      	movs	r3, #2
 800b652:	61bb      	str	r3, [r7, #24]
 800b654:	2300      	movs	r3, #0
 800b656:	61fb      	str	r3, [r7, #28]
 800b658:	2303      	movs	r3, #3
 800b65a:	623b      	str	r3, [r7, #32]
 800b65c:	230a      	movs	r3, #10
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
 800b660:	f107 0314 	add.w	r3, r7, #20
 800b664:	4619      	mov	r1, r3
 800b666:	4812      	ldr	r0, [pc, #72]	; (800b6b0 <HAL_PCD_MspInit+0xa4>)
 800b668:	f7f7 f9f4 	bl	8002a54 <HAL_GPIO_Init>
 800b66c:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <HAL_PCD_MspInit+0xa0>)
 800b66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b670:	4a0e      	ldr	r2, [pc, #56]	; (800b6ac <HAL_PCD_MspInit+0xa0>)
 800b672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b676:	6353      	str	r3, [r2, #52]	; 0x34
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <HAL_PCD_MspInit+0xa0>)
 800b67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b680:	4a0a      	ldr	r2, [pc, #40]	; (800b6ac <HAL_PCD_MspInit+0xa0>)
 800b682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b686:	6453      	str	r3, [r2, #68]	; 0x44
 800b688:	4b08      	ldr	r3, [pc, #32]	; (800b6ac <HAL_PCD_MspInit+0xa0>)
 800b68a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b68c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	2105      	movs	r1, #5
 800b698:	2043      	movs	r0, #67	; 0x43
 800b69a:	f7f7 f9b1 	bl	8002a00 <HAL_NVIC_SetPriority>
 800b69e:	2043      	movs	r0, #67	; 0x43
 800b6a0:	f7f7 f9ca 	bl	8002a38 <HAL_NVIC_EnableIRQ>
 800b6a4:	bf00      	nop
 800b6a6:	3728      	adds	r7, #40	; 0x28
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	40023800 	.word	0x40023800
 800b6b0:	40020000 	.word	0x40020000

0800b6b4 <HAL_PCD_SetupStageCallback>:
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	4610      	mov	r0, r2
 800b6cc:	f7fd f8fb 	bl	80088c6 <USBD_LL_SetupStage>
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <HAL_PCD_DataOutStageCallback>:
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	70fb      	strb	r3, [r7, #3]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	440b      	add	r3, r1
 800b6f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	78fb      	ldrb	r3, [r7, #3]
 800b700:	4619      	mov	r1, r3
 800b702:	f7fd f935 	bl	8008970 <USBD_LL_DataOutStage>
 800b706:	bf00      	nop
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <HAL_PCD_DataInStageCallback>:
 800b70e:	b580      	push	{r7, lr}
 800b710:	b082      	sub	sp, #8
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	460b      	mov	r3, r1
 800b718:	70fb      	strb	r3, [r7, #3]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b720:	78fa      	ldrb	r2, [r7, #3]
 800b722:	6879      	ldr	r1, [r7, #4]
 800b724:	4613      	mov	r3, r2
 800b726:	00db      	lsls	r3, r3, #3
 800b728:	4413      	add	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	440b      	add	r3, r1
 800b72e:	334c      	adds	r3, #76	; 0x4c
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	78fb      	ldrb	r3, [r7, #3]
 800b734:	4619      	mov	r1, r3
 800b736:	f7fd f9ce 	bl	8008ad6 <USBD_LL_DataInStage>
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <HAL_PCD_SOFCallback>:
 800b742:	b580      	push	{r7, lr}
 800b744:	b082      	sub	sp, #8
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b750:	4618      	mov	r0, r3
 800b752:	f7fd fb02 	bl	8008d5a <USBD_LL_SOF>
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <HAL_PCD_ResetCallback>:
 800b75e:	b580      	push	{r7, lr}
 800b760:	b084      	sub	sp, #16
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	2301      	movs	r3, #1
 800b768:	73fb      	strb	r3, [r7, #15]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d102      	bne.n	800b778 <HAL_PCD_ResetCallback+0x1a>
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]
 800b776:	e008      	b.n	800b78a <HAL_PCD_ResetCallback+0x2c>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d102      	bne.n	800b786 <HAL_PCD_ResetCallback+0x28>
 800b780:	2301      	movs	r3, #1
 800b782:	73fb      	strb	r3, [r7, #15]
 800b784:	e001      	b.n	800b78a <HAL_PCD_ResetCallback+0x2c>
 800b786:	f7f6 fda1 	bl	80022cc <Error_Handler>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b790:	7bfa      	ldrb	r2, [r7, #15]
 800b792:	4611      	mov	r1, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f7fd faa2 	bl	8008cde <USBD_LL_SetSpeed>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fd fa4a 	bl	8008c3a <USBD_LL_Reset>
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
	...

0800b7b0 <HAL_PCD_SuspendCallback>:
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7fd fa9d 	bl	8008cfe <USBD_LL_Suspend>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	6812      	ldr	r2, [r2, #0]
 800b7d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7d6:	f043 0301 	orr.w	r3, r3, #1
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d005      	beq.n	800b7f0 <HAL_PCD_SuspendCallback+0x40>
 800b7e4:	4b04      	ldr	r3, [pc, #16]	; (800b7f8 <HAL_PCD_SuspendCallback+0x48>)
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	4a03      	ldr	r2, [pc, #12]	; (800b7f8 <HAL_PCD_SuspendCallback+0x48>)
 800b7ea:	f043 0306 	orr.w	r3, r3, #6
 800b7ee:	6113      	str	r3, [r2, #16]
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	e000ed00 	.word	0xe000ed00

0800b7fc <HAL_PCD_ResumeCallback>:
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fd fa8d 	bl	8008d2a <USBD_LL_Resume>
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_PCD_ISOOUTIncompleteCallback>:
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b82a:	78fa      	ldrb	r2, [r7, #3]
 800b82c:	4611      	mov	r1, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fd fae5 	bl	8008dfe <USBD_LL_IsoOUTIncomplete>
 800b834:	bf00      	nop
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <HAL_PCD_ISOINIncompleteCallback>:
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	460b      	mov	r3, r1
 800b846:	70fb      	strb	r3, [r7, #3]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b84e:	78fa      	ldrb	r2, [r7, #3]
 800b850:	4611      	mov	r1, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f7fd faa1 	bl	8008d9a <USBD_LL_IsoINIncomplete>
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_PCD_ConnectCallback>:
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fd faf7 	bl	8008e62 <USBD_LL_DevConnected>
 800b874:	bf00      	nop
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_PCD_DisconnectCallback>:
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fd faf4 	bl	8008e78 <USBD_LL_DevDisconnected>
 800b890:	bf00      	nop
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_LL_Init>:
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d13c      	bne.n	800b922 <USBD_LL_Init+0x8a>
 800b8a8:	4a20      	ldr	r2, [pc, #128]	; (800b92c <USBD_LL_Init+0x94>)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a1e      	ldr	r2, [pc, #120]	; (800b92c <USBD_LL_Init+0x94>)
 800b8b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
 800b8b8:	4b1c      	ldr	r3, [pc, #112]	; (800b92c <USBD_LL_Init+0x94>)
 800b8ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	4b1a      	ldr	r3, [pc, #104]	; (800b92c <USBD_LL_Init+0x94>)
 800b8c2:	2204      	movs	r2, #4
 800b8c4:	605a      	str	r2, [r3, #4]
 800b8c6:	4b19      	ldr	r3, [pc, #100]	; (800b92c <USBD_LL_Init+0x94>)
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	60da      	str	r2, [r3, #12]
 800b8cc:	4b17      	ldr	r3, [pc, #92]	; (800b92c <USBD_LL_Init+0x94>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	611a      	str	r2, [r3, #16]
 800b8d2:	4b16      	ldr	r3, [pc, #88]	; (800b92c <USBD_LL_Init+0x94>)
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	619a      	str	r2, [r3, #24]
 800b8d8:	4b14      	ldr	r3, [pc, #80]	; (800b92c <USBD_LL_Init+0x94>)
 800b8da:	2200      	movs	r2, #0
 800b8dc:	61da      	str	r2, [r3, #28]
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <USBD_LL_Init+0x94>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	621a      	str	r2, [r3, #32]
 800b8e4:	4b11      	ldr	r3, [pc, #68]	; (800b92c <USBD_LL_Init+0x94>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	625a      	str	r2, [r3, #36]	; 0x24
 800b8ea:	4b10      	ldr	r3, [pc, #64]	; (800b92c <USBD_LL_Init+0x94>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	62da      	str	r2, [r3, #44]	; 0x2c
 800b8f0:	4b0e      	ldr	r3, [pc, #56]	; (800b92c <USBD_LL_Init+0x94>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	631a      	str	r2, [r3, #48]	; 0x30
 800b8f6:	480d      	ldr	r0, [pc, #52]	; (800b92c <USBD_LL_Init+0x94>)
 800b8f8:	f7f7 fa63 	bl	8002dc2 <HAL_PCD_Init>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <USBD_LL_Init+0x6e>
 800b902:	f7f6 fce3 	bl	80022cc <Error_Handler>
 800b906:	2180      	movs	r1, #128	; 0x80
 800b908:	4808      	ldr	r0, [pc, #32]	; (800b92c <USBD_LL_Init+0x94>)
 800b90a:	f7f8 fcba 	bl	8004282 <HAL_PCDEx_SetRxFiFo>
 800b90e:	2240      	movs	r2, #64	; 0x40
 800b910:	2100      	movs	r1, #0
 800b912:	4806      	ldr	r0, [pc, #24]	; (800b92c <USBD_LL_Init+0x94>)
 800b914:	f7f8 fc6e 	bl	80041f4 <HAL_PCDEx_SetTxFiFo>
 800b918:	2280      	movs	r2, #128	; 0x80
 800b91a:	2101      	movs	r1, #1
 800b91c:	4803      	ldr	r0, [pc, #12]	; (800b92c <USBD_LL_Init+0x94>)
 800b91e:	f7f8 fc69 	bl	80041f4 <HAL_PCDEx_SetTxFiFo>
 800b922:	2300      	movs	r3, #0
 800b924:	4618      	mov	r0, r3
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20004b08 	.word	0x20004b08

0800b930 <USBD_LL_Start>:
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	2300      	movs	r3, #0
 800b93a:	73fb      	strb	r3, [r7, #15]
 800b93c:	2300      	movs	r3, #0
 800b93e:	73bb      	strb	r3, [r7, #14]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b946:	4618      	mov	r0, r3
 800b948:	f7f7 fb58 	bl	8002ffc <HAL_PCD_Start>
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
 800b950:	7bfb      	ldrb	r3, [r7, #15]
 800b952:	4618      	mov	r0, r3
 800b954:	f000 f942 	bl	800bbdc <USBD_Get_USB_Status>
 800b958:	4603      	mov	r3, r0
 800b95a:	73bb      	strb	r3, [r7, #14]
 800b95c:	7bbb      	ldrb	r3, [r7, #14]
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <USBD_LL_OpenEP>:
 800b966:	b580      	push	{r7, lr}
 800b968:	b084      	sub	sp, #16
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	4608      	mov	r0, r1
 800b970:	4611      	mov	r1, r2
 800b972:	461a      	mov	r2, r3
 800b974:	4603      	mov	r3, r0
 800b976:	70fb      	strb	r3, [r7, #3]
 800b978:	460b      	mov	r3, r1
 800b97a:	70bb      	strb	r3, [r7, #2]
 800b97c:	4613      	mov	r3, r2
 800b97e:	803b      	strh	r3, [r7, #0]
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]
 800b984:	2300      	movs	r3, #0
 800b986:	73bb      	strb	r3, [r7, #14]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b98e:	78bb      	ldrb	r3, [r7, #2]
 800b990:	883a      	ldrh	r2, [r7, #0]
 800b992:	78f9      	ldrb	r1, [r7, #3]
 800b994:	f7f8 f829 	bl	80039ea <HAL_PCD_EP_Open>
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 f91c 	bl	800bbdc <USBD_Get_USB_Status>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73bb      	strb	r3, [r7, #14]
 800b9a8:	7bbb      	ldrb	r3, [r7, #14]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_LL_CloseEP>:
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	70fb      	strb	r3, [r7, #3]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	73bb      	strb	r3, [r7, #14]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9cc:	78fa      	ldrb	r2, [r7, #3]
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7f8 f872 	bl	8003aba <HAL_PCD_EP_Close>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	73fb      	strb	r3, [r7, #15]
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 f8fd 	bl	800bbdc <USBD_Get_USB_Status>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	73bb      	strb	r3, [r7, #14]
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_LL_StallEP>:
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73fb      	strb	r3, [r7, #15]
 800ba00:	2300      	movs	r3, #0
 800ba02:	73bb      	strb	r3, [r7, #14]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba0a:	78fa      	ldrb	r2, [r7, #3]
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f8 f94a 	bl	8003ca8 <HAL_PCD_EP_SetStall>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f000 f8de 	bl	800bbdc <USBD_Get_USB_Status>
 800ba20:	4603      	mov	r3, r0
 800ba22:	73bb      	strb	r3, [r7, #14]
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <USBD_LL_ClearStallEP>:
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	70fb      	strb	r3, [r7, #3]
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	73fb      	strb	r3, [r7, #15]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73bb      	strb	r3, [r7, #14]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba48:	78fa      	ldrb	r2, [r7, #3]
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7f8 f98f 	bl	8003d70 <HAL_PCD_EP_ClrStall>
 800ba52:	4603      	mov	r3, r0
 800ba54:	73fb      	strb	r3, [r7, #15]
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f000 f8bf 	bl	800bbdc <USBD_Get_USB_Status>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	73bb      	strb	r3, [r7, #14]
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_LL_IsStallEP>:
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	460b      	mov	r3, r1
 800ba76:	70fb      	strb	r3, [r7, #3]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	da0b      	bge.n	800baa0 <USBD_LL_IsStallEP+0x34>
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba8e:	68f9      	ldr	r1, [r7, #12]
 800ba90:	4613      	mov	r3, r2
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	4413      	add	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	440b      	add	r3, r1
 800ba9a:	333e      	adds	r3, #62	; 0x3e
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	e00b      	b.n	800bab8 <USBD_LL_IsStallEP+0x4c>
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baa6:	68f9      	ldr	r1, [r7, #12]
 800baa8:	4613      	mov	r3, r2
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	4413      	add	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	440b      	add	r3, r1
 800bab2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <USBD_LL_SetUSBAddress>:
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	70fb      	strb	r3, [r7, #3]
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]
 800bad4:	2300      	movs	r3, #0
 800bad6:	73bb      	strb	r3, [r7, #14]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bade:	78fa      	ldrb	r2, [r7, #3]
 800bae0:	4611      	mov	r1, r2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7f7 ff5c 	bl	80039a0 <HAL_PCD_SetAddress>
 800bae8:	4603      	mov	r3, r0
 800baea:	73fb      	strb	r3, [r7, #15]
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 f874 	bl	800bbdc <USBD_Get_USB_Status>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73bb      	strb	r3, [r7, #14]
 800baf8:	7bbb      	ldrb	r3, [r7, #14]
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_LL_Transmit>:
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b086      	sub	sp, #24
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	607a      	str	r2, [r7, #4]
 800bb0c:	603b      	str	r3, [r7, #0]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	72fb      	strb	r3, [r7, #11]
 800bb12:	2300      	movs	r3, #0
 800bb14:	75fb      	strb	r3, [r7, #23]
 800bb16:	2300      	movs	r3, #0
 800bb18:	75bb      	strb	r3, [r7, #22]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb20:	7af9      	ldrb	r1, [r7, #11]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	f7f8 f875 	bl	8003c14 <HAL_PCD_EP_Transmit>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	75fb      	strb	r3, [r7, #23]
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f853 	bl	800bbdc <USBD_Get_USB_Status>
 800bb36:	4603      	mov	r3, r0
 800bb38:	75bb      	strb	r3, [r7, #22]
 800bb3a:	7dbb      	ldrb	r3, [r7, #22]
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBD_LL_PrepareReceive>:
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	607a      	str	r2, [r7, #4]
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	460b      	mov	r3, r1
 800bb52:	72fb      	strb	r3, [r7, #11]
 800bb54:	2300      	movs	r3, #0
 800bb56:	75fb      	strb	r3, [r7, #23]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	75bb      	strb	r3, [r7, #22]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb62:	7af9      	ldrb	r1, [r7, #11]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	f7f7 fff1 	bl	8003b4e <HAL_PCD_EP_Receive>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	75fb      	strb	r3, [r7, #23]
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f832 	bl	800bbdc <USBD_Get_USB_Status>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	75bb      	strb	r3, [r7, #22]
 800bb7c:	7dbb      	ldrb	r3, [r7, #22]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBD_LL_GetRxDataSize>:
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b082      	sub	sp, #8
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	70fb      	strb	r3, [r7, #3]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb98:	78fa      	ldrb	r2, [r7, #3]
 800bb9a:	4611      	mov	r1, r2
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7f8 f821 	bl	8003be4 <HAL_PCD_EP_GetRxCount>
 800bba2:	4603      	mov	r3, r0
 800bba4:	4618      	mov	r0, r3
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBD_static_malloc>:
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	4b03      	ldr	r3, [pc, #12]	; (800bbc4 <USBD_static_malloc+0x18>)
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	20005014 	.word	0x20005014

0800bbc8 <USBD_static_free>:
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <USBD_Get_USB_Status>:
 800bbdc:	b480      	push	{r7}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	71fb      	strb	r3, [r7, #7]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	73fb      	strb	r3, [r7, #15]
 800bbea:	79fb      	ldrb	r3, [r7, #7]
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d817      	bhi.n	800bc20 <USBD_Get_USB_Status+0x44>
 800bbf0:	a201      	add	r2, pc, #4	; (adr r2, 800bbf8 <USBD_Get_USB_Status+0x1c>)
 800bbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf6:	bf00      	nop
 800bbf8:	0800bc09 	.word	0x0800bc09
 800bbfc:	0800bc0f 	.word	0x0800bc0f
 800bc00:	0800bc15 	.word	0x0800bc15
 800bc04:	0800bc1b 	.word	0x0800bc1b
 800bc08:	2300      	movs	r3, #0
 800bc0a:	73fb      	strb	r3, [r7, #15]
 800bc0c:	e00b      	b.n	800bc26 <USBD_Get_USB_Status+0x4a>
 800bc0e:	2303      	movs	r3, #3
 800bc10:	73fb      	strb	r3, [r7, #15]
 800bc12:	e008      	b.n	800bc26 <USBD_Get_USB_Status+0x4a>
 800bc14:	2301      	movs	r3, #1
 800bc16:	73fb      	strb	r3, [r7, #15]
 800bc18:	e005      	b.n	800bc26 <USBD_Get_USB_Status+0x4a>
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	73fb      	strb	r3, [r7, #15]
 800bc1e:	e002      	b.n	800bc26 <USBD_Get_USB_Status+0x4a>
 800bc20:	2303      	movs	r3, #3
 800bc22:	73fb      	strb	r3, [r7, #15]
 800bc24:	bf00      	nop
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <std>:
 800bc34:	2300      	movs	r3, #0
 800bc36:	b510      	push	{r4, lr}
 800bc38:	4604      	mov	r4, r0
 800bc3a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc42:	6083      	str	r3, [r0, #8]
 800bc44:	8181      	strh	r1, [r0, #12]
 800bc46:	6643      	str	r3, [r0, #100]	; 0x64
 800bc48:	81c2      	strh	r2, [r0, #14]
 800bc4a:	6183      	str	r3, [r0, #24]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	2208      	movs	r2, #8
 800bc50:	305c      	adds	r0, #92	; 0x5c
 800bc52:	f000 f92e 	bl	800beb2 <memset>
 800bc56:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <std+0x58>)
 800bc58:	6263      	str	r3, [r4, #36]	; 0x24
 800bc5a:	4b0d      	ldr	r3, [pc, #52]	; (800bc90 <std+0x5c>)
 800bc5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc5e:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <std+0x60>)
 800bc60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc62:	4b0d      	ldr	r3, [pc, #52]	; (800bc98 <std+0x64>)
 800bc64:	6323      	str	r3, [r4, #48]	; 0x30
 800bc66:	4b0d      	ldr	r3, [pc, #52]	; (800bc9c <std+0x68>)
 800bc68:	6224      	str	r4, [r4, #32]
 800bc6a:	429c      	cmp	r4, r3
 800bc6c:	d006      	beq.n	800bc7c <std+0x48>
 800bc6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bc72:	4294      	cmp	r4, r2
 800bc74:	d002      	beq.n	800bc7c <std+0x48>
 800bc76:	33d0      	adds	r3, #208	; 0xd0
 800bc78:	429c      	cmp	r4, r3
 800bc7a:	d105      	bne.n	800bc88 <std+0x54>
 800bc7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc84:	f000 b9a0 	b.w	800bfc8 <__retarget_lock_init_recursive>
 800bc88:	bd10      	pop	{r4, pc}
 800bc8a:	bf00      	nop
 800bc8c:	0800be2d 	.word	0x0800be2d
 800bc90:	0800be4f 	.word	0x0800be4f
 800bc94:	0800be87 	.word	0x0800be87
 800bc98:	0800beab 	.word	0x0800beab
 800bc9c:	20005234 	.word	0x20005234

0800bca0 <stdio_exit_handler>:
 800bca0:	4a02      	ldr	r2, [pc, #8]	; (800bcac <stdio_exit_handler+0xc>)
 800bca2:	4903      	ldr	r1, [pc, #12]	; (800bcb0 <stdio_exit_handler+0x10>)
 800bca4:	4803      	ldr	r0, [pc, #12]	; (800bcb4 <stdio_exit_handler+0x14>)
 800bca6:	f000 b869 	b.w	800bd7c <_fwalk_sglue>
 800bcaa:	bf00      	nop
 800bcac:	20000134 	.word	0x20000134
 800bcb0:	0800cb41 	.word	0x0800cb41
 800bcb4:	20000140 	.word	0x20000140

0800bcb8 <cleanup_stdio>:
 800bcb8:	6841      	ldr	r1, [r0, #4]
 800bcba:	4b0c      	ldr	r3, [pc, #48]	; (800bcec <cleanup_stdio+0x34>)
 800bcbc:	4299      	cmp	r1, r3
 800bcbe:	b510      	push	{r4, lr}
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	d001      	beq.n	800bcc8 <cleanup_stdio+0x10>
 800bcc4:	f000 ff3c 	bl	800cb40 <_fflush_r>
 800bcc8:	68a1      	ldr	r1, [r4, #8]
 800bcca:	4b09      	ldr	r3, [pc, #36]	; (800bcf0 <cleanup_stdio+0x38>)
 800bccc:	4299      	cmp	r1, r3
 800bcce:	d002      	beq.n	800bcd6 <cleanup_stdio+0x1e>
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f000 ff35 	bl	800cb40 <_fflush_r>
 800bcd6:	68e1      	ldr	r1, [r4, #12]
 800bcd8:	4b06      	ldr	r3, [pc, #24]	; (800bcf4 <cleanup_stdio+0x3c>)
 800bcda:	4299      	cmp	r1, r3
 800bcdc:	d004      	beq.n	800bce8 <cleanup_stdio+0x30>
 800bcde:	4620      	mov	r0, r4
 800bce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bce4:	f000 bf2c 	b.w	800cb40 <_fflush_r>
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	bf00      	nop
 800bcec:	20005234 	.word	0x20005234
 800bcf0:	2000529c 	.word	0x2000529c
 800bcf4:	20005304 	.word	0x20005304

0800bcf8 <global_stdio_init.part.0>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	4b0b      	ldr	r3, [pc, #44]	; (800bd28 <global_stdio_init.part.0+0x30>)
 800bcfc:	4c0b      	ldr	r4, [pc, #44]	; (800bd2c <global_stdio_init.part.0+0x34>)
 800bcfe:	4a0c      	ldr	r2, [pc, #48]	; (800bd30 <global_stdio_init.part.0+0x38>)
 800bd00:	601a      	str	r2, [r3, #0]
 800bd02:	4620      	mov	r0, r4
 800bd04:	2200      	movs	r2, #0
 800bd06:	2104      	movs	r1, #4
 800bd08:	f7ff ff94 	bl	800bc34 <std>
 800bd0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bd10:	2201      	movs	r2, #1
 800bd12:	2109      	movs	r1, #9
 800bd14:	f7ff ff8e 	bl	800bc34 <std>
 800bd18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd22:	2112      	movs	r1, #18
 800bd24:	f7ff bf86 	b.w	800bc34 <std>
 800bd28:	2000536c 	.word	0x2000536c
 800bd2c:	20005234 	.word	0x20005234
 800bd30:	0800bca1 	.word	0x0800bca1

0800bd34 <__sfp_lock_acquire>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__sfp_lock_acquire+0x8>)
 800bd36:	f000 b948 	b.w	800bfca <__retarget_lock_acquire_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	20005375 	.word	0x20005375

0800bd40 <__sfp_lock_release>:
 800bd40:	4801      	ldr	r0, [pc, #4]	; (800bd48 <__sfp_lock_release+0x8>)
 800bd42:	f000 b943 	b.w	800bfcc <__retarget_lock_release_recursive>
 800bd46:	bf00      	nop
 800bd48:	20005375 	.word	0x20005375

0800bd4c <__sinit>:
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	4604      	mov	r4, r0
 800bd50:	f7ff fff0 	bl	800bd34 <__sfp_lock_acquire>
 800bd54:	6a23      	ldr	r3, [r4, #32]
 800bd56:	b11b      	cbz	r3, 800bd60 <__sinit+0x14>
 800bd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd5c:	f7ff bff0 	b.w	800bd40 <__sfp_lock_release>
 800bd60:	4b04      	ldr	r3, [pc, #16]	; (800bd74 <__sinit+0x28>)
 800bd62:	6223      	str	r3, [r4, #32]
 800bd64:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <__sinit+0x2c>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1f5      	bne.n	800bd58 <__sinit+0xc>
 800bd6c:	f7ff ffc4 	bl	800bcf8 <global_stdio_init.part.0>
 800bd70:	e7f2      	b.n	800bd58 <__sinit+0xc>
 800bd72:	bf00      	nop
 800bd74:	0800bcb9 	.word	0x0800bcb9
 800bd78:	2000536c 	.word	0x2000536c

0800bd7c <_fwalk_sglue>:
 800bd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd80:	4607      	mov	r7, r0
 800bd82:	4688      	mov	r8, r1
 800bd84:	4614      	mov	r4, r2
 800bd86:	2600      	movs	r6, #0
 800bd88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd8c:	f1b9 0901 	subs.w	r9, r9, #1
 800bd90:	d505      	bpl.n	800bd9e <_fwalk_sglue+0x22>
 800bd92:	6824      	ldr	r4, [r4, #0]
 800bd94:	2c00      	cmp	r4, #0
 800bd96:	d1f7      	bne.n	800bd88 <_fwalk_sglue+0xc>
 800bd98:	4630      	mov	r0, r6
 800bd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d907      	bls.n	800bdb4 <_fwalk_sglue+0x38>
 800bda4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	d003      	beq.n	800bdb4 <_fwalk_sglue+0x38>
 800bdac:	4629      	mov	r1, r5
 800bdae:	4638      	mov	r0, r7
 800bdb0:	47c0      	blx	r8
 800bdb2:	4306      	orrs	r6, r0
 800bdb4:	3568      	adds	r5, #104	; 0x68
 800bdb6:	e7e9      	b.n	800bd8c <_fwalk_sglue+0x10>

0800bdb8 <iprintf>:
 800bdb8:	b40f      	push	{r0, r1, r2, r3}
 800bdba:	b507      	push	{r0, r1, r2, lr}
 800bdbc:	4906      	ldr	r1, [pc, #24]	; (800bdd8 <iprintf+0x20>)
 800bdbe:	ab04      	add	r3, sp, #16
 800bdc0:	6808      	ldr	r0, [r1, #0]
 800bdc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc6:	6881      	ldr	r1, [r0, #8]
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	f000 fb89 	bl	800c4e0 <_vfiprintf_r>
 800bdce:	b003      	add	sp, #12
 800bdd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd4:	b004      	add	sp, #16
 800bdd6:	4770      	bx	lr
 800bdd8:	2000018c 	.word	0x2000018c

0800bddc <putchar>:
 800bddc:	4b02      	ldr	r3, [pc, #8]	; (800bde8 <putchar+0xc>)
 800bdde:	4601      	mov	r1, r0
 800bde0:	6818      	ldr	r0, [r3, #0]
 800bde2:	6882      	ldr	r2, [r0, #8]
 800bde4:	f000 bed4 	b.w	800cb90 <_putc_r>
 800bde8:	2000018c 	.word	0x2000018c

0800bdec <siprintf>:
 800bdec:	b40e      	push	{r1, r2, r3}
 800bdee:	b500      	push	{lr}
 800bdf0:	b09c      	sub	sp, #112	; 0x70
 800bdf2:	ab1d      	add	r3, sp, #116	; 0x74
 800bdf4:	9002      	str	r0, [sp, #8]
 800bdf6:	9006      	str	r0, [sp, #24]
 800bdf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bdfc:	4809      	ldr	r0, [pc, #36]	; (800be24 <siprintf+0x38>)
 800bdfe:	9107      	str	r1, [sp, #28]
 800be00:	9104      	str	r1, [sp, #16]
 800be02:	4909      	ldr	r1, [pc, #36]	; (800be28 <siprintf+0x3c>)
 800be04:	f853 2b04 	ldr.w	r2, [r3], #4
 800be08:	9105      	str	r1, [sp, #20]
 800be0a:	6800      	ldr	r0, [r0, #0]
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	a902      	add	r1, sp, #8
 800be10:	f000 fa3e 	bl	800c290 <_svfiprintf_r>
 800be14:	9b02      	ldr	r3, [sp, #8]
 800be16:	2200      	movs	r2, #0
 800be18:	701a      	strb	r2, [r3, #0]
 800be1a:	b01c      	add	sp, #112	; 0x70
 800be1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be20:	b003      	add	sp, #12
 800be22:	4770      	bx	lr
 800be24:	2000018c 	.word	0x2000018c
 800be28:	ffff0208 	.word	0xffff0208

0800be2c <__sread>:
 800be2c:	b510      	push	{r4, lr}
 800be2e:	460c      	mov	r4, r1
 800be30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be34:	f000 f87a 	bl	800bf2c <_read_r>
 800be38:	2800      	cmp	r0, #0
 800be3a:	bfab      	itete	ge
 800be3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be3e:	89a3      	ldrhlt	r3, [r4, #12]
 800be40:	181b      	addge	r3, r3, r0
 800be42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be46:	bfac      	ite	ge
 800be48:	6563      	strge	r3, [r4, #84]	; 0x54
 800be4a:	81a3      	strhlt	r3, [r4, #12]
 800be4c:	bd10      	pop	{r4, pc}

0800be4e <__swrite>:
 800be4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be52:	461f      	mov	r7, r3
 800be54:	898b      	ldrh	r3, [r1, #12]
 800be56:	05db      	lsls	r3, r3, #23
 800be58:	4605      	mov	r5, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	4616      	mov	r6, r2
 800be5e:	d505      	bpl.n	800be6c <__swrite+0x1e>
 800be60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be64:	2302      	movs	r3, #2
 800be66:	2200      	movs	r2, #0
 800be68:	f000 f84e 	bl	800bf08 <_lseek_r>
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be76:	81a3      	strh	r3, [r4, #12]
 800be78:	4632      	mov	r2, r6
 800be7a:	463b      	mov	r3, r7
 800be7c:	4628      	mov	r0, r5
 800be7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be82:	f000 b865 	b.w	800bf50 <_write_r>

0800be86 <__sseek>:
 800be86:	b510      	push	{r4, lr}
 800be88:	460c      	mov	r4, r1
 800be8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be8e:	f000 f83b 	bl	800bf08 <_lseek_r>
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	bf15      	itete	ne
 800be98:	6560      	strne	r0, [r4, #84]	; 0x54
 800be9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bea2:	81a3      	strheq	r3, [r4, #12]
 800bea4:	bf18      	it	ne
 800bea6:	81a3      	strhne	r3, [r4, #12]
 800bea8:	bd10      	pop	{r4, pc}

0800beaa <__sclose>:
 800beaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beae:	f000 b81b 	b.w	800bee8 <_close_r>

0800beb2 <memset>:
 800beb2:	4402      	add	r2, r0
 800beb4:	4603      	mov	r3, r0
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d100      	bne.n	800bebc <memset+0xa>
 800beba:	4770      	bx	lr
 800bebc:	f803 1b01 	strb.w	r1, [r3], #1
 800bec0:	e7f9      	b.n	800beb6 <memset+0x4>

0800bec2 <strncpy>:
 800bec2:	b510      	push	{r4, lr}
 800bec4:	3901      	subs	r1, #1
 800bec6:	4603      	mov	r3, r0
 800bec8:	b132      	cbz	r2, 800bed8 <strncpy+0x16>
 800beca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bece:	f803 4b01 	strb.w	r4, [r3], #1
 800bed2:	3a01      	subs	r2, #1
 800bed4:	2c00      	cmp	r4, #0
 800bed6:	d1f7      	bne.n	800bec8 <strncpy+0x6>
 800bed8:	441a      	add	r2, r3
 800beda:	2100      	movs	r1, #0
 800bedc:	4293      	cmp	r3, r2
 800bede:	d100      	bne.n	800bee2 <strncpy+0x20>
 800bee0:	bd10      	pop	{r4, pc}
 800bee2:	f803 1b01 	strb.w	r1, [r3], #1
 800bee6:	e7f9      	b.n	800bedc <strncpy+0x1a>

0800bee8 <_close_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4d06      	ldr	r5, [pc, #24]	; (800bf04 <_close_r+0x1c>)
 800beec:	2300      	movs	r3, #0
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	f7f6 fbbf 	bl	8002676 <_close>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_close_r+0x1a>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_close_r+0x1a>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20005370 	.word	0x20005370

0800bf08 <_lseek_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d07      	ldr	r5, [pc, #28]	; (800bf28 <_lseek_r+0x20>)
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	4608      	mov	r0, r1
 800bf10:	4611      	mov	r1, r2
 800bf12:	2200      	movs	r2, #0
 800bf14:	602a      	str	r2, [r5, #0]
 800bf16:	461a      	mov	r2, r3
 800bf18:	f7f6 fbd4 	bl	80026c4 <_lseek>
 800bf1c:	1c43      	adds	r3, r0, #1
 800bf1e:	d102      	bne.n	800bf26 <_lseek_r+0x1e>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	b103      	cbz	r3, 800bf26 <_lseek_r+0x1e>
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	bd38      	pop	{r3, r4, r5, pc}
 800bf28:	20005370 	.word	0x20005370

0800bf2c <_read_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4d07      	ldr	r5, [pc, #28]	; (800bf4c <_read_r+0x20>)
 800bf30:	4604      	mov	r4, r0
 800bf32:	4608      	mov	r0, r1
 800bf34:	4611      	mov	r1, r2
 800bf36:	2200      	movs	r2, #0
 800bf38:	602a      	str	r2, [r5, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	f7f6 fb62 	bl	8002604 <_read>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_read_r+0x1e>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_read_r+0x1e>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	20005370 	.word	0x20005370

0800bf50 <_write_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4d07      	ldr	r5, [pc, #28]	; (800bf70 <_write_r+0x20>)
 800bf54:	4604      	mov	r4, r0
 800bf56:	4608      	mov	r0, r1
 800bf58:	4611      	mov	r1, r2
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	602a      	str	r2, [r5, #0]
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f7f6 fb6d 	bl	800263e <_write>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d102      	bne.n	800bf6e <_write_r+0x1e>
 800bf68:	682b      	ldr	r3, [r5, #0]
 800bf6a:	b103      	cbz	r3, 800bf6e <_write_r+0x1e>
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	20005370 	.word	0x20005370

0800bf74 <__errno>:
 800bf74:	4b01      	ldr	r3, [pc, #4]	; (800bf7c <__errno+0x8>)
 800bf76:	6818      	ldr	r0, [r3, #0]
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	2000018c 	.word	0x2000018c

0800bf80 <__libc_init_array>:
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	4d0d      	ldr	r5, [pc, #52]	; (800bfb8 <__libc_init_array+0x38>)
 800bf84:	4c0d      	ldr	r4, [pc, #52]	; (800bfbc <__libc_init_array+0x3c>)
 800bf86:	1b64      	subs	r4, r4, r5
 800bf88:	10a4      	asrs	r4, r4, #2
 800bf8a:	2600      	movs	r6, #0
 800bf8c:	42a6      	cmp	r6, r4
 800bf8e:	d109      	bne.n	800bfa4 <__libc_init_array+0x24>
 800bf90:	4d0b      	ldr	r5, [pc, #44]	; (800bfc0 <__libc_init_array+0x40>)
 800bf92:	4c0c      	ldr	r4, [pc, #48]	; (800bfc4 <__libc_init_array+0x44>)
 800bf94:	f000 ffac 	bl	800cef0 <_init>
 800bf98:	1b64      	subs	r4, r4, r5
 800bf9a:	10a4      	asrs	r4, r4, #2
 800bf9c:	2600      	movs	r6, #0
 800bf9e:	42a6      	cmp	r6, r4
 800bfa0:	d105      	bne.n	800bfae <__libc_init_array+0x2e>
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa8:	4798      	blx	r3
 800bfaa:	3601      	adds	r6, #1
 800bfac:	e7ee      	b.n	800bf8c <__libc_init_array+0xc>
 800bfae:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfb2:	4798      	blx	r3
 800bfb4:	3601      	adds	r6, #1
 800bfb6:	e7f2      	b.n	800bf9e <__libc_init_array+0x1e>
 800bfb8:	0800d0a8 	.word	0x0800d0a8
 800bfbc:	0800d0a8 	.word	0x0800d0a8
 800bfc0:	0800d0a8 	.word	0x0800d0a8
 800bfc4:	0800d0ac 	.word	0x0800d0ac

0800bfc8 <__retarget_lock_init_recursive>:
 800bfc8:	4770      	bx	lr

0800bfca <__retarget_lock_acquire_recursive>:
 800bfca:	4770      	bx	lr

0800bfcc <__retarget_lock_release_recursive>:
 800bfcc:	4770      	bx	lr

0800bfce <memcpy>:
 800bfce:	440a      	add	r2, r1
 800bfd0:	4291      	cmp	r1, r2
 800bfd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bfd6:	d100      	bne.n	800bfda <memcpy+0xc>
 800bfd8:	4770      	bx	lr
 800bfda:	b510      	push	{r4, lr}
 800bfdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfe0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfe4:	4291      	cmp	r1, r2
 800bfe6:	d1f9      	bne.n	800bfdc <memcpy+0xe>
 800bfe8:	bd10      	pop	{r4, pc}
	...

0800bfec <_free_r>:
 800bfec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfee:	2900      	cmp	r1, #0
 800bff0:	d044      	beq.n	800c07c <_free_r+0x90>
 800bff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff6:	9001      	str	r0, [sp, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f1a1 0404 	sub.w	r4, r1, #4
 800bffe:	bfb8      	it	lt
 800c000:	18e4      	addlt	r4, r4, r3
 800c002:	f000 f8df 	bl	800c1c4 <__malloc_lock>
 800c006:	4a1e      	ldr	r2, [pc, #120]	; (800c080 <_free_r+0x94>)
 800c008:	9801      	ldr	r0, [sp, #4]
 800c00a:	6813      	ldr	r3, [r2, #0]
 800c00c:	b933      	cbnz	r3, 800c01c <_free_r+0x30>
 800c00e:	6063      	str	r3, [r4, #4]
 800c010:	6014      	str	r4, [r2, #0]
 800c012:	b003      	add	sp, #12
 800c014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c018:	f000 b8da 	b.w	800c1d0 <__malloc_unlock>
 800c01c:	42a3      	cmp	r3, r4
 800c01e:	d908      	bls.n	800c032 <_free_r+0x46>
 800c020:	6825      	ldr	r5, [r4, #0]
 800c022:	1961      	adds	r1, r4, r5
 800c024:	428b      	cmp	r3, r1
 800c026:	bf01      	itttt	eq
 800c028:	6819      	ldreq	r1, [r3, #0]
 800c02a:	685b      	ldreq	r3, [r3, #4]
 800c02c:	1949      	addeq	r1, r1, r5
 800c02e:	6021      	streq	r1, [r4, #0]
 800c030:	e7ed      	b.n	800c00e <_free_r+0x22>
 800c032:	461a      	mov	r2, r3
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	b10b      	cbz	r3, 800c03c <_free_r+0x50>
 800c038:	42a3      	cmp	r3, r4
 800c03a:	d9fa      	bls.n	800c032 <_free_r+0x46>
 800c03c:	6811      	ldr	r1, [r2, #0]
 800c03e:	1855      	adds	r5, r2, r1
 800c040:	42a5      	cmp	r5, r4
 800c042:	d10b      	bne.n	800c05c <_free_r+0x70>
 800c044:	6824      	ldr	r4, [r4, #0]
 800c046:	4421      	add	r1, r4
 800c048:	1854      	adds	r4, r2, r1
 800c04a:	42a3      	cmp	r3, r4
 800c04c:	6011      	str	r1, [r2, #0]
 800c04e:	d1e0      	bne.n	800c012 <_free_r+0x26>
 800c050:	681c      	ldr	r4, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	6053      	str	r3, [r2, #4]
 800c056:	440c      	add	r4, r1
 800c058:	6014      	str	r4, [r2, #0]
 800c05a:	e7da      	b.n	800c012 <_free_r+0x26>
 800c05c:	d902      	bls.n	800c064 <_free_r+0x78>
 800c05e:	230c      	movs	r3, #12
 800c060:	6003      	str	r3, [r0, #0]
 800c062:	e7d6      	b.n	800c012 <_free_r+0x26>
 800c064:	6825      	ldr	r5, [r4, #0]
 800c066:	1961      	adds	r1, r4, r5
 800c068:	428b      	cmp	r3, r1
 800c06a:	bf04      	itt	eq
 800c06c:	6819      	ldreq	r1, [r3, #0]
 800c06e:	685b      	ldreq	r3, [r3, #4]
 800c070:	6063      	str	r3, [r4, #4]
 800c072:	bf04      	itt	eq
 800c074:	1949      	addeq	r1, r1, r5
 800c076:	6021      	streq	r1, [r4, #0]
 800c078:	6054      	str	r4, [r2, #4]
 800c07a:	e7ca      	b.n	800c012 <_free_r+0x26>
 800c07c:	b003      	add	sp, #12
 800c07e:	bd30      	pop	{r4, r5, pc}
 800c080:	20005378 	.word	0x20005378

0800c084 <sbrk_aligned>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	4e0e      	ldr	r6, [pc, #56]	; (800c0c0 <sbrk_aligned+0x3c>)
 800c088:	460c      	mov	r4, r1
 800c08a:	6831      	ldr	r1, [r6, #0]
 800c08c:	4605      	mov	r5, r0
 800c08e:	b911      	cbnz	r1, 800c096 <sbrk_aligned+0x12>
 800c090:	f000 fe62 	bl	800cd58 <_sbrk_r>
 800c094:	6030      	str	r0, [r6, #0]
 800c096:	4621      	mov	r1, r4
 800c098:	4628      	mov	r0, r5
 800c09a:	f000 fe5d 	bl	800cd58 <_sbrk_r>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	d00a      	beq.n	800c0b8 <sbrk_aligned+0x34>
 800c0a2:	1cc4      	adds	r4, r0, #3
 800c0a4:	f024 0403 	bic.w	r4, r4, #3
 800c0a8:	42a0      	cmp	r0, r4
 800c0aa:	d007      	beq.n	800c0bc <sbrk_aligned+0x38>
 800c0ac:	1a21      	subs	r1, r4, r0
 800c0ae:	4628      	mov	r0, r5
 800c0b0:	f000 fe52 	bl	800cd58 <_sbrk_r>
 800c0b4:	3001      	adds	r0, #1
 800c0b6:	d101      	bne.n	800c0bc <sbrk_aligned+0x38>
 800c0b8:	f04f 34ff 	mov.w	r4, #4294967295
 800c0bc:	4620      	mov	r0, r4
 800c0be:	bd70      	pop	{r4, r5, r6, pc}
 800c0c0:	2000537c 	.word	0x2000537c

0800c0c4 <_malloc_r>:
 800c0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c8:	1ccd      	adds	r5, r1, #3
 800c0ca:	f025 0503 	bic.w	r5, r5, #3
 800c0ce:	3508      	adds	r5, #8
 800c0d0:	2d0c      	cmp	r5, #12
 800c0d2:	bf38      	it	cc
 800c0d4:	250c      	movcc	r5, #12
 800c0d6:	2d00      	cmp	r5, #0
 800c0d8:	4607      	mov	r7, r0
 800c0da:	db01      	blt.n	800c0e0 <_malloc_r+0x1c>
 800c0dc:	42a9      	cmp	r1, r5
 800c0de:	d905      	bls.n	800c0ec <_malloc_r+0x28>
 800c0e0:	230c      	movs	r3, #12
 800c0e2:	603b      	str	r3, [r7, #0]
 800c0e4:	2600      	movs	r6, #0
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1c0 <_malloc_r+0xfc>
 800c0f0:	f000 f868 	bl	800c1c4 <__malloc_lock>
 800c0f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0f8:	461c      	mov	r4, r3
 800c0fa:	bb5c      	cbnz	r4, 800c154 <_malloc_r+0x90>
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4638      	mov	r0, r7
 800c100:	f7ff ffc0 	bl	800c084 <sbrk_aligned>
 800c104:	1c43      	adds	r3, r0, #1
 800c106:	4604      	mov	r4, r0
 800c108:	d155      	bne.n	800c1b6 <_malloc_r+0xf2>
 800c10a:	f8d8 4000 	ldr.w	r4, [r8]
 800c10e:	4626      	mov	r6, r4
 800c110:	2e00      	cmp	r6, #0
 800c112:	d145      	bne.n	800c1a0 <_malloc_r+0xdc>
 800c114:	2c00      	cmp	r4, #0
 800c116:	d048      	beq.n	800c1aa <_malloc_r+0xe6>
 800c118:	6823      	ldr	r3, [r4, #0]
 800c11a:	4631      	mov	r1, r6
 800c11c:	4638      	mov	r0, r7
 800c11e:	eb04 0903 	add.w	r9, r4, r3
 800c122:	f000 fe19 	bl	800cd58 <_sbrk_r>
 800c126:	4581      	cmp	r9, r0
 800c128:	d13f      	bne.n	800c1aa <_malloc_r+0xe6>
 800c12a:	6821      	ldr	r1, [r4, #0]
 800c12c:	1a6d      	subs	r5, r5, r1
 800c12e:	4629      	mov	r1, r5
 800c130:	4638      	mov	r0, r7
 800c132:	f7ff ffa7 	bl	800c084 <sbrk_aligned>
 800c136:	3001      	adds	r0, #1
 800c138:	d037      	beq.n	800c1aa <_malloc_r+0xe6>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	442b      	add	r3, r5
 800c13e:	6023      	str	r3, [r4, #0]
 800c140:	f8d8 3000 	ldr.w	r3, [r8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d038      	beq.n	800c1ba <_malloc_r+0xf6>
 800c148:	685a      	ldr	r2, [r3, #4]
 800c14a:	42a2      	cmp	r2, r4
 800c14c:	d12b      	bne.n	800c1a6 <_malloc_r+0xe2>
 800c14e:	2200      	movs	r2, #0
 800c150:	605a      	str	r2, [r3, #4]
 800c152:	e00f      	b.n	800c174 <_malloc_r+0xb0>
 800c154:	6822      	ldr	r2, [r4, #0]
 800c156:	1b52      	subs	r2, r2, r5
 800c158:	d41f      	bmi.n	800c19a <_malloc_r+0xd6>
 800c15a:	2a0b      	cmp	r2, #11
 800c15c:	d917      	bls.n	800c18e <_malloc_r+0xca>
 800c15e:	1961      	adds	r1, r4, r5
 800c160:	42a3      	cmp	r3, r4
 800c162:	6025      	str	r5, [r4, #0]
 800c164:	bf18      	it	ne
 800c166:	6059      	strne	r1, [r3, #4]
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	bf08      	it	eq
 800c16c:	f8c8 1000 	streq.w	r1, [r8]
 800c170:	5162      	str	r2, [r4, r5]
 800c172:	604b      	str	r3, [r1, #4]
 800c174:	4638      	mov	r0, r7
 800c176:	f104 060b 	add.w	r6, r4, #11
 800c17a:	f000 f829 	bl	800c1d0 <__malloc_unlock>
 800c17e:	f026 0607 	bic.w	r6, r6, #7
 800c182:	1d23      	adds	r3, r4, #4
 800c184:	1af2      	subs	r2, r6, r3
 800c186:	d0ae      	beq.n	800c0e6 <_malloc_r+0x22>
 800c188:	1b9b      	subs	r3, r3, r6
 800c18a:	50a3      	str	r3, [r4, r2]
 800c18c:	e7ab      	b.n	800c0e6 <_malloc_r+0x22>
 800c18e:	42a3      	cmp	r3, r4
 800c190:	6862      	ldr	r2, [r4, #4]
 800c192:	d1dd      	bne.n	800c150 <_malloc_r+0x8c>
 800c194:	f8c8 2000 	str.w	r2, [r8]
 800c198:	e7ec      	b.n	800c174 <_malloc_r+0xb0>
 800c19a:	4623      	mov	r3, r4
 800c19c:	6864      	ldr	r4, [r4, #4]
 800c19e:	e7ac      	b.n	800c0fa <_malloc_r+0x36>
 800c1a0:	4634      	mov	r4, r6
 800c1a2:	6876      	ldr	r6, [r6, #4]
 800c1a4:	e7b4      	b.n	800c110 <_malloc_r+0x4c>
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	e7cc      	b.n	800c144 <_malloc_r+0x80>
 800c1aa:	230c      	movs	r3, #12
 800c1ac:	603b      	str	r3, [r7, #0]
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	f000 f80e 	bl	800c1d0 <__malloc_unlock>
 800c1b4:	e797      	b.n	800c0e6 <_malloc_r+0x22>
 800c1b6:	6025      	str	r5, [r4, #0]
 800c1b8:	e7dc      	b.n	800c174 <_malloc_r+0xb0>
 800c1ba:	605b      	str	r3, [r3, #4]
 800c1bc:	deff      	udf	#255	; 0xff
 800c1be:	bf00      	nop
 800c1c0:	20005378 	.word	0x20005378

0800c1c4 <__malloc_lock>:
 800c1c4:	4801      	ldr	r0, [pc, #4]	; (800c1cc <__malloc_lock+0x8>)
 800c1c6:	f7ff bf00 	b.w	800bfca <__retarget_lock_acquire_recursive>
 800c1ca:	bf00      	nop
 800c1cc:	20005374 	.word	0x20005374

0800c1d0 <__malloc_unlock>:
 800c1d0:	4801      	ldr	r0, [pc, #4]	; (800c1d8 <__malloc_unlock+0x8>)
 800c1d2:	f7ff befb 	b.w	800bfcc <__retarget_lock_release_recursive>
 800c1d6:	bf00      	nop
 800c1d8:	20005374 	.word	0x20005374

0800c1dc <__ssputs_r>:
 800c1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e0:	688e      	ldr	r6, [r1, #8]
 800c1e2:	461f      	mov	r7, r3
 800c1e4:	42be      	cmp	r6, r7
 800c1e6:	680b      	ldr	r3, [r1, #0]
 800c1e8:	4682      	mov	sl, r0
 800c1ea:	460c      	mov	r4, r1
 800c1ec:	4690      	mov	r8, r2
 800c1ee:	d82c      	bhi.n	800c24a <__ssputs_r+0x6e>
 800c1f0:	898a      	ldrh	r2, [r1, #12]
 800c1f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1f6:	d026      	beq.n	800c246 <__ssputs_r+0x6a>
 800c1f8:	6965      	ldr	r5, [r4, #20]
 800c1fa:	6909      	ldr	r1, [r1, #16]
 800c1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c200:	eba3 0901 	sub.w	r9, r3, r1
 800c204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c208:	1c7b      	adds	r3, r7, #1
 800c20a:	444b      	add	r3, r9
 800c20c:	106d      	asrs	r5, r5, #1
 800c20e:	429d      	cmp	r5, r3
 800c210:	bf38      	it	cc
 800c212:	461d      	movcc	r5, r3
 800c214:	0553      	lsls	r3, r2, #21
 800c216:	d527      	bpl.n	800c268 <__ssputs_r+0x8c>
 800c218:	4629      	mov	r1, r5
 800c21a:	f7ff ff53 	bl	800c0c4 <_malloc_r>
 800c21e:	4606      	mov	r6, r0
 800c220:	b360      	cbz	r0, 800c27c <__ssputs_r+0xa0>
 800c222:	6921      	ldr	r1, [r4, #16]
 800c224:	464a      	mov	r2, r9
 800c226:	f7ff fed2 	bl	800bfce <memcpy>
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c234:	81a3      	strh	r3, [r4, #12]
 800c236:	6126      	str	r6, [r4, #16]
 800c238:	6165      	str	r5, [r4, #20]
 800c23a:	444e      	add	r6, r9
 800c23c:	eba5 0509 	sub.w	r5, r5, r9
 800c240:	6026      	str	r6, [r4, #0]
 800c242:	60a5      	str	r5, [r4, #8]
 800c244:	463e      	mov	r6, r7
 800c246:	42be      	cmp	r6, r7
 800c248:	d900      	bls.n	800c24c <__ssputs_r+0x70>
 800c24a:	463e      	mov	r6, r7
 800c24c:	6820      	ldr	r0, [r4, #0]
 800c24e:	4632      	mov	r2, r6
 800c250:	4641      	mov	r1, r8
 800c252:	f000 fd67 	bl	800cd24 <memmove>
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	1b9b      	subs	r3, r3, r6
 800c25a:	60a3      	str	r3, [r4, #8]
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	4433      	add	r3, r6
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	2000      	movs	r0, #0
 800c264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c268:	462a      	mov	r2, r5
 800c26a:	f000 fd85 	bl	800cd78 <_realloc_r>
 800c26e:	4606      	mov	r6, r0
 800c270:	2800      	cmp	r0, #0
 800c272:	d1e0      	bne.n	800c236 <__ssputs_r+0x5a>
 800c274:	6921      	ldr	r1, [r4, #16]
 800c276:	4650      	mov	r0, sl
 800c278:	f7ff feb8 	bl	800bfec <_free_r>
 800c27c:	230c      	movs	r3, #12
 800c27e:	f8ca 3000 	str.w	r3, [sl]
 800c282:	89a3      	ldrh	r3, [r4, #12]
 800c284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c288:	81a3      	strh	r3, [r4, #12]
 800c28a:	f04f 30ff 	mov.w	r0, #4294967295
 800c28e:	e7e9      	b.n	800c264 <__ssputs_r+0x88>

0800c290 <_svfiprintf_r>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	4698      	mov	r8, r3
 800c296:	898b      	ldrh	r3, [r1, #12]
 800c298:	061b      	lsls	r3, r3, #24
 800c29a:	b09d      	sub	sp, #116	; 0x74
 800c29c:	4607      	mov	r7, r0
 800c29e:	460d      	mov	r5, r1
 800c2a0:	4614      	mov	r4, r2
 800c2a2:	d50e      	bpl.n	800c2c2 <_svfiprintf_r+0x32>
 800c2a4:	690b      	ldr	r3, [r1, #16]
 800c2a6:	b963      	cbnz	r3, 800c2c2 <_svfiprintf_r+0x32>
 800c2a8:	2140      	movs	r1, #64	; 0x40
 800c2aa:	f7ff ff0b 	bl	800c0c4 <_malloc_r>
 800c2ae:	6028      	str	r0, [r5, #0]
 800c2b0:	6128      	str	r0, [r5, #16]
 800c2b2:	b920      	cbnz	r0, 800c2be <_svfiprintf_r+0x2e>
 800c2b4:	230c      	movs	r3, #12
 800c2b6:	603b      	str	r3, [r7, #0]
 800c2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2bc:	e0d0      	b.n	800c460 <_svfiprintf_r+0x1d0>
 800c2be:	2340      	movs	r3, #64	; 0x40
 800c2c0:	616b      	str	r3, [r5, #20]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c6:	2320      	movs	r3, #32
 800c2c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2d0:	2330      	movs	r3, #48	; 0x30
 800c2d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c478 <_svfiprintf_r+0x1e8>
 800c2d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2da:	f04f 0901 	mov.w	r9, #1
 800c2de:	4623      	mov	r3, r4
 800c2e0:	469a      	mov	sl, r3
 800c2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e6:	b10a      	cbz	r2, 800c2ec <_svfiprintf_r+0x5c>
 800c2e8:	2a25      	cmp	r2, #37	; 0x25
 800c2ea:	d1f9      	bne.n	800c2e0 <_svfiprintf_r+0x50>
 800c2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c2f0:	d00b      	beq.n	800c30a <_svfiprintf_r+0x7a>
 800c2f2:	465b      	mov	r3, fp
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f7ff ff6f 	bl	800c1dc <__ssputs_r>
 800c2fe:	3001      	adds	r0, #1
 800c300:	f000 80a9 	beq.w	800c456 <_svfiprintf_r+0x1c6>
 800c304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c306:	445a      	add	r2, fp
 800c308:	9209      	str	r2, [sp, #36]	; 0x24
 800c30a:	f89a 3000 	ldrb.w	r3, [sl]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	f000 80a1 	beq.w	800c456 <_svfiprintf_r+0x1c6>
 800c314:	2300      	movs	r3, #0
 800c316:	f04f 32ff 	mov.w	r2, #4294967295
 800c31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c31e:	f10a 0a01 	add.w	sl, sl, #1
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	9307      	str	r3, [sp, #28]
 800c326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c32a:	931a      	str	r3, [sp, #104]	; 0x68
 800c32c:	4654      	mov	r4, sl
 800c32e:	2205      	movs	r2, #5
 800c330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c334:	4850      	ldr	r0, [pc, #320]	; (800c478 <_svfiprintf_r+0x1e8>)
 800c336:	f7f3 ff53 	bl	80001e0 <memchr>
 800c33a:	9a04      	ldr	r2, [sp, #16]
 800c33c:	b9d8      	cbnz	r0, 800c376 <_svfiprintf_r+0xe6>
 800c33e:	06d0      	lsls	r0, r2, #27
 800c340:	bf44      	itt	mi
 800c342:	2320      	movmi	r3, #32
 800c344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c348:	0711      	lsls	r1, r2, #28
 800c34a:	bf44      	itt	mi
 800c34c:	232b      	movmi	r3, #43	; 0x2b
 800c34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c352:	f89a 3000 	ldrb.w	r3, [sl]
 800c356:	2b2a      	cmp	r3, #42	; 0x2a
 800c358:	d015      	beq.n	800c386 <_svfiprintf_r+0xf6>
 800c35a:	9a07      	ldr	r2, [sp, #28]
 800c35c:	4654      	mov	r4, sl
 800c35e:	2000      	movs	r0, #0
 800c360:	f04f 0c0a 	mov.w	ip, #10
 800c364:	4621      	mov	r1, r4
 800c366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c36a:	3b30      	subs	r3, #48	; 0x30
 800c36c:	2b09      	cmp	r3, #9
 800c36e:	d94d      	bls.n	800c40c <_svfiprintf_r+0x17c>
 800c370:	b1b0      	cbz	r0, 800c3a0 <_svfiprintf_r+0x110>
 800c372:	9207      	str	r2, [sp, #28]
 800c374:	e014      	b.n	800c3a0 <_svfiprintf_r+0x110>
 800c376:	eba0 0308 	sub.w	r3, r0, r8
 800c37a:	fa09 f303 	lsl.w	r3, r9, r3
 800c37e:	4313      	orrs	r3, r2
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	46a2      	mov	sl, r4
 800c384:	e7d2      	b.n	800c32c <_svfiprintf_r+0x9c>
 800c386:	9b03      	ldr	r3, [sp, #12]
 800c388:	1d19      	adds	r1, r3, #4
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	9103      	str	r1, [sp, #12]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	bfbb      	ittet	lt
 800c392:	425b      	neglt	r3, r3
 800c394:	f042 0202 	orrlt.w	r2, r2, #2
 800c398:	9307      	strge	r3, [sp, #28]
 800c39a:	9307      	strlt	r3, [sp, #28]
 800c39c:	bfb8      	it	lt
 800c39e:	9204      	strlt	r2, [sp, #16]
 800c3a0:	7823      	ldrb	r3, [r4, #0]
 800c3a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a4:	d10c      	bne.n	800c3c0 <_svfiprintf_r+0x130>
 800c3a6:	7863      	ldrb	r3, [r4, #1]
 800c3a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c3aa:	d134      	bne.n	800c416 <_svfiprintf_r+0x186>
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	1d1a      	adds	r2, r3, #4
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	9203      	str	r2, [sp, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	bfb8      	it	lt
 800c3b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3bc:	3402      	adds	r4, #2
 800c3be:	9305      	str	r3, [sp, #20]
 800c3c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c488 <_svfiprintf_r+0x1f8>
 800c3c4:	7821      	ldrb	r1, [r4, #0]
 800c3c6:	2203      	movs	r2, #3
 800c3c8:	4650      	mov	r0, sl
 800c3ca:	f7f3 ff09 	bl	80001e0 <memchr>
 800c3ce:	b138      	cbz	r0, 800c3e0 <_svfiprintf_r+0x150>
 800c3d0:	9b04      	ldr	r3, [sp, #16]
 800c3d2:	eba0 000a 	sub.w	r0, r0, sl
 800c3d6:	2240      	movs	r2, #64	; 0x40
 800c3d8:	4082      	lsls	r2, r0
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	3401      	adds	r4, #1
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e4:	4825      	ldr	r0, [pc, #148]	; (800c47c <_svfiprintf_r+0x1ec>)
 800c3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ea:	2206      	movs	r2, #6
 800c3ec:	f7f3 fef8 	bl	80001e0 <memchr>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d038      	beq.n	800c466 <_svfiprintf_r+0x1d6>
 800c3f4:	4b22      	ldr	r3, [pc, #136]	; (800c480 <_svfiprintf_r+0x1f0>)
 800c3f6:	bb1b      	cbnz	r3, 800c440 <_svfiprintf_r+0x1b0>
 800c3f8:	9b03      	ldr	r3, [sp, #12]
 800c3fa:	3307      	adds	r3, #7
 800c3fc:	f023 0307 	bic.w	r3, r3, #7
 800c400:	3308      	adds	r3, #8
 800c402:	9303      	str	r3, [sp, #12]
 800c404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c406:	4433      	add	r3, r6
 800c408:	9309      	str	r3, [sp, #36]	; 0x24
 800c40a:	e768      	b.n	800c2de <_svfiprintf_r+0x4e>
 800c40c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c410:	460c      	mov	r4, r1
 800c412:	2001      	movs	r0, #1
 800c414:	e7a6      	b.n	800c364 <_svfiprintf_r+0xd4>
 800c416:	2300      	movs	r3, #0
 800c418:	3401      	adds	r4, #1
 800c41a:	9305      	str	r3, [sp, #20]
 800c41c:	4619      	mov	r1, r3
 800c41e:	f04f 0c0a 	mov.w	ip, #10
 800c422:	4620      	mov	r0, r4
 800c424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c428:	3a30      	subs	r2, #48	; 0x30
 800c42a:	2a09      	cmp	r2, #9
 800c42c:	d903      	bls.n	800c436 <_svfiprintf_r+0x1a6>
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0c6      	beq.n	800c3c0 <_svfiprintf_r+0x130>
 800c432:	9105      	str	r1, [sp, #20]
 800c434:	e7c4      	b.n	800c3c0 <_svfiprintf_r+0x130>
 800c436:	fb0c 2101 	mla	r1, ip, r1, r2
 800c43a:	4604      	mov	r4, r0
 800c43c:	2301      	movs	r3, #1
 800c43e:	e7f0      	b.n	800c422 <_svfiprintf_r+0x192>
 800c440:	ab03      	add	r3, sp, #12
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	462a      	mov	r2, r5
 800c446:	4b0f      	ldr	r3, [pc, #60]	; (800c484 <_svfiprintf_r+0x1f4>)
 800c448:	a904      	add	r1, sp, #16
 800c44a:	4638      	mov	r0, r7
 800c44c:	f3af 8000 	nop.w
 800c450:	1c42      	adds	r2, r0, #1
 800c452:	4606      	mov	r6, r0
 800c454:	d1d6      	bne.n	800c404 <_svfiprintf_r+0x174>
 800c456:	89ab      	ldrh	r3, [r5, #12]
 800c458:	065b      	lsls	r3, r3, #25
 800c45a:	f53f af2d 	bmi.w	800c2b8 <_svfiprintf_r+0x28>
 800c45e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c460:	b01d      	add	sp, #116	; 0x74
 800c462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c466:	ab03      	add	r3, sp, #12
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	462a      	mov	r2, r5
 800c46c:	4b05      	ldr	r3, [pc, #20]	; (800c484 <_svfiprintf_r+0x1f4>)
 800c46e:	a904      	add	r1, sp, #16
 800c470:	4638      	mov	r0, r7
 800c472:	f000 f9bd 	bl	800c7f0 <_printf_i>
 800c476:	e7eb      	b.n	800c450 <_svfiprintf_r+0x1c0>
 800c478:	0800d06c 	.word	0x0800d06c
 800c47c:	0800d076 	.word	0x0800d076
 800c480:	00000000 	.word	0x00000000
 800c484:	0800c1dd 	.word	0x0800c1dd
 800c488:	0800d072 	.word	0x0800d072

0800c48c <__sfputc_r>:
 800c48c:	6893      	ldr	r3, [r2, #8]
 800c48e:	3b01      	subs	r3, #1
 800c490:	2b00      	cmp	r3, #0
 800c492:	b410      	push	{r4}
 800c494:	6093      	str	r3, [r2, #8]
 800c496:	da08      	bge.n	800c4aa <__sfputc_r+0x1e>
 800c498:	6994      	ldr	r4, [r2, #24]
 800c49a:	42a3      	cmp	r3, r4
 800c49c:	db01      	blt.n	800c4a2 <__sfputc_r+0x16>
 800c49e:	290a      	cmp	r1, #10
 800c4a0:	d103      	bne.n	800c4aa <__sfputc_r+0x1e>
 800c4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4a6:	f000 bba7 	b.w	800cbf8 <__swbuf_r>
 800c4aa:	6813      	ldr	r3, [r2, #0]
 800c4ac:	1c58      	adds	r0, r3, #1
 800c4ae:	6010      	str	r0, [r2, #0]
 800c4b0:	7019      	strb	r1, [r3, #0]
 800c4b2:	4608      	mov	r0, r1
 800c4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <__sfputs_r>:
 800c4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4bc:	4606      	mov	r6, r0
 800c4be:	460f      	mov	r7, r1
 800c4c0:	4614      	mov	r4, r2
 800c4c2:	18d5      	adds	r5, r2, r3
 800c4c4:	42ac      	cmp	r4, r5
 800c4c6:	d101      	bne.n	800c4cc <__sfputs_r+0x12>
 800c4c8:	2000      	movs	r0, #0
 800c4ca:	e007      	b.n	800c4dc <__sfputs_r+0x22>
 800c4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d0:	463a      	mov	r2, r7
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ffda 	bl	800c48c <__sfputc_r>
 800c4d8:	1c43      	adds	r3, r0, #1
 800c4da:	d1f3      	bne.n	800c4c4 <__sfputs_r+0xa>
 800c4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4e0 <_vfiprintf_r>:
 800c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	460d      	mov	r5, r1
 800c4e6:	b09d      	sub	sp, #116	; 0x74
 800c4e8:	4614      	mov	r4, r2
 800c4ea:	4698      	mov	r8, r3
 800c4ec:	4606      	mov	r6, r0
 800c4ee:	b118      	cbz	r0, 800c4f8 <_vfiprintf_r+0x18>
 800c4f0:	6a03      	ldr	r3, [r0, #32]
 800c4f2:	b90b      	cbnz	r3, 800c4f8 <_vfiprintf_r+0x18>
 800c4f4:	f7ff fc2a 	bl	800bd4c <__sinit>
 800c4f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4fa:	07d9      	lsls	r1, r3, #31
 800c4fc:	d405      	bmi.n	800c50a <_vfiprintf_r+0x2a>
 800c4fe:	89ab      	ldrh	r3, [r5, #12]
 800c500:	059a      	lsls	r2, r3, #22
 800c502:	d402      	bmi.n	800c50a <_vfiprintf_r+0x2a>
 800c504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c506:	f7ff fd60 	bl	800bfca <__retarget_lock_acquire_recursive>
 800c50a:	89ab      	ldrh	r3, [r5, #12]
 800c50c:	071b      	lsls	r3, r3, #28
 800c50e:	d501      	bpl.n	800c514 <_vfiprintf_r+0x34>
 800c510:	692b      	ldr	r3, [r5, #16]
 800c512:	b99b      	cbnz	r3, 800c53c <_vfiprintf_r+0x5c>
 800c514:	4629      	mov	r1, r5
 800c516:	4630      	mov	r0, r6
 800c518:	f000 fbac 	bl	800cc74 <__swsetup_r>
 800c51c:	b170      	cbz	r0, 800c53c <_vfiprintf_r+0x5c>
 800c51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c520:	07dc      	lsls	r4, r3, #31
 800c522:	d504      	bpl.n	800c52e <_vfiprintf_r+0x4e>
 800c524:	f04f 30ff 	mov.w	r0, #4294967295
 800c528:	b01d      	add	sp, #116	; 0x74
 800c52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52e:	89ab      	ldrh	r3, [r5, #12]
 800c530:	0598      	lsls	r0, r3, #22
 800c532:	d4f7      	bmi.n	800c524 <_vfiprintf_r+0x44>
 800c534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c536:	f7ff fd49 	bl	800bfcc <__retarget_lock_release_recursive>
 800c53a:	e7f3      	b.n	800c524 <_vfiprintf_r+0x44>
 800c53c:	2300      	movs	r3, #0
 800c53e:	9309      	str	r3, [sp, #36]	; 0x24
 800c540:	2320      	movs	r3, #32
 800c542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c546:	f8cd 800c 	str.w	r8, [sp, #12]
 800c54a:	2330      	movs	r3, #48	; 0x30
 800c54c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c700 <_vfiprintf_r+0x220>
 800c550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c554:	f04f 0901 	mov.w	r9, #1
 800c558:	4623      	mov	r3, r4
 800c55a:	469a      	mov	sl, r3
 800c55c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c560:	b10a      	cbz	r2, 800c566 <_vfiprintf_r+0x86>
 800c562:	2a25      	cmp	r2, #37	; 0x25
 800c564:	d1f9      	bne.n	800c55a <_vfiprintf_r+0x7a>
 800c566:	ebba 0b04 	subs.w	fp, sl, r4
 800c56a:	d00b      	beq.n	800c584 <_vfiprintf_r+0xa4>
 800c56c:	465b      	mov	r3, fp
 800c56e:	4622      	mov	r2, r4
 800c570:	4629      	mov	r1, r5
 800c572:	4630      	mov	r0, r6
 800c574:	f7ff ffa1 	bl	800c4ba <__sfputs_r>
 800c578:	3001      	adds	r0, #1
 800c57a:	f000 80a9 	beq.w	800c6d0 <_vfiprintf_r+0x1f0>
 800c57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c580:	445a      	add	r2, fp
 800c582:	9209      	str	r2, [sp, #36]	; 0x24
 800c584:	f89a 3000 	ldrb.w	r3, [sl]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 80a1 	beq.w	800c6d0 <_vfiprintf_r+0x1f0>
 800c58e:	2300      	movs	r3, #0
 800c590:	f04f 32ff 	mov.w	r2, #4294967295
 800c594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c598:	f10a 0a01 	add.w	sl, sl, #1
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	9307      	str	r3, [sp, #28]
 800c5a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5a4:	931a      	str	r3, [sp, #104]	; 0x68
 800c5a6:	4654      	mov	r4, sl
 800c5a8:	2205      	movs	r2, #5
 800c5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ae:	4854      	ldr	r0, [pc, #336]	; (800c700 <_vfiprintf_r+0x220>)
 800c5b0:	f7f3 fe16 	bl	80001e0 <memchr>
 800c5b4:	9a04      	ldr	r2, [sp, #16]
 800c5b6:	b9d8      	cbnz	r0, 800c5f0 <_vfiprintf_r+0x110>
 800c5b8:	06d1      	lsls	r1, r2, #27
 800c5ba:	bf44      	itt	mi
 800c5bc:	2320      	movmi	r3, #32
 800c5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c2:	0713      	lsls	r3, r2, #28
 800c5c4:	bf44      	itt	mi
 800c5c6:	232b      	movmi	r3, #43	; 0x2b
 800c5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d2:	d015      	beq.n	800c600 <_vfiprintf_r+0x120>
 800c5d4:	9a07      	ldr	r2, [sp, #28]
 800c5d6:	4654      	mov	r4, sl
 800c5d8:	2000      	movs	r0, #0
 800c5da:	f04f 0c0a 	mov.w	ip, #10
 800c5de:	4621      	mov	r1, r4
 800c5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5e4:	3b30      	subs	r3, #48	; 0x30
 800c5e6:	2b09      	cmp	r3, #9
 800c5e8:	d94d      	bls.n	800c686 <_vfiprintf_r+0x1a6>
 800c5ea:	b1b0      	cbz	r0, 800c61a <_vfiprintf_r+0x13a>
 800c5ec:	9207      	str	r2, [sp, #28]
 800c5ee:	e014      	b.n	800c61a <_vfiprintf_r+0x13a>
 800c5f0:	eba0 0308 	sub.w	r3, r0, r8
 800c5f4:	fa09 f303 	lsl.w	r3, r9, r3
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	9304      	str	r3, [sp, #16]
 800c5fc:	46a2      	mov	sl, r4
 800c5fe:	e7d2      	b.n	800c5a6 <_vfiprintf_r+0xc6>
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	1d19      	adds	r1, r3, #4
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	9103      	str	r1, [sp, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bfbb      	ittet	lt
 800c60c:	425b      	neglt	r3, r3
 800c60e:	f042 0202 	orrlt.w	r2, r2, #2
 800c612:	9307      	strge	r3, [sp, #28]
 800c614:	9307      	strlt	r3, [sp, #28]
 800c616:	bfb8      	it	lt
 800c618:	9204      	strlt	r2, [sp, #16]
 800c61a:	7823      	ldrb	r3, [r4, #0]
 800c61c:	2b2e      	cmp	r3, #46	; 0x2e
 800c61e:	d10c      	bne.n	800c63a <_vfiprintf_r+0x15a>
 800c620:	7863      	ldrb	r3, [r4, #1]
 800c622:	2b2a      	cmp	r3, #42	; 0x2a
 800c624:	d134      	bne.n	800c690 <_vfiprintf_r+0x1b0>
 800c626:	9b03      	ldr	r3, [sp, #12]
 800c628:	1d1a      	adds	r2, r3, #4
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	9203      	str	r2, [sp, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bfb8      	it	lt
 800c632:	f04f 33ff 	movlt.w	r3, #4294967295
 800c636:	3402      	adds	r4, #2
 800c638:	9305      	str	r3, [sp, #20]
 800c63a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c710 <_vfiprintf_r+0x230>
 800c63e:	7821      	ldrb	r1, [r4, #0]
 800c640:	2203      	movs	r2, #3
 800c642:	4650      	mov	r0, sl
 800c644:	f7f3 fdcc 	bl	80001e0 <memchr>
 800c648:	b138      	cbz	r0, 800c65a <_vfiprintf_r+0x17a>
 800c64a:	9b04      	ldr	r3, [sp, #16]
 800c64c:	eba0 000a 	sub.w	r0, r0, sl
 800c650:	2240      	movs	r2, #64	; 0x40
 800c652:	4082      	lsls	r2, r0
 800c654:	4313      	orrs	r3, r2
 800c656:	3401      	adds	r4, #1
 800c658:	9304      	str	r3, [sp, #16]
 800c65a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65e:	4829      	ldr	r0, [pc, #164]	; (800c704 <_vfiprintf_r+0x224>)
 800c660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c664:	2206      	movs	r2, #6
 800c666:	f7f3 fdbb 	bl	80001e0 <memchr>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d03f      	beq.n	800c6ee <_vfiprintf_r+0x20e>
 800c66e:	4b26      	ldr	r3, [pc, #152]	; (800c708 <_vfiprintf_r+0x228>)
 800c670:	bb1b      	cbnz	r3, 800c6ba <_vfiprintf_r+0x1da>
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	3307      	adds	r3, #7
 800c676:	f023 0307 	bic.w	r3, r3, #7
 800c67a:	3308      	adds	r3, #8
 800c67c:	9303      	str	r3, [sp, #12]
 800c67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c680:	443b      	add	r3, r7
 800c682:	9309      	str	r3, [sp, #36]	; 0x24
 800c684:	e768      	b.n	800c558 <_vfiprintf_r+0x78>
 800c686:	fb0c 3202 	mla	r2, ip, r2, r3
 800c68a:	460c      	mov	r4, r1
 800c68c:	2001      	movs	r0, #1
 800c68e:	e7a6      	b.n	800c5de <_vfiprintf_r+0xfe>
 800c690:	2300      	movs	r3, #0
 800c692:	3401      	adds	r4, #1
 800c694:	9305      	str	r3, [sp, #20]
 800c696:	4619      	mov	r1, r3
 800c698:	f04f 0c0a 	mov.w	ip, #10
 800c69c:	4620      	mov	r0, r4
 800c69e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a2:	3a30      	subs	r2, #48	; 0x30
 800c6a4:	2a09      	cmp	r2, #9
 800c6a6:	d903      	bls.n	800c6b0 <_vfiprintf_r+0x1d0>
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d0c6      	beq.n	800c63a <_vfiprintf_r+0x15a>
 800c6ac:	9105      	str	r1, [sp, #20]
 800c6ae:	e7c4      	b.n	800c63a <_vfiprintf_r+0x15a>
 800c6b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e7f0      	b.n	800c69c <_vfiprintf_r+0x1bc>
 800c6ba:	ab03      	add	r3, sp, #12
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	462a      	mov	r2, r5
 800c6c0:	4b12      	ldr	r3, [pc, #72]	; (800c70c <_vfiprintf_r+0x22c>)
 800c6c2:	a904      	add	r1, sp, #16
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f3af 8000 	nop.w
 800c6ca:	4607      	mov	r7, r0
 800c6cc:	1c78      	adds	r0, r7, #1
 800c6ce:	d1d6      	bne.n	800c67e <_vfiprintf_r+0x19e>
 800c6d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6d2:	07d9      	lsls	r1, r3, #31
 800c6d4:	d405      	bmi.n	800c6e2 <_vfiprintf_r+0x202>
 800c6d6:	89ab      	ldrh	r3, [r5, #12]
 800c6d8:	059a      	lsls	r2, r3, #22
 800c6da:	d402      	bmi.n	800c6e2 <_vfiprintf_r+0x202>
 800c6dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6de:	f7ff fc75 	bl	800bfcc <__retarget_lock_release_recursive>
 800c6e2:	89ab      	ldrh	r3, [r5, #12]
 800c6e4:	065b      	lsls	r3, r3, #25
 800c6e6:	f53f af1d 	bmi.w	800c524 <_vfiprintf_r+0x44>
 800c6ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6ec:	e71c      	b.n	800c528 <_vfiprintf_r+0x48>
 800c6ee:	ab03      	add	r3, sp, #12
 800c6f0:	9300      	str	r3, [sp, #0]
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	4b05      	ldr	r3, [pc, #20]	; (800c70c <_vfiprintf_r+0x22c>)
 800c6f6:	a904      	add	r1, sp, #16
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f000 f879 	bl	800c7f0 <_printf_i>
 800c6fe:	e7e4      	b.n	800c6ca <_vfiprintf_r+0x1ea>
 800c700:	0800d06c 	.word	0x0800d06c
 800c704:	0800d076 	.word	0x0800d076
 800c708:	00000000 	.word	0x00000000
 800c70c:	0800c4bb 	.word	0x0800c4bb
 800c710:	0800d072 	.word	0x0800d072

0800c714 <_printf_common>:
 800c714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c718:	4616      	mov	r6, r2
 800c71a:	4699      	mov	r9, r3
 800c71c:	688a      	ldr	r2, [r1, #8]
 800c71e:	690b      	ldr	r3, [r1, #16]
 800c720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c724:	4293      	cmp	r3, r2
 800c726:	bfb8      	it	lt
 800c728:	4613      	movlt	r3, r2
 800c72a:	6033      	str	r3, [r6, #0]
 800c72c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c730:	4607      	mov	r7, r0
 800c732:	460c      	mov	r4, r1
 800c734:	b10a      	cbz	r2, 800c73a <_printf_common+0x26>
 800c736:	3301      	adds	r3, #1
 800c738:	6033      	str	r3, [r6, #0]
 800c73a:	6823      	ldr	r3, [r4, #0]
 800c73c:	0699      	lsls	r1, r3, #26
 800c73e:	bf42      	ittt	mi
 800c740:	6833      	ldrmi	r3, [r6, #0]
 800c742:	3302      	addmi	r3, #2
 800c744:	6033      	strmi	r3, [r6, #0]
 800c746:	6825      	ldr	r5, [r4, #0]
 800c748:	f015 0506 	ands.w	r5, r5, #6
 800c74c:	d106      	bne.n	800c75c <_printf_common+0x48>
 800c74e:	f104 0a19 	add.w	sl, r4, #25
 800c752:	68e3      	ldr	r3, [r4, #12]
 800c754:	6832      	ldr	r2, [r6, #0]
 800c756:	1a9b      	subs	r3, r3, r2
 800c758:	42ab      	cmp	r3, r5
 800c75a:	dc26      	bgt.n	800c7aa <_printf_common+0x96>
 800c75c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c760:	1e13      	subs	r3, r2, #0
 800c762:	6822      	ldr	r2, [r4, #0]
 800c764:	bf18      	it	ne
 800c766:	2301      	movne	r3, #1
 800c768:	0692      	lsls	r2, r2, #26
 800c76a:	d42b      	bmi.n	800c7c4 <_printf_common+0xb0>
 800c76c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c770:	4649      	mov	r1, r9
 800c772:	4638      	mov	r0, r7
 800c774:	47c0      	blx	r8
 800c776:	3001      	adds	r0, #1
 800c778:	d01e      	beq.n	800c7b8 <_printf_common+0xa4>
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	6922      	ldr	r2, [r4, #16]
 800c77e:	f003 0306 	and.w	r3, r3, #6
 800c782:	2b04      	cmp	r3, #4
 800c784:	bf02      	ittt	eq
 800c786:	68e5      	ldreq	r5, [r4, #12]
 800c788:	6833      	ldreq	r3, [r6, #0]
 800c78a:	1aed      	subeq	r5, r5, r3
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	bf0c      	ite	eq
 800c790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c794:	2500      	movne	r5, #0
 800c796:	4293      	cmp	r3, r2
 800c798:	bfc4      	itt	gt
 800c79a:	1a9b      	subgt	r3, r3, r2
 800c79c:	18ed      	addgt	r5, r5, r3
 800c79e:	2600      	movs	r6, #0
 800c7a0:	341a      	adds	r4, #26
 800c7a2:	42b5      	cmp	r5, r6
 800c7a4:	d11a      	bne.n	800c7dc <_printf_common+0xc8>
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	e008      	b.n	800c7bc <_printf_common+0xa8>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	4652      	mov	r2, sl
 800c7ae:	4649      	mov	r1, r9
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	47c0      	blx	r8
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d103      	bne.n	800c7c0 <_printf_common+0xac>
 800c7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c0:	3501      	adds	r5, #1
 800c7c2:	e7c6      	b.n	800c752 <_printf_common+0x3e>
 800c7c4:	18e1      	adds	r1, r4, r3
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	2030      	movs	r0, #48	; 0x30
 800c7ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7ce:	4422      	add	r2, r4
 800c7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7d8:	3302      	adds	r3, #2
 800c7da:	e7c7      	b.n	800c76c <_printf_common+0x58>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	4622      	mov	r2, r4
 800c7e0:	4649      	mov	r1, r9
 800c7e2:	4638      	mov	r0, r7
 800c7e4:	47c0      	blx	r8
 800c7e6:	3001      	adds	r0, #1
 800c7e8:	d0e6      	beq.n	800c7b8 <_printf_common+0xa4>
 800c7ea:	3601      	adds	r6, #1
 800c7ec:	e7d9      	b.n	800c7a2 <_printf_common+0x8e>
	...

0800c7f0 <_printf_i>:
 800c7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f4:	7e0f      	ldrb	r7, [r1, #24]
 800c7f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c7f8:	2f78      	cmp	r7, #120	; 0x78
 800c7fa:	4691      	mov	r9, r2
 800c7fc:	4680      	mov	r8, r0
 800c7fe:	460c      	mov	r4, r1
 800c800:	469a      	mov	sl, r3
 800c802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c806:	d807      	bhi.n	800c818 <_printf_i+0x28>
 800c808:	2f62      	cmp	r7, #98	; 0x62
 800c80a:	d80a      	bhi.n	800c822 <_printf_i+0x32>
 800c80c:	2f00      	cmp	r7, #0
 800c80e:	f000 80d4 	beq.w	800c9ba <_printf_i+0x1ca>
 800c812:	2f58      	cmp	r7, #88	; 0x58
 800c814:	f000 80c0 	beq.w	800c998 <_printf_i+0x1a8>
 800c818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c81c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c820:	e03a      	b.n	800c898 <_printf_i+0xa8>
 800c822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c826:	2b15      	cmp	r3, #21
 800c828:	d8f6      	bhi.n	800c818 <_printf_i+0x28>
 800c82a:	a101      	add	r1, pc, #4	; (adr r1, 800c830 <_printf_i+0x40>)
 800c82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c830:	0800c889 	.word	0x0800c889
 800c834:	0800c89d 	.word	0x0800c89d
 800c838:	0800c819 	.word	0x0800c819
 800c83c:	0800c819 	.word	0x0800c819
 800c840:	0800c819 	.word	0x0800c819
 800c844:	0800c819 	.word	0x0800c819
 800c848:	0800c89d 	.word	0x0800c89d
 800c84c:	0800c819 	.word	0x0800c819
 800c850:	0800c819 	.word	0x0800c819
 800c854:	0800c819 	.word	0x0800c819
 800c858:	0800c819 	.word	0x0800c819
 800c85c:	0800c9a1 	.word	0x0800c9a1
 800c860:	0800c8c9 	.word	0x0800c8c9
 800c864:	0800c95b 	.word	0x0800c95b
 800c868:	0800c819 	.word	0x0800c819
 800c86c:	0800c819 	.word	0x0800c819
 800c870:	0800c9c3 	.word	0x0800c9c3
 800c874:	0800c819 	.word	0x0800c819
 800c878:	0800c8c9 	.word	0x0800c8c9
 800c87c:	0800c819 	.word	0x0800c819
 800c880:	0800c819 	.word	0x0800c819
 800c884:	0800c963 	.word	0x0800c963
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	1d1a      	adds	r2, r3, #4
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	602a      	str	r2, [r5, #0]
 800c890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c898:	2301      	movs	r3, #1
 800c89a:	e09f      	b.n	800c9dc <_printf_i+0x1ec>
 800c89c:	6820      	ldr	r0, [r4, #0]
 800c89e:	682b      	ldr	r3, [r5, #0]
 800c8a0:	0607      	lsls	r7, r0, #24
 800c8a2:	f103 0104 	add.w	r1, r3, #4
 800c8a6:	6029      	str	r1, [r5, #0]
 800c8a8:	d501      	bpl.n	800c8ae <_printf_i+0xbe>
 800c8aa:	681e      	ldr	r6, [r3, #0]
 800c8ac:	e003      	b.n	800c8b6 <_printf_i+0xc6>
 800c8ae:	0646      	lsls	r6, r0, #25
 800c8b0:	d5fb      	bpl.n	800c8aa <_printf_i+0xba>
 800c8b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c8b6:	2e00      	cmp	r6, #0
 800c8b8:	da03      	bge.n	800c8c2 <_printf_i+0xd2>
 800c8ba:	232d      	movs	r3, #45	; 0x2d
 800c8bc:	4276      	negs	r6, r6
 800c8be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8c2:	485a      	ldr	r0, [pc, #360]	; (800ca2c <_printf_i+0x23c>)
 800c8c4:	230a      	movs	r3, #10
 800c8c6:	e012      	b.n	800c8ee <_printf_i+0xfe>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	6820      	ldr	r0, [r4, #0]
 800c8cc:	1d19      	adds	r1, r3, #4
 800c8ce:	6029      	str	r1, [r5, #0]
 800c8d0:	0605      	lsls	r5, r0, #24
 800c8d2:	d501      	bpl.n	800c8d8 <_printf_i+0xe8>
 800c8d4:	681e      	ldr	r6, [r3, #0]
 800c8d6:	e002      	b.n	800c8de <_printf_i+0xee>
 800c8d8:	0641      	lsls	r1, r0, #25
 800c8da:	d5fb      	bpl.n	800c8d4 <_printf_i+0xe4>
 800c8dc:	881e      	ldrh	r6, [r3, #0]
 800c8de:	4853      	ldr	r0, [pc, #332]	; (800ca2c <_printf_i+0x23c>)
 800c8e0:	2f6f      	cmp	r7, #111	; 0x6f
 800c8e2:	bf0c      	ite	eq
 800c8e4:	2308      	moveq	r3, #8
 800c8e6:	230a      	movne	r3, #10
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8ee:	6865      	ldr	r5, [r4, #4]
 800c8f0:	60a5      	str	r5, [r4, #8]
 800c8f2:	2d00      	cmp	r5, #0
 800c8f4:	bfa2      	ittt	ge
 800c8f6:	6821      	ldrge	r1, [r4, #0]
 800c8f8:	f021 0104 	bicge.w	r1, r1, #4
 800c8fc:	6021      	strge	r1, [r4, #0]
 800c8fe:	b90e      	cbnz	r6, 800c904 <_printf_i+0x114>
 800c900:	2d00      	cmp	r5, #0
 800c902:	d04b      	beq.n	800c99c <_printf_i+0x1ac>
 800c904:	4615      	mov	r5, r2
 800c906:	fbb6 f1f3 	udiv	r1, r6, r3
 800c90a:	fb03 6711 	mls	r7, r3, r1, r6
 800c90e:	5dc7      	ldrb	r7, [r0, r7]
 800c910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c914:	4637      	mov	r7, r6
 800c916:	42bb      	cmp	r3, r7
 800c918:	460e      	mov	r6, r1
 800c91a:	d9f4      	bls.n	800c906 <_printf_i+0x116>
 800c91c:	2b08      	cmp	r3, #8
 800c91e:	d10b      	bne.n	800c938 <_printf_i+0x148>
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	07de      	lsls	r6, r3, #31
 800c924:	d508      	bpl.n	800c938 <_printf_i+0x148>
 800c926:	6923      	ldr	r3, [r4, #16]
 800c928:	6861      	ldr	r1, [r4, #4]
 800c92a:	4299      	cmp	r1, r3
 800c92c:	bfde      	ittt	le
 800c92e:	2330      	movle	r3, #48	; 0x30
 800c930:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c934:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c938:	1b52      	subs	r2, r2, r5
 800c93a:	6122      	str	r2, [r4, #16]
 800c93c:	f8cd a000 	str.w	sl, [sp]
 800c940:	464b      	mov	r3, r9
 800c942:	aa03      	add	r2, sp, #12
 800c944:	4621      	mov	r1, r4
 800c946:	4640      	mov	r0, r8
 800c948:	f7ff fee4 	bl	800c714 <_printf_common>
 800c94c:	3001      	adds	r0, #1
 800c94e:	d14a      	bne.n	800c9e6 <_printf_i+0x1f6>
 800c950:	f04f 30ff 	mov.w	r0, #4294967295
 800c954:	b004      	add	sp, #16
 800c956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	f043 0320 	orr.w	r3, r3, #32
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	4833      	ldr	r0, [pc, #204]	; (800ca30 <_printf_i+0x240>)
 800c964:	2778      	movs	r7, #120	; 0x78
 800c966:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	6829      	ldr	r1, [r5, #0]
 800c96e:	061f      	lsls	r7, r3, #24
 800c970:	f851 6b04 	ldr.w	r6, [r1], #4
 800c974:	d402      	bmi.n	800c97c <_printf_i+0x18c>
 800c976:	065f      	lsls	r7, r3, #25
 800c978:	bf48      	it	mi
 800c97a:	b2b6      	uxthmi	r6, r6
 800c97c:	07df      	lsls	r7, r3, #31
 800c97e:	bf48      	it	mi
 800c980:	f043 0320 	orrmi.w	r3, r3, #32
 800c984:	6029      	str	r1, [r5, #0]
 800c986:	bf48      	it	mi
 800c988:	6023      	strmi	r3, [r4, #0]
 800c98a:	b91e      	cbnz	r6, 800c994 <_printf_i+0x1a4>
 800c98c:	6823      	ldr	r3, [r4, #0]
 800c98e:	f023 0320 	bic.w	r3, r3, #32
 800c992:	6023      	str	r3, [r4, #0]
 800c994:	2310      	movs	r3, #16
 800c996:	e7a7      	b.n	800c8e8 <_printf_i+0xf8>
 800c998:	4824      	ldr	r0, [pc, #144]	; (800ca2c <_printf_i+0x23c>)
 800c99a:	e7e4      	b.n	800c966 <_printf_i+0x176>
 800c99c:	4615      	mov	r5, r2
 800c99e:	e7bd      	b.n	800c91c <_printf_i+0x12c>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	6826      	ldr	r6, [r4, #0]
 800c9a4:	6961      	ldr	r1, [r4, #20]
 800c9a6:	1d18      	adds	r0, r3, #4
 800c9a8:	6028      	str	r0, [r5, #0]
 800c9aa:	0635      	lsls	r5, r6, #24
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	d501      	bpl.n	800c9b4 <_printf_i+0x1c4>
 800c9b0:	6019      	str	r1, [r3, #0]
 800c9b2:	e002      	b.n	800c9ba <_printf_i+0x1ca>
 800c9b4:	0670      	lsls	r0, r6, #25
 800c9b6:	d5fb      	bpl.n	800c9b0 <_printf_i+0x1c0>
 800c9b8:	8019      	strh	r1, [r3, #0]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6123      	str	r3, [r4, #16]
 800c9be:	4615      	mov	r5, r2
 800c9c0:	e7bc      	b.n	800c93c <_printf_i+0x14c>
 800c9c2:	682b      	ldr	r3, [r5, #0]
 800c9c4:	1d1a      	adds	r2, r3, #4
 800c9c6:	602a      	str	r2, [r5, #0]
 800c9c8:	681d      	ldr	r5, [r3, #0]
 800c9ca:	6862      	ldr	r2, [r4, #4]
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	f7f3 fc06 	bl	80001e0 <memchr>
 800c9d4:	b108      	cbz	r0, 800c9da <_printf_i+0x1ea>
 800c9d6:	1b40      	subs	r0, r0, r5
 800c9d8:	6060      	str	r0, [r4, #4]
 800c9da:	6863      	ldr	r3, [r4, #4]
 800c9dc:	6123      	str	r3, [r4, #16]
 800c9de:	2300      	movs	r3, #0
 800c9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e4:	e7aa      	b.n	800c93c <_printf_i+0x14c>
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	462a      	mov	r2, r5
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	47d0      	blx	sl
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d0ad      	beq.n	800c950 <_printf_i+0x160>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	079b      	lsls	r3, r3, #30
 800c9f8:	d413      	bmi.n	800ca22 <_printf_i+0x232>
 800c9fa:	68e0      	ldr	r0, [r4, #12]
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	4298      	cmp	r0, r3
 800ca00:	bfb8      	it	lt
 800ca02:	4618      	movlt	r0, r3
 800ca04:	e7a6      	b.n	800c954 <_printf_i+0x164>
 800ca06:	2301      	movs	r3, #1
 800ca08:	4632      	mov	r2, r6
 800ca0a:	4649      	mov	r1, r9
 800ca0c:	4640      	mov	r0, r8
 800ca0e:	47d0      	blx	sl
 800ca10:	3001      	adds	r0, #1
 800ca12:	d09d      	beq.n	800c950 <_printf_i+0x160>
 800ca14:	3501      	adds	r5, #1
 800ca16:	68e3      	ldr	r3, [r4, #12]
 800ca18:	9903      	ldr	r1, [sp, #12]
 800ca1a:	1a5b      	subs	r3, r3, r1
 800ca1c:	42ab      	cmp	r3, r5
 800ca1e:	dcf2      	bgt.n	800ca06 <_printf_i+0x216>
 800ca20:	e7eb      	b.n	800c9fa <_printf_i+0x20a>
 800ca22:	2500      	movs	r5, #0
 800ca24:	f104 0619 	add.w	r6, r4, #25
 800ca28:	e7f5      	b.n	800ca16 <_printf_i+0x226>
 800ca2a:	bf00      	nop
 800ca2c:	0800d07d 	.word	0x0800d07d
 800ca30:	0800d08e 	.word	0x0800d08e

0800ca34 <__sflush_r>:
 800ca34:	898a      	ldrh	r2, [r1, #12]
 800ca36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	0710      	lsls	r0, r2, #28
 800ca3e:	460c      	mov	r4, r1
 800ca40:	d458      	bmi.n	800caf4 <__sflush_r+0xc0>
 800ca42:	684b      	ldr	r3, [r1, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	dc05      	bgt.n	800ca54 <__sflush_r+0x20>
 800ca48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dc02      	bgt.n	800ca54 <__sflush_r+0x20>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca56:	2e00      	cmp	r6, #0
 800ca58:	d0f9      	beq.n	800ca4e <__sflush_r+0x1a>
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca60:	682f      	ldr	r7, [r5, #0]
 800ca62:	6a21      	ldr	r1, [r4, #32]
 800ca64:	602b      	str	r3, [r5, #0]
 800ca66:	d032      	beq.n	800cace <__sflush_r+0x9a>
 800ca68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	075a      	lsls	r2, r3, #29
 800ca6e:	d505      	bpl.n	800ca7c <__sflush_r+0x48>
 800ca70:	6863      	ldr	r3, [r4, #4]
 800ca72:	1ac0      	subs	r0, r0, r3
 800ca74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca76:	b10b      	cbz	r3, 800ca7c <__sflush_r+0x48>
 800ca78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca7a:	1ac0      	subs	r0, r0, r3
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	4602      	mov	r2, r0
 800ca80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca82:	6a21      	ldr	r1, [r4, #32]
 800ca84:	4628      	mov	r0, r5
 800ca86:	47b0      	blx	r6
 800ca88:	1c43      	adds	r3, r0, #1
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	d106      	bne.n	800ca9c <__sflush_r+0x68>
 800ca8e:	6829      	ldr	r1, [r5, #0]
 800ca90:	291d      	cmp	r1, #29
 800ca92:	d82b      	bhi.n	800caec <__sflush_r+0xb8>
 800ca94:	4a29      	ldr	r2, [pc, #164]	; (800cb3c <__sflush_r+0x108>)
 800ca96:	410a      	asrs	r2, r1
 800ca98:	07d6      	lsls	r6, r2, #31
 800ca9a:	d427      	bmi.n	800caec <__sflush_r+0xb8>
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	6062      	str	r2, [r4, #4]
 800caa0:	04d9      	lsls	r1, r3, #19
 800caa2:	6922      	ldr	r2, [r4, #16]
 800caa4:	6022      	str	r2, [r4, #0]
 800caa6:	d504      	bpl.n	800cab2 <__sflush_r+0x7e>
 800caa8:	1c42      	adds	r2, r0, #1
 800caaa:	d101      	bne.n	800cab0 <__sflush_r+0x7c>
 800caac:	682b      	ldr	r3, [r5, #0]
 800caae:	b903      	cbnz	r3, 800cab2 <__sflush_r+0x7e>
 800cab0:	6560      	str	r0, [r4, #84]	; 0x54
 800cab2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cab4:	602f      	str	r7, [r5, #0]
 800cab6:	2900      	cmp	r1, #0
 800cab8:	d0c9      	beq.n	800ca4e <__sflush_r+0x1a>
 800caba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cabe:	4299      	cmp	r1, r3
 800cac0:	d002      	beq.n	800cac8 <__sflush_r+0x94>
 800cac2:	4628      	mov	r0, r5
 800cac4:	f7ff fa92 	bl	800bfec <_free_r>
 800cac8:	2000      	movs	r0, #0
 800caca:	6360      	str	r0, [r4, #52]	; 0x34
 800cacc:	e7c0      	b.n	800ca50 <__sflush_r+0x1c>
 800cace:	2301      	movs	r3, #1
 800cad0:	4628      	mov	r0, r5
 800cad2:	47b0      	blx	r6
 800cad4:	1c41      	adds	r1, r0, #1
 800cad6:	d1c8      	bne.n	800ca6a <__sflush_r+0x36>
 800cad8:	682b      	ldr	r3, [r5, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d0c5      	beq.n	800ca6a <__sflush_r+0x36>
 800cade:	2b1d      	cmp	r3, #29
 800cae0:	d001      	beq.n	800cae6 <__sflush_r+0xb2>
 800cae2:	2b16      	cmp	r3, #22
 800cae4:	d101      	bne.n	800caea <__sflush_r+0xb6>
 800cae6:	602f      	str	r7, [r5, #0]
 800cae8:	e7b1      	b.n	800ca4e <__sflush_r+0x1a>
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caf0:	81a3      	strh	r3, [r4, #12]
 800caf2:	e7ad      	b.n	800ca50 <__sflush_r+0x1c>
 800caf4:	690f      	ldr	r7, [r1, #16]
 800caf6:	2f00      	cmp	r7, #0
 800caf8:	d0a9      	beq.n	800ca4e <__sflush_r+0x1a>
 800cafa:	0793      	lsls	r3, r2, #30
 800cafc:	680e      	ldr	r6, [r1, #0]
 800cafe:	bf08      	it	eq
 800cb00:	694b      	ldreq	r3, [r1, #20]
 800cb02:	600f      	str	r7, [r1, #0]
 800cb04:	bf18      	it	ne
 800cb06:	2300      	movne	r3, #0
 800cb08:	eba6 0807 	sub.w	r8, r6, r7
 800cb0c:	608b      	str	r3, [r1, #8]
 800cb0e:	f1b8 0f00 	cmp.w	r8, #0
 800cb12:	dd9c      	ble.n	800ca4e <__sflush_r+0x1a>
 800cb14:	6a21      	ldr	r1, [r4, #32]
 800cb16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb18:	4643      	mov	r3, r8
 800cb1a:	463a      	mov	r2, r7
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	47b0      	blx	r6
 800cb20:	2800      	cmp	r0, #0
 800cb22:	dc06      	bgt.n	800cb32 <__sflush_r+0xfe>
 800cb24:	89a3      	ldrh	r3, [r4, #12]
 800cb26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb2a:	81a3      	strh	r3, [r4, #12]
 800cb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb30:	e78e      	b.n	800ca50 <__sflush_r+0x1c>
 800cb32:	4407      	add	r7, r0
 800cb34:	eba8 0800 	sub.w	r8, r8, r0
 800cb38:	e7e9      	b.n	800cb0e <__sflush_r+0xda>
 800cb3a:	bf00      	nop
 800cb3c:	dfbffffe 	.word	0xdfbffffe

0800cb40 <_fflush_r>:
 800cb40:	b538      	push	{r3, r4, r5, lr}
 800cb42:	690b      	ldr	r3, [r1, #16]
 800cb44:	4605      	mov	r5, r0
 800cb46:	460c      	mov	r4, r1
 800cb48:	b913      	cbnz	r3, 800cb50 <_fflush_r+0x10>
 800cb4a:	2500      	movs	r5, #0
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	b118      	cbz	r0, 800cb5a <_fflush_r+0x1a>
 800cb52:	6a03      	ldr	r3, [r0, #32]
 800cb54:	b90b      	cbnz	r3, 800cb5a <_fflush_r+0x1a>
 800cb56:	f7ff f8f9 	bl	800bd4c <__sinit>
 800cb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d0f3      	beq.n	800cb4a <_fflush_r+0xa>
 800cb62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cb64:	07d0      	lsls	r0, r2, #31
 800cb66:	d404      	bmi.n	800cb72 <_fflush_r+0x32>
 800cb68:	0599      	lsls	r1, r3, #22
 800cb6a:	d402      	bmi.n	800cb72 <_fflush_r+0x32>
 800cb6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb6e:	f7ff fa2c 	bl	800bfca <__retarget_lock_acquire_recursive>
 800cb72:	4628      	mov	r0, r5
 800cb74:	4621      	mov	r1, r4
 800cb76:	f7ff ff5d 	bl	800ca34 <__sflush_r>
 800cb7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb7c:	07da      	lsls	r2, r3, #31
 800cb7e:	4605      	mov	r5, r0
 800cb80:	d4e4      	bmi.n	800cb4c <_fflush_r+0xc>
 800cb82:	89a3      	ldrh	r3, [r4, #12]
 800cb84:	059b      	lsls	r3, r3, #22
 800cb86:	d4e1      	bmi.n	800cb4c <_fflush_r+0xc>
 800cb88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb8a:	f7ff fa1f 	bl	800bfcc <__retarget_lock_release_recursive>
 800cb8e:	e7dd      	b.n	800cb4c <_fflush_r+0xc>

0800cb90 <_putc_r>:
 800cb90:	b570      	push	{r4, r5, r6, lr}
 800cb92:	460d      	mov	r5, r1
 800cb94:	4614      	mov	r4, r2
 800cb96:	4606      	mov	r6, r0
 800cb98:	b118      	cbz	r0, 800cba2 <_putc_r+0x12>
 800cb9a:	6a03      	ldr	r3, [r0, #32]
 800cb9c:	b90b      	cbnz	r3, 800cba2 <_putc_r+0x12>
 800cb9e:	f7ff f8d5 	bl	800bd4c <__sinit>
 800cba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cba4:	07d8      	lsls	r0, r3, #31
 800cba6:	d405      	bmi.n	800cbb4 <_putc_r+0x24>
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	0599      	lsls	r1, r3, #22
 800cbac:	d402      	bmi.n	800cbb4 <_putc_r+0x24>
 800cbae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbb0:	f7ff fa0b 	bl	800bfca <__retarget_lock_acquire_recursive>
 800cbb4:	68a3      	ldr	r3, [r4, #8]
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	60a3      	str	r3, [r4, #8]
 800cbbc:	da05      	bge.n	800cbca <_putc_r+0x3a>
 800cbbe:	69a2      	ldr	r2, [r4, #24]
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	db12      	blt.n	800cbea <_putc_r+0x5a>
 800cbc4:	b2eb      	uxtb	r3, r5
 800cbc6:	2b0a      	cmp	r3, #10
 800cbc8:	d00f      	beq.n	800cbea <_putc_r+0x5a>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	1c5a      	adds	r2, r3, #1
 800cbce:	6022      	str	r2, [r4, #0]
 800cbd0:	701d      	strb	r5, [r3, #0]
 800cbd2:	b2ed      	uxtb	r5, r5
 800cbd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbd6:	07da      	lsls	r2, r3, #31
 800cbd8:	d405      	bmi.n	800cbe6 <_putc_r+0x56>
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	059b      	lsls	r3, r3, #22
 800cbde:	d402      	bmi.n	800cbe6 <_putc_r+0x56>
 800cbe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbe2:	f7ff f9f3 	bl	800bfcc <__retarget_lock_release_recursive>
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	bd70      	pop	{r4, r5, r6, pc}
 800cbea:	4629      	mov	r1, r5
 800cbec:	4622      	mov	r2, r4
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f000 f802 	bl	800cbf8 <__swbuf_r>
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	e7ed      	b.n	800cbd4 <_putc_r+0x44>

0800cbf8 <__swbuf_r>:
 800cbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfa:	460e      	mov	r6, r1
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	4605      	mov	r5, r0
 800cc00:	b118      	cbz	r0, 800cc0a <__swbuf_r+0x12>
 800cc02:	6a03      	ldr	r3, [r0, #32]
 800cc04:	b90b      	cbnz	r3, 800cc0a <__swbuf_r+0x12>
 800cc06:	f7ff f8a1 	bl	800bd4c <__sinit>
 800cc0a:	69a3      	ldr	r3, [r4, #24]
 800cc0c:	60a3      	str	r3, [r4, #8]
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	071a      	lsls	r2, r3, #28
 800cc12:	d525      	bpl.n	800cc60 <__swbuf_r+0x68>
 800cc14:	6923      	ldr	r3, [r4, #16]
 800cc16:	b31b      	cbz	r3, 800cc60 <__swbuf_r+0x68>
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	6922      	ldr	r2, [r4, #16]
 800cc1c:	1a98      	subs	r0, r3, r2
 800cc1e:	6963      	ldr	r3, [r4, #20]
 800cc20:	b2f6      	uxtb	r6, r6
 800cc22:	4283      	cmp	r3, r0
 800cc24:	4637      	mov	r7, r6
 800cc26:	dc04      	bgt.n	800cc32 <__swbuf_r+0x3a>
 800cc28:	4621      	mov	r1, r4
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	f7ff ff88 	bl	800cb40 <_fflush_r>
 800cc30:	b9e0      	cbnz	r0, 800cc6c <__swbuf_r+0x74>
 800cc32:	68a3      	ldr	r3, [r4, #8]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	60a3      	str	r3, [r4, #8]
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	6022      	str	r2, [r4, #0]
 800cc3e:	701e      	strb	r6, [r3, #0]
 800cc40:	6962      	ldr	r2, [r4, #20]
 800cc42:	1c43      	adds	r3, r0, #1
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d004      	beq.n	800cc52 <__swbuf_r+0x5a>
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	07db      	lsls	r3, r3, #31
 800cc4c:	d506      	bpl.n	800cc5c <__swbuf_r+0x64>
 800cc4e:	2e0a      	cmp	r6, #10
 800cc50:	d104      	bne.n	800cc5c <__swbuf_r+0x64>
 800cc52:	4621      	mov	r1, r4
 800cc54:	4628      	mov	r0, r5
 800cc56:	f7ff ff73 	bl	800cb40 <_fflush_r>
 800cc5a:	b938      	cbnz	r0, 800cc6c <__swbuf_r+0x74>
 800cc5c:	4638      	mov	r0, r7
 800cc5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc60:	4621      	mov	r1, r4
 800cc62:	4628      	mov	r0, r5
 800cc64:	f000 f806 	bl	800cc74 <__swsetup_r>
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d0d5      	beq.n	800cc18 <__swbuf_r+0x20>
 800cc6c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc70:	e7f4      	b.n	800cc5c <__swbuf_r+0x64>
	...

0800cc74 <__swsetup_r>:
 800cc74:	b538      	push	{r3, r4, r5, lr}
 800cc76:	4b2a      	ldr	r3, [pc, #168]	; (800cd20 <__swsetup_r+0xac>)
 800cc78:	4605      	mov	r5, r0
 800cc7a:	6818      	ldr	r0, [r3, #0]
 800cc7c:	460c      	mov	r4, r1
 800cc7e:	b118      	cbz	r0, 800cc88 <__swsetup_r+0x14>
 800cc80:	6a03      	ldr	r3, [r0, #32]
 800cc82:	b90b      	cbnz	r3, 800cc88 <__swsetup_r+0x14>
 800cc84:	f7ff f862 	bl	800bd4c <__sinit>
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc8e:	0718      	lsls	r0, r3, #28
 800cc90:	d422      	bmi.n	800ccd8 <__swsetup_r+0x64>
 800cc92:	06d9      	lsls	r1, r3, #27
 800cc94:	d407      	bmi.n	800cca6 <__swsetup_r+0x32>
 800cc96:	2309      	movs	r3, #9
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc9e:	81a3      	strh	r3, [r4, #12]
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	e034      	b.n	800cd10 <__swsetup_r+0x9c>
 800cca6:	0758      	lsls	r0, r3, #29
 800cca8:	d512      	bpl.n	800ccd0 <__swsetup_r+0x5c>
 800ccaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccac:	b141      	cbz	r1, 800ccc0 <__swsetup_r+0x4c>
 800ccae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccb2:	4299      	cmp	r1, r3
 800ccb4:	d002      	beq.n	800ccbc <__swsetup_r+0x48>
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	f7ff f998 	bl	800bfec <_free_r>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	6363      	str	r3, [r4, #52]	; 0x34
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccc6:	81a3      	strh	r3, [r4, #12]
 800ccc8:	2300      	movs	r3, #0
 800ccca:	6063      	str	r3, [r4, #4]
 800cccc:	6923      	ldr	r3, [r4, #16]
 800ccce:	6023      	str	r3, [r4, #0]
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	f043 0308 	orr.w	r3, r3, #8
 800ccd6:	81a3      	strh	r3, [r4, #12]
 800ccd8:	6923      	ldr	r3, [r4, #16]
 800ccda:	b94b      	cbnz	r3, 800ccf0 <__swsetup_r+0x7c>
 800ccdc:	89a3      	ldrh	r3, [r4, #12]
 800ccde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cce6:	d003      	beq.n	800ccf0 <__swsetup_r+0x7c>
 800cce8:	4621      	mov	r1, r4
 800ccea:	4628      	mov	r0, r5
 800ccec:	f000 f899 	bl	800ce22 <__smakebuf_r>
 800ccf0:	89a0      	ldrh	r0, [r4, #12]
 800ccf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccf6:	f010 0301 	ands.w	r3, r0, #1
 800ccfa:	d00a      	beq.n	800cd12 <__swsetup_r+0x9e>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60a3      	str	r3, [r4, #8]
 800cd00:	6963      	ldr	r3, [r4, #20]
 800cd02:	425b      	negs	r3, r3
 800cd04:	61a3      	str	r3, [r4, #24]
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	b943      	cbnz	r3, 800cd1c <__swsetup_r+0xa8>
 800cd0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd0e:	d1c4      	bne.n	800cc9a <__swsetup_r+0x26>
 800cd10:	bd38      	pop	{r3, r4, r5, pc}
 800cd12:	0781      	lsls	r1, r0, #30
 800cd14:	bf58      	it	pl
 800cd16:	6963      	ldrpl	r3, [r4, #20]
 800cd18:	60a3      	str	r3, [r4, #8]
 800cd1a:	e7f4      	b.n	800cd06 <__swsetup_r+0x92>
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	e7f7      	b.n	800cd10 <__swsetup_r+0x9c>
 800cd20:	2000018c 	.word	0x2000018c

0800cd24 <memmove>:
 800cd24:	4288      	cmp	r0, r1
 800cd26:	b510      	push	{r4, lr}
 800cd28:	eb01 0402 	add.w	r4, r1, r2
 800cd2c:	d902      	bls.n	800cd34 <memmove+0x10>
 800cd2e:	4284      	cmp	r4, r0
 800cd30:	4623      	mov	r3, r4
 800cd32:	d807      	bhi.n	800cd44 <memmove+0x20>
 800cd34:	1e43      	subs	r3, r0, #1
 800cd36:	42a1      	cmp	r1, r4
 800cd38:	d008      	beq.n	800cd4c <memmove+0x28>
 800cd3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd42:	e7f8      	b.n	800cd36 <memmove+0x12>
 800cd44:	4402      	add	r2, r0
 800cd46:	4601      	mov	r1, r0
 800cd48:	428a      	cmp	r2, r1
 800cd4a:	d100      	bne.n	800cd4e <memmove+0x2a>
 800cd4c:	bd10      	pop	{r4, pc}
 800cd4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd56:	e7f7      	b.n	800cd48 <memmove+0x24>

0800cd58 <_sbrk_r>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	4d06      	ldr	r5, [pc, #24]	; (800cd74 <_sbrk_r+0x1c>)
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	4604      	mov	r4, r0
 800cd60:	4608      	mov	r0, r1
 800cd62:	602b      	str	r3, [r5, #0]
 800cd64:	f7f5 fcbc 	bl	80026e0 <_sbrk>
 800cd68:	1c43      	adds	r3, r0, #1
 800cd6a:	d102      	bne.n	800cd72 <_sbrk_r+0x1a>
 800cd6c:	682b      	ldr	r3, [r5, #0]
 800cd6e:	b103      	cbz	r3, 800cd72 <_sbrk_r+0x1a>
 800cd70:	6023      	str	r3, [r4, #0]
 800cd72:	bd38      	pop	{r3, r4, r5, pc}
 800cd74:	20005370 	.word	0x20005370

0800cd78 <_realloc_r>:
 800cd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd7c:	4680      	mov	r8, r0
 800cd7e:	4614      	mov	r4, r2
 800cd80:	460e      	mov	r6, r1
 800cd82:	b921      	cbnz	r1, 800cd8e <_realloc_r+0x16>
 800cd84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd88:	4611      	mov	r1, r2
 800cd8a:	f7ff b99b 	b.w	800c0c4 <_malloc_r>
 800cd8e:	b92a      	cbnz	r2, 800cd9c <_realloc_r+0x24>
 800cd90:	f7ff f92c 	bl	800bfec <_free_r>
 800cd94:	4625      	mov	r5, r4
 800cd96:	4628      	mov	r0, r5
 800cd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd9c:	f000 f8a0 	bl	800cee0 <_malloc_usable_size_r>
 800cda0:	4284      	cmp	r4, r0
 800cda2:	4607      	mov	r7, r0
 800cda4:	d802      	bhi.n	800cdac <_realloc_r+0x34>
 800cda6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdaa:	d812      	bhi.n	800cdd2 <_realloc_r+0x5a>
 800cdac:	4621      	mov	r1, r4
 800cdae:	4640      	mov	r0, r8
 800cdb0:	f7ff f988 	bl	800c0c4 <_malloc_r>
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d0ed      	beq.n	800cd96 <_realloc_r+0x1e>
 800cdba:	42bc      	cmp	r4, r7
 800cdbc:	4622      	mov	r2, r4
 800cdbe:	4631      	mov	r1, r6
 800cdc0:	bf28      	it	cs
 800cdc2:	463a      	movcs	r2, r7
 800cdc4:	f7ff f903 	bl	800bfce <memcpy>
 800cdc8:	4631      	mov	r1, r6
 800cdca:	4640      	mov	r0, r8
 800cdcc:	f7ff f90e 	bl	800bfec <_free_r>
 800cdd0:	e7e1      	b.n	800cd96 <_realloc_r+0x1e>
 800cdd2:	4635      	mov	r5, r6
 800cdd4:	e7df      	b.n	800cd96 <_realloc_r+0x1e>

0800cdd6 <__swhatbuf_r>:
 800cdd6:	b570      	push	{r4, r5, r6, lr}
 800cdd8:	460c      	mov	r4, r1
 800cdda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdde:	2900      	cmp	r1, #0
 800cde0:	b096      	sub	sp, #88	; 0x58
 800cde2:	4615      	mov	r5, r2
 800cde4:	461e      	mov	r6, r3
 800cde6:	da0d      	bge.n	800ce04 <__swhatbuf_r+0x2e>
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdee:	f04f 0100 	mov.w	r1, #0
 800cdf2:	bf0c      	ite	eq
 800cdf4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdf8:	2340      	movne	r3, #64	; 0x40
 800cdfa:	2000      	movs	r0, #0
 800cdfc:	6031      	str	r1, [r6, #0]
 800cdfe:	602b      	str	r3, [r5, #0]
 800ce00:	b016      	add	sp, #88	; 0x58
 800ce02:	bd70      	pop	{r4, r5, r6, pc}
 800ce04:	466a      	mov	r2, sp
 800ce06:	f000 f849 	bl	800ce9c <_fstat_r>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	dbec      	blt.n	800cde8 <__swhatbuf_r+0x12>
 800ce0e:	9901      	ldr	r1, [sp, #4]
 800ce10:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ce14:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ce18:	4259      	negs	r1, r3
 800ce1a:	4159      	adcs	r1, r3
 800ce1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce20:	e7eb      	b.n	800cdfa <__swhatbuf_r+0x24>

0800ce22 <__smakebuf_r>:
 800ce22:	898b      	ldrh	r3, [r1, #12]
 800ce24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce26:	079d      	lsls	r5, r3, #30
 800ce28:	4606      	mov	r6, r0
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	d507      	bpl.n	800ce3e <__smakebuf_r+0x1c>
 800ce2e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce32:	6023      	str	r3, [r4, #0]
 800ce34:	6123      	str	r3, [r4, #16]
 800ce36:	2301      	movs	r3, #1
 800ce38:	6163      	str	r3, [r4, #20]
 800ce3a:	b002      	add	sp, #8
 800ce3c:	bd70      	pop	{r4, r5, r6, pc}
 800ce3e:	ab01      	add	r3, sp, #4
 800ce40:	466a      	mov	r2, sp
 800ce42:	f7ff ffc8 	bl	800cdd6 <__swhatbuf_r>
 800ce46:	9900      	ldr	r1, [sp, #0]
 800ce48:	4605      	mov	r5, r0
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f7ff f93a 	bl	800c0c4 <_malloc_r>
 800ce50:	b948      	cbnz	r0, 800ce66 <__smakebuf_r+0x44>
 800ce52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce56:	059a      	lsls	r2, r3, #22
 800ce58:	d4ef      	bmi.n	800ce3a <__smakebuf_r+0x18>
 800ce5a:	f023 0303 	bic.w	r3, r3, #3
 800ce5e:	f043 0302 	orr.w	r3, r3, #2
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	e7e3      	b.n	800ce2e <__smakebuf_r+0xc>
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	6020      	str	r0, [r4, #0]
 800ce6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce6e:	81a3      	strh	r3, [r4, #12]
 800ce70:	9b00      	ldr	r3, [sp, #0]
 800ce72:	6163      	str	r3, [r4, #20]
 800ce74:	9b01      	ldr	r3, [sp, #4]
 800ce76:	6120      	str	r0, [r4, #16]
 800ce78:	b15b      	cbz	r3, 800ce92 <__smakebuf_r+0x70>
 800ce7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f000 f81e 	bl	800cec0 <_isatty_r>
 800ce84:	b128      	cbz	r0, 800ce92 <__smakebuf_r+0x70>
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	f023 0303 	bic.w	r3, r3, #3
 800ce8c:	f043 0301 	orr.w	r3, r3, #1
 800ce90:	81a3      	strh	r3, [r4, #12]
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	431d      	orrs	r5, r3
 800ce96:	81a5      	strh	r5, [r4, #12]
 800ce98:	e7cf      	b.n	800ce3a <__smakebuf_r+0x18>
	...

0800ce9c <_fstat_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d07      	ldr	r5, [pc, #28]	; (800cebc <_fstat_r+0x20>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	4611      	mov	r1, r2
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	f7f5 fbf0 	bl	800268e <_fstat>
 800ceae:	1c43      	adds	r3, r0, #1
 800ceb0:	d102      	bne.n	800ceb8 <_fstat_r+0x1c>
 800ceb2:	682b      	ldr	r3, [r5, #0]
 800ceb4:	b103      	cbz	r3, 800ceb8 <_fstat_r+0x1c>
 800ceb6:	6023      	str	r3, [r4, #0]
 800ceb8:	bd38      	pop	{r3, r4, r5, pc}
 800ceba:	bf00      	nop
 800cebc:	20005370 	.word	0x20005370

0800cec0 <_isatty_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4d06      	ldr	r5, [pc, #24]	; (800cedc <_isatty_r+0x1c>)
 800cec4:	2300      	movs	r3, #0
 800cec6:	4604      	mov	r4, r0
 800cec8:	4608      	mov	r0, r1
 800ceca:	602b      	str	r3, [r5, #0]
 800cecc:	f7f5 fbef 	bl	80026ae <_isatty>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_isatty_r+0x1a>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_isatty_r+0x1a>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20005370 	.word	0x20005370

0800cee0 <_malloc_usable_size_r>:
 800cee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cee4:	1f18      	subs	r0, r3, #4
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	bfbc      	itt	lt
 800ceea:	580b      	ldrlt	r3, [r1, r0]
 800ceec:	18c0      	addlt	r0, r0, r3
 800ceee:	4770      	bx	lr

0800cef0 <_init>:
 800cef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef2:	bf00      	nop
 800cef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef6:	bc08      	pop	{r3}
 800cef8:	469e      	mov	lr, r3
 800cefa:	4770      	bx	lr

0800cefc <_fini>:
 800cefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefe:	bf00      	nop
 800cf00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf02:	bc08      	pop	{r3}
 800cf04:	469e      	mov	lr, r3
 800cf06:	4770      	bx	lr
